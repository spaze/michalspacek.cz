{"version":3,"file":"openpgp.min.mjs","sources":["../../node_modules/@openpgp/web-stream-tools/lib/writer.js","../../node_modules/@openpgp/web-stream-tools/lib/util.js","../../node_modules/@openpgp/web-stream-tools/lib/reader.js","../../node_modules/@openpgp/web-stream-tools/lib/streams.js","../../src/enums.js","../../src/config/config.js","../../src/util.js","../../src/encoding/base64.js","../../src/encoding/armor.js","../../../../src/crypto/biginteger.ts","../../src/crypto/random.js","../../../../src/crypto/public_key/prime.ts","../../src/crypto/hash/index.js","../../src/crypto/pkcs1.js","../../src/crypto/public_key/rsa.js","../../src/crypto/public_key/elgamal.js","../../node_modules/@openpgp/tweetnacl/crypto.js","../../node_modules/@openpgp/tweetnacl/nacl-fast.js","../../src/type/oid.js","../../src/packet/packet.js","../../src/crypto/public_key/elliptic/eddsa.js","../../node_modules/@noble/ciphers/esm/utils.js","../../node_modules/@noble/ciphers/esm/_polyval.js","../../node_modules/@noble/ciphers/esm/aes.js","../../src/crypto/cipher/index.js","../../src/crypto/aes_kw.js","../../src/crypto/hkdf.js","../../src/crypto/public_key/elliptic/ecdh_x.js","../../src/crypto/public_key/elliptic/oid_curves.js","../../src/crypto/public_key/elliptic/ecdsa.js","../../src/crypto/public_key/elliptic/eddsa_legacy.js","../../src/crypto/pkcs5.js","../../src/crypto/public_key/elliptic/ecdh.js","../../src/crypto/public_key/dsa.js","../../src/type/ecdh_symkey.js","../../src/type/kdf_params.js","../../src/type/ecdh_x_symkey.js","../../src/crypto/crypto.js","../../src/crypto/cipherMode/cfb.js","../../src/crypto/cmac.js","../../src/crypto/cipherMode/eax.js","../../src/crypto/cipherMode/ocb.js","../../src/crypto/cipherMode/gcm.js","../../src/crypto/cipherMode/index.js","../../src/crypto/signature.js","../../src/type/s2k/argon2.js","../../src/type/s2k/generic.js","../../src/type/s2k/index.js","../../node_modules/fflate/esm/index.mjs","../../src/packet/literal_data.js","../../src/type/keyid.js","../../src/packet/signature.js","../../src/packet/one_pass_signature.js","../../src/packet/packetlist.js","../../../../src/packet/grammar.ts","../../src/packet/compressed_data.js","../../src/packet/sym_encrypted_integrity_protected_data.js","../../src/packet/aead_encrypted_data.js","../../src/packet/public_key_encrypted_session_key.js","../../src/packet/sym_encrypted_session_key.js","../../src/packet/public_key.js","../../src/packet/symmetrically_encrypted_data.js","../../src/packet/marker.js","../../src/packet/public_subkey.js","../../src/packet/user_attribute.js","../../src/packet/secret_key.js","../../src/packet/userid.js","../../src/packet/secret_subkey.js","../../src/packet/trust.js","../../src/packet/padding.js","../../src/signature.js","../../src/key/helper.js","../../src/key/user.js","../../src/key/subkey.js","../../src/key/key.js","../../src/key/public_key.js","../../src/key/private_key.js","../../src/key/factory.js","../../src/message.js","../../src/cleartext.js","../../src/openpgp.js","../../node_modules/@noble/hashes/esm/cryptoNode.js","../../node_modules/@noble/hashes/esm/utils.js","../../node_modules/@noble/curves/esm/utils.js","../../node_modules/@noble/curves/esm/abstract/modular.js","../../node_modules/@noble/hashes/esm/_md.js","../../node_modules/@noble/hashes/esm/_u64.js","../../node_modules/@noble/hashes/esm/sha2.js","../../node_modules/@noble/hashes/esm/hmac.js","../../node_modules/@noble/curves/esm/abstract/curve.js","../../node_modules/@noble/curves/esm/abstract/weierstrass.js","../../node_modules/@noble/curves/esm/_shortw_utils.js","../../node_modules/@noble/curves/esm/nist.js","../../node_modules/@noble/curves/esm/p256.js","../../node_modules/@noble/curves/esm/p384.js","../../node_modules/@noble/curves/esm/p521.js","../../node_modules/@noble/hashes/esm/sha3.js","../../node_modules/@noble/curves/esm/abstract/edwards.js","../../node_modules/@noble/curves/esm/abstract/montgomery.js","../../node_modules/@noble/curves/esm/ed448.js","../../node_modules/@noble/curves/esm/secp256k1.js","../../node_modules/@noble/hashes/esm/sha256.js","../../../../src/crypto/public_key/elliptic/brainpool/brainpoolP256r1.ts","../../node_modules/@noble/hashes/esm/sha512.js","../../../../src/crypto/public_key/elliptic/brainpool/brainpoolP384r1.ts","../../../../src/crypto/public_key/elliptic/brainpool/brainpoolP512r1.ts","../../src/crypto/public_key/elliptic/noble_curves.js","../../node_modules/@noble/hashes/esm/legacy.js","../../node_modules/@noble/hashes/esm/sha1.js","../../node_modules/@noble/hashes/esm/ripemd160.js","../../../../src/crypto/hash/md5.ts","../../src/crypto/hash/noble_hashes.js","../../src/crypto/cipher/des.js","../../src/crypto/cipher/cast5.js","../../src/crypto/cipher/twofish.js","../../src/crypto/cipher/blowfish.js","../../src/crypto/cipher/legacy_ciphers.js","../../node_modules/argon2id/lib/blake2b.js","../../node_modules/argon2id/lib/argon2id.js","../../node_modules/argon2id/lib/setup.js","../../node_modules/argon2id/index.js","../../node_modules/@openpgp/seek-bzip/lib/bitreader.js","../../node_modules/@openpgp/seek-bzip/lib/index.js","../../node_modules/@openpgp/seek-bzip/lib/crc32.js","../../node_modules/@openpgp/seek-bzip/lib/stream.js"],"sourcesContent":["const doneWritingPromise = Symbol('doneWritingPromise');\nconst doneWritingResolve = Symbol('doneWritingResolve');\nconst doneWritingReject = Symbol('doneWritingReject');\n\nconst readingIndex = Symbol('readingIndex');\n\nclass ArrayStream extends Array {\n  constructor() {\n    super();\n    // ES5 patch, see https://github.com/Microsoft/TypeScript/wiki/FAQ#why-doesnt-extending-built-ins-like-error-array-and-map-work\n    Object.setPrototypeOf(this, ArrayStream.prototype);\n\n    this[doneWritingPromise] = new Promise((resolve, reject) => {\n      this[doneWritingResolve] = resolve;\n      this[doneWritingReject] = reject;\n    });\n    this[doneWritingPromise].catch(() => {});\n  }\n}\n\nArrayStream.prototype.getReader = function() {\n  if (this[readingIndex] === undefined) {\n    this[readingIndex] = 0;\n  }\n  return {\n    read: async () => {\n      await this[doneWritingPromise];\n      if (this[readingIndex] === this.length) {\n        return { value: undefined, done: true };\n      }\n      return { value: this[this[readingIndex]++], done: false };\n    }\n  };\n};\n\nArrayStream.prototype.readToEnd = async function(join) {\n  await this[doneWritingPromise];\n  const result = join(this.slice(this[readingIndex]));\n  this.length = 0;\n  return result;\n};\n\nArrayStream.prototype.clone = function() {\n  const clone = new ArrayStream();\n  clone[doneWritingPromise] = this[doneWritingPromise].then(() => {\n    clone.push(...this);\n  });\n  return clone;\n};\n\n/**\n * Check whether data is an ArrayStream\n * @param {Any} input  data to check\n * @returns {boolean}\n */\nfunction isArrayStream(input) {\n  return input && input.getReader && Array.isArray(input);\n}\n\n/**\n * A wrapper class over the native WritableStreamDefaultWriter.\n * It also lets you \"write data to\" array streams instead of streams.\n * @class\n */\nfunction Writer(input) {\n  if (!isArrayStream(input)) {\n    const writer = input.getWriter();\n    const releaseLock = writer.releaseLock;\n    writer.releaseLock = () => {\n      writer.closed.catch(function() {});\n      releaseLock.call(writer);\n    };\n    return writer;\n  }\n  this.stream = input;\n}\n\n/**\n * Write a chunk of data.\n * @returns {Promise<undefined>}\n * @async\n */\nWriter.prototype.write = async function(chunk) {\n  this.stream.push(chunk);\n};\n\n/**\n * Close the stream.\n * @returns {Promise<undefined>}\n * @async\n */\nWriter.prototype.close = async function() {\n  this.stream[doneWritingResolve]();\n};\n\n/**\n * Error the stream.\n * @returns {Promise<Object>}\n * @async\n */\nWriter.prototype.abort = async function(reason) {\n  this.stream[doneWritingReject](reason);\n  return reason;\n};\n\n/**\n * Release the writer's lock.\n * @returns {undefined}\n * @async\n */\nWriter.prototype.releaseLock = function() {};\n\nexport { ArrayStream, isArrayStream, Writer, doneWritingPromise };\n","/* eslint-disable no-prototype-builtins */\nimport { isArrayStream } from './writer.js';\nconst isNode = typeof globalThis.process === 'object' &&\n  typeof globalThis.process.versions === 'object';\n\n/**\n * Check whether data is a Stream, and if so of which type\n * @param {Any} input  data to check\n * @returns {'web'|'node'|'array'|'web-like'|false}\n */\nfunction isStream(input) {\n  if (isArrayStream(input)) {\n    return 'array';\n  }\n  if (globalThis.ReadableStream && globalThis.ReadableStream.prototype.isPrototypeOf(input)) {\n    return 'web';\n  }\n  // try and detect a node native stream without having to import its class\n  if (input &&\n    !(globalThis.ReadableStream && input instanceof globalThis.ReadableStream) &&\n    typeof input._read === 'function' && typeof input._readableState === 'object') {\n    throw new Error('Native Node streams are no longer supported: please manually convert the stream to a WebStream, using e.g. `stream.Readable.toWeb`');\n  }\n  if (input && input.getReader) {\n    return 'web-like';\n  }\n  return false;\n}\n\n/**\n * Check whether data is a Uint8Array\n * @param {Any} input  data to check\n * @returns {Boolean}\n */\nfunction isUint8Array(input) {\n  return Uint8Array.prototype.isPrototypeOf(input);\n}\n\n/**\n * Concat Uint8Arrays\n * @param {Array<Uint8array>} Array of Uint8Arrays to concatenate\n * @returns {Uint8array} Concatenated array\n */\nfunction concatUint8Array(arrays) {\n  if (arrays.length === 1) return arrays[0];\n\n  let totalLength = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    if (!isUint8Array(arrays[i])) {\n      throw new Error('concatUint8Array: Data must be in the form of a Uint8Array');\n    }\n\n    totalLength += arrays[i].length;\n  }\n\n  const result = new Uint8Array(totalLength);\n  let pos = 0;\n  arrays.forEach(function (element) {\n    result.set(element, pos);\n    pos += element.length;\n  });\n\n  return result;\n}\n\nexport { isNode, isStream, isArrayStream, isUint8Array, concatUint8Array };\n","import { isUint8Array, isStream, isArrayStream } from './util.js';\nimport * as streams from './streams.js';\n\nconst doneReadingSet = new WeakSet();\n/**\n * The external buffer is used to store values that have been peeked or unshifted from the original stream.\n * Because of how streams are implemented, such values cannot be \"put back\" in the original stream,\n * but they need to be returned first when reading from the input again.\n */\nconst externalBuffer = Symbol('externalBuffer');\n\n/**\n * A wrapper class over the native ReadableStreamDefaultReader.\n * This additionally implements pushing back data on the stream, which\n * lets us implement peeking and a host of convenience functions.\n * It also lets you read data other than streams, such as a Uint8Array.\n * @class\n */\nfunction Reader(input) {\n  this.stream = input;\n  if (input[externalBuffer]) {\n    this[externalBuffer] = input[externalBuffer].slice();\n  }\n  if (isArrayStream(input)) {\n    const reader = input.getReader();\n    this._read = reader.read.bind(reader);\n    this._releaseLock = () => {};\n    this._cancel = () => {};\n    return;\n  }\n  let streamType = isStream(input);\n  if (streamType) {\n    const reader = input.getReader();\n    this._read = reader.read.bind(reader);\n    this._releaseLock = () => {\n      reader.closed.catch(function() {});\n      reader.releaseLock();\n    };\n    this._cancel = reader.cancel.bind(reader);\n    return;\n  }\n  let doneReading = false;\n  this._read = async () => {\n    if (doneReading || doneReadingSet.has(input)) {\n      return { value: undefined, done: true };\n    }\n    doneReading = true;\n    return { value: input, done: false };\n  };\n  this._releaseLock = () => {\n    if (doneReading) {\n      try {\n        doneReadingSet.add(input);\n      } catch(e) {}\n    }\n  };\n}\n\n/**\n * Read a chunk of data.\n * @returns {Promise<Object>} Either { done: false, value: Uint8Array | String } or { done: true, value: undefined }\n * @async\n */\nReader.prototype.read = async function() {\n  if (this[externalBuffer] && this[externalBuffer].length) {\n    const value = this[externalBuffer].shift();\n    return { done: false, value };\n  }\n  return this._read();\n};\n\n/**\n * Allow others to read the stream.\n */\nReader.prototype.releaseLock = function() {\n  if (this[externalBuffer]) {\n    this.stream[externalBuffer] = this[externalBuffer];\n  }\n  this._releaseLock();\n};\n\n/**\n * Cancel the stream.\n */\nReader.prototype.cancel = function(reason) {\n  return this._cancel(reason);\n};\n\n/**\n * Read up to and including the first \\n character.\n * @returns {Promise<String|Undefined>}\n * @async\n */\nReader.prototype.readLine = async function() {\n  let buffer = [];\n  let returnVal;\n  while (!returnVal) {\n    let { done, value } = await this.read();\n    value += '';\n    if (done) {\n      if (buffer.length) return streams.concat(buffer);\n      return;\n    }\n    const lineEndIndex = value.indexOf('\\n') + 1;\n    if (lineEndIndex) {\n      returnVal = streams.concat(buffer.concat(value.substr(0, lineEndIndex)));\n      buffer = [];\n    }\n    if (lineEndIndex !== value.length) {\n      buffer.push(value.substr(lineEndIndex));\n    }\n  }\n  this.unshift(...buffer);\n  return returnVal;\n};\n\n/**\n * Read a single byte/character.\n * @returns {Promise<Number|String|Undefined>}\n * @async\n */\nReader.prototype.readByte = async function() {\n  const { done, value } = await this.read();\n  if (done) return;\n  const byte = value[0];\n  this.unshift(streams.slice(value, 1));\n  return byte;\n};\n\n/**\n * Read a specific amount of bytes/characters, unless the stream ends before that amount.\n * @returns {Promise<Uint8Array|String|Undefined>}\n * @async\n */\nReader.prototype.readBytes = async function(length) {\n  const buffer = [];\n  let bufferLength = 0;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const { done, value } = await this.read();\n    if (done) {\n      if (buffer.length) return streams.concat(buffer);\n      return;\n    }\n    buffer.push(value);\n    bufferLength += value.length;\n    if (bufferLength >= length) {\n      const bufferConcat = streams.concat(buffer);\n      this.unshift(streams.slice(bufferConcat, length));\n      return streams.slice(bufferConcat, 0, length);\n    }\n  }\n};\n\n/**\n * Peek (look ahead) a specific amount of bytes/characters, unless the stream ends before that amount.\n * @returns {Promise<Uint8Array|String|Undefined>}\n * @async\n */\nReader.prototype.peekBytes = async function(length) {\n  const bytes = await this.readBytes(length);\n  this.unshift(bytes);\n  return bytes;\n};\n\n/**\n * Push data to the front of the stream.\n * Data must have been read in the last call to read*.\n * @param {...(Uint8Array|String|Undefined)} values\n */\nReader.prototype.unshift = function(...values) {\n  if (!this[externalBuffer]) {\n    this[externalBuffer] = [];\n  }\n  if (\n    values.length === 1 && isUint8Array(values[0]) &&\n    this[externalBuffer].length && values[0].length &&\n    this[externalBuffer][0].byteOffset >= values[0].length\n  ) {\n    this[externalBuffer][0] = new Uint8Array(\n      this[externalBuffer][0].buffer,\n      this[externalBuffer][0].byteOffset - values[0].length,\n      this[externalBuffer][0].byteLength + values[0].length\n    );\n    return;\n  }\n  this[externalBuffer].unshift(...values.filter(value => value && value.length));\n};\n\n/**\n * Read the stream to the end and return its contents, concatenated by the join function (defaults to streams.concat).\n * @param {Function} join\n * @returns {Promise<Uint8array|String|Any>} the return value of join()\n * @async\n */\nReader.prototype.readToEnd = async function(join=streams.concat) {\n  const result = [];\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const { done, value } = await this.read();\n    if (done) break;\n    result.push(value);\n  }\n  return join(result);\n};\n\nexport { Reader, externalBuffer };\n","import { isStream, isArrayStream, isUint8Array, concatUint8Array } from './util.js';\nimport { Reader, externalBuffer } from './reader.js';\nimport { ArrayStream, Writer } from './writer.js';\n\n/**\n * Convert data to Stream\n * @param {ReadableStream|Uint8array|String} input  data to convert\n * @returns {ReadableStream} Converted data\n */\nfunction toStream(input) {\n  let streamType = isStream(input);\n  if (streamType) {\n    return input;\n  }\n  return new ReadableStream({\n    start(controller) {\n      controller.enqueue(input);\n      controller.close();\n    }\n  });\n}\n\n/**\n * Convert non-streamed data to ArrayStream; this is a noop if `input` is already a stream.\n * @param {Object} input  data to convert\n * @returns {ArrayStream} Converted data\n */\nfunction toArrayStream(input) {\n  if (isStream(input)) {\n    return input;\n  }\n  const stream = new ArrayStream();\n  (async () => {\n    const writer = getWriter(stream);\n    await writer.write(input);\n    await writer.close();\n  })();\n  return stream;\n}\n\n/**\n * Concat a list of Uint8Arrays, Strings or Streams\n * The caller should not mix Uint8Arrays with Strings, but may mix Streams with non-Streams.\n * @param {Array<Uint8array|String|ReadableStream>} Array of Uint8Arrays/Strings/Streams to concatenate\n * @returns {Uint8array|String|ReadableStream} Concatenated array\n */\nfunction concat(list) {\n  if (list.some(stream => isStream(stream) && !isArrayStream(stream))) {\n    return concatStream(list);\n  }\n  if (list.some(stream => isArrayStream(stream))) {\n    return concatArrayStream(list);\n  }\n  if (typeof list[0] === 'string') {\n    return list.join('');\n  }\n  return concatUint8Array(list);\n}\n\n/**\n * Concat a list of Streams\n * @param {Array<ReadableStream|Uint8array|String>} list  Array of Uint8Arrays/Strings/Streams to concatenate\n * @returns {ReadableStream} Concatenated list\n */\nfunction concatStream(list) {\n  list = list.map(toStream);\n  const transform = transformWithCancel(async function(reason) {\n    await Promise.all(transforms.map(stream => cancel(stream, reason)));\n  });\n  let prev = Promise.resolve();\n  const transforms = list.map((stream, i) => transformPair(stream, (readable, writable) => {\n    prev = prev.then(() => pipe(readable, transform.writable, {\n      preventClose: i !== list.length - 1\n    }));\n    return prev;\n  }));\n  return transform.readable;\n}\n\n/**\n * Concat a list of ArrayStreams\n * @param {Array<ArrayStream|Uint8array|String>} list  Array of Uint8Arrays/Strings/ArrayStreams to concatenate\n * @returns {ArrayStream} Concatenated streams\n */\nfunction concatArrayStream(list) {\n  const result = new ArrayStream();\n  let prev = Promise.resolve();\n  list.forEach((stream, i) => {\n    prev = prev.then(() => pipe(stream, result, {\n      preventClose: i !== list.length - 1\n    }));\n    return prev;\n  });\n  return result;\n}\n\n/**\n * Pipe a readable stream to a writable stream. Don't throw on input stream errors, but forward them to the output stream.\n * @param {ReadableStream|Uint8array|String} input\n * @param {WritableStream} target\n * @param {Object} (optional) options\n * @returns {Promise<undefined>} Promise indicating when piping has finished (input stream closed or errored)\n * @async\n */\nasync function pipe(input, target, {\n  preventClose = false,\n  preventAbort = false,\n  preventCancel = false\n} = {}) {\n  if (isStream(input) && !isArrayStream(input)) {\n    input = toStream(input);\n    try {\n      if (input[externalBuffer]) {\n        const writer = getWriter(target);\n        for (let i = 0; i < input[externalBuffer].length; i++) {\n          await writer.ready;\n          await writer.write(input[externalBuffer][i]);\n        }\n        writer.releaseLock();\n      }\n      await input.pipeTo(target, {\n        preventClose,\n        preventAbort,\n        preventCancel\n      });\n    } catch(e) {}\n    return;\n  }\n  input = toArrayStream(input);\n  const reader = getReader(input);\n  const writer = getWriter(target);\n  try {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      await writer.ready;\n      const { done, value } = await reader.read();\n      if (done) {\n        if (!preventClose) await writer.close();\n        break;\n      }\n      await writer.write(value);\n    }\n  } catch (e) {\n    if (!preventAbort) await writer.abort(e);\n  } finally {\n    reader.releaseLock();\n    writer.releaseLock();\n  }\n}\n\n/**\n * Pipe a readable stream through a transform stream.\n * @param {ReadableStream|Uint8array|String} input\n * @param {Object} (optional) options\n * @returns {ReadableStream} transformed stream\n */\nfunction transformRaw(input, options) {\n  const transformStream = new TransformStream(options);\n  pipe(input, transformStream.writable);\n  return transformStream.readable;\n}\n\n/**\n * Create a cancelable TransformStream.\n * @param {Function} cancel\n * @returns {TransformStream}\n */\nfunction transformWithCancel(customCancel) {\n  let pulled = false;\n  let cancelled = false;\n  let backpressureChangePromiseResolve, backpressureChangePromiseReject;\n  let outputController;\n  return {\n    readable: new ReadableStream({\n      start(controller) {\n        outputController = controller;\n      },\n      pull() {\n        if (backpressureChangePromiseResolve) {\n          backpressureChangePromiseResolve();\n        } else {\n          pulled = true;\n        }\n      },\n      async cancel(reason) {\n        cancelled = true;\n        if (customCancel) {\n          await customCancel(reason);\n        }\n        if (backpressureChangePromiseReject) {\n          backpressureChangePromiseReject(reason);\n        }\n      }\n    }, {highWaterMark: 0}),\n    writable: new WritableStream({\n      write: async function(chunk) {\n        if (cancelled) {\n          throw new Error('Stream is cancelled');\n        }\n        outputController.enqueue(chunk);\n        if (!pulled) {\n          await new Promise((resolve, reject) => {\n            backpressureChangePromiseResolve = resolve;\n            backpressureChangePromiseReject = reject;\n          });\n          backpressureChangePromiseResolve = null;\n          backpressureChangePromiseReject = null;\n        } else {\n          pulled = false;\n        }\n      },\n      close: outputController.close.bind(outputController),\n      abort: outputController.error.bind(outputController)\n    })\n  };\n}\n\n/**\n * Transform a stream using helper functions which are called on each chunk, and on stream close, respectively.\n * @param {ReadableStream|Uint8array|String} input\n * @param {Function} process\n * @param {Function} finish\n * @returns {ReadableStream|Uint8array|String}\n */\nfunction transform(input, process = () => undefined, finish = () => undefined) {\n  if (isArrayStream(input)) {\n    const output = new ArrayStream();\n    (async () => {\n      const writer = getWriter(output);\n      try {\n        const data = await readToEnd(input);\n        const result1 = process(data);\n        const result2 = finish();\n        let result;\n        if (result1 !== undefined && result2 !== undefined) result = concat([result1, result2]);\n        else result = result1 !== undefined ? result1 : result2;\n        await writer.write(result);\n        await writer.close();\n      } catch (e) {\n        await writer.abort(e);\n      }\n    })();\n    return output;\n  }\n  if (isStream(input)) {\n    return transformRaw(input, {\n      async transform(value, controller) {\n        try {\n          const result = await process(value);\n          if (result !== undefined) controller.enqueue(result);\n        } catch(e) {\n          controller.error(e);\n        }\n      },\n      async flush(controller) {\n        try {\n          const result = await finish();\n          if (result !== undefined) controller.enqueue(result);\n        } catch(e) {\n          controller.error(e);\n        }\n      }\n    });\n  }\n  const result1 = process(input);\n  const result2 = finish();\n  if (result1 !== undefined && result2 !== undefined) return concat([result1, result2]);\n  return result1 !== undefined ? result1 : result2;\n}\n\n/**\n * Transform a stream using a helper function which is passed a readable and a writable stream.\n *   This function also maintains the possibility to cancel the input stream,\n *   and does so on cancelation of the output stream, despite cancelation\n *   normally being impossible when the input stream is being read from.\n * @param {ReadableStream|Uint8array|String} input\n * @param {Function} fn\n * @returns {ReadableStream}\n */\nfunction transformPair(input, fn) {\n  if (isStream(input) && !isArrayStream(input)) {\n    let incomingTransformController;\n    const incoming = new TransformStream({\n      start(controller) {\n        incomingTransformController = controller;\n      }\n    });\n\n    const pipeDonePromise = pipe(input, incoming.writable);\n\n    const outgoing = transformWithCancel(async function(reason) {\n      incomingTransformController.error(reason);\n      await pipeDonePromise;\n      await new Promise(setTimeout);\n    });\n    fn(incoming.readable, outgoing.writable);\n    return outgoing.readable;\n  }\n  input = toArrayStream(input);\n  const output = new ArrayStream();\n  fn(input, output);\n  return output;\n}\n\n/**\n * Parse a stream using a helper function which is passed a Reader.\n *   The reader additionally has a remainder() method which returns a\n *   stream pointing to the remainder of input, and is linked to input\n *   for cancelation.\n * @param {ReadableStream|Uint8array|String} input\n * @param {Function} fn\n * @returns {Any} the return value of fn()\n */\nfunction parse(input, fn) {\n  let returnValue;\n  const transformed = transformPair(input, (readable, writable) => {\n    const reader = getReader(readable);\n    reader.remainder = () => {\n      reader.releaseLock();\n      pipe(readable, writable);\n      return transformed;\n    };\n    returnValue = fn(reader);\n  });\n  return returnValue;\n}\n\n/**\n * Tee a Stream for reading it twice. The input stream can no longer be read after tee()ing.\n *   Reading either of the two returned streams will pull from the input stream.\n *   The input stream will only be canceled if both of the returned streams are canceled.\n * @param {ReadableStream|Uint8array|String} input\n * @returns {Array<ReadableStream|Uint8array|String>} array containing two copies of input\n */\nfunction tee(input) {\n  if (isArrayStream(input)) {\n    throw new Error('ArrayStream cannot be tee()d, use clone() instead');\n  }\n  if (isStream(input)) {\n    const teed = toStream(input).tee();\n    teed[0][externalBuffer] = teed[1][externalBuffer] = input[externalBuffer];\n    return teed;\n  }\n  return [slice(input), slice(input)];\n}\n\n/**\n * Clone a Stream for reading it twice. The input stream can still be read after clone()ing.\n *   Reading from the clone will pull from the input stream.\n *   The input stream will only be canceled if both the clone and the input stream are canceled.\n * @param {ReadableStream|Uint8array|String} input\n * @returns {ReadableStream|Uint8array|String} cloned input\n */\nfunction clone(input) {\n  if (isArrayStream(input)) {\n    return input.clone();\n  }\n  if (isStream(input)) {\n    const teed = tee(input);\n    overwrite(input, teed[0]);\n    return teed[1];\n  }\n  return slice(input);\n}\n\n/**\n * Clone a Stream for reading it twice. Data will arrive at the same rate as the input stream is being read.\n *   Reading from the clone will NOT pull from the input stream. Data only arrives when reading the input stream.\n *   The input stream will NOT be canceled if the clone is canceled, only if the input stream are canceled.\n *   If the input stream is canceled, the clone will be errored.\n * @param {ReadableStream|Uint8array|String} input\n * @returns {ReadableStream|Uint8array|String} cloned input\n */\nfunction passiveClone(input) {\n  if (isArrayStream(input)) {\n    return clone(input);\n  }\n  if (isStream(input)) {\n    return new ReadableStream({\n      start(controller) {\n        const transformed = transformPair(input, async (readable, writable) => {\n          const reader = getReader(readable);\n          const writer = getWriter(writable);\n          try {\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n              await writer.ready;\n              const { done, value } = await reader.read();\n              if (done) {\n                try { controller.close(); } catch(e) {}\n                await writer.close();\n                return;\n              }\n              try { controller.enqueue(value); } catch(e) {}\n              await writer.write(value);\n            }\n          } catch(e) {\n            controller.error(e);\n            await writer.abort(e);\n          }\n        });\n        overwrite(input, transformed);\n      }\n    });\n  }\n  return slice(input);\n}\n\n/**\n * Modify a stream object to point to a different stream object.\n *   This is used internally by clone() and passiveClone() to provide an abstraction over tee().\n * @param {ReadableStream} input\n * @param {ReadableStream} clone\n */\nfunction overwrite(input, clone) {\n  // Overwrite input.getReader, input.locked, etc to point to clone\n  Object.entries(Object.getOwnPropertyDescriptors(input.constructor.prototype)).forEach(([name, descriptor]) => {\n    if (name === 'constructor') {\n      return;\n    }\n    if (descriptor.value) {\n      descriptor.value = descriptor.value.bind(clone);\n    } else {\n      descriptor.get = descriptor.get.bind(clone);\n    }\n    Object.defineProperty(input, name, descriptor);\n  });\n}\n\n/**\n * Return a stream pointing to a part of the input stream.\n * @param {ReadableStream|Uint8array|String} input\n * @returns {ReadableStream|Uint8array|String} clone\n */\nfunction slice(input, begin=0, end=Infinity) {\n  if (isArrayStream(input)) {\n    throw new Error('Not implemented');\n  }\n  if (isStream(input)) {\n    if (begin >= 0 && end >= 0) {\n      let bytesRead = 0;\n      return transformRaw(input, {\n        transform(value, controller) {\n          if (bytesRead < end) {\n            if (bytesRead + value.length >= begin) {\n              controller.enqueue(slice(value, Math.max(begin - bytesRead, 0), end - bytesRead));\n            }\n            bytesRead += value.length;\n          } else {\n            controller.terminate();\n          }\n        }\n      });\n    }\n    if (begin < 0 && (end < 0 || end === Infinity)) {\n      let lastBytes = [];\n      return transform(input, value => {\n        if (value.length >= -begin) lastBytes = [value];\n        else lastBytes.push(value);\n      }, () => slice(concat(lastBytes), begin, end));\n    }\n    if (begin === 0 && end < 0) {\n      let lastBytes;\n      return transform(input, value => {\n        const returnValue = lastBytes ? concat([lastBytes, value]) : value;\n        if (returnValue.length >= -end) {\n          lastBytes = slice(returnValue, end);\n          return slice(returnValue, begin, end);\n        }\n          lastBytes = returnValue;\n      });\n    }\n    console.warn(`stream.slice(input, ${begin}, ${end}) not implemented efficiently.`);\n    return fromAsync(async () => slice(await readToEnd(input), begin, end));\n  }\n  if (input[externalBuffer]) {\n    input = concat(input[externalBuffer].concat([input]));\n  }\n  if (isUint8Array(input)) {\n    return input.subarray(begin, end === Infinity ? input.length : end);\n  }\n  return input.slice(begin, end);\n}\n\n/**\n * Read a stream to the end and return its contents, concatenated by the join function (defaults to concat).\n * @param {ReadableStream|Uint8array|String} input\n * @param {Function} join\n * @returns {Promise<Uint8array|String|Any>} the return value of join()\n * @async\n */\nasync function readToEnd(input, join=concat) {\n  if (isArrayStream(input)) {\n    return input.readToEnd(join);\n  }\n  if (isStream(input)) {\n    return getReader(input).readToEnd(join);\n  }\n  return input;\n}\n\n/**\n * Cancel a stream.\n * @param {ReadableStream|Uint8array|String} input\n * @param {Any} reason\n * @returns {Promise<Any>} indicates when the stream has been canceled\n * @async\n */\nasync function cancel(input, reason) {\n  if (isStream(input)) {\n    if (input.cancel) {\n      const cancelled = await input.cancel(reason);\n      // the stream is not always cancelled at this point, so we wait some more\n      await new Promise(setTimeout);\n      return cancelled;\n    }\n    if (input.destroy) {\n      input.destroy(reason);\n      await new Promise(setTimeout);\n      return reason;\n    }\n  }\n}\n\n/**\n * Convert an async function to an ArrayStream. When the function returns, its return value is written to the stream.\n * @param {Function} fn\n * @returns {ArrayStream}\n */\nfunction fromAsync(fn) {\n  const arrayStream = new ArrayStream();\n  (async () => {\n    const writer = getWriter(arrayStream);\n    try {\n      await writer.write(await fn());\n      await writer.close();\n    } catch (e) {\n      await writer.abort(e);\n    }\n  })();\n  return arrayStream;\n}\n\n/**\n * Get a Reader\n * @param {ReadableStream|Uint8array|String} input\n * @returns {Reader}\n */\nfunction getReader(input) {\n  return new Reader(input);\n}\n\n/**\n * Get a Writer\n * @param {WritableStream} input\n * @returns {Writer}\n */\nfunction getWriter(input) {\n  return new Writer(input);\n}\n\n\nexport {\n  ArrayStream,\n  toStream,\n  concatStream,\n  concat,\n  getReader,\n  getWriter,\n  pipe,\n  transformRaw,\n  transform,\n  transformPair,\n  parse,\n  clone,\n  passiveClone,\n  slice,\n  readToEnd,\n  cancel,\n  fromAsync\n};\n","/**\n * @module enums\n */\n\nconst byValue = Symbol('byValue');\n\nexport default {\n\n  /** Maps curve names under various standards to one\n   * @see {@link https://wiki.gnupg.org/ECC|ECC - GnuPG wiki}\n   * @enum {String}\n   * @readonly\n   */\n  curve: {\n    /** NIST P-256 Curve */\n    'nistP256':               'nistP256',\n    /** @deprecated use `nistP256` instead */\n    'p256':                   'nistP256',\n\n    /** NIST P-384 Curve */\n    'nistP384':               'nistP384',\n    /** @deprecated use `nistP384` instead */\n    'p384':                   'nistP384',\n\n    /** NIST P-521 Curve */\n    'nistP521':               'nistP521',\n    /** @deprecated use `nistP521` instead */\n    'p521':                   'nistP521',\n\n    /** SECG SECP256k1 Curve */\n    'secp256k1':              'secp256k1',\n\n    /** Ed25519 - deprecated by crypto-refresh (replaced by standaone Ed25519 algo) */\n    'ed25519Legacy':          'ed25519Legacy',\n    /** @deprecated use `ed25519Legacy` instead */\n    'ed25519':                'ed25519Legacy',\n\n    /** Curve25519 - deprecated by crypto-refresh (replaced by standaone X25519 algo) */\n    'curve25519Legacy':       'curve25519Legacy',\n    /** @deprecated use `curve25519Legacy` instead */\n    'curve25519':             'curve25519Legacy',\n\n    /** BrainpoolP256r1 Curve */\n    'brainpoolP256r1':       'brainpoolP256r1',\n\n    /** BrainpoolP384r1 Curve */\n    'brainpoolP384r1':       'brainpoolP384r1',\n\n    /** BrainpoolP512r1 Curve */\n    'brainpoolP512r1':       'brainpoolP512r1'\n  },\n\n  /** A string to key specifier type\n   * @enum {Integer}\n   * @readonly\n   */\n  s2k: {\n    simple: 0,\n    salted: 1,\n    iterated: 3,\n    argon2: 4,\n    gnu: 101\n  },\n\n  /** {@link https://tools.ietf.org/html/draft-ietf-openpgp-crypto-refresh-08.html#section-9.1|crypto-refresh RFC, section 9.1}\n   * @enum {Integer}\n   * @readonly\n   */\n  publicKey: {\n    /** RSA (Encrypt or Sign) [HAC] */\n    rsaEncryptSign: 1,\n    /** RSA (Encrypt only) [HAC] */\n    rsaEncrypt: 2,\n    /** RSA (Sign only) [HAC] */\n    rsaSign: 3,\n    /** Elgamal (Encrypt only) [ELGAMAL] [HAC] */\n    elgamal: 16,\n    /** DSA (Sign only) [FIPS186] [HAC] */\n    dsa: 17,\n    /** ECDH (Encrypt only) [RFC6637] */\n    ecdh: 18,\n    /** ECDSA (Sign only) [RFC6637] */\n    ecdsa: 19,\n    /** EdDSA (Sign only) - deprecated by crypto-refresh (replaced by `ed25519` identifier below)\n     * [{@link https://tools.ietf.org/html/draft-koch-eddsa-for-openpgp-04|Draft RFC}] */\n    eddsaLegacy: 22,\n    /** Reserved for AEDH */\n    aedh: 23,\n    /** Reserved for AEDSA */\n    aedsa: 24,\n    /** X25519 (Encrypt only) */\n    x25519: 25,\n    /** X448 (Encrypt only) */\n    x448: 26,\n    /** Ed25519 (Sign only) */\n    ed25519: 27,\n    /** Ed448 (Sign only) */\n    ed448: 28\n  },\n\n  /** {@link https://tools.ietf.org/html/rfc4880#section-9.2|RFC4880, section 9.2}\n   * @enum {Integer}\n   * @readonly\n   */\n  symmetric: {\n    /** Not implemented! */\n    idea: 1,\n    tripledes: 2,\n    cast5: 3,\n    blowfish: 4,\n    aes128: 7,\n    aes192: 8,\n    aes256: 9,\n    twofish: 10\n  },\n\n  /** {@link https://tools.ietf.org/html/rfc4880#section-9.3|RFC4880, section 9.3}\n   * @enum {Integer}\n   * @readonly\n   */\n  compression: {\n    uncompressed: 0,\n    /** RFC1951 */\n    zip: 1,\n    /** RFC1950 */\n    zlib: 2,\n    bzip2: 3\n  },\n\n  /** {@link https://tools.ietf.org/html/rfc4880#section-9.4|RFC4880, section 9.4}\n   * @enum {Integer}\n   * @readonly\n   */\n  hash: {\n    md5: 1,\n    sha1: 2,\n    ripemd: 3,\n    sha256: 8,\n    sha384: 9,\n    sha512: 10,\n    sha224: 11,\n    sha3_256: 12,\n    sha3_512: 14\n  },\n\n  /** A list of hash names as accepted by webCrypto functions.\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest|Parameters, algo}\n   * @enum {String}\n   */\n  webHash: {\n    'SHA-1': 2,\n    'SHA-256': 8,\n    'SHA-384': 9,\n    'SHA-512': 10\n  },\n\n  /** {@link https://www.rfc-editor.org/rfc/rfc9580.html#name-aead-algorithms}\n   * @enum {Integer}\n   * @readonly\n   */\n  aead: {\n    eax: 1,\n    ocb: 2,\n    gcm: 3,\n    /** @deprecated used by OpenPGP.js v5 for legacy AEAD support; use `gcm` instead for the RFC9580-standardized ID */\n    experimentalGCM: 100 // Private algorithm\n  },\n\n  /** A list of packet types and numeric tags associated with them.\n   * @enum {Integer}\n   * @readonly\n   */\n  packet: {\n    publicKeyEncryptedSessionKey: 1,\n    signature: 2,\n    symEncryptedSessionKey: 3,\n    onePassSignature: 4,\n    secretKey: 5,\n    publicKey: 6,\n    secretSubkey: 7,\n    compressedData: 8,\n    symmetricallyEncryptedData: 9,\n    marker: 10,\n    literalData: 11,\n    trust: 12,\n    userID: 13,\n    publicSubkey: 14,\n    userAttribute: 17,\n    symEncryptedIntegrityProtectedData: 18,\n    modificationDetectionCode: 19,\n    aeadEncryptedData: 20, // see IETF draft: https://tools.ietf.org/html/draft-ford-openpgp-format-00#section-2.1\n    padding: 21\n  },\n\n  /** Data types in the literal packet\n   * @enum {Integer}\n   * @readonly\n   */\n  literal: {\n    /** Binary data 'b' */\n    binary: 'b'.charCodeAt(),\n    /** Text data 't' */\n    text: 't'.charCodeAt(),\n    /** Utf8 data 'u' */\n    utf8: 'u'.charCodeAt(),\n    /** MIME message body part 'm' */\n    mime: 'm'.charCodeAt()\n  },\n\n\n  /** One pass signature packet type\n   * @enum {Integer}\n   * @readonly\n   */\n  signature: {\n    /** 0x00: Signature of a binary document. */\n    binary: 0,\n    /** 0x01: Signature of a canonical text document.\n     *\n     * Canonicalyzing the document by converting line endings. */\n    text: 1,\n    /** 0x02: Standalone signature.\n     *\n     * This signature is a signature of only its own subpacket contents.\n     * It is calculated identically to a signature over a zero-lengh\n     * binary document.  Note that it doesn't make sense to have a V3\n     * standalone signature. */\n    standalone: 2,\n    /** 0x10: Generic certification of a User ID and Public-Key packet.\n     *\n     * The issuer of this certification does not make any particular\n     * assertion as to how well the certifier has checked that the owner\n     * of the key is in fact the person described by the User ID. */\n    certGeneric: 16,\n    /** 0x11: Persona certification of a User ID and Public-Key packet.\n     *\n     * The issuer of this certification has not done any verification of\n     * the claim that the owner of this key is the User ID specified. */\n    certPersona: 17,\n    /** 0x12: Casual certification of a User ID and Public-Key packet.\n     *\n     * The issuer of this certification has done some casual\n     * verification of the claim of identity. */\n    certCasual: 18,\n    /** 0x13: Positive certification of a User ID and Public-Key packet.\n     *\n     * The issuer of this certification has done substantial\n     * verification of the claim of identity.\n     *\n     * Most OpenPGP implementations make their \"key signatures\" as 0x10\n     * certifications.  Some implementations can issue 0x11-0x13\n     * certifications, but few differentiate between the types. */\n    certPositive: 19,\n    /** 0x30: Certification revocation signature\n     *\n     * This signature revokes an earlier User ID certification signature\n     * (signature class 0x10 through 0x13) or direct-key signature\n     * (0x1F).  It should be issued by the same key that issued the\n     * revoked signature or an authorized revocation key.  The signature\n     * is computed over the same data as the certificate that it\n     * revokes, and should have a later creation date than that\n     * certificate. */\n    certRevocation: 48,\n    /** 0x18: Subkey Binding Signature\n     *\n     * This signature is a statement by the top-level signing key that\n     * indicates that it owns the subkey.  This signature is calculated\n     * directly on the primary key and subkey, and not on any User ID or\n     * other packets.  A signature that binds a signing subkey MUST have\n     * an Embedded Signature subpacket in this binding signature that\n     * contains a 0x19 signature made by the signing subkey on the\n     * primary key and subkey. */\n    subkeyBinding: 24,\n    /** 0x19: Primary Key Binding Signature\n     *\n     * This signature is a statement by a signing subkey, indicating\n     * that it is owned by the primary key and subkey.  This signature\n     * is calculated the same way as a 0x18 signature: directly on the\n     * primary key and subkey, and not on any User ID or other packets.\n     *\n     * When a signature is made over a key, the hash data starts with the\n     * octet 0x99, followed by a two-octet length of the key, and then body\n     * of the key packet.  (Note that this is an old-style packet header for\n     * a key packet with two-octet length.)  A subkey binding signature\n     * (type 0x18) or primary key binding signature (type 0x19) then hashes\n     * the subkey using the same format as the main key (also using 0x99 as\n     * the first octet). */\n    keyBinding: 25,\n    /** 0x1F: Signature directly on a key\n     *\n     * This signature is calculated directly on a key.  It binds the\n     * information in the Signature subpackets to the key, and is\n     * appropriate to be used for subpackets that provide information\n     * about the key, such as the Revocation Key subpacket.  It is also\n     * appropriate for statements that non-self certifiers want to make\n     * about the key itself, rather than the binding between a key and a\n     * name. */\n    key: 31,\n    /** 0x20: Key revocation signature\n     *\n     * The signature is calculated directly on the key being revoked.  A\n     * revoked key is not to be used.  Only revocation signatures by the\n     * key being revoked, or by an authorized revocation key, should be\n     * considered valid revocation signatures.a */\n    keyRevocation: 32,\n    /** 0x28: Subkey revocation signature\n     *\n     * The signature is calculated directly on the subkey being revoked.\n     * A revoked subkey is not to be used.  Only revocation signatures\n     * by the top-level signature key that is bound to this subkey, or\n     * by an authorized revocation key, should be considered valid\n     * revocation signatures.\n     *\n     * Key revocation signatures (types 0x20 and 0x28)\n     * hash only the key being revoked. */\n    subkeyRevocation: 40,\n    /** 0x40: Timestamp signature.\n     * This signature is only meaningful for the timestamp contained in\n     * it. */\n    timestamp: 64,\n    /** 0x50: Third-Party Confirmation signature.\n     *\n     * This signature is a signature over some other OpenPGP Signature\n     * packet(s).  It is analogous to a notary seal on the signed data.\n     * A third-party signature SHOULD include Signature Target\n     * subpacket(s) to give easy identification.  Note that we really do\n     * mean SHOULD.  There are plausible uses for this (such as a blind\n     * party that only sees the signature, not the key or source\n     * document) that cannot include a target subpacket. */\n    thirdParty: 80\n  },\n\n  /** Signature subpacket type\n   * @enum {Integer}\n   * @readonly\n   */\n  signatureSubpacket: {\n    signatureCreationTime: 2,\n    signatureExpirationTime: 3,\n    exportableCertification: 4,\n    trustSignature: 5,\n    regularExpression: 6,\n    revocable: 7,\n    keyExpirationTime: 9,\n    placeholderBackwardsCompatibility: 10,\n    preferredSymmetricAlgorithms: 11,\n    revocationKey: 12,\n    issuerKeyID: 16,\n    notationData: 20,\n    preferredHashAlgorithms: 21,\n    preferredCompressionAlgorithms: 22,\n    keyServerPreferences: 23,\n    preferredKeyServer: 24,\n    primaryUserID: 25,\n    policyURI: 26,\n    keyFlags: 27,\n    signersUserID: 28,\n    reasonForRevocation: 29,\n    features: 30,\n    signatureTarget: 31,\n    embeddedSignature: 32,\n    issuerFingerprint: 33,\n    preferredAEADAlgorithms: 34,\n    preferredCipherSuites: 39\n  },\n\n  /** Key flags\n   * @enum {Integer}\n   * @readonly\n   */\n  keyFlags: {\n    /** 0x01 - This key may be used to certify other keys. */\n    certifyKeys: 1,\n    /** 0x02 - This key may be used to sign data. */\n    signData: 2,\n    /** 0x04 - This key may be used to encrypt communications. */\n    encryptCommunication: 4,\n    /** 0x08 - This key may be used to encrypt storage. */\n    encryptStorage: 8,\n    /** 0x10 - The private component of this key may have been split\n     *        by a secret-sharing mechanism. */\n    splitPrivateKey: 16,\n    /** 0x20 - This key may be used for authentication. */\n    authentication: 32,\n    /** 0x80 - The private component of this key may be in the\n     *        possession of more than one person. */\n    sharedPrivateKey: 128\n  },\n\n  /** Armor type\n   * @enum {Integer}\n   * @readonly\n   */\n  armor: {\n    multipartSection: 0,\n    multipartLast: 1,\n    signed: 2,\n    message: 3,\n    publicKey: 4,\n    privateKey: 5,\n    signature: 6\n  },\n\n  /** {@link https://tools.ietf.org/html/rfc4880#section-5.2.3.23|RFC4880, section 5.2.3.23}\n   * @enum {Integer}\n   * @readonly\n   */\n  reasonForRevocation: {\n    /** No reason specified (key revocations or cert revocations) */\n    noReason: 0,\n    /** Key is superseded (key revocations) */\n    keySuperseded: 1,\n    /** Key material has been compromised (key revocations) */\n    keyCompromised: 2,\n    /** Key is retired and no longer used (key revocations) */\n    keyRetired: 3,\n    /** User ID information is no longer valid (cert revocations) */\n    userIDInvalid: 32\n  },\n\n  /** {@link https://tools.ietf.org/html/draft-ietf-openpgp-rfc4880bis-04#section-5.2.3.25|RFC4880bis-04, section 5.2.3.25}\n   * @enum {Integer}\n   * @readonly\n   */\n  features: {\n    /** 0x01 - Modification Detection (packets 18 and 19) */\n    modificationDetection: 1,\n    /** 0x02 - AEAD Encrypted Data Packet (packet 20) and version 5\n     *         Symmetric-Key Encrypted Session Key Packets (packet 3) */\n    aead: 2,\n    /** 0x04 - Version 5 Public-Key Packet format and corresponding new\n      *        fingerprint format */\n    v5Keys: 4,\n    seipdv2: 8\n  },\n\n  /**\n   * Asserts validity of given value and converts from string/integer to integer.\n   * @param {Object} type target enum type\n   * @param {String|Integer} e value to check and/or convert\n   * @returns {Integer} enum value if it exists\n   * @throws {Error} if the value is invalid\n   */\n  write: function(type, e) {\n    if (typeof e === 'number') {\n      e = this.read(type, e);\n    }\n\n    if (type[e] !== undefined) {\n      return type[e];\n    }\n\n    throw new Error('Invalid enum value.');\n  },\n\n  /**\n   * Converts enum integer value to the corresponding string, if it exists.\n   * @param {Object} type target enum type\n   * @param {Integer} e value to convert\n   * @returns {String} name of enum value if it exists\n   * @throws {Error} if the value is invalid\n   */\n  read: function(type, e) {\n    if (!type[byValue]) {\n      type[byValue] = [];\n      Object.entries(type).forEach(([key, value]) => {\n        type[byValue][value] = key;\n      });\n    }\n\n    if (type[byValue][e] !== undefined) {\n      return type[byValue][e];\n    }\n\n    throw new Error('Invalid enum value.');\n  }\n};\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n/**\n * Global configuration values.\n */\n\nimport enums from '../enums';\n\nexport default {\n  /**\n   * @memberof module:config\n   * @property {Integer} preferredHashAlgorithm Default hash algorithm {@link module:enums.hash}\n   */\n  preferredHashAlgorithm: enums.hash.sha512,\n  /**\n   * @memberof module:config\n   * @property {Integer} preferredSymmetricAlgorithm Default encryption cipher {@link module:enums.symmetric}\n   */\n  preferredSymmetricAlgorithm: enums.symmetric.aes256,\n  /**\n   * @memberof module:config\n   * @property {Integer} compression Default compression algorithm {@link module:enums.compression}\n   */\n  preferredCompressionAlgorithm: enums.compression.uncompressed,\n  /**\n   * Use Authenticated Encryption with Additional Data (AEAD) protection for symmetric encryption.\n   * This option is applicable to:\n   * - key generation (encryption key preferences),\n   * - password-based message encryption, and\n   * - private key encryption.\n   * In the case of message encryption using public keys, the encryption key preferences are respected instead.\n   * Note: not all OpenPGP implementations are compatible with this option.\n   * @see {@link https://tools.ietf.org/html/draft-ietf-openpgp-crypto-refresh-10.html|draft-crypto-refresh-10}\n   * @memberof module:config\n   * @property {Boolean} aeadProtect\n   */\n  aeadProtect: false,\n  /**\n   * When reading OpenPGP v4 private keys (e.g. those generated in OpenPGP.js when not setting `config.v5Keys = true`)\n   * which were encrypted by OpenPGP.js v5 (or older) using `config.aeadProtect = true`,\n   * this option must be set, otherwise key parsing and/or key decryption will fail.\n   * Note: only set this flag if you know that the keys are of the legacy type, as non-legacy keys\n   * will be processed incorrectly.\n   */\n  parseAEADEncryptedV4KeysAsLegacy: false,\n  /**\n   * Default Authenticated Encryption with Additional Data (AEAD) encryption mode\n   * Only has an effect when aeadProtect is set to true.\n   * @memberof module:config\n   * @property {Integer} preferredAEADAlgorithm Default AEAD mode {@link module:enums.aead}\n   */\n  preferredAEADAlgorithm: enums.aead.gcm,\n  /**\n   * Chunk Size Byte for Authenticated Encryption with Additional Data (AEAD) mode\n   * Only has an effect when aeadProtect is set to true.\n   * Must be an integer value from 0 to 56.\n   * @memberof module:config\n   * @property {Integer} aeadChunkSizeByte\n   */\n  aeadChunkSizeByte: 12,\n  /**\n   * Use v6 keys.\n   * Note: not all OpenPGP implementations are compatible with this option.\n   * **FUTURE OPENPGP.JS VERSIONS MAY BREAK COMPATIBILITY WHEN USING THIS OPTION**\n   * @memberof module:config\n   * @property {Boolean} v6Keys\n   */\n  v6Keys: false,\n  /**\n   * Enable parsing v5 keys and v5 signatures (which is different from the AEAD-encrypted SEIPDv2 packet).\n   * These are non-standard entities, which in the crypto-refresh have been superseded\n   * by v6 keys and v6 signatures, respectively.\n   * However, generation of v5 entities was supported behind config flag in OpenPGP.js v5, and some other libraries,\n   * hence parsing them might be necessary in some cases.\n   * @memberof module:config\n   * @property {Boolean} enableParsingV5Entities\n   */\n  enableParsingV5Entities: false,\n  /**\n   * S2K (String to Key) type, used for key derivation in the context of secret key encryption\n   * and password-encrypted data. Weaker s2k options are not allowed.\n   * Note: Argon2 is the strongest option but not all OpenPGP implementations are compatible with it\n   * (pending standardisation).\n   * @memberof module:config\n   * @property {enums.s2k.argon2|enums.s2k.iterated} s2kType {@link module:enums.s2k}\n   */\n  s2kType: enums.s2k.iterated,\n  /**\n   * {@link https://tools.ietf.org/html/rfc4880#section-3.7.1.3| RFC4880 3.7.1.3}:\n   * Iteration Count Byte for Iterated and Salted S2K (String to Key).\n   * Only relevant if `config.s2kType` is set to `enums.s2k.iterated`.\n   * Note: this is the exponent value, not the final number of iterations (refer to specs for more details).\n   * @memberof module:config\n   * @property {Integer} s2kIterationCountByte\n   */\n  s2kIterationCountByte: 224,\n  /**\n   * {@link https://tools.ietf.org/html/draft-ietf-openpgp-crypto-refresh-07.html#section-3.7.1.4| draft-crypto-refresh 3.7.1.4}:\n   * Argon2 parameters for S2K (String to Key).\n   * Only relevant if `config.s2kType` is set to `enums.s2k.argon2`.\n   * Default settings correspond to the second recommendation from RFC9106 (\"uniformly safe option\"),\n   * to ensure compatibility with memory-constrained environments.\n   * For more details on the choice of parameters, see https://tools.ietf.org/html/rfc9106#section-4.\n   * @memberof module:config\n   * @property {Object} params\n   * @property {Integer} params.passes - number of iterations t\n   * @property {Integer} params.parallelism - degree of parallelism p\n   * @property {Integer} params.memoryExponent - one-octet exponent indicating the memory size, which will be: 2**memoryExponent kibibytes.\n   */\n  s2kArgon2Params: {\n    passes: 3,\n    parallelism: 4, // lanes\n    memoryExponent: 16 // 64 MiB of RAM\n  },\n  /**\n   * Allow decryption of messages without integrity protection.\n   * This is an **insecure** setting:\n   *  - message modifications cannot be detected, thus processing the decrypted data is potentially unsafe.\n   *  - it enables downgrade attacks against integrity-protected messages.\n   * @memberof module:config\n   * @property {Boolean} allowUnauthenticatedMessages\n   */\n  allowUnauthenticatedMessages: false,\n  /**\n   * Allow streaming unauthenticated data before its integrity has been checked. This would allow the application to\n   * process large streams while limiting memory usage by releasing the decrypted chunks as soon as possible\n   * and deferring checking their integrity until the decrypted stream has been read in full.\n   *\n   * This setting is **insecure** if the encrypted data has been corrupted by a malicious entity:\n   * - if the partially decrypted message is processed further or displayed to the user, it opens up the possibility of attacks such as EFAIL\n   *    (see https://efail.de/).\n   * - an attacker with access to traces or timing info of internal processing errors could learn some info about the data.\n   *\n   * NB: this setting does not apply to AEAD-encrypted data, where the AEAD data chunk is never released until integrity is confirmed.\n   * @memberof module:config\n   * @property {Boolean} allowUnauthenticatedStream\n   */\n  allowUnauthenticatedStream: false,\n  /**\n   * Minimum RSA key size allowed for key generation and message signing, verification and encryption.\n   * The default is 2047 since due to a bug, previous versions of OpenPGP.js could generate 2047-bit keys instead of 2048-bit ones.\n   * @memberof module:config\n   * @property {Number} minRSABits\n   */\n  minRSABits: 2047,\n  /**\n   * Work-around for rare GPG decryption bug when encrypting with multiple passwords.\n   * **Slower and slightly less secure**\n   * @memberof module:config\n   * @property {Boolean} passwordCollisionCheck\n   */\n  passwordCollisionCheck: false,\n  /**\n   * Allow decryption using RSA keys without `encrypt` flag.\n   * This setting is potentially insecure, but it is needed to get around an old openpgpjs bug\n   * where key flags were ignored when selecting a key for encryption.\n   * @memberof module:config\n   * @property {Boolean} allowInsecureDecryptionWithSigningKeys\n   */\n  allowInsecureDecryptionWithSigningKeys: false,\n  /**\n   * Allow verification of message signatures with keys whose validity at the time of signing cannot be determined.\n   * Instead, a verification key will also be consider valid as long as it is valid at the current time.\n   * This setting is potentially insecure, but it is needed to verify messages signed with keys that were later reformatted,\n   * and have self-signature's creation date that does not match the primary key creation date.\n   * @memberof module:config\n   * @property {Boolean} allowInsecureDecryptionWithSigningKeys\n   */\n  allowInsecureVerificationWithReformattedKeys: false,\n  /**\n   * Allow using keys that do not have any key flags set.\n   * Key flags are needed to restrict key usage to specific purposes: for instance, a signing key could only be allowed to certify other keys, and not sign messages\n   * (see https://www.ietf.org/archive/id/draft-ietf-openpgp-crypto-refresh-10.html#section-5.2.3.29).\n   * Some older keys do not declare any key flags, which means they are not allowed to be used for any operation.\n   * This setting allows using such keys for any operation for which they are compatible, based on their public key algorithm.\n   */\n  allowMissingKeyFlags: false,\n  /**\n   * Enable constant-time decryption of RSA- and ElGamal-encrypted session keys, to hinder Bleichenbacher-like attacks (https://link.springer.com/chapter/10.1007/BFb0055716).\n   * This setting has measurable performance impact and it is only helpful in application scenarios where both of the following conditions apply:\n   * - new/incoming messages are automatically decrypted (without user interaction);\n   * - an attacker can determine how long it takes to decrypt each message (e.g. due to decryption errors being logged remotely).\n   * See also `constantTimePKCS1DecryptionSupportedSymmetricAlgorithms`.\n   * @memberof module:config\n   * @property {Boolean} constantTimePKCS1Decryption\n   */\n  constantTimePKCS1Decryption: false,\n  /**\n   * This setting is only meaningful if `constantTimePKCS1Decryption` is enabled.\n   * Decryption of RSA- and ElGamal-encrypted session keys of symmetric algorithms different from the ones specified here will fail.\n   * However, the more algorithms are added, the slower the decryption procedure becomes.\n   * @memberof module:config\n   * @property {Set<Integer>} constantTimePKCS1DecryptionSupportedSymmetricAlgorithms {@link module:enums.symmetric}\n   */\n  constantTimePKCS1DecryptionSupportedSymmetricAlgorithms: new Set([enums.symmetric.aes128, enums.symmetric.aes192, enums.symmetric.aes256]),\n  /**\n   * @memberof module:config\n   * @property {Boolean} ignoreUnsupportedPackets Ignore unsupported/unrecognizable packets on parsing instead of throwing an error\n   */\n  ignoreUnsupportedPackets: true,\n  /**\n   * @memberof module:config\n   * @property {Boolean} ignoreMalformedPackets Ignore malformed packets on parsing instead of throwing an error\n   */\n  ignoreMalformedPackets: false,\n  /**\n   * @memberof module:config\n   * @property {Boolean} enforceGrammar whether parsed OpenPGP messages must comform to the OpenPGP grammar\n   *    defined in https://www.rfc-editor.org/rfc/rfc9580.html#name-openpgp-messages .\n   */\n  enforceGrammar: true,\n  /**\n   * Parsing of packets is normally restricted to a predefined set of packets. For example a Sym. Encrypted Integrity Protected Data Packet can only\n   * contain a certain set of packets including LiteralDataPacket. With this setting we can allow additional packets, which is probably not advisable\n   * as a global config setting, but can be used for specific function calls (e.g. decrypt method of Message).\n   * @memberof module:config\n   * @property {Array} additionalAllowedPackets Allow additional packets on parsing. Defined as array of packet classes, e.g. [PublicKeyPacket]\n   */\n  additionalAllowedPackets: [],\n  /**\n   * @memberof module:config\n   * @property {Boolean} showVersion Whether to include {@link module:config/config.versionString} in armored messages\n   */\n  showVersion: false,\n  /**\n   * @memberof module:config\n   * @property {Boolean} showComment Whether to include {@link module:config/config.commentString} in armored messages\n   */\n  showComment: false,\n  /**\n   * @memberof module:config\n   * @property {String} versionString A version string to be included in armored messages\n   */\n  versionString: 'OpenPGP.js VERSION',\n  /**\n   * @memberof module:config\n   * @property {String} commentString A comment string to be included in armored messages\n   */\n  commentString: 'https://openpgpjs.org',\n\n  /**\n   * Max userID string length (used for parsing)\n   * @memberof module:config\n   * @property {Integer} maxUserIDLength\n   */\n  maxUserIDLength: 1024 * 5,\n  /**\n   * Contains notatations that are considered \"known\". Known notations do not trigger\n   * validation error when the notation is marked as critical.\n   * @memberof module:config\n   * @property {Array} knownNotations\n   */\n  knownNotations: [],\n  /**\n   * If true, a salt notation is used to randomize signatures generated by v4 and v5 keys (v6 signatures are always non-deterministic, by design).\n   * This protects EdDSA signatures from potentially leaking the secret key in case of faults (i.e. bitflips) which, in principle, could occur\n   * during the signing computation. It is added to signatures of any algo for simplicity, and as it may also serve as protection in case of\n   * weaknesses in the hash algo, potentially hindering e.g. some chosen-prefix attacks.\n   * NOTE: the notation is interoperable, but will reveal that the signature has been generated using OpenPGP.js, which may not be desirable in some cases.\n   */\n  nonDeterministicSignaturesViaNotation: true,\n  /**\n   * Whether to use the the noble-curves library for curves (other than Curve25519) that are not supported by the available native crypto API.\n   * When false, certain standard curves will not be supported (depending on the platform).\n   * @memberof module:config\n   * @property {Boolean} useEllipticFallback\n   */\n  useEllipticFallback: true,\n  /**\n   * Reject insecure hash algorithms\n   * @memberof module:config\n   * @property {Set<Integer>} rejectHashAlgorithms {@link module:enums.hash}\n   */\n  rejectHashAlgorithms: new Set([enums.hash.md5, enums.hash.ripemd]),\n  /**\n   * Reject insecure message hash algorithms\n   * @memberof module:config\n   * @property {Set<Integer>} rejectMessageHashAlgorithms {@link module:enums.hash}\n   */\n  rejectMessageHashAlgorithms: new Set([enums.hash.md5, enums.hash.ripemd, enums.hash.sha1]),\n  /**\n   * Reject insecure public key algorithms for key generation and message encryption, signing or verification\n   * @memberof module:config\n   * @property {Set<Integer>} rejectPublicKeyAlgorithms {@link module:enums.publicKey}\n   */\n  rejectPublicKeyAlgorithms: new Set([enums.publicKey.elgamal, enums.publicKey.dsa]),\n  /**\n   * Reject non-standard curves for key generation, message encryption, signing or verification\n   * @memberof module:config\n   * @property {Set<String>} rejectCurves {@link module:enums.curve}\n   */\n  rejectCurves: new Set([enums.curve.secp256k1])\n};\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n/* eslint-disable no-console */\n\n/**\n * This object contains utility functions\n * @module util\n */\n\nimport { concat as streamConcat, transform as streamTransform, concatUint8Array, isStream, isUint8Array } from '@openpgp/web-stream-tools';\nimport { createRequire } from 'module'; // Must be stripped in browser built\nimport enums from './enums';\nimport defaultConfig from './config';\n\nconst debugMode = (() => {\n  try {\n    return process.env.NODE_ENV === 'development'; // eslint-disable-line no-process-env\n  } catch (e) {}\n  return false;\n})();\n\nconst util = {\n  isString: function(data) {\n    return typeof data === 'string' || data instanceof String;\n  },\n\n  nodeRequire: createRequire(import.meta.url),\n\n  isArray: function(data) {\n    return data instanceof Array;\n  },\n\n  isUint8Array: isUint8Array,\n\n  isStream: isStream,\n\n  /**\n   * Load noble-curves lib on demand and return the requested curve function\n   * @param {enums.publicKey} publicKeyAlgo\n   * @param {enums.curve} [curveName] - for algos supporting different curves (e.g. ECDSA)\n   * @returns curve implementation\n   * @throws on unrecognized curve, or curve not implemented by noble-curve\n   */\n  getNobleCurve: async (publicKeyAlgo, curveName) => {\n    if (!defaultConfig.useEllipticFallback) {\n      throw new Error('This curve is only supported in the full build of OpenPGP.js');\n    }\n\n    const { nobleCurves } = await import('./crypto/public_key/elliptic/noble_curves');\n    switch (publicKeyAlgo) {\n      case enums.publicKey.ecdh:\n      case enums.publicKey.ecdsa: {\n        const curve = nobleCurves.get(curveName);\n        if (!curve) throw new Error('Unsupported curve');\n        return curve;\n      }\n      case enums.publicKey.x448:\n        return nobleCurves.get('x448');\n      case enums.publicKey.ed448:\n        return nobleCurves.get('ed448');\n      default:\n        throw new Error('Unsupported curve');\n    }\n  },\n\n  readNumber: function (bytes) {\n    let n = 0;\n    for (let i = 0; i < bytes.length; i++) {\n      n += (256 ** i) * bytes[bytes.length - 1 - i];\n    }\n    return n;\n  },\n\n  writeNumber: function (n, bytes) {\n    const b = new Uint8Array(bytes);\n    for (let i = 0; i < bytes; i++) {\n      b[i] = (n >> (8 * (bytes - i - 1))) & 0xFF;\n    }\n\n    return b;\n  },\n\n  readDate: function (bytes) {\n    const n = util.readNumber(bytes);\n    const d = new Date(n * 1000);\n    return d;\n  },\n\n  writeDate: function (time) {\n    const numeric = Math.floor(time.getTime() / 1000);\n\n    return util.writeNumber(numeric, 4);\n  },\n\n  normalizeDate: function (time = Date.now()) {\n    return time === null || time === Infinity ? time : new Date(Math.floor(+time / 1000) * 1000);\n  },\n\n  /**\n   * Read one MPI from bytes in input\n   * @param {Uint8Array} bytes - Input data to parse\n   * @returns {Uint8Array} Parsed MPI.\n   */\n  readMPI: function (bytes) {\n    const bits = (bytes[0] << 8) | bytes[1];\n    const bytelen = (bits + 7) >>> 3;\n    // There is a decryption oracle risk here by enforcing the MPI length using `readExactSubarray` in the context of SEIPDv1 encrypted signatures,\n    // where unauthenticated streamed decryption is done (via `config.allowUnauthenticatedStream`), since the decrypted signature data being processed\n    // has not been authenticated (yet).\n    // However, such config setting is known to be insecure, and there are other packet parsing errors that can cause similar issues.\n    // Also, AEAD is also not affected.\n    return util.readExactSubarray(bytes, 2, 2 + bytelen);\n  },\n\n  /**\n   * Read exactly `end - start` bytes from input.\n   * This is a stricter version of `.subarray`.\n   * @param {Uint8Array} input - Input data to parse\n   * @returns {Uint8Array} subarray of size always equal to `end - start`\n   * @throws if the input array is too short.\n   */\n  readExactSubarray: function (input, start, end) {\n    if (input.length < (end - start)) {\n      throw new Error('Input array too short');\n    }\n    return input.subarray(start, end);\n  },\n\n  /**\n   * Left-pad Uint8Array to length by adding 0x0 bytes\n   * @param {Uint8Array} bytes - Data to pad\n   * @param {Number} length - Padded length\n   * @returns {Uint8Array} Padded bytes.\n   */\n  leftPad(bytes, length) {\n    if (bytes.length > length) {\n      throw new Error('Input array too long');\n    }\n    const padded = new Uint8Array(length);\n    const offset = length - bytes.length;\n    padded.set(bytes, offset);\n    return padded;\n  },\n\n  /**\n   * Convert a Uint8Array to an MPI-formatted Uint8Array.\n   * @param {Uint8Array} bin - An array of 8-bit integers to convert\n   * @returns {Uint8Array} MPI-formatted Uint8Array.\n   */\n  uint8ArrayToMPI: function (bin) {\n    const bitSize = util.uint8ArrayBitLength(bin);\n    if (bitSize === 0) {\n      throw new Error('Zero MPI');\n    }\n    const stripped = bin.subarray(bin.length - Math.ceil(bitSize / 8));\n    const prefix = new Uint8Array([(bitSize & 0xFF00) >> 8, bitSize & 0xFF]);\n    return util.concatUint8Array([prefix, stripped]);\n  },\n\n  /**\n   * Return bit length of the input data\n   * @param {Uint8Array} bin input data (big endian)\n   * @returns bit length\n   */\n  uint8ArrayBitLength: function (bin) {\n    let i; // index of leading non-zero byte\n    for (i = 0; i < bin.length; i++) if (bin[i] !== 0) break;\n    if (i === bin.length) {\n      return 0;\n    }\n    const stripped = bin.subarray(i);\n    return (stripped.length - 1) * 8 + util.nbits(stripped[0]);\n  },\n\n  /**\n   * Convert a hex string to an array of 8-bit integers\n   * @param {String} hex - A hex string to convert\n   * @returns {Uint8Array} An array of 8-bit integers.\n   */\n  hexToUint8Array: function (hex) {\n    const result = new Uint8Array(hex.length >> 1);\n    for (let k = 0; k < hex.length >> 1; k++) {\n      result[k] = parseInt(hex.substr(k << 1, 2), 16);\n    }\n    return result;\n  },\n\n  /**\n   * Convert an array of 8-bit integers to a hex string\n   * @param {Uint8Array} bytes - Array of 8-bit integers to convert\n   * @returns {String} Hexadecimal representation of the array.\n   */\n  uint8ArrayToHex: function (bytes) {\n    const hexAlphabet = '0123456789abcdef';\n    let s = '';\n    bytes.forEach(v => { s += hexAlphabet[v >> 4] + hexAlphabet[v & 15]; });\n    return s;\n  },\n\n  /**\n   * Convert a string to an array of 8-bit integers\n   * @param {String} str - String to convert\n   * @returns {Uint8Array} An array of 8-bit integers.\n   */\n  stringToUint8Array: function (str) {\n    return streamTransform(str, str => {\n      if (!util.isString(str)) {\n        throw new Error('stringToUint8Array: Data must be in the form of a string');\n      }\n\n      const result = new Uint8Array(str.length);\n      for (let i = 0; i < str.length; i++) {\n        result[i] = str.charCodeAt(i);\n      }\n      return result;\n    });\n  },\n\n  /**\n   * Convert an array of 8-bit integers to a string\n   * @param {Uint8Array} bytes - An array of 8-bit integers to convert\n   * @returns {String} String representation of the array.\n   */\n  uint8ArrayToString: function (bytes) {\n    bytes = new Uint8Array(bytes);\n    const result = [];\n    const bs = 1 << 14;\n    const j = bytes.length;\n\n    for (let i = 0; i < j; i += bs) {\n      result.push(String.fromCharCode.apply(String, bytes.subarray(i, i + bs < j ? i + bs : j)));\n    }\n    return result.join('');\n  },\n\n  /**\n   * Convert a native javascript string to a Uint8Array of utf8 bytes\n   * @param {String|ReadableStream} str - The string to convert\n   * @returns {Uint8Array|ReadableStream} A valid squence of utf8 bytes.\n   */\n  encodeUTF8: function (str) {\n    const encoder = new TextEncoder('utf-8');\n    // eslint-disable-next-line no-inner-declarations\n    function process(value, lastChunk = false) {\n      return encoder.encode(value, { stream: !lastChunk });\n    }\n    return streamTransform(str, process, () => process('', true));\n  },\n\n  /**\n   * Convert a Uint8Array of utf8 bytes to a native javascript string\n   * @param {Uint8Array|ReadableStream} utf8 - A valid squence of utf8 bytes\n   * @returns {String|ReadableStream} A native javascript string.\n   */\n  decodeUTF8: function (utf8) {\n    const decoder = new TextDecoder('utf-8');\n    // eslint-disable-next-line no-inner-declarations\n    function process(value, lastChunk = false) {\n      return decoder.decode(value, { stream: !lastChunk });\n    }\n    return streamTransform(utf8, process, () => process(new Uint8Array(), true));\n  },\n\n  /**\n   * Concat a list of Uint8Arrays, Strings or Streams\n   * The caller must not mix Uint8Arrays with Strings, but may mix Streams with non-Streams.\n   * @param {Array<Uint8Array|String|ReadableStream>} Array - Of Uint8Arrays/Strings/Streams to concatenate\n   * @returns {Uint8Array|String|ReadableStream} Concatenated array.\n   */\n  concat: streamConcat,\n\n  /**\n   * Concat Uint8Arrays\n   * @param {Array<Uint8Array>} Array - Of Uint8Arrays to concatenate\n   * @returns {Uint8Array} Concatenated array.\n   */\n  concatUint8Array: concatUint8Array,\n\n  /**\n   * Check Uint8Array equality\n   * @param {Uint8Array} array1 - First array\n   * @param {Uint8Array} array2 - Second array\n   * @returns {Boolean} Equality.\n   */\n  equalsUint8Array: function (array1, array2) {\n    if (!util.isUint8Array(array1) || !util.isUint8Array(array2)) {\n      throw new Error('Data must be in the form of a Uint8Array');\n    }\n\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    for (let i = 0; i < array1.length; i++) {\n      if (array1[i] !== array2[i]) {\n        return false;\n      }\n    }\n    return true;\n  },\n\n  /**\n   * Same as Array.findLastIndex, which is not supported on Safari 14 .\n   * @param {Array} arr\n   * @param {function(element, index, arr): boolean} findFn\n   * @return index of last element matching `findFn`, -1 if not found\n   */\n  findLastIndex: function(arr, findFn) {\n    for (let i = arr.length; i >= 0; i--) {\n      if (findFn(arr[i], i, arr)) {\n        return i;\n      }\n    }\n    return -1;\n  },\n\n  /**\n   * Calculates a 16bit sum of a Uint8Array by adding each character\n   * codes modulus 65535\n   * @param {Uint8Array} Uint8Array - To create a sum of\n   * @returns {Uint8Array} 2 bytes containing the sum of all charcodes % 65535.\n   */\n  writeChecksum: function (text) {\n    let s = 0;\n    for (let i = 0; i < text.length; i++) {\n      s = (s + text[i]) & 0xFFFF;\n    }\n    return util.writeNumber(s, 2);\n  },\n\n  /**\n   * Helper function to print a debug message. Debug\n   * messages are only printed if\n   * @param {String} str - String of the debug message\n   */\n  printDebug: function (str) {\n    if (debugMode) {\n      console.log('[OpenPGP.js debug]', str);\n    }\n  },\n\n  /**\n   * Helper function to print a debug error. Debug\n   * messages are only printed if\n   * @param {String} str - String of the debug message\n   */\n  printDebugError: function (error) {\n    if (debugMode) {\n      console.error('[OpenPGP.js debug]', error);\n    }\n  },\n\n  // returns bit length of the integer x\n  nbits: function (x) {\n    let r = 1;\n    let t = x >>> 16;\n    if (t !== 0) {\n      x = t;\n      r += 16;\n    }\n    t = x >> 8;\n    if (t !== 0) {\n      x = t;\n      r += 8;\n    }\n    t = x >> 4;\n    if (t !== 0) {\n      x = t;\n      r += 4;\n    }\n    t = x >> 2;\n    if (t !== 0) {\n      x = t;\n      r += 2;\n    }\n    t = x >> 1;\n    if (t !== 0) {\n      x = t;\n      r += 1;\n    }\n    return r;\n  },\n\n  /**\n   * If S[1] == 0, then double(S) == (S[2..128] || 0);\n   * otherwise, double(S) == (S[2..128] || 0) xor\n   * (zeros(120) || 10000111).\n   *\n   * Both OCB and EAX (through CMAC) require this function to be constant-time.\n   *\n   * @param {Uint8Array} data\n   */\n  double: function(data) {\n    const doubleVar = new Uint8Array(data.length);\n    const last = data.length - 1;\n    for (let i = 0; i < last; i++) {\n      doubleVar[i] = (data[i] << 1) ^ (data[i + 1] >> 7);\n    }\n    doubleVar[last] = (data[last] << 1) ^ ((data[0] >> 7) * 0x87);\n    return doubleVar;\n  },\n\n  /**\n   * Shift a Uint8Array to the right by n bits\n   * @param {Uint8Array} array - The array to shift\n   * @param {Integer} bits - Amount of bits to shift (MUST be smaller\n   * than 8)\n   * @returns {String} Resulting array.\n   */\n  shiftRight: function (array, bits) {\n    if (bits) {\n      for (let i = array.length - 1; i >= 0; i--) {\n        array[i] >>= bits;\n        if (i > 0) {\n          array[i] |= (array[i - 1] << (8 - bits));\n        }\n      }\n    }\n    return array;\n  },\n\n  /**\n   * Get native Web Cryptography API.\n   * @returns {Object} The SubtleCrypto API\n   * @throws if the API is not available\n   */\n  getWebCrypto: function() {\n    const globalWebCrypto = typeof globalThis !== 'undefined' && globalThis.crypto && globalThis.crypto.subtle;\n    // Fallback for Node 16, which does not expose WebCrypto as a global\n    const webCrypto = globalWebCrypto || this.getNodeCrypto()?.webcrypto.subtle;\n    if (!webCrypto) {\n      throw new Error('The WebCrypto API is not available');\n    }\n    return webCrypto;\n  },\n\n  /**\n   * Get native Node.js crypto api.\n   * @returns {Object} The crypto module or 'undefined'.\n   */\n  getNodeCrypto: function() {\n    return this.nodeRequire('crypto');\n  },\n\n  getNodeZlib: function() {\n    return this.nodeRequire('zlib');\n  },\n\n  /**\n   * Get native Node.js Buffer constructor. This should be used since\n   * Buffer is not available under browserify.\n   * @returns {Function} The Buffer constructor or 'undefined'.\n   */\n  getNodeBuffer: function() {\n    return (this.nodeRequire('buffer') || {}).Buffer;\n  },\n\n  getHardwareConcurrency: function() {\n    if (typeof navigator !== 'undefined') {\n      return navigator.hardwareConcurrency || 1;\n    }\n\n    const os = this.nodeRequire('os'); // Assume we're on Node.js.\n    return os.cpus().length;\n  },\n\n  /**\n   * Test email format to ensure basic compliance:\n   * - must include a single @\n   * - no control or space unicode chars allowed\n   * - no backslash and square brackets (as the latter can mess with the userID parsing)\n   * - cannot end with a punctuation char\n   * These checks are not meant to be exhaustive; applications are strongly encouraged to implement stricter validation,\n   * e.g. based on the W3C HTML spec (https://html.spec.whatwg.org/multipage/input.html#email-state-(type=email)).\n   */\n  isEmailAddress: function(data) {\n    if (!util.isString(data)) {\n      return false;\n    }\n    const re = /^[^\\p{C}\\p{Z}@<>\\\\]+@[^\\p{C}\\p{Z}@<>\\\\]+[^\\p{C}\\p{Z}\\p{P}]$/u;\n    return re.test(data);\n  },\n\n  /**\n   * Normalize line endings to <CR><LF>\n   * Support any encoding where CR=0x0D, LF=0x0A\n   */\n  canonicalizeEOL: function(data) {\n    const CR = 13;\n    const LF = 10;\n    let carryOverCR = false;\n\n    return streamTransform(data, bytes => {\n      if (carryOverCR) {\n        bytes = util.concatUint8Array([new Uint8Array([CR]), bytes]);\n      }\n\n      if (bytes[bytes.length - 1] === CR) {\n        carryOverCR = true;\n        bytes = bytes.subarray(0, -1);\n      } else {\n        carryOverCR = false;\n      }\n\n      let index;\n      const indices = [];\n      for (let i = 0; ; i = index) {\n        index = bytes.indexOf(LF, i) + 1;\n        if (index) {\n          if (bytes[index - 2] !== CR) indices.push(index);\n        } else {\n          break;\n        }\n      }\n      if (!indices.length) {\n        return bytes;\n      }\n\n      const normalized = new Uint8Array(bytes.length + indices.length);\n      let j = 0;\n      for (let i = 0; i < indices.length; i++) {\n        const sub = bytes.subarray(indices[i - 1] || 0, indices[i]);\n        normalized.set(sub, j);\n        j += sub.length;\n        normalized[j - 1] = CR;\n        normalized[j] = LF;\n        j++;\n      }\n      normalized.set(bytes.subarray(indices[indices.length - 1] || 0), j);\n      return normalized;\n    }, () => (carryOverCR ? new Uint8Array([CR]) : undefined));\n  },\n\n  /**\n   * Convert line endings from canonicalized <CR><LF> to native <LF>\n   * Support any encoding where CR=0x0D, LF=0x0A\n   */\n  nativeEOL: function(data) {\n    const CR = 13;\n    const LF = 10;\n    let carryOverCR = false;\n\n    return streamTransform(data, bytes => {\n      if (carryOverCR && bytes[0] !== LF) {\n        bytes = util.concatUint8Array([new Uint8Array([CR]), bytes]);\n      } else {\n        bytes = new Uint8Array(bytes); // Don't mutate passed bytes\n      }\n\n      if (bytes[bytes.length - 1] === CR) {\n        carryOverCR = true;\n        bytes = bytes.subarray(0, -1);\n      } else {\n        carryOverCR = false;\n      }\n\n      let index;\n      let j = 0;\n      for (let i = 0; i !== bytes.length; i = index) {\n        index = bytes.indexOf(CR, i) + 1;\n        if (!index) index = bytes.length;\n        const last = index - (bytes[index] === LF ? 1 : 0);\n        if (i) bytes.copyWithin(j, i, last);\n        j += last - i;\n      }\n      return bytes.subarray(0, j);\n    }, () => (carryOverCR ? new Uint8Array([CR]) : undefined));\n  },\n\n  /**\n   * Remove trailing spaces, carriage returns and tabs from each line\n   */\n  removeTrailingSpaces: function(text) {\n    return text.split('\\n').map(line => {\n      let i = line.length - 1;\n      for (; i >= 0 && (line[i] === ' ' || line[i] === '\\t' || line[i] === '\\r'); i--);\n      return line.substr(0, i + 1);\n    }).join('\\n');\n  },\n\n  wrapError: function(error, cause) {\n    if (!cause) {\n      if (error instanceof Error) {\n        return error;\n      }\n      return new Error(error);\n    }\n\n    if (error instanceof Error) {\n      // update error message\n      try {\n        error.message += ': ' + cause.message;\n        error.cause = cause;\n      } catch (e) {}\n      return error;\n    }\n    return new Error(error + ': ' + cause.message, { cause });\n  },\n\n  /**\n   * Map allowed packet tags to corresponding classes\n   * Meant to be used to format `allowedPacket` for Packetlist.read\n   * @param {Array<Object>} allowedClasses\n   * @returns {Object} map from enum.packet to corresponding *Packet class\n   */\n  constructAllowedPackets: function(allowedClasses) {\n    const map = {};\n    allowedClasses.forEach(PacketClass => {\n      if (!PacketClass.tag) {\n        throw new Error('Invalid input: expected a packet class');\n      }\n      map[PacketClass.tag] = PacketClass;\n    });\n    return map;\n  },\n\n  /**\n   * Return a Promise that will resolve as soon as one of the promises in input resolves\n   * or will reject if all input promises all rejected\n   * (similar to Promise.any, but with slightly different error handling)\n   * @param {Array<Promise>} promises\n   * @return {Promise<Any>} Promise resolving to the result of the fastest fulfilled promise\n   *                          or rejected with the Error of the last resolved Promise (if all promises are rejected)\n   */\n  anyPromise: function(promises) {\n    // eslint-disable-next-line no-async-promise-executor\n    return new Promise(async (resolve, reject) => {\n      let exception;\n      await Promise.all(promises.map(async promise => {\n        try {\n          resolve(await promise);\n        } catch (e) {\n          exception = e;\n        }\n      }));\n      reject(exception);\n    });\n  },\n\n  /**\n   * Return either `a` or `b` based on `cond`, in algorithmic constant time.\n   * @param {Boolean} cond\n   * @param {Uint8Array} a\n   * @param {Uint8Array} b\n   * @returns `a` if `cond` is true, `b` otherwise\n   */\n  selectUint8Array: function(cond, a, b) {\n    const length = Math.max(a.length, b.length);\n    const result = new Uint8Array(length);\n    let end = 0;\n    for (let i = 0; i < result.length; i++) {\n      result[i] = (a[i] & (256 - cond)) | (b[i] & (255 + cond));\n      end += (cond & i < a.length) | ((1 - cond) & i < b.length);\n    }\n    return result.subarray(0, end);\n  },\n  /**\n   * Return either `a` or `b` based on `cond`, in algorithmic constant time.\n   * NB: it only supports `a, b` with values between 0-255.\n   * @param {Boolean} cond\n   * @param {Uint8} a\n   * @param {Uint8} b\n   * @returns `a` if `cond` is true, `b` otherwise\n   */\n  selectUint8: function(cond, a, b) {\n    return (a & (256 - cond)) | (b & (255 + cond));\n  },\n  /**\n   * @param {module:enums.symmetric} cipherAlgo\n   */\n  isAES: function(cipherAlgo) {\n    return cipherAlgo === enums.symmetric.aes128 || cipherAlgo === enums.symmetric.aes192 || cipherAlgo === enums.symmetric.aes256;\n  }\n};\n\nexport default util;\n","/* OpenPGP radix-64/base64 string encoding/decoding\n * Copyright 2005 Herbert Hanewinkel, www.haneWIN.de\n * version 1.0, check www.haneWIN.de for the latest version\n *\n * This software is provided as-is, without express or implied warranty.\n * Permission to use, copy, modify, distribute or sell this software, with or\n * without fee, for any purpose and by any individual or organization, is hereby\n * granted, provided that the above copyright notice and this paragraph appear\n * in all copies. Distribution as a part of an application or binary must\n * include the above copyright notice in the documentation and/or other materials\n * provided with the application or distribution.\n */\n\n/**\n * @module encoding/base64\n */\n\nimport { transform as streamTransform } from '@openpgp/web-stream-tools';\nimport util from '../util';\n\nconst Buffer = util.getNodeBuffer();\n\nlet encodeChunk;\nlet decodeChunk;\nif (Buffer) {\n  encodeChunk = buf => Buffer.from(buf).toString('base64');\n  decodeChunk = str => {\n    const b = Buffer.from(str, 'base64');\n    return new Uint8Array(b.buffer, b.byteOffset, b.byteLength);\n  };\n} else {\n  encodeChunk = buf => btoa(util.uint8ArrayToString(buf));\n  decodeChunk = str => util.stringToUint8Array(atob(str));\n}\n\n/**\n * Convert binary array to radix-64\n * @param {Uint8Array | ReadableStream<Uint8Array>} data - Uint8Array to convert\n * @returns {String | ReadableStream<String>} Radix-64 version of input string.\n * @static\n */\nexport function encode(data) {\n  let buf = new Uint8Array();\n  return streamTransform(data, value => {\n    buf = util.concatUint8Array([buf, value]);\n    const r = [];\n    const bytesPerLine = 45; // 60 chars per line * (3 bytes / 4 chars of base64).\n    const lines = Math.floor(buf.length / bytesPerLine);\n    const bytes = lines * bytesPerLine;\n    const encoded = encodeChunk(buf.subarray(0, bytes));\n    for (let i = 0; i < lines; i++) {\n      r.push(encoded.substr(i * 60, 60));\n      r.push('\\n');\n    }\n    buf = buf.subarray(bytes);\n    return r.join('');\n  }, () => (buf.length ? encodeChunk(buf) + '\\n' : ''));\n}\n\n/**\n * Convert radix-64 to binary array\n * @param {String | ReadableStream<String>} data - Radix-64 string to convert\n * @returns {Uint8Array | ReadableStream<Uint8Array>} Binary array version of input string.\n * @static\n */\nexport function decode(data) {\n  let buf = '';\n  return streamTransform(data, value => {\n    buf += value;\n\n    // Count how many whitespace characters there are in buf\n    let spaces = 0;\n    const spacechars = [' ', '\\t', '\\r', '\\n'];\n    for (let i = 0; i < spacechars.length; i++) {\n      const spacechar = spacechars[i];\n      for (let pos = buf.indexOf(spacechar); pos !== -1; pos = buf.indexOf(spacechar, pos + 1)) {\n        spaces++;\n      }\n    }\n\n    // Backtrack until we have 4n non-whitespace characters\n    // that we can safely base64-decode\n    let length = buf.length;\n    for (; length > 0 && (length - spaces) % 4 !== 0; length--) {\n      if (spacechars.includes(buf[length])) spaces--;\n    }\n\n    const decoded = decodeChunk(buf.substr(0, length));\n    buf = buf.substr(length);\n    return decoded;\n  }, () => decodeChunk(buf));\n}\n\n/**\n * Convert a Base-64 encoded string an array of 8-bit integer\n *\n * Note: accepts both Radix-64 and URL-safe strings\n * @param {String} base64 - Base-64 encoded string to convert\n * @returns {Uint8Array} An array of 8-bit integers.\n */\nexport function b64ToUint8Array(base64) {\n  return decode(base64.replace(/-/g, '+').replace(/_/g, '/'));\n}\n\n/**\n * Convert an array of 8-bit integer to a Base-64 encoded string\n * @param {Uint8Array} bytes - An array of 8-bit integers to convert\n * @param {bool} url - If true, output is URL-safe\n * @returns {String} Base-64 encoded string.\n */\nexport function uint8ArrayToB64(bytes, url) {\n  let encoded = encode(bytes).replace(/[\\r\\n]/g, '');\n  if (url) {\n    encoded = encoded.replace(/[+]/g, '-').replace(/[/]/g, '_').replace(/[=]/g, '');\n  }\n  return encoded;\n}\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport { transform as streamTransform, transformPair as streamTransformPair, getReader as streamGetReader, getWriter as streamGetWriter, isArrayStream, readToEnd as streamReadToEnd, passiveClone as streamPassiveClone } from '@openpgp/web-stream-tools';\nimport { encode as encodeBase64, decode as decodeBase64 } from './base64';\nimport enums from '../enums';\nimport util from '../util';\nimport defaultConfig from '../config';\n\n/**\n * Finds out which Ascii Armoring type is used. Throws error if unknown type.\n * @param {String} text - ascii armored text\n * @returns {Integer} 0 = MESSAGE PART n of m.\n *         1 = MESSAGE PART n\n *         2 = SIGNED MESSAGE\n *         3 = PGP MESSAGE\n *         4 = PUBLIC KEY BLOCK\n *         5 = PRIVATE KEY BLOCK\n *         6 = SIGNATURE\n * @private\n */\nfunction getType(text) {\n  const reHeader = /^-----BEGIN PGP (MESSAGE, PART \\d+\\/\\d+|MESSAGE, PART \\d+|SIGNED MESSAGE|MESSAGE|PUBLIC KEY BLOCK|PRIVATE KEY BLOCK|SIGNATURE)-----$/m;\n\n  const header = text.match(reHeader);\n\n  if (!header) {\n    throw new Error('Unknown ASCII armor type');\n  }\n\n  // BEGIN PGP MESSAGE, PART X/Y\n  // Used for multi-part messages, where the armor is split amongst Y\n  // parts, and this is the Xth part out of Y.\n  if (/MESSAGE, PART \\d+\\/\\d+/.test(header[1])) {\n    return enums.armor.multipartSection;\n  }\n  // BEGIN PGP MESSAGE, PART X\n  // Used for multi-part messages, where this is the Xth part of an\n  // unspecified number of parts. Requires the MESSAGE-ID Armor\n  // Header to be used.\n  if (/MESSAGE, PART \\d+/.test(header[1])) {\n    return enums.armor.multipartLast;\n  }\n  // BEGIN PGP SIGNED MESSAGE\n  if (/SIGNED MESSAGE/.test(header[1])) {\n    return enums.armor.signed;\n  }\n  // BEGIN PGP MESSAGE\n  // Used for signed, encrypted, or compressed files.\n  if (/MESSAGE/.test(header[1])) {\n    return enums.armor.message;\n  }\n  // BEGIN PGP PUBLIC KEY BLOCK\n  // Used for armoring public keys.\n  if (/PUBLIC KEY BLOCK/.test(header[1])) {\n    return enums.armor.publicKey;\n  }\n  // BEGIN PGP PRIVATE KEY BLOCK\n  // Used for armoring private keys.\n  if (/PRIVATE KEY BLOCK/.test(header[1])) {\n    return enums.armor.privateKey;\n  }\n  // BEGIN PGP SIGNATURE\n  // Used for detached signatures, OpenPGP/MIME signatures, and\n  // cleartext signatures. Note that PGP 2.x uses BEGIN PGP MESSAGE\n  // for detached signatures.\n  if (/SIGNATURE/.test(header[1])) {\n    return enums.armor.signature;\n  }\n}\n\n/**\n * Add additional information to the armor version of an OpenPGP binary\n * packet block.\n * @author  Alex\n * @version 2011-12-16\n * @param {String} [customComment] - Additional comment to add to the armored string\n * @returns {String} The header information.\n * @private\n */\nfunction addheader(customComment, config) {\n  let result = '';\n  if (config.showVersion) {\n    result += 'Version: ' + config.versionString + '\\n';\n  }\n  if (config.showComment) {\n    result += 'Comment: ' + config.commentString + '\\n';\n  }\n  if (customComment) {\n    result += 'Comment: ' + customComment + '\\n';\n  }\n  result += '\\n';\n  return result;\n}\n\n/**\n * Calculates a checksum over the given data and returns it base64 encoded\n * @param {String | ReadableStream<String>} data - Data to create a CRC-24 checksum for\n * @returns {String | ReadableStream<String>} Base64 encoded checksum.\n * @private\n */\nfunction getCheckSum(data) {\n  const crc = createcrc24(data);\n  return encodeBase64(crc);\n}\n\n// https://create.stephan-brumme.com/crc32/#slicing-by-8-overview\n\nconst crc_table = [\n  new Array(0xFF),\n  new Array(0xFF),\n  new Array(0xFF),\n  new Array(0xFF)\n];\n\nfor (let i = 0; i <= 0xFF; i++) {\n  let crc = i << 16;\n  for (let j = 0; j < 8; j++) {\n    crc = (crc << 1) ^ ((crc & 0x800000) !== 0 ? 0x864CFB : 0);\n  }\n  crc_table[0][i] =\n    ((crc & 0xFF0000) >> 16) |\n    (crc & 0x00FF00) |\n    ((crc & 0x0000FF) << 16);\n}\nfor (let i = 0; i <= 0xFF; i++) {\n  crc_table[1][i] = (crc_table[0][i] >> 8) ^ crc_table[0][crc_table[0][i] & 0xFF];\n}\nfor (let i = 0; i <= 0xFF; i++) {\n  crc_table[2][i] = (crc_table[1][i] >> 8) ^ crc_table[0][crc_table[1][i] & 0xFF];\n}\nfor (let i = 0; i <= 0xFF; i++) {\n  crc_table[3][i] = (crc_table[2][i] >> 8) ^ crc_table[0][crc_table[2][i] & 0xFF];\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView#Endianness\nconst isLittleEndian = (function() {\n  const buffer = new ArrayBuffer(2);\n  new DataView(buffer).setInt16(0, 0xFF, true /* littleEndian */);\n  // Int16Array uses the platform's endianness.\n  return new Int16Array(buffer)[0] === 0xFF;\n}());\n\n/**\n * Internal function to calculate a CRC-24 checksum over a given string (data)\n * @param {String | ReadableStream<String>} input - Data to create a CRC-24 checksum for\n * @returns {Uint8Array | ReadableStream<Uint8Array>} The CRC-24 checksum.\n * @private\n */\nfunction createcrc24(input) {\n  let crc = 0xCE04B7;\n  return streamTransform(input, value => {\n    const len32 = isLittleEndian ? Math.floor(value.length / 4) : 0;\n    const arr32 = new Uint32Array(value.buffer, value.byteOffset, len32);\n    for (let i = 0; i < len32; i++) {\n      crc ^= arr32[i];\n      crc =\n        crc_table[0][(crc >> 24) & 0xFF] ^\n        crc_table[1][(crc >> 16) & 0xFF] ^\n        crc_table[2][(crc >> 8) & 0xFF] ^\n        crc_table[3][(crc >> 0) & 0xFF];\n    }\n    for (let i = len32 * 4; i < value.length; i++) {\n      crc = (crc >> 8) ^ crc_table[0][(crc & 0xFF) ^ value[i]];\n    }\n  }, () => new Uint8Array([crc, crc >> 8, crc >> 16]));\n}\n\n/**\n * Verify armored headers. crypto-refresh-06, section 6.2:\n * \"An OpenPGP implementation may consider improperly formatted Armor\n * Headers to be corruption of the ASCII Armor, but SHOULD make an\n * effort to recover.\"\n * @private\n * @param {Array<String>} headers - Armor headers\n */\nfunction verifyHeaders(headers) {\n  for (let i = 0; i < headers.length; i++) {\n    if (!/^([^\\s:]|[^\\s:][^:]*[^\\s:]): .+$/.test(headers[i])) {\n      util.printDebugError(new Error('Improperly formatted armor header: ' + headers[i]));\n    }\n    if (!/^(Version|Comment|MessageID|Hash|Charset): .+$/.test(headers[i])) {\n      util.printDebugError(new Error('Unknown header: ' + headers[i]));\n    }\n  }\n}\n\n/**\n * Remove the (optional) checksum from an armored message.\n * @param {String} text - OpenPGP armored message\n * @returns {String} The body of the armored message.\n * @private\n */\nfunction removeChecksum(text) {\n  let body = text;\n\n  const lastEquals = text.lastIndexOf('=');\n\n  if (lastEquals >= 0 && lastEquals !== text.length - 1) { // '=' as the last char means no checksum\n    body = text.slice(0, lastEquals);\n  }\n\n  return body;\n}\n\n/**\n * Dearmor an OpenPGP armored message; verify the checksum and return\n * the encoded bytes\n * @param {String} input - OpenPGP armored message\n * @returns {Promise<Object>} An object with attribute \"text\" containing the message text,\n * an attribute \"data\" containing a stream of bytes and \"type\" for the ASCII armor type\n * @async\n * @static\n */\nexport function unarmor(input) {\n  // eslint-disable-next-line no-async-promise-executor\n  return new Promise(async (resolve, reject) => {\n    try {\n      const reSplit = /^-----[^-]+-----$/m;\n      const reEmptyLine = /^[ \\f\\r\\t\\u00a0\\u2000-\\u200a\\u202f\\u205f\\u3000]*$/;\n\n      let type;\n      const headers = [];\n      let lastHeaders = headers;\n      let headersDone;\n      let text = [];\n      let textDone;\n      const data = decodeBase64(streamTransformPair(input, async (readable, writable) => {\n        const reader = streamGetReader(readable);\n        try {\n          while (true) {\n            let line = await reader.readLine();\n            if (line === undefined) {\n              throw new Error('Misformed armored text');\n            }\n            // remove trailing whitespace at end of lines\n            line = util.removeTrailingSpaces(line.replace(/[\\r\\n]/g, ''));\n            if (!type) {\n              if (reSplit.test(line)) {\n                type = getType(line);\n              }\n            } else if (!headersDone) {\n              if (reSplit.test(line)) {\n                reject(new Error('Mandatory blank line missing between armor headers and armor data'));\n              }\n              if (!reEmptyLine.test(line)) {\n                lastHeaders.push(line);\n              } else {\n                verifyHeaders(lastHeaders);\n                headersDone = true;\n                if (textDone || type !== enums.armor.signed) {\n                  resolve({ text, data, headers, type });\n                  break;\n                }\n              }\n            } else if (!textDone && type === enums.armor.signed) {\n              if (!reSplit.test(line)) {\n                // Reverse dash-escaping for msg\n                text.push(line.replace(/^- /, ''));\n              } else {\n                text = text.join('\\r\\n');\n                textDone = true;\n                verifyHeaders(lastHeaders);\n                lastHeaders = [];\n                headersDone = false;\n              }\n            }\n          }\n        } catch (e) {\n          reject(e);\n          return;\n        }\n        const writer = streamGetWriter(writable);\n        try {\n          while (true) {\n            await writer.ready;\n            const { done, value } = await reader.read();\n            if (done) {\n              throw new Error('Misformed armored text');\n            }\n            const line = value + '';\n            if (line.indexOf('=') === -1 && line.indexOf('-') === -1) {\n              await writer.write(line);\n            } else {\n              let remainder = await reader.readToEnd();\n              if (!remainder.length) remainder = '';\n              remainder = line + remainder;\n              remainder = util.removeTrailingSpaces(remainder.replace(/\\r/g, ''));\n              const parts = remainder.split(reSplit);\n              if (parts.length === 1) {\n                throw new Error('Misformed armored text');\n              }\n              const body = removeChecksum(parts[0].slice(0, -1));\n              await writer.write(body);\n              break;\n            }\n          }\n          await writer.ready;\n          await writer.close();\n        } catch (e) {\n          await writer.abort(e);\n        }\n      }));\n    } catch (e) {\n      reject(e);\n    }\n  }).then(async result => {\n    if (isArrayStream(result.data)) {\n      result.data = await streamReadToEnd(result.data);\n    }\n    return result;\n  });\n}\n\n\n/**\n * Armor an OpenPGP binary packet block\n * @param {module:enums.armor} messageType - Type of the message\n * @param {Uint8Array | ReadableStream<Uint8Array>} body - The message body to armor\n * @param {Integer} [partIndex]\n * @param {Integer} [partTotal]\n * @param {String} [customComment] - Additional comment to add to the armored string\n * @param {Boolean} [emitChecksum] - Whether to compute and include the CRC checksum\n *  (NB: some types of data must not include it, but compliance is left as responsibility of the caller: this function does not carry out any checks)\n * @param {Object} [config] - Full configuration, defaults to openpgp.config\n * @returns {String | ReadableStream<String>} Armored text.\n * @static\n */\nexport function armor(messageType, body, partIndex, partTotal, customComment, emitChecksum = false, config = defaultConfig) {\n  let text;\n  let hash;\n  if (messageType === enums.armor.signed) {\n    text = body.text;\n    hash = body.hash;\n    body = body.data;\n  }\n  // unless explicitly forbidden by the spec, we need to include the checksum to work around a GnuPG bug\n  // where data fails to be decoded if the base64 ends with no padding chars (=) (see https://dev.gnupg.org/T7071)\n  const maybeBodyClone = emitChecksum && streamPassiveClone(body);\n\n  const result = [];\n  switch (messageType) {\n    case enums.armor.multipartSection:\n      result.push('-----BEGIN PGP MESSAGE, PART ' + partIndex + '/' + partTotal + '-----\\n');\n      result.push(addheader(customComment, config));\n      result.push(encodeBase64(body));\n      maybeBodyClone && result.push('=', getCheckSum(maybeBodyClone));\n      result.push('-----END PGP MESSAGE, PART ' + partIndex + '/' + partTotal + '-----\\n');\n      break;\n    case enums.armor.multipartLast:\n      result.push('-----BEGIN PGP MESSAGE, PART ' + partIndex + '-----\\n');\n      result.push(addheader(customComment, config));\n      result.push(encodeBase64(body));\n      maybeBodyClone && result.push('=', getCheckSum(maybeBodyClone));\n      result.push('-----END PGP MESSAGE, PART ' + partIndex + '-----\\n');\n      break;\n    case enums.armor.signed:\n      result.push('-----BEGIN PGP SIGNED MESSAGE-----\\n');\n      result.push(hash ? `Hash: ${hash}\\n\\n` : '\\n');\n      result.push(text.replace(/^-/mg, '- -'));\n      result.push('\\n-----BEGIN PGP SIGNATURE-----\\n');\n      result.push(addheader(customComment, config));\n      result.push(encodeBase64(body));\n      maybeBodyClone && result.push('=', getCheckSum(maybeBodyClone));\n      result.push('-----END PGP SIGNATURE-----\\n');\n      break;\n    case enums.armor.message:\n      result.push('-----BEGIN PGP MESSAGE-----\\n');\n      result.push(addheader(customComment, config));\n      result.push(encodeBase64(body));\n      maybeBodyClone && result.push('=', getCheckSum(maybeBodyClone));\n      result.push('-----END PGP MESSAGE-----\\n');\n      break;\n    case enums.armor.publicKey:\n      result.push('-----BEGIN PGP PUBLIC KEY BLOCK-----\\n');\n      result.push(addheader(customComment, config));\n      result.push(encodeBase64(body));\n      maybeBodyClone && result.push('=', getCheckSum(maybeBodyClone));\n      result.push('-----END PGP PUBLIC KEY BLOCK-----\\n');\n      break;\n    case enums.armor.privateKey:\n      result.push('-----BEGIN PGP PRIVATE KEY BLOCK-----\\n');\n      result.push(addheader(customComment, config));\n      result.push(encodeBase64(body));\n      maybeBodyClone && result.push('=', getCheckSum(maybeBodyClone));\n      result.push('-----END PGP PRIVATE KEY BLOCK-----\\n');\n      break;\n    case enums.armor.signature:\n      result.push('-----BEGIN PGP SIGNATURE-----\\n');\n      result.push(addheader(customComment, config));\n      result.push(encodeBase64(body));\n      maybeBodyClone && result.push('=', getCheckSum(maybeBodyClone));\n      result.push('-----END PGP SIGNATURE-----\\n');\n      break;\n  }\n\n  return util.concat(result);\n}\n","// Operations are not constant time, but we try and limit timing leakage where we can\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport function uint8ArrayToBigInt(bytes: Uint8Array) {\n  const hexAlphabet = '0123456789ABCDEF';\n  let s = '';\n  bytes.forEach(v => {\n    s += hexAlphabet[v >> 4] + hexAlphabet[v & 15];\n  });\n  return BigInt('0x0' + s);\n}\n\nexport function mod(a: bigint, m: bigint) {\n  const reduced = a % m;\n  return reduced < _0n ? reduced + m : reduced;\n}\n\n/**\n * Compute modular exponentiation using square and multiply\n * @param {BigInt} a - Base\n * @param {BigInt} e - Exponent\n * @param {BigInt} n - Modulo\n * @returns {BigInt} b ** e mod n.\n */\nexport function modExp(b: bigint, e: bigint, n: bigint) {\n  if (n === _0n) throw Error('Modulo cannot be zero');\n  if (n === _1n) return BigInt(0);\n  if (e < _0n) throw Error('Unsopported negative exponent');\n\n  let exp = e;\n  let x = b;\n\n  x %= n;\n  let r = BigInt(1);\n  while (exp > _0n) {\n    const lsb = exp & _1n;\n    exp >>= _1n; // e / 2\n    // Always compute multiplication step, to reduce timing leakage\n    const rx = (r * x) % n;\n    // Update r only if lsb is 1 (odd exponent)\n    r = lsb ? rx : r;\n    x = (x * x) % n; // Square\n  }\n  return r;\n}\n\n\nfunction abs(x: bigint) {\n  return x >= _0n ? x : -x;\n}\n\n/**\n * Extended Eucleadian algorithm (http://anh.cs.luc.edu/331/notes/xgcd.pdf)\n * Given a and b, compute (x, y) such that ax + by = gdc(a, b).\n * Negative numbers are also supported.\n * @param {BigInt} a - First operand\n * @param {BigInt} b - Second operand\n * @returns {{ gcd, x, y: bigint }}\n */\nfunction _egcd(aInput: bigint, bInput: bigint) {\n  let x = BigInt(0);\n  let y = BigInt(1);\n  let xPrev = BigInt(1);\n  let yPrev = BigInt(0);\n\n  // Deal with negative numbers: run algo over absolute values,\n  // and \"move\" the sign to the returned x and/or y.\n  // See https://math.stackexchange.com/questions/37806/extended-euclidean-algorithm-with-negative-numbers\n  let a = abs(aInput);\n  let b = abs(bInput);\n  const aNegated = aInput < _0n;\n  const bNegated = bInput < _0n;\n\n  while (b !== _0n) {\n    const q = a / b;\n    let tmp = x;\n    x = xPrev - q * x;\n    xPrev = tmp;\n\n    tmp = y;\n    y = yPrev - q * y;\n    yPrev = tmp;\n\n    tmp = b;\n    b = a % b;\n    a = tmp;\n  }\n\n  return {\n    x: aNegated ? -xPrev : xPrev,\n    y: bNegated ? -yPrev : yPrev,\n    gcd: a\n  };\n}\n\n/**\n * Compute the inverse of `a` modulo `n`\n * Note: `a` and and `n` must be relatively prime\n * @param {BigInt} a\n * @param {BigInt} n - Modulo\n * @returns {BigInt} x such that a*x = 1 mod n\n * @throws {Error} if the inverse does not exist\n */\nexport function modInv(a: bigint, n: bigint) {\n  const { gcd, x } = _egcd(a, n);\n  if (gcd !== _1n) {\n    throw new Error('Inverse does not exist');\n  }\n  return mod(x + n, n);\n}\n\n/**\n * Compute greatest common divisor between this and n\n * @param {BigInt} aInput - Operand\n * @param {BigInt} bInput - Operand\n * @returns {BigInt} gcd\n */\nexport function gcd(aInput: bigint, bInput: bigint) {\n  let a = aInput;\n  let b = bInput;\n  while (b !== _0n) {\n    const tmp = b;\n    b = a % b;\n    a = tmp;\n  }\n  return a;\n}\n\n/**\n * Get this value as an exact Number (max 53 bits)\n * Fails if this value is too large\n * @returns {Number}\n */\nexport function bigIntToNumber(x: bigint) {\n  const number = Number(x);\n  if (number > Number.MAX_SAFE_INTEGER) {\n    // We throw and error to conform with the bn.js implementation\n    throw new Error('Number can only safely store up to 53 bits');\n  }\n  return number;\n}\n\n/**\n * Get value of i-th bit\n * @param {BigInt} x\n * @param {Number} i - Bit index\n * @returns {Number} Bit value.\n */\nexport function getBit(x:bigint, i: number) {\n  const bit = (x >> BigInt(i)) & _1n;\n  return bit === _0n ? 0 : 1;\n}\n\n/**\n * Compute bit length\n */\nexport function bitLength(x: bigint) {\n  // -1n >> -1n is -1n\n  // 1n >> 1n is 0n\n  const target = x < _0n ? BigInt(-1) : _0n;\n  let bitlen = 1;\n  let tmp = x;\n  // eslint-disable-next-line no-cond-assign\n  while ((tmp >>= _1n) !== target) {\n    bitlen++;\n  }\n  return bitlen;\n}\n\n/**\n * Compute byte length\n */\nexport function byteLength(x: bigint) {\n  const target = x < _0n ? BigInt(-1) : _0n;\n  const _8n = BigInt(8);\n  let len = 1;\n  let tmp = x;\n  // eslint-disable-next-line no-cond-assign\n  while ((tmp >>= _8n) !== target) {\n    len++;\n  }\n  return len;\n}\n\n/**\n * Get Uint8Array representation of this number\n * @param {String} endian - Endianess of output array (defaults to 'be')\n * @param {Number} length - Of output array\n * @returns {Uint8Array}\n */\nexport function bigIntToUint8Array(x: bigint, endian = 'be', length: number) {\n  // we get and parse the hex string (https://coolaj86.com/articles/convert-js-bigints-to-typedarrays/)\n  // this is faster than shift+mod iterations\n  let hex = x.toString(16);\n  if (hex.length % 2 === 1) {\n    hex = '0' + hex;\n  }\n\n  const rawLength = hex.length / 2;\n  const bytes = new Uint8Array(length || rawLength);\n  // parse hex\n  const offset = length ? length - rawLength : 0;\n  let i = 0;\n  while (i < rawLength) {\n    bytes[i + offset] = parseInt(hex.slice(2 * i, 2 * i + 2), 16);\n    i++;\n  }\n\n  if (endian !== 'be') {\n    bytes.reverse();\n  }\n\n  return bytes;\n}\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n// The GPG4Browsers crypto interface\n\n/**\n * @fileoverview Provides tools for retrieving secure randomness from browsers or Node.js\n * @module crypto/random\n */\nimport { byteLength, mod, uint8ArrayToBigInt } from './biginteger';\nimport util from '../util';\n\nconst nodeCrypto = util.getNodeCrypto();\n\n/**\n * Retrieve secure random byte array of the specified length\n * @param {Integer} length - Length in bytes to generate\n * @returns {Uint8Array} Random byte array.\n */\nexport function getRandomBytes(length) {\n  const webcrypto = typeof crypto !== 'undefined' ? crypto : nodeCrypto?.webcrypto;\n  if (webcrypto?.getRandomValues) {\n    const buf = new Uint8Array(length);\n    return webcrypto.getRandomValues(buf);\n  } else {\n    throw new Error('No secure random number generator available.');\n  }\n}\n\n/**\n * Create a secure random BigInt that is greater than or equal to min and less than max.\n * @param {bigint} min - Lower bound, included\n * @param {bigint} max - Upper bound, excluded\n * @returns {bigint} Random BigInt.\n * @async\n */\nexport function getRandomBigInteger(min, max) {\n  if (max < min) {\n    throw new Error('Illegal parameter value: max <= min');\n  }\n\n  const modulus = max - min;\n  const bytes = byteLength(modulus);\n\n  // Using a while loop is necessary to avoid bias introduced by the mod operation.\n  // However, we request 64 extra random bits so that the bias is negligible.\n  // Section B.1.1 here: https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf\n  const r = uint8ArrayToBigInt(getRandomBytes(bytes + 8));\n  return mod(r, modulus) + min;\n}\n","// OpenPGP.js - An OpenPGP implementation in javascript\n// Copyright (C) 2018 Proton Technologies AG\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n/**\n * @fileoverview Algorithms for probabilistic random prime generation\n * @module crypto/public_key/prime\n */\nimport { bigIntToNumber, bitLength, gcd, getBit, mod, modExp } from '../biginteger';\nimport { getRandomBigInteger } from '../random';\n\nconst _1n = BigInt(1);\n\n/**\n * Generate a probably prime random number\n * @param bits - Bit length of the prime\n * @param e - Optional RSA exponent to check against the prime\n * @param k - Optional number of iterations of Miller-Rabin test\n */\nexport function randomProbablePrime(bits: number, e: bigint, k: number) {\n  const _30n = BigInt(30);\n  const min = _1n << BigInt(bits - 1);\n  /*\n   * We can avoid any multiples of 3 and 5 by looking at n mod 30\n   * n mod 30 = 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\n   * the next possible prime is mod 30:\n   *            1  7  7  7  7  7  7 11 11 11 11 13 13 17 17 17 17 19 19 23 23 23 23 29 29 29 29 29 29 1\n   */\n  const adds = [1, 6, 5, 4, 3, 2, 1, 4, 3, 2, 1, 2, 1, 4, 3, 2, 1, 2, 1, 4, 3, 2, 1, 6, 5, 4, 3, 2, 1, 2];\n\n  let n = getRandomBigInteger(min, min << _1n);\n  let i = bigIntToNumber(mod(n, _30n));\n\n  do {\n    n += BigInt(adds[i]);\n    i = (i + adds[i]) % adds.length;\n    // If reached the maximum, go back to the minimum.\n    if (bitLength(n) > bits) {\n      n = mod(n, min << _1n); n += min;\n      i = bigIntToNumber(mod(n, _30n));\n    }\n  } while (!isProbablePrime(n, e, k));\n  return n;\n}\n\n/**\n * Probabilistic primality testing\n * @param n - Number to test\n * @param e - Optional RSA exponent to check against the prime\n * @param k - Optional number of iterations of Miller-Rabin test\n */\nexport function isProbablePrime(n: bigint, e: bigint, k: number) {\n  if (e && gcd(n - _1n, e) !== _1n) {\n    return false;\n  }\n  if (!divisionTest(n)) {\n    return false;\n  }\n  if (!fermat(n)) {\n    return false;\n  }\n  if (!millerRabin(n, k)) {\n    return false;\n  }\n  // TODO implement the Lucas test\n  // See Section C.3.3 here: https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf\n  return true;\n}\n\n/**\n * Tests whether n is probably prime or not using Fermat's test with b = 2.\n * Fails if b^(n-1) mod n != 1.\n * @param n - Number to test\n * @param b - Optional Fermat test base\n */\nexport function fermat(n: bigint, b = BigInt(2)) {\n  return modExp(b, n - _1n, n) === _1n;\n}\n\nexport function divisionTest(n: bigint) {\n  const _0n = BigInt(0);\n  return smallPrimes.every(m => mod(n, m) !== _0n);\n}\n\n// https://github.com/gpg/libgcrypt/blob/master/cipher/primegen.c\nconst smallPrimes = [\n  7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\n  47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,\n  103, 107, 109, 113, 127, 131, 137, 139, 149, 151,\n  157, 163, 167, 173, 179, 181, 191, 193, 197, 199,\n  211, 223, 227, 229, 233, 239, 241, 251, 257, 263,\n  269, 271, 277, 281, 283, 293, 307, 311, 313, 317,\n  331, 337, 347, 349, 353, 359, 367, 373, 379, 383,\n  389, 397, 401, 409, 419, 421, 431, 433, 439, 443,\n  449, 457, 461, 463, 467, 479, 487, 491, 499, 503,\n  509, 521, 523, 541, 547, 557, 563, 569, 571, 577,\n  587, 593, 599, 601, 607, 613, 617, 619, 631, 641,\n  643, 647, 653, 659, 661, 673, 677, 683, 691, 701,\n  709, 719, 727, 733, 739, 743, 751, 757, 761, 769,\n  773, 787, 797, 809, 811, 821, 823, 827, 829, 839,\n  853, 857, 859, 863, 877, 881, 883, 887, 907, 911,\n  919, 929, 937, 941, 947, 953, 967, 971, 977, 983,\n  991, 997, 1009, 1013, 1019, 1021, 1031, 1033,\n  1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091,\n  1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151,\n  1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213,\n  1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277,\n  1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307,\n  1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399,\n  1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451,\n  1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493,\n  1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559,\n  1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609,\n  1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667,\n  1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733,\n  1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789,\n  1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871,\n  1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931,\n  1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997,\n  1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053,\n  2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111,\n  2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161,\n  2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243,\n  2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297,\n  2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357,\n  2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411,\n  2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473,\n  2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551,\n  2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633,\n  2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687,\n  2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729,\n  2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791,\n  2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851,\n  2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917,\n  2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999,\n  3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061,\n  3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137,\n  3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209,\n  3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271,\n  3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331,\n  3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391,\n  3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467,\n  3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533,\n  3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583,\n  3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643,\n  3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709,\n  3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779,\n  3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851,\n  3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917,\n  3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989,\n  4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049,\n  4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111,\n  4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177,\n  4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243,\n  4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297,\n  4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391,\n  4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457,\n  4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519,\n  4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597,\n  4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657,\n  4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729,\n  4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799,\n  4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889,\n  4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951,\n  4957, 4967, 4969, 4973, 4987, 4993, 4999\n].map(n => BigInt(n));\n\n\n// Miller-Rabin - Miller Rabin algorithm for primality test\n// Copyright Fedor Indutny, 2014.\n//\n// This software is licensed under the MIT License.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Adapted on Jan 2018 from version 4.0.1 at https://github.com/indutny/miller-rabin\n\n// Sample syntax for Fixed-Base Miller-Rabin:\n// millerRabin(n, k, () => new BN(small_primes[Math.random() * small_primes.length | 0]))\n\n/**\n * Tests whether n is probably prime or not using the Miller-Rabin test.\n * See HAC Remark 4.28.\n * @param n - Number to test\n * @param k - Optional number of iterations of Miller-Rabin test\n * @param rand - Optional function to generate potential witnesses\n * @returns {boolean}\n * @async\n */\nexport function millerRabin(n: bigint, k: number, rand?: () => bigint) {\n  const len = bitLength(n);\n\n  if (!k) {\n    k = Math.max(1, (len / 48) | 0);\n  }\n\n  const n1 = n - _1n; // n - 1\n\n  // Find d and s, (n - 1) = (2 ^ s) * d;\n  let s = 0;\n  while (!getBit(n1, s)) { s++; }\n  const d = n >> BigInt(s);\n\n  for (; k > 0; k--) {\n    const a = rand ? rand() : getRandomBigInteger(BigInt(2), n1);\n\n    let x = modExp(a, d, n);\n    if (x === _1n || x === n1) {\n      continue;\n    }\n\n    let i;\n    for (i = 1; i < s; i++) {\n      x = mod(x * x, n);\n\n      if (x === _1n) {\n        return false;\n      }\n      if (x === n1) {\n        break;\n      }\n    }\n\n    if (i === s) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","/**\n * @fileoverview Provides an interface to hashing functions available in Node.js or external libraries.\n * @see {@link https://github.com/asmcrypto/asmcrypto.js|asmCrypto}\n * @see {@link https://github.com/indutny/hash.js|hash.js}\n * @module crypto/hash\n */\n\nimport { transform as streamTransform, isArrayStream, readToEnd as streamReadToEnd } from '@openpgp/web-stream-tools';\nimport util from '../../util';\nimport enums from '../../enums';\n\nconst webCrypto = util.getWebCrypto();\nconst nodeCrypto = util.getNodeCrypto();\nconst nodeCryptoHashes = nodeCrypto && nodeCrypto.getHashes();\n\nfunction nodeHash(type) {\n  if (!nodeCrypto || !nodeCryptoHashes.includes(type)) {\n    return;\n  }\n  return async function (data) {\n    const shasum = nodeCrypto.createHash(type);\n    return streamTransform(data, value => {\n      shasum.update(value);\n    }, () => new Uint8Array(shasum.digest()));\n  };\n}\n\nfunction nobleHash(nobleHashName, webCryptoHashName) {\n  const getNobleHash = async () => {\n    const { nobleHashes } = await import('./noble_hashes');\n    const hash = nobleHashes.get(nobleHashName);\n    if (!hash) throw new Error('Unsupported hash');\n    return hash;\n  };\n\n  return async function(data) {\n    if (isArrayStream(data)) {\n      data = await streamReadToEnd(data);\n    }\n    if (util.isStream(data)) {\n      const hash = await getNobleHash();\n\n      const hashInstance = hash.create();\n      return streamTransform(data, value => {\n        hashInstance.update(value);\n      }, () => hashInstance.digest());\n    } else if (webCrypto && webCryptoHashName) {\n      return new Uint8Array(await webCrypto.digest(webCryptoHashName, data));\n    } else {\n      const hash = await getNobleHash();\n\n      return hash(data);\n    }\n  };\n}\n\nconst md5 = nodeHash('md5') || nobleHash('md5');\nconst sha1 = nodeHash('sha1') || nobleHash('sha1', 'SHA-1');\nconst sha224 = nodeHash('sha224') || nobleHash('sha224');\nconst sha256 = nodeHash('sha256') || nobleHash('sha256', 'SHA-256');\nconst sha384 = nodeHash('sha384') || nobleHash('sha384', 'SHA-384');\nconst sha512 = nodeHash('sha512') || nobleHash('sha512', 'SHA-512');\nconst ripemd = nodeHash('ripemd160') || nobleHash('ripemd160');\nconst sha3_256 = nodeHash('sha3-256') || nobleHash('sha3_256');\nconst sha3_512 = nodeHash('sha3-512') || nobleHash('sha3_512');\n\n/**\n * Create a hash on the specified data using the specified algorithm\n * @param {module:enums.hash} algo - Hash algorithm type (see {@link https://tools.ietf.org/html/rfc4880#section-9.4|RFC 4880 9.4})\n * @param {Uint8Array} data - Data to be hashed\n * @returns {Promise<Uint8Array>} Hash value.\n */\nexport function computeDigest(algo, data) {\n  switch (algo) {\n    case enums.hash.md5:\n      return md5(data);\n    case enums.hash.sha1:\n      return sha1(data);\n    case enums.hash.ripemd:\n      return ripemd(data);\n    case enums.hash.sha256:\n      return sha256(data);\n    case enums.hash.sha384:\n      return sha384(data);\n    case enums.hash.sha512:\n      return sha512(data);\n    case enums.hash.sha224:\n      return sha224(data);\n    case enums.hash.sha3_256:\n      return sha3_256(data);\n    case enums.hash.sha3_512:\n      return sha3_512(data);\n    default:\n      throw new Error('Unsupported hash function');\n  }\n}\n\n/**\n * Returns the hash size in bytes of the specified hash algorithm type\n * @param {module:enums.hash} algo - Hash algorithm type (See {@link https://tools.ietf.org/html/rfc4880#section-9.4|RFC 4880 9.4})\n * @returns {Integer} Size in bytes of the resulting hash.\n */\nexport function getHashByteLength(algo) {\n  switch (algo) {\n    case enums.hash.md5:\n      return 16;\n    case enums.hash.sha1:\n    case enums.hash.ripemd:\n      return 20;\n    case enums.hash.sha256:\n      return 32;\n    case enums.hash.sha384:\n      return 48;\n    case enums.hash.sha512:\n      return 64;\n    case enums.hash.sha224:\n      return 28;\n    case enums.hash.sha3_256:\n      return 32;\n    case enums.hash.sha3_512:\n      return 64;\n    default:\n      throw new Error('Invalid hash algorithm.');\n  }\n}\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n/**\n * @fileoverview Provides EME-PKCS1-v1_5 encoding and decoding and EMSA-PKCS1-v1_5 encoding function\n * @see module:crypto/public_key/rsa\n * @see module:crypto/public_key/elliptic/ecdh\n * @see PublicKeyEncryptedSessionKeyPacket\n * @module crypto/pkcs1\n */\n\nimport { getRandomBytes } from './random';\nimport { getHashByteLength } from './hash';\nimport util from '../util';\n\n/**\n * ASN1 object identifiers for hashes\n * @see {@link https://tools.ietf.org/html/rfc4880#section-5.2.2}\n */\nconst hash_headers = [];\nhash_headers[1] = [0x30, 0x20, 0x30, 0x0c, 0x06, 0x08, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x02, 0x05, 0x05, 0x00, 0x04,\n  0x10];\nhash_headers[2] = [0x30, 0x21, 0x30, 0x09, 0x06, 0x05, 0x2b, 0x0e, 0x03, 0x02, 0x1a, 0x05, 0x00, 0x04, 0x14];\nhash_headers[3] = [0x30, 0x21, 0x30, 0x09, 0x06, 0x05, 0x2B, 0x24, 0x03, 0x02, 0x01, 0x05, 0x00, 0x04, 0x14];\nhash_headers[8] = [0x30, 0x31, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00,\n  0x04, 0x20];\nhash_headers[9] = [0x30, 0x41, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x02, 0x05, 0x00,\n  0x04, 0x30];\nhash_headers[10] = [0x30, 0x51, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x03, 0x05,\n  0x00, 0x04, 0x40];\nhash_headers[11] = [0x30, 0x2d, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x04, 0x05,\n  0x00, 0x04, 0x1C];\n\n/**\n * Create padding with secure random data\n * @private\n * @param {Integer} length - Length of the padding in bytes\n * @returns {Uint8Array} Random padding.\n */\nfunction getPKCS1Padding(length) {\n  const result = new Uint8Array(length);\n  let count = 0;\n  while (count < length) {\n    const randomBytes = getRandomBytes(length - count);\n    for (let i = 0; i < randomBytes.length; i++) {\n      if (randomBytes[i] !== 0) {\n        result[count++] = randomBytes[i];\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * Create a EME-PKCS1-v1_5 padded message\n * @see {@link https://tools.ietf.org/html/rfc4880#section-13.1.1|RFC 4880 13.1.1}\n * @param {Uint8Array} message - Message to be encoded\n * @param {Integer} keyLength - The length in octets of the key modulus\n * @returns {Uint8Array} EME-PKCS1 padded message.\n */\nexport function emeEncode(message, keyLength) {\n  const mLength = message.length;\n  // length checking\n  if (mLength > keyLength - 11) {\n    throw new Error('Message too long');\n  }\n  // Generate an octet string PS of length k - mLen - 3 consisting of\n  // pseudo-randomly generated nonzero octets\n  const PS = getPKCS1Padding(keyLength - mLength - 3);\n  // Concatenate PS, the message M, and other padding to form an\n  // encoded message EM of length k octets as EM = 0x00 || 0x02 || PS || 0x00 || M.\n  const encoded = new Uint8Array(keyLength);\n  // 0x00 byte\n  encoded[1] = 2;\n  encoded.set(PS, 2);\n  // 0x00 bytes\n  encoded.set(message, keyLength - mLength);\n  return encoded;\n}\n\n/**\n * Decode a EME-PKCS1-v1_5 padded message\n * @see {@link https://tools.ietf.org/html/rfc4880#section-13.1.2|RFC 4880 13.1.2}\n * @param {Uint8Array} encoded - Encoded message bytes\n * @param {Uint8Array} randomPayload - Data to return in case of decoding error (needed for constant-time processing)\n * @returns {Uint8Array} decoded data or `randomPayload` (on error, if given)\n * @throws {Error} on decoding failure, unless `randomPayload` is provided\n */\nexport function emeDecode(encoded, randomPayload) {\n  // encoded format: 0x00 0x02 <PS> 0x00 <payload>\n  let offset = 2;\n  let separatorNotFound = 1;\n  for (let j = offset; j < encoded.length; j++) {\n    separatorNotFound &= encoded[j] !== 0;\n    offset += separatorNotFound;\n  }\n\n  const psLen = offset - 2;\n  const payload = encoded.subarray(offset + 1); // discard the 0x00 separator\n  const isValidPadding = encoded[0] === 0 & encoded[1] === 2 & psLen >= 8 & !separatorNotFound;\n\n  if (randomPayload) {\n    return util.selectUint8Array(isValidPadding, payload, randomPayload);\n  }\n\n  if (isValidPadding) {\n    return payload;\n  }\n\n  throw new Error('Decryption error');\n}\n\n/**\n * Create a EMSA-PKCS1-v1_5 padded message\n * @see {@link https://tools.ietf.org/html/rfc4880#section-13.1.3|RFC 4880 13.1.3}\n * @param {Integer} algo - Hash algorithm type used\n * @param {Uint8Array} hashed - Message to be encoded\n * @param {Integer} emLen - Intended length in octets of the encoded message\n * @returns {Uint8Array} Encoded message.\n */\nexport function emsaEncode(algo, hashed, emLen) {\n  let i;\n  if (hashed.length !== getHashByteLength(algo)) {\n    throw new Error('Invalid hash length');\n  }\n  // produce an ASN.1 DER value for the hash function used.\n  // Let T be the full hash prefix\n  const hashPrefix = new Uint8Array(hash_headers[algo].length);\n  for (i = 0; i < hash_headers[algo].length; i++) {\n    hashPrefix[i] = hash_headers[algo][i];\n  }\n  // and let tLen be the length in octets prefix and hashed data\n  const tLen = hashPrefix.length + hashed.length;\n  if (emLen < tLen + 11) {\n    throw new Error('Intended encoded message length too short');\n  }\n  // an octet string PS consisting of emLen - tLen - 3 octets with hexadecimal value 0xFF\n  // The length of PS will be at least 8 octets\n  const PS = new Uint8Array(emLen - tLen - 3).fill(0xff);\n\n  // Concatenate PS, the hash prefix, hashed data, and other padding to form the\n  // encoded message EM as EM = 0x00 || 0x01 || PS || 0x00 || prefix || hashed\n  const EM = new Uint8Array(emLen);\n  EM[1] = 0x01;\n  EM.set(PS, 2);\n  EM.set(hashPrefix, emLen - tLen);\n  EM.set(hashed, emLen - hashed.length);\n  return EM;\n}\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n/**\n * @fileoverview RSA implementation\n * @module crypto/public_key/rsa\n */\nimport { randomProbablePrime } from './prime';\nimport { getRandomBigInteger } from '../random';\nimport util from '../../util';\nimport { uint8ArrayToB64, b64ToUint8Array } from '../../encoding/base64';\nimport { emsaEncode, emeEncode, emeDecode } from '../pkcs1';\nimport enums from '../../enums';\nimport { bigIntToNumber, bigIntToUint8Array, bitLength, byteLength, mod, modExp, modInv, uint8ArrayToBigInt } from '../biginteger';\nimport { getHashByteLength } from '../hash';\n\nconst webCrypto = util.getWebCrypto();\nconst nodeCrypto = util.getNodeCrypto();\nconst _1n = BigInt(1);\n\n/** Create signature\n * @param {module:enums.hash} hashAlgo - Hash algorithm\n * @param {Uint8Array} data - Message\n * @param {Uint8Array} n - RSA public modulus\n * @param {Uint8Array} e - RSA public exponent\n * @param {Uint8Array} d - RSA private exponent\n * @param {Uint8Array} p - RSA private prime p\n * @param {Uint8Array} q - RSA private prime q\n * @param {Uint8Array} u - RSA private coefficient\n * @param {Uint8Array} hashed - Hashed message\n * @returns {Promise<Uint8Array>} RSA Signature.\n * @async\n */\nexport async function sign(hashAlgo, data, n, e, d, p, q, u, hashed) {\n  if (getHashByteLength(hashAlgo) >= n.length) {\n    // Throw here instead of `emsaEncode` below, to provide a clearer and consistent error\n    // e.g. if a 512-bit RSA key is used with a SHA-512 digest.\n    // The size limit is actually slightly different but here we only care about throwing\n    // on common key sizes.\n    throw new Error('Digest size cannot exceed key modulus size');\n  }\n\n  if (data && !util.isStream(data)) {\n    if (util.getWebCrypto()) {\n      try {\n        return await webSign(enums.read(enums.webHash, hashAlgo), data, n, e, d, p, q, u);\n      } catch (err) {\n        util.printDebugError(err);\n      }\n    } else if (util.getNodeCrypto()) {\n      return nodeSign(hashAlgo, data, n, e, d, p, q, u);\n    }\n  }\n  return bnSign(hashAlgo, n, d, hashed);\n}\n\n/**\n * Verify signature\n * @param {module:enums.hash} hashAlgo - Hash algorithm\n * @param {Uint8Array} data - Message\n * @param {Uint8Array} s - Signature\n * @param {Uint8Array} n - RSA public modulus\n * @param {Uint8Array} e - RSA public exponent\n * @param {Uint8Array} hashed - Hashed message\n * @returns {Boolean}\n * @async\n */\nexport async function verify(hashAlgo, data, s, n, e, hashed) {\n  if (data && !util.isStream(data)) {\n    if (util.getWebCrypto()) {\n      try {\n        return await webVerify(enums.read(enums.webHash, hashAlgo), data, s, n, e);\n      } catch (err) {\n        util.printDebugError(err);\n      }\n    } else if (util.getNodeCrypto()) {\n      return nodeVerify(hashAlgo, data, s, n, e);\n    }\n  }\n  return bnVerify(hashAlgo, s, n, e, hashed);\n}\n\n/**\n * Encrypt message\n * @param {Uint8Array} data - Message\n * @param {Uint8Array} n - RSA public modulus\n * @param {Uint8Array} e - RSA public exponent\n * @returns {Promise<Uint8Array>} RSA Ciphertext.\n * @async\n */\nexport async function encrypt(data, n, e) {\n  if (util.getNodeCrypto()) {\n    return nodeEncrypt(data, n, e);\n  }\n  return bnEncrypt(data, n, e);\n}\n\n/**\n * Decrypt RSA message\n * @param {Uint8Array} m - Message\n * @param {Uint8Array} n - RSA public modulus\n * @param {Uint8Array} e - RSA public exponent\n * @param {Uint8Array} d - RSA private exponent\n * @param {Uint8Array} p - RSA private prime p\n * @param {Uint8Array} q - RSA private prime q\n * @param {Uint8Array} u - RSA private coefficient\n * @param {Uint8Array} randomPayload - Data to return on decryption error, instead of throwing\n *                                     (needed for constant-time processing)\n * @returns {Promise<String>} RSA Plaintext.\n * @throws {Error} on decryption error, unless `randomPayload` is given\n * @async\n */\nexport async function decrypt(data, n, e, d, p, q, u, randomPayload) {\n  // Node v18.19.1, 20.11.1 and 21.6.2 have disabled support for PKCS#1 decryption,\n  // and we want to avoid checking the error type to decide if the random payload\n  // should indeed be returned.\n  if (util.getNodeCrypto() && !randomPayload) {\n    try {\n      return await nodeDecrypt(data, n, e, d, p, q, u);\n    } catch (err) {\n      util.printDebugError(err);\n    }\n  }\n  return bnDecrypt(data, n, e, d, p, q, u, randomPayload);\n}\n\n/**\n * Generate a new random private key B bits long with public exponent E.\n *\n * When possible, webCrypto or nodeCrypto is used. Otherwise, primes are generated using\n * 40 rounds of the Miller-Rabin probabilistic random prime generation algorithm.\n * @see module:crypto/public_key/prime\n * @param {Integer} bits - RSA bit length\n * @param {Integer} e - RSA public exponent\n * @returns {{n, e, d,\n *            p, q ,u: Uint8Array}} RSA public modulus, RSA public exponent, RSA private exponent,\n *                                  RSA private prime p, RSA private prime q, u = p ** -1 mod q\n * @async\n */\nexport async function generate(bits, e) {\n  e = BigInt(e);\n\n  // Native RSA keygen using Web Crypto\n  if (util.getWebCrypto()) {\n    const keyGenOpt = {\n      name: 'RSASSA-PKCS1-v1_5',\n      modulusLength: bits, // the specified keysize in bits\n      publicExponent: bigIntToUint8Array(e), // take three bytes (max 65537) for exponent\n      hash: {\n        name: 'SHA-1' // not required for actual RSA keys, but for crypto api 'sign' and 'verify'\n      }\n    };\n    const keyPair = await webCrypto.generateKey(keyGenOpt, true, ['sign', 'verify']);\n\n    // export the generated keys as JsonWebKey (JWK)\n    // https://tools.ietf.org/html/draft-ietf-jose-json-web-key-33\n    const jwk = await webCrypto.exportKey('jwk', keyPair.privateKey);\n    // map JWK parameters to corresponding OpenPGP names\n    return jwkToPrivate(jwk, e);\n  } else if (util.getNodeCrypto()) {\n    const opts = {\n      modulusLength: bits,\n      publicExponent: bigIntToNumber(e),\n      publicKeyEncoding: { type: 'pkcs1', format: 'jwk' },\n      privateKeyEncoding: { type: 'pkcs1', format: 'jwk' }\n    };\n    const jwk = await new Promise((resolve, reject) => {\n      nodeCrypto.generateKeyPair('rsa', opts, (err, _, jwkPrivateKey) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(jwkPrivateKey);\n        }\n      });\n    });\n    return jwkToPrivate(jwk, e);\n  }\n\n  // RSA keygen fallback using 40 iterations of the Miller-Rabin test\n  // See https://stackoverflow.com/a/6330138 for justification\n  // Also see section C.3 here: https://nvlpubs.nist.gov/nistpubs/FIPS/NIST\n  let p;\n  let q;\n  let n;\n  do {\n    q = randomProbablePrime(bits - (bits >> 1), e, 40);\n    p = randomProbablePrime(bits >> 1, e, 40);\n    n = p * q;\n  } while (bitLength(n) !== bits);\n\n  const phi = (p - _1n) * (q - _1n);\n\n  if (q < p) {\n    [p, q] = [q, p];\n  }\n\n  return {\n    n: bigIntToUint8Array(n),\n    e: bigIntToUint8Array(e),\n    d: bigIntToUint8Array(modInv(e, phi)),\n    p: bigIntToUint8Array(p),\n    q: bigIntToUint8Array(q),\n    // dp: d.mod(p.subn(1)),\n    // dq: d.mod(q.subn(1)),\n    u: bigIntToUint8Array(modInv(p, q))\n  };\n}\n\n/**\n * Validate RSA parameters\n * @param {Uint8Array} n - RSA public modulus\n * @param {Uint8Array} e - RSA public exponent\n * @param {Uint8Array} d - RSA private exponent\n * @param {Uint8Array} p - RSA private prime p\n * @param {Uint8Array} q - RSA private prime q\n * @param {Uint8Array} u - RSA inverse of p w.r.t. q\n * @returns {Promise<Boolean>} Whether params are valid.\n * @async\n */\nexport async function validateParams(n, e, d, p, q, u) {\n  n = uint8ArrayToBigInt(n);\n  p = uint8ArrayToBigInt(p);\n  q = uint8ArrayToBigInt(q);\n\n  // expect pq = n\n  if ((p * q) !== n) {\n    return false;\n  }\n\n  const _2n = BigInt(2);\n  // expect p*u = 1 mod q\n  u = uint8ArrayToBigInt(u);\n  if (mod(p * u, q) !== BigInt(1)) {\n    return false;\n  }\n\n  e = uint8ArrayToBigInt(e);\n  d = uint8ArrayToBigInt(d);\n  /**\n   * In RSA pkcs#1 the exponents (d, e) are inverses modulo lcm(p-1, q-1)\n   * We check that [de = 1 mod (p-1)] and [de = 1 mod (q-1)]\n   * By CRT on coprime factors of (p-1, q-1) it follows that [de = 1 mod lcm(p-1, q-1)]\n   *\n   * We blind the multiplication with r, and check that rde = r mod lcm(p-1, q-1)\n   */\n  const nSizeOver3 = BigInt(Math.floor(bitLength(n) / 3));\n  const r = getRandomBigInteger(_2n, _2n << nSizeOver3); // r in [ 2, 2^{|n|/3} ) < p and q\n  const rde = r * d * e;\n\n  const areInverses = mod(rde, p - _1n) === r && mod(rde, q - _1n) === r;\n  if (!areInverses) {\n    return false;\n  }\n\n  return true;\n}\n\nasync function bnSign(hashAlgo, n, d, hashed) {\n  n = uint8ArrayToBigInt(n);\n  const m = uint8ArrayToBigInt(emsaEncode(hashAlgo, hashed, byteLength(n)));\n  d = uint8ArrayToBigInt(d);\n  return bigIntToUint8Array(modExp(m, d, n), 'be', byteLength(n));\n}\n\nasync function webSign(hashName, data, n, e, d, p, q, u) {\n  /** OpenPGP keys require that p < q, and Safari Web Crypto requires that p > q.\n   * We swap them in privateToJWK, so it usually works out, but nevertheless,\n   * not all OpenPGP keys are compatible with this requirement.\n   * OpenPGP.js used to generate RSA keys the wrong way around (p > q), and still\n   * does if the underlying Web Crypto does so (though the tested implementations\n   * don't do so).\n   */\n  const jwk = await privateToJWK(n, e, d, p, q, u);\n  const algo = {\n    name: 'RSASSA-PKCS1-v1_5',\n    hash: { name: hashName }\n  };\n  const key = await webCrypto.importKey('jwk', jwk, algo, false, ['sign']);\n  return new Uint8Array(await webCrypto.sign('RSASSA-PKCS1-v1_5', key, data));\n}\n\nasync function nodeSign(hashAlgo, data, n, e, d, p, q, u) {\n  const sign = nodeCrypto.createSign(enums.read(enums.hash, hashAlgo));\n  sign.write(data);\n  sign.end();\n\n  const jwk = await privateToJWK(n, e, d, p, q, u);\n  return new Uint8Array(sign.sign({ key: jwk, format: 'jwk', type: 'pkcs1' }));\n}\n\nasync function bnVerify(hashAlgo, s, n, e, hashed) {\n  n = uint8ArrayToBigInt(n);\n  s = uint8ArrayToBigInt(s);\n  e = uint8ArrayToBigInt(e);\n  if (s >= n) {\n    throw new Error('Signature size cannot exceed modulus size');\n  }\n  const EM1 = bigIntToUint8Array(modExp(s, e, n), 'be', byteLength(n));\n  const EM2 = emsaEncode(hashAlgo, hashed, byteLength(n));\n  return util.equalsUint8Array(EM1, EM2);\n}\n\nasync function webVerify(hashName, data, s, n, e) {\n  const jwk = publicToJWK(n, e);\n  const key = await webCrypto.importKey('jwk', jwk, {\n    name: 'RSASSA-PKCS1-v1_5',\n    hash: { name:  hashName }\n  }, false, ['verify']);\n  return webCrypto.verify('RSASSA-PKCS1-v1_5', key, s, data);\n}\n\nasync function nodeVerify(hashAlgo, data, s, n, e) {\n  const jwk = publicToJWK(n, e);\n  const key = { key: jwk, format: 'jwk', type: 'pkcs1' };\n\n  const verify = nodeCrypto.createVerify(enums.read(enums.hash, hashAlgo));\n  verify.write(data);\n  verify.end();\n\n  try {\n    return verify.verify(key, s);\n  } catch (err) {\n    return false;\n  }\n}\n\nasync function nodeEncrypt(data, n, e) {\n  const jwk = publicToJWK(n, e);\n  const key = { key: jwk, format: 'jwk', type: 'pkcs1', padding: nodeCrypto.constants.RSA_PKCS1_PADDING };\n\n  return new Uint8Array(nodeCrypto.publicEncrypt(key, data));\n}\n\nasync function bnEncrypt(data, n, e) {\n  n = uint8ArrayToBigInt(n);\n  data = uint8ArrayToBigInt(emeEncode(data, byteLength(n)));\n  e = uint8ArrayToBigInt(e);\n  if (data >= n) {\n    throw new Error('Message size cannot exceed modulus size');\n  }\n  return bigIntToUint8Array(modExp(data, e, n), 'be', byteLength(n));\n}\n\nasync function nodeDecrypt(data, n, e, d, p, q, u) {\n  const jwk = await privateToJWK(n, e, d, p, q, u);\n  const key = { key: jwk, format: 'jwk' , type: 'pkcs1', padding: nodeCrypto.constants.RSA_PKCS1_PADDING };\n\n  try {\n    return new Uint8Array(nodeCrypto.privateDecrypt(key, data));\n  } catch (err) {\n    throw new Error('Decryption error');\n  }\n}\n\nasync function bnDecrypt(data, n, e, d, p, q, u, randomPayload) {\n  data = uint8ArrayToBigInt(data);\n  n = uint8ArrayToBigInt(n);\n  e = uint8ArrayToBigInt(e);\n  d = uint8ArrayToBigInt(d);\n  p = uint8ArrayToBigInt(p);\n  q = uint8ArrayToBigInt(q);\n  u = uint8ArrayToBigInt(u);\n  if (data >= n) {\n    throw new Error('Data too large.');\n  }\n  const dq = mod(d, q - _1n); // d mod (q-1)\n  const dp = mod(d, p - _1n); // d mod (p-1)\n\n  const unblinder = getRandomBigInteger(BigInt(2), n);\n  const blinder = modExp(modInv(unblinder, n), e, n);\n  data = mod(data * blinder, n);\n\n  const mp = modExp(data, dp, p); // data**{d mod (q-1)} mod p\n  const mq = modExp(data, dq, q); // data**{d mod (p-1)} mod q\n  const h = mod(u * (mq - mp), q); // u * (mq-mp) mod q (operands already < q)\n\n  let result = h * p + mp; // result < n due to relations above\n\n  result = mod(result * unblinder, n);\n\n  return emeDecode(bigIntToUint8Array(result, 'be', byteLength(n)), randomPayload);\n}\n\n/** Convert Openpgp private key params to jwk key according to\n * @link https://tools.ietf.org/html/rfc7517\n * @param {String} hashAlgo\n * @param {Uint8Array} n\n * @param {Uint8Array} e\n * @param {Uint8Array} d\n * @param {Uint8Array} p\n * @param {Uint8Array} q\n * @param {Uint8Array} u\n */\nasync function privateToJWK(n, e, d, p, q, u) {\n  const pNum = uint8ArrayToBigInt(p);\n  const qNum = uint8ArrayToBigInt(q);\n  const dNum = uint8ArrayToBigInt(d);\n\n  let dq = mod(dNum, qNum - _1n); // d mod (q-1)\n  let dp = mod(dNum, pNum - _1n); // d mod (p-1)\n  dp = bigIntToUint8Array(dp);\n  dq = bigIntToUint8Array(dq);\n  return {\n    kty: 'RSA',\n    n: uint8ArrayToB64(n, true),\n    e: uint8ArrayToB64(e, true),\n    d: uint8ArrayToB64(d, true),\n    // switch p and q\n    p: uint8ArrayToB64(q, true),\n    q: uint8ArrayToB64(p, true),\n    // switch dp and dq\n    dp: uint8ArrayToB64(dq, true),\n    dq: uint8ArrayToB64(dp, true),\n    qi: uint8ArrayToB64(u, true),\n    ext: true\n  };\n}\n\n/** Convert Openpgp key public params to jwk key according to\n * @link https://tools.ietf.org/html/rfc7517\n * @param {String} hashAlgo\n * @param {Uint8Array} n\n * @param {Uint8Array} e\n */\nfunction publicToJWK(n, e) {\n  return {\n    kty: 'RSA',\n    n: uint8ArrayToB64(n, true),\n    e: uint8ArrayToB64(e, true),\n    ext: true\n  };\n}\n\n/** Convert JWK private key to OpenPGP private key params */\nfunction jwkToPrivate(jwk, e) {\n  return {\n    n: b64ToUint8Array(jwk.n),\n    e: bigIntToUint8Array(e),\n    d: b64ToUint8Array(jwk.d),\n    // switch p and q\n    p: b64ToUint8Array(jwk.q),\n    q: b64ToUint8Array(jwk.p),\n    // Since p and q are switched in places, u is the inverse of jwk.q\n    u: b64ToUint8Array(jwk.qi)\n  };\n}\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n/**\n * @fileoverview ElGamal implementation\n * @module crypto/public_key/elgamal\n */\nimport { getRandomBigInteger } from '../random';\nimport { emeEncode, emeDecode } from '../pkcs1';\nimport { bigIntToUint8Array, bitLength, byteLength, mod, modExp, modInv, uint8ArrayToBigInt } from '../biginteger';\n\nconst _1n = BigInt(1);\n\n/**\n * ElGamal Encryption function\n * Note that in OpenPGP, the message needs to be padded with PKCS#1 (same as RSA)\n * @param {Uint8Array} data - To be padded and encrypted\n * @param {Uint8Array} p\n * @param {Uint8Array} g\n * @param {Uint8Array} y\n * @returns {Promise<{ c1: Uint8Array, c2: Uint8Array }>}\n * @async\n */\nexport async function encrypt(data, p, g, y) {\n  p = uint8ArrayToBigInt(p);\n  g = uint8ArrayToBigInt(g);\n  y = uint8ArrayToBigInt(y);\n\n  const padded = emeEncode(data, byteLength(p));\n  const m = uint8ArrayToBigInt(padded);\n\n  // OpenPGP uses a \"special\" version of ElGamal where g is generator of the full group Z/pZ*\n  // hence g has order p-1, and to avoid that k = 0 mod p-1, we need to pick k in [1, p-2]\n  const k = getRandomBigInteger(_1n, p - _1n);\n  return {\n    c1: bigIntToUint8Array(modExp(g, k, p)),\n    c2: bigIntToUint8Array(mod(modExp(y, k, p) * m, p))\n  };\n}\n\n/**\n * ElGamal Encryption function\n * @param {Uint8Array} c1\n * @param {Uint8Array} c2\n * @param {Uint8Array} p\n * @param {Uint8Array} x\n * @param {Uint8Array} randomPayload - Data to return on unpadding error, instead of throwing\n *                                     (needed for constant-time processing)\n * @returns {Promise<Uint8Array>} Unpadded message.\n * @throws {Error} on decryption error, unless `randomPayload` is given\n * @async\n */\nexport async function decrypt(c1, c2, p, x, randomPayload) {\n  c1 = uint8ArrayToBigInt(c1);\n  c2 = uint8ArrayToBigInt(c2);\n  p = uint8ArrayToBigInt(p);\n  x = uint8ArrayToBigInt(x);\n\n  const padded = mod(modInv(modExp(c1, x, p), p) * c2, p);\n  return emeDecode(bigIntToUint8Array(padded, 'be', byteLength(p)), randomPayload);\n}\n\n/**\n * Validate ElGamal parameters\n * @param {Uint8Array} p - ElGamal prime\n * @param {Uint8Array} g - ElGamal group generator\n * @param {Uint8Array} y - ElGamal public key\n * @param {Uint8Array} x - ElGamal private exponent\n * @returns {Promise<Boolean>} Whether params are valid.\n * @async\n */\nexport async function validateParams(p, g, y, x) {\n  p = uint8ArrayToBigInt(p);\n  g = uint8ArrayToBigInt(g);\n  y = uint8ArrayToBigInt(y);\n\n  // Check that 1 < g < p\n  if (g <= _1n || g >= p) {\n    return false;\n  }\n\n  // Expect p-1 to be large\n  const pSize = BigInt(bitLength(p));\n  const _1023n = BigInt(1023);\n  if (pSize < _1023n) {\n    return false;\n  }\n\n  /**\n   * g should have order p-1\n   * Check that g ** (p-1) = 1 mod p\n   */\n  if (modExp(g, p - _1n, p) !== _1n) {\n    return false;\n  }\n\n  /**\n   * Since p-1 is not prime, g might have a smaller order that divides p-1\n   * We want to make sure that the order is large enough to hinder a small subgroup attack\n   *\n   * We just check g**i != 1 for all i up to a threshold\n   */\n  let res = g;\n  let i = BigInt(1);\n  const _2n = BigInt(2);\n  const threshold = _2n << BigInt(17); // we want order > threshold\n  while (i < threshold) {\n    res = mod(res * g, p);\n    if (res === _1n) {\n      return false;\n    }\n    i++;\n  }\n\n  /**\n   * Re-derive public key y' = g ** x mod p\n   * Expect y == y'\n   *\n   * Blinded exponentiation computes g**{r(p-1) + x} to compare to y\n   */\n  x = uint8ArrayToBigInt(x);\n  const r = getRandomBigInteger(_2n << (pSize - _1n), _2n << pSize); // draw r of same size as p-1\n  const rqx = (p - _1n) * r + x;\n  if (y !== modExp(g, rqx, p)) {\n    return false;\n  }\n\n  return true;\n}\n","// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\nimport * as nc from 'node:crypto';\nexport const crypto =\n  nc && typeof nc === 'object' && 'webcrypto' in nc ? nc.webcrypto : undefined;\n","import { crypto } from './crypto.js';\n\n'use strict';\nconst nacl = {};\nexport default nacl;\n\n// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.\n// Public domain.\n//\n// Implementation derived from TweetNaCl version 20140427.\n// See for details: http://tweetnacl.cr.yp.to/\n\nvar gf = function(init) {\n  var i, r = new Float64Array(16);\n  if (init) for (i = 0; i < init.length; i++) r[i] = init[i];\n  return r;\n};\n\n//  Pluggable, initialized in high-level API below.\nvar randombytes = function(/* x, n */) { throw new Error('no PRNG'); };\n\nvar _9 = new Uint8Array(32); _9[0] = 9;\n\nvar gf0 = gf(),\n    gf1 = gf([1]),\n    _121665 = gf([0xdb41, 1]),\n    D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),\n    D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),\n    X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),\n    Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),\n    I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);\n\nfunction ts64(x, i, h, l) {\n  x[i]   = (h >> 24) & 0xff;\n  x[i+1] = (h >> 16) & 0xff;\n  x[i+2] = (h >>  8) & 0xff;\n  x[i+3] = h & 0xff;\n  x[i+4] = (l >> 24)  & 0xff;\n  x[i+5] = (l >> 16)  & 0xff;\n  x[i+6] = (l >>  8)  & 0xff;\n  x[i+7] = l & 0xff;\n}\n\nfunction vn(x, xi, y, yi, n) {\n  var i,d = 0;\n  for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];\n  return (1 & ((d - 1) >>> 8)) - 1;\n}\n\nfunction crypto_verify_32(x, xi, y, yi) {\n  return vn(x,xi,y,yi,32);\n}\n\nfunction set25519(r, a) {\n  var i;\n  for (i = 0; i < 16; i++) r[i] = a[i]|0;\n}\n\nfunction car25519(o) {\n  var i, v, c = 1;\n  for (i = 0; i < 16; i++) {\n    v = o[i] + c + 65535;\n    c = Math.floor(v / 65536);\n    o[i] = v - c * 65536;\n  }\n  o[0] += c-1 + 37 * (c-1);\n}\n\nfunction sel25519(p, q, b) {\n  var t, c = ~(b-1);\n  for (var i = 0; i < 16; i++) {\n    t = c & (p[i] ^ q[i]);\n    p[i] ^= t;\n    q[i] ^= t;\n  }\n}\n\nfunction pack25519(o, n) {\n  var i, j, b;\n  var m = gf(), t = gf();\n  for (i = 0; i < 16; i++) t[i] = n[i];\n  car25519(t);\n  car25519(t);\n  car25519(t);\n  for (j = 0; j < 2; j++) {\n    m[0] = t[0] - 0xffed;\n    for (i = 1; i < 15; i++) {\n      m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);\n      m[i-1] &= 0xffff;\n    }\n    m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);\n    b = (m[15]>>16) & 1;\n    m[14] &= 0xffff;\n    sel25519(t, m, 1-b);\n  }\n  for (i = 0; i < 16; i++) {\n    o[2*i] = t[i] & 0xff;\n    o[2*i+1] = t[i]>>8;\n  }\n}\n\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32), d = new Uint8Array(32);\n  pack25519(c, a);\n  pack25519(d, b);\n  return crypto_verify_32(c, 0, d, 0);\n}\n\nfunction par25519(a) {\n  var d = new Uint8Array(32);\n  pack25519(d, a);\n  return d[0] & 1;\n}\n\nfunction unpack25519(o, n) {\n  var i;\n  for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);\n  o[15] &= 0x7fff;\n}\n\nfunction A(o, a, b) {\n  for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];\n}\n\nfunction Z(o, a, b) {\n  for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];\n}\n\nfunction M(o, a, b) {\n  var v, c,\n     t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,\n     t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,\n    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,\n    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,\n    b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3],\n    b4 = b[4],\n    b5 = b[5],\n    b6 = b[6],\n    b7 = b[7],\n    b8 = b[8],\n    b9 = b[9],\n    b10 = b[10],\n    b11 = b[11],\n    b12 = b[12],\n    b13 = b[13],\n    b14 = b[14],\n    b15 = b[15];\n\n  v = a[0];\n  t0 += v * b0;\n  t1 += v * b1;\n  t2 += v * b2;\n  t3 += v * b3;\n  t4 += v * b4;\n  t5 += v * b5;\n  t6 += v * b6;\n  t7 += v * b7;\n  t8 += v * b8;\n  t9 += v * b9;\n  t10 += v * b10;\n  t11 += v * b11;\n  t12 += v * b12;\n  t13 += v * b13;\n  t14 += v * b14;\n  t15 += v * b15;\n  v = a[1];\n  t1 += v * b0;\n  t2 += v * b1;\n  t3 += v * b2;\n  t4 += v * b3;\n  t5 += v * b4;\n  t6 += v * b5;\n  t7 += v * b6;\n  t8 += v * b7;\n  t9 += v * b8;\n  t10 += v * b9;\n  t11 += v * b10;\n  t12 += v * b11;\n  t13 += v * b12;\n  t14 += v * b13;\n  t15 += v * b14;\n  t16 += v * b15;\n  v = a[2];\n  t2 += v * b0;\n  t3 += v * b1;\n  t4 += v * b2;\n  t5 += v * b3;\n  t6 += v * b4;\n  t7 += v * b5;\n  t8 += v * b6;\n  t9 += v * b7;\n  t10 += v * b8;\n  t11 += v * b9;\n  t12 += v * b10;\n  t13 += v * b11;\n  t14 += v * b12;\n  t15 += v * b13;\n  t16 += v * b14;\n  t17 += v * b15;\n  v = a[3];\n  t3 += v * b0;\n  t4 += v * b1;\n  t5 += v * b2;\n  t6 += v * b3;\n  t7 += v * b4;\n  t8 += v * b5;\n  t9 += v * b6;\n  t10 += v * b7;\n  t11 += v * b8;\n  t12 += v * b9;\n  t13 += v * b10;\n  t14 += v * b11;\n  t15 += v * b12;\n  t16 += v * b13;\n  t17 += v * b14;\n  t18 += v * b15;\n  v = a[4];\n  t4 += v * b0;\n  t5 += v * b1;\n  t6 += v * b2;\n  t7 += v * b3;\n  t8 += v * b4;\n  t9 += v * b5;\n  t10 += v * b6;\n  t11 += v * b7;\n  t12 += v * b8;\n  t13 += v * b9;\n  t14 += v * b10;\n  t15 += v * b11;\n  t16 += v * b12;\n  t17 += v * b13;\n  t18 += v * b14;\n  t19 += v * b15;\n  v = a[5];\n  t5 += v * b0;\n  t6 += v * b1;\n  t7 += v * b2;\n  t8 += v * b3;\n  t9 += v * b4;\n  t10 += v * b5;\n  t11 += v * b6;\n  t12 += v * b7;\n  t13 += v * b8;\n  t14 += v * b9;\n  t15 += v * b10;\n  t16 += v * b11;\n  t17 += v * b12;\n  t18 += v * b13;\n  t19 += v * b14;\n  t20 += v * b15;\n  v = a[6];\n  t6 += v * b0;\n  t7 += v * b1;\n  t8 += v * b2;\n  t9 += v * b3;\n  t10 += v * b4;\n  t11 += v * b5;\n  t12 += v * b6;\n  t13 += v * b7;\n  t14 += v * b8;\n  t15 += v * b9;\n  t16 += v * b10;\n  t17 += v * b11;\n  t18 += v * b12;\n  t19 += v * b13;\n  t20 += v * b14;\n  t21 += v * b15;\n  v = a[7];\n  t7 += v * b0;\n  t8 += v * b1;\n  t9 += v * b2;\n  t10 += v * b3;\n  t11 += v * b4;\n  t12 += v * b5;\n  t13 += v * b6;\n  t14 += v * b7;\n  t15 += v * b8;\n  t16 += v * b9;\n  t17 += v * b10;\n  t18 += v * b11;\n  t19 += v * b12;\n  t20 += v * b13;\n  t21 += v * b14;\n  t22 += v * b15;\n  v = a[8];\n  t8 += v * b0;\n  t9 += v * b1;\n  t10 += v * b2;\n  t11 += v * b3;\n  t12 += v * b4;\n  t13 += v * b5;\n  t14 += v * b6;\n  t15 += v * b7;\n  t16 += v * b8;\n  t17 += v * b9;\n  t18 += v * b10;\n  t19 += v * b11;\n  t20 += v * b12;\n  t21 += v * b13;\n  t22 += v * b14;\n  t23 += v * b15;\n  v = a[9];\n  t9 += v * b0;\n  t10 += v * b1;\n  t11 += v * b2;\n  t12 += v * b3;\n  t13 += v * b4;\n  t14 += v * b5;\n  t15 += v * b6;\n  t16 += v * b7;\n  t17 += v * b8;\n  t18 += v * b9;\n  t19 += v * b10;\n  t20 += v * b11;\n  t21 += v * b12;\n  t22 += v * b13;\n  t23 += v * b14;\n  t24 += v * b15;\n  v = a[10];\n  t10 += v * b0;\n  t11 += v * b1;\n  t12 += v * b2;\n  t13 += v * b3;\n  t14 += v * b4;\n  t15 += v * b5;\n  t16 += v * b6;\n  t17 += v * b7;\n  t18 += v * b8;\n  t19 += v * b9;\n  t20 += v * b10;\n  t21 += v * b11;\n  t22 += v * b12;\n  t23 += v * b13;\n  t24 += v * b14;\n  t25 += v * b15;\n  v = a[11];\n  t11 += v * b0;\n  t12 += v * b1;\n  t13 += v * b2;\n  t14 += v * b3;\n  t15 += v * b4;\n  t16 += v * b5;\n  t17 += v * b6;\n  t18 += v * b7;\n  t19 += v * b8;\n  t20 += v * b9;\n  t21 += v * b10;\n  t22 += v * b11;\n  t23 += v * b12;\n  t24 += v * b13;\n  t25 += v * b14;\n  t26 += v * b15;\n  v = a[12];\n  t12 += v * b0;\n  t13 += v * b1;\n  t14 += v * b2;\n  t15 += v * b3;\n  t16 += v * b4;\n  t17 += v * b5;\n  t18 += v * b6;\n  t19 += v * b7;\n  t20 += v * b8;\n  t21 += v * b9;\n  t22 += v * b10;\n  t23 += v * b11;\n  t24 += v * b12;\n  t25 += v * b13;\n  t26 += v * b14;\n  t27 += v * b15;\n  v = a[13];\n  t13 += v * b0;\n  t14 += v * b1;\n  t15 += v * b2;\n  t16 += v * b3;\n  t17 += v * b4;\n  t18 += v * b5;\n  t19 += v * b6;\n  t20 += v * b7;\n  t21 += v * b8;\n  t22 += v * b9;\n  t23 += v * b10;\n  t24 += v * b11;\n  t25 += v * b12;\n  t26 += v * b13;\n  t27 += v * b14;\n  t28 += v * b15;\n  v = a[14];\n  t14 += v * b0;\n  t15 += v * b1;\n  t16 += v * b2;\n  t17 += v * b3;\n  t18 += v * b4;\n  t19 += v * b5;\n  t20 += v * b6;\n  t21 += v * b7;\n  t22 += v * b8;\n  t23 += v * b9;\n  t24 += v * b10;\n  t25 += v * b11;\n  t26 += v * b12;\n  t27 += v * b13;\n  t28 += v * b14;\n  t29 += v * b15;\n  v = a[15];\n  t15 += v * b0;\n  t16 += v * b1;\n  t17 += v * b2;\n  t18 += v * b3;\n  t19 += v * b4;\n  t20 += v * b5;\n  t21 += v * b6;\n  t22 += v * b7;\n  t23 += v * b8;\n  t24 += v * b9;\n  t25 += v * b10;\n  t26 += v * b11;\n  t27 += v * b12;\n  t28 += v * b13;\n  t29 += v * b14;\n  t30 += v * b15;\n\n  t0  += 38 * t16;\n  t1  += 38 * t17;\n  t2  += 38 * t18;\n  t3  += 38 * t19;\n  t4  += 38 * t20;\n  t5  += 38 * t21;\n  t6  += 38 * t22;\n  t7  += 38 * t23;\n  t8  += 38 * t24;\n  t9  += 38 * t25;\n  t10 += 38 * t26;\n  t11 += 38 * t27;\n  t12 += 38 * t28;\n  t13 += 38 * t29;\n  t14 += 38 * t30;\n  // t15 left as is\n\n  // first car\n  c = 1;\n  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;\n  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;\n  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;\n  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;\n  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;\n  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;\n  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;\n  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;\n  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;\n  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;\n  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;\n  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;\n  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;\n  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;\n  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;\n  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;\n  t0 += c-1 + 37 * (c-1);\n\n  // second car\n  c = 1;\n  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;\n  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;\n  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;\n  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;\n  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;\n  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;\n  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;\n  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;\n  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;\n  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;\n  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;\n  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;\n  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;\n  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;\n  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;\n  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;\n  t0 += c-1 + 37 * (c-1);\n\n  o[ 0] = t0;\n  o[ 1] = t1;\n  o[ 2] = t2;\n  o[ 3] = t3;\n  o[ 4] = t4;\n  o[ 5] = t5;\n  o[ 6] = t6;\n  o[ 7] = t7;\n  o[ 8] = t8;\n  o[ 9] = t9;\n  o[10] = t10;\n  o[11] = t11;\n  o[12] = t12;\n  o[13] = t13;\n  o[14] = t14;\n  o[15] = t15;\n}\n\nfunction S(o, a) {\n  M(o, a, a);\n}\n\nfunction inv25519(o, i) {\n  var c = gf();\n  var a;\n  for (a = 0; a < 16; a++) c[a] = i[a];\n  for (a = 253; a >= 0; a--) {\n    S(c, c);\n    if(a !== 2 && a !== 4) M(c, c, i);\n  }\n  for (a = 0; a < 16; a++) o[a] = c[a];\n}\n\nfunction pow2523(o, i) {\n  var c = gf();\n  var a;\n  for (a = 0; a < 16; a++) c[a] = i[a];\n  for (a = 250; a >= 0; a--) {\n      S(c, c);\n      if(a !== 1) M(c, c, i);\n  }\n  for (a = 0; a < 16; a++) o[a] = c[a];\n}\n\nfunction crypto_scalarmult(q, n, p) {\n  var z = new Uint8Array(32);\n  var x = new Float64Array(80), r, i;\n  var a = gf(), b = gf(), c = gf(),\n      d = gf(), e = gf(), f = gf();\n  for (i = 0; i < 31; i++) z[i] = n[i];\n  z[31]=(n[31]&127)|64;\n  z[0]&=248;\n  unpack25519(x,p);\n  for (i = 0; i < 16; i++) {\n    b[i]=x[i];\n    d[i]=a[i]=c[i]=0;\n  }\n  a[0]=d[0]=1;\n  for (i=254; i>=0; --i) {\n    r=(z[i>>>3]>>>(i&7))&1;\n    sel25519(a,b,r);\n    sel25519(c,d,r);\n    A(e,a,c);\n    Z(a,a,c);\n    A(c,b,d);\n    Z(b,b,d);\n    S(d,e);\n    S(f,a);\n    M(a,c,a);\n    M(c,b,e);\n    A(e,a,c);\n    Z(a,a,c);\n    S(b,a);\n    Z(c,d,f);\n    M(a,c,_121665);\n    A(a,a,d);\n    M(c,c,a);\n    M(a,d,f);\n    M(d,b,x);\n    S(b,e);\n    sel25519(a,b,r);\n    sel25519(c,d,r);\n  }\n  for (i = 0; i < 16; i++) {\n    x[i+16]=a[i];\n    x[i+32]=c[i];\n    x[i+48]=b[i];\n    x[i+64]=d[i];\n  }\n  var x32 = x.subarray(32);\n  var x16 = x.subarray(16);\n  inv25519(x32,x32);\n  M(x16,x16,x32);\n  pack25519(q,x16);\n  return 0;\n}\n\nfunction crypto_scalarmult_base(q, n) {\n  return crypto_scalarmult(q, n, _9);\n}\n\nfunction crypto_box_keypair(y, x) {\n  randombytes(x, 32);\n  return crypto_scalarmult_base(y, x);\n}\n\nvar K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction crypto_hashblocks_hl(hh, hl, m, n) {\n  var wh = new Int32Array(16), wl = new Int32Array(16),\n      bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,\n      bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,\n      th, tl, i, j, h, l, a, b, c, d;\n\n  var ah0 = hh[0],\n      ah1 = hh[1],\n      ah2 = hh[2],\n      ah3 = hh[3],\n      ah4 = hh[4],\n      ah5 = hh[5],\n      ah6 = hh[6],\n      ah7 = hh[7],\n\n      al0 = hl[0],\n      al1 = hl[1],\n      al2 = hl[2],\n      al3 = hl[3],\n      al4 = hl[4],\n      al5 = hl[5],\n      al6 = hl[6],\n      al7 = hl[7];\n\n  var pos = 0;\n  while (n >= 128) {\n    for (i = 0; i < 16; i++) {\n      j = 8 * i + pos;\n      wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];\n      wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];\n    }\n    for (i = 0; i < 80; i++) {\n      bh0 = ah0;\n      bh1 = ah1;\n      bh2 = ah2;\n      bh3 = ah3;\n      bh4 = ah4;\n      bh5 = ah5;\n      bh6 = ah6;\n      bh7 = ah7;\n\n      bl0 = al0;\n      bl1 = al1;\n      bl2 = al2;\n      bl3 = al3;\n      bl4 = al4;\n      bl5 = al5;\n      bl6 = al6;\n      bl7 = al7;\n\n      // add\n      h = ah7;\n      l = al7;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      // Sigma1\n      h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));\n      l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // Ch\n      h = (ah4 & ah5) ^ (~ah4 & ah6);\n      l = (al4 & al5) ^ (~al4 & al6);\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // K\n      h = K[i*2];\n      l = K[i*2+1];\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // w\n      h = wh[i%16];\n      l = wl[i%16];\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      th = c & 0xffff | d << 16;\n      tl = a & 0xffff | b << 16;\n\n      // add\n      h = th;\n      l = tl;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      // Sigma0\n      h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));\n      l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // Maj\n      h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);\n      l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      bh7 = (c & 0xffff) | (d << 16);\n      bl7 = (a & 0xffff) | (b << 16);\n\n      // add\n      h = bh3;\n      l = bl3;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      h = th;\n      l = tl;\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      bh3 = (c & 0xffff) | (d << 16);\n      bl3 = (a & 0xffff) | (b << 16);\n\n      ah1 = bh0;\n      ah2 = bh1;\n      ah3 = bh2;\n      ah4 = bh3;\n      ah5 = bh4;\n      ah6 = bh5;\n      ah7 = bh6;\n      ah0 = bh7;\n\n      al1 = bl0;\n      al2 = bl1;\n      al3 = bl2;\n      al4 = bl3;\n      al5 = bl4;\n      al6 = bl5;\n      al7 = bl6;\n      al0 = bl7;\n\n      if (i%16 === 15) {\n        for (j = 0; j < 16; j++) {\n          // add\n          h = wh[j];\n          l = wl[j];\n\n          a = l & 0xffff; b = l >>> 16;\n          c = h & 0xffff; d = h >>> 16;\n\n          h = wh[(j+9)%16];\n          l = wl[(j+9)%16];\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          // sigma0\n          th = wh[(j+1)%16];\n          tl = wl[(j+1)%16];\n          h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);\n          l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          // sigma1\n          th = wh[(j+14)%16];\n          tl = wl[(j+14)%16];\n          h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);\n          l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          b += a >>> 16;\n          c += b >>> 16;\n          d += c >>> 16;\n\n          wh[j] = (c & 0xffff) | (d << 16);\n          wl[j] = (a & 0xffff) | (b << 16);\n        }\n      }\n    }\n\n    // add\n    h = ah0;\n    l = al0;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[0];\n    l = hl[0];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[0] = ah0 = (c & 0xffff) | (d << 16);\n    hl[0] = al0 = (a & 0xffff) | (b << 16);\n\n    h = ah1;\n    l = al1;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[1];\n    l = hl[1];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[1] = ah1 = (c & 0xffff) | (d << 16);\n    hl[1] = al1 = (a & 0xffff) | (b << 16);\n\n    h = ah2;\n    l = al2;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[2];\n    l = hl[2];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[2] = ah2 = (c & 0xffff) | (d << 16);\n    hl[2] = al2 = (a & 0xffff) | (b << 16);\n\n    h = ah3;\n    l = al3;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[3];\n    l = hl[3];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[3] = ah3 = (c & 0xffff) | (d << 16);\n    hl[3] = al3 = (a & 0xffff) | (b << 16);\n\n    h = ah4;\n    l = al4;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[4];\n    l = hl[4];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[4] = ah4 = (c & 0xffff) | (d << 16);\n    hl[4] = al4 = (a & 0xffff) | (b << 16);\n\n    h = ah5;\n    l = al5;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[5];\n    l = hl[5];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[5] = ah5 = (c & 0xffff) | (d << 16);\n    hl[5] = al5 = (a & 0xffff) | (b << 16);\n\n    h = ah6;\n    l = al6;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[6];\n    l = hl[6];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[6] = ah6 = (c & 0xffff) | (d << 16);\n    hl[6] = al6 = (a & 0xffff) | (b << 16);\n\n    h = ah7;\n    l = al7;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[7];\n    l = hl[7];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[7] = ah7 = (c & 0xffff) | (d << 16);\n    hl[7] = al7 = (a & 0xffff) | (b << 16);\n\n    pos += 128;\n    n -= 128;\n  }\n\n  return n;\n}\n\nfunction crypto_hash(out, m, n) {\n  var hh = new Int32Array(8),\n      hl = new Int32Array(8),\n      x = new Uint8Array(256),\n      i, b = n;\n\n  hh[0] = 0x6a09e667;\n  hh[1] = 0xbb67ae85;\n  hh[2] = 0x3c6ef372;\n  hh[3] = 0xa54ff53a;\n  hh[4] = 0x510e527f;\n  hh[5] = 0x9b05688c;\n  hh[6] = 0x1f83d9ab;\n  hh[7] = 0x5be0cd19;\n\n  hl[0] = 0xf3bcc908;\n  hl[1] = 0x84caa73b;\n  hl[2] = 0xfe94f82b;\n  hl[3] = 0x5f1d36f1;\n  hl[4] = 0xade682d1;\n  hl[5] = 0x2b3e6c1f;\n  hl[6] = 0xfb41bd6b;\n  hl[7] = 0x137e2179;\n\n  crypto_hashblocks_hl(hh, hl, m, n);\n  n %= 128;\n\n  for (i = 0; i < n; i++) x[i] = m[b-n+i];\n  x[n] = 128;\n\n  n = 256-128*(n<112?1:0);\n  x[n-9] = 0;\n  ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);\n  crypto_hashblocks_hl(hh, hl, x, n);\n\n  for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);\n\n  return 0;\n}\n\nfunction add(p, q) {\n  var a = gf(), b = gf(), c = gf(),\n      d = gf(), e = gf(), f = gf(),\n      g = gf(), h = gf(), t = gf();\n\n  Z(a, p[1], p[0]);\n  Z(t, q[1], q[0]);\n  M(a, a, t);\n  A(b, p[0], p[1]);\n  A(t, q[0], q[1]);\n  M(b, b, t);\n  M(c, p[3], q[3]);\n  M(c, c, D2);\n  M(d, p[2], q[2]);\n  A(d, d, d);\n  Z(e, b, a);\n  Z(f, d, c);\n  A(g, d, c);\n  A(h, b, a);\n\n  M(p[0], e, f);\n  M(p[1], h, g);\n  M(p[2], g, f);\n  M(p[3], e, h);\n}\n\nfunction cswap(p, q, b) {\n  var i;\n  for (i = 0; i < 4; i++) {\n    sel25519(p[i], q[i], b);\n  }\n}\n\nfunction pack(r, p) {\n  var tx = gf(), ty = gf(), zi = gf();\n  inv25519(zi, p[2]);\n  M(tx, p[0], zi);\n  M(ty, p[1], zi);\n  pack25519(r, ty);\n  r[31] ^= par25519(tx) << 7;\n}\n\nfunction scalarmult(p, q, s) {\n  var b, i;\n  set25519(p[0], gf0);\n  set25519(p[1], gf1);\n  set25519(p[2], gf1);\n  set25519(p[3], gf0);\n  for (i = 255; i >= 0; --i) {\n    b = (s[(i/8)|0] >> (i&7)) & 1;\n    cswap(p, q, b);\n    add(q, p);\n    add(p, p);\n    cswap(p, q, b);\n  }\n}\n\nfunction scalarbase(p, s) {\n  var q = [gf(), gf(), gf(), gf()];\n  set25519(q[0], X);\n  set25519(q[1], Y);\n  set25519(q[2], gf1);\n  M(q[3], X, Y);\n  scalarmult(p, q, s);\n}\n\nfunction crypto_sign_keypair(pk, sk, seeded) {\n  var d = new Uint8Array(64);\n  var p = [gf(), gf(), gf(), gf()];\n  var i;\n\n  if (!seeded) randombytes(sk, 32);\n  crypto_hash(d, sk, 32);\n  d[0] &= 248;\n  d[31] &= 127;\n  d[31] |= 64;\n\n  scalarbase(p, d);\n  pack(pk, p);\n\n  for (i = 0; i < 32; i++) sk[i+32] = pk[i];\n  return 0;\n}\n\nvar L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);\n\nfunction modL(r, x) {\n  var carry, i, j, k;\n  for (i = 63; i >= 32; --i) {\n    carry = 0;\n    for (j = i - 32, k = i - 12; j < k; ++j) {\n      x[j] += carry - 16 * x[i] * L[j - (i - 32)];\n      carry = Math.floor((x[j] + 128) / 256);\n      x[j] -= carry * 256;\n    }\n    x[j] += carry;\n    x[i] = 0;\n  }\n  carry = 0;\n  for (j = 0; j < 32; j++) {\n    x[j] += carry - (x[31] >> 4) * L[j];\n    carry = x[j] >> 8;\n    x[j] &= 255;\n  }\n  for (j = 0; j < 32; j++) x[j] -= carry * L[j];\n  for (i = 0; i < 32; i++) {\n    x[i+1] += x[i] >> 8;\n    r[i] = x[i] & 255;\n  }\n}\n\nfunction reduce(r) {\n  var x = new Float64Array(64), i;\n  for (i = 0; i < 64; i++) x[i] = r[i];\n  for (i = 0; i < 64; i++) r[i] = 0;\n  modL(r, x);\n}\n\n// Note: difference from C - smlen returned, not passed as argument.\nfunction crypto_sign(sm, m, n, sk) {\n  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);\n  var i, j, x = new Float64Array(64);\n  var p = [gf(), gf(), gf(), gf()];\n\n  crypto_hash(d, sk, 32);\n  d[0] &= 248;\n  d[31] &= 127;\n  d[31] |= 64;\n\n  var smlen = n + 64;\n  for (i = 0; i < n; i++) sm[64 + i] = m[i];\n  for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];\n\n  crypto_hash(r, sm.subarray(32), n+32);\n  reduce(r);\n  scalarbase(p, r);\n  pack(sm, p);\n\n  for (i = 32; i < 64; i++) sm[i] = sk[i];\n  crypto_hash(h, sm, n + 64);\n  reduce(h);\n\n  for (i = 0; i < 64; i++) x[i] = 0;\n  for (i = 0; i < 32; i++) x[i] = r[i];\n  for (i = 0; i < 32; i++) {\n    for (j = 0; j < 32; j++) {\n      x[i+j] += h[i] * d[j];\n    }\n  }\n\n  modL(sm.subarray(32), x);\n  return smlen;\n}\n\nfunction unpackneg(r, p) {\n  var t = gf(), chk = gf(), num = gf(),\n      den = gf(), den2 = gf(), den4 = gf(),\n      den6 = gf();\n\n  set25519(r[2], gf1);\n  unpack25519(r[1], p);\n  S(num, r[1]);\n  M(den, num, D);\n  Z(num, num, r[2]);\n  A(den, r[2], den);\n\n  S(den2, den);\n  S(den4, den2);\n  M(den6, den4, den2);\n  M(t, den6, num);\n  M(t, t, den);\n\n  pow2523(t, t);\n  M(t, t, num);\n  M(t, t, den);\n  M(t, t, den);\n  M(r[0], t, den);\n\n  S(chk, r[0]);\n  M(chk, chk, den);\n  if (neq25519(chk, num)) M(r[0], r[0], I);\n\n  S(chk, r[0]);\n  M(chk, chk, den);\n  if (neq25519(chk, num)) return -1;\n\n  if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);\n\n  M(r[3], r[0], r[1]);\n  return 0;\n}\n\nfunction crypto_sign_open(m, sm, n, pk) {\n  var i;\n  var t = new Uint8Array(32), h = new Uint8Array(64);\n  var p = [gf(), gf(), gf(), gf()],\n      q = [gf(), gf(), gf(), gf()];\n\n  if (n < 64) return -1;\n\n  if (unpackneg(q, pk)) return -1;\n\n  for (i = 0; i < n; i++) m[i] = sm[i];\n  for (i = 0; i < 32; i++) m[i+32] = pk[i];\n  crypto_hash(h, m, n);\n  reduce(h);\n  scalarmult(p, q, h);\n\n  scalarbase(q, sm.subarray(32));\n  add(p, q);\n  pack(t, p);\n\n  n -= 64;\n  if (crypto_verify_32(sm, 0, t, 0)) {\n    for (i = 0; i < n; i++) m[i] = 0;\n    return -1;\n  }\n\n  for (i = 0; i < n; i++) m[i] = sm[i + 64];\n  return n;\n}\n\nvar crypto_scalarmult_BYTES = 32,\n    crypto_scalarmult_SCALARBYTES = 32,\n    crypto_box_PUBLICKEYBYTES = 32,\n    crypto_box_SECRETKEYBYTES = 32,\n    crypto_sign_BYTES = 64,\n    crypto_sign_PUBLICKEYBYTES = 32,\n    crypto_sign_SECRETKEYBYTES = 64,\n    crypto_sign_SEEDBYTES = 32;\n\nfunction checkArrayTypes() {\n  for (var i = 0; i < arguments.length; i++) {\n    if (!(arguments[i] instanceof Uint8Array))\n      throw new TypeError('unexpected type, use Uint8Array');\n  }\n}\n\nfunction cleanup(arr) {\n  for (var i = 0; i < arr.length; i++) arr[i] = 0;\n}\n\nnacl.scalarMult = function(n, p) {\n  checkArrayTypes(n, p);\n  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');\n  if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');\n  var q = new Uint8Array(crypto_scalarmult_BYTES);\n  crypto_scalarmult(q, n, p);\n  return q;\n};\n\nnacl.box = {};\n\nnacl.box.keyPair = function() {\n  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);\n  crypto_box_keypair(pk, sk);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.box.keyPair.fromSecretKey = function(secretKey) {\n  checkArrayTypes(secretKey);\n  if (secretKey.length !== crypto_box_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);\n  crypto_scalarmult_base(pk, secretKey);\n  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};\n};\n\nnacl.sign = function(msg, secretKey) {\n  checkArrayTypes(msg, secretKey);\n  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);\n  crypto_sign(signedMsg, msg, msg.length, secretKey);\n  return signedMsg;\n};\n\nnacl.sign.detached = function(msg, secretKey) {\n  var signedMsg = nacl.sign(msg, secretKey);\n  var sig = new Uint8Array(crypto_sign_BYTES);\n  for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];\n  return sig;\n};\n\nnacl.sign.detached.verify = function(msg, sig, publicKey) {\n  checkArrayTypes(msg, sig, publicKey);\n  if (sig.length !== crypto_sign_BYTES)\n    throw new Error('bad signature size');\n  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)\n    throw new Error('bad public key size');\n  var sm = new Uint8Array(crypto_sign_BYTES + msg.length);\n  var m = new Uint8Array(crypto_sign_BYTES + msg.length);\n  var i;\n  for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];\n  for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];\n  return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);\n};\n\nnacl.sign.keyPair = function() {\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);\n  crypto_sign_keypair(pk, sk);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.sign.keyPair.fromSecretKey = function(secretKey) {\n  checkArrayTypes(secretKey);\n  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];\n  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};\n};\n\nnacl.sign.keyPair.fromSeed = function(seed) {\n  checkArrayTypes(seed);\n  if (seed.length !== crypto_sign_SEEDBYTES)\n    throw new Error('bad seed size');\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);\n  for (var i = 0; i < 32; i++) sk[i] = seed[i];\n  crypto_sign_keypair(pk, sk, true);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.setPRNG = function(fn) {\n  randombytes = fn;\n};\n\n(function() {\n  // Initialize PRNG if environment provides CSPRNG.\n  // If not, methods calling randombytes will throw.\n  if (crypto && crypto.getRandomValues) {\n    // Browsers and Node v16+\n    var QUOTA = 65536;\n    nacl.setPRNG(function(x, n) {\n      var i, v = new Uint8Array(n);\n      for (i = 0; i < n; i += QUOTA) {\n        crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));\n      }\n      for (i = 0; i < n; i++) x[i] = v[i];\n      cleanup(v);\n    });\n  }\n})();\n","// OpenPGP.js - An OpenPGP implementation in javascript\n// Copyright (C) 2015-2016 Decentral\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n/**\n * Wrapper to an OID value\n *\n * {@link https://tools.ietf.org/html/rfc6637#section-11|RFC6637, section 11}:\n * The sequence of octets in the third column is the result of applying\n * the Distinguished Encoding Rules (DER) to the ASN.1 Object Identifier\n * with subsequent truncation.  The truncation removes the two fields of\n * encoded Object Identifier.  The first omitted field is one octet\n * representing the Object Identifier tag, and the second omitted field\n * is the length of the Object Identifier body.  For example, the\n * complete ASN.1 DER encoding for the NIST P-256 curve OID is \"06 08 2A\n * 86 48 CE 3D 03 01 07\", from which the first entry in the table above\n * is constructed by omitting the first two octets.  Only the truncated\n * sequence of octets is the valid representation of a curve OID.\n * @module type/oid\n */\n\nimport util from '../util';\nimport enums from '../enums';\n\nconst knownOIDs = {\n  '2a8648ce3d030107': enums.curve.nistP256,\n  '2b81040022': enums.curve.nistP384,\n  '2b81040023': enums.curve.nistP521,\n  '2b8104000a': enums.curve.secp256k1,\n  '2b06010401da470f01': enums.curve.ed25519Legacy,\n  '2b060104019755010501': enums.curve.curve25519Legacy,\n  '2b2403030208010107': enums.curve.brainpoolP256r1,\n  '2b240303020801010b': enums.curve.brainpoolP384r1,\n  '2b240303020801010d': enums.curve.brainpoolP512r1\n};\n\nclass OID {\n  constructor(oid) {\n    if (oid instanceof OID) {\n      this.oid = oid.oid;\n    } else if (util.isArray(oid) ||\n               util.isUint8Array(oid)) {\n      oid = new Uint8Array(oid);\n      if (oid[0] === 0x06) { // DER encoded oid byte array\n        if (oid[1] !== oid.length - 2) {\n          throw new Error('Length mismatch in DER encoded oid');\n        }\n        oid = oid.subarray(2);\n      }\n      this.oid = oid;\n    } else {\n      this.oid = '';\n    }\n  }\n\n  /**\n   * Method to read an OID object\n   * @param {Uint8Array} input - Where to read the OID from\n   * @returns {Number} Number of read bytes.\n   */\n  read(input) {\n    if (input.length >= 1) {\n      const length = input[0];\n      if (input.length >= 1 + length) {\n        this.oid = input.subarray(1, 1 + length);\n        return 1 + this.oid.length;\n      }\n    }\n    throw new Error('Invalid oid');\n  }\n\n  /**\n   * Serialize an OID object\n   * @returns {Uint8Array} Array with the serialized value the OID.\n   */\n  write() {\n    return util.concatUint8Array([new Uint8Array([this.oid.length]), this.oid]);\n  }\n\n  /**\n   * Serialize an OID object as a hex string\n   * @returns {string} String with the hex value of the OID.\n   */\n  toHex() {\n    return util.uint8ArrayToHex(this.oid);\n  }\n\n  /**\n   * If a known curve object identifier, return the canonical name of the curve\n   * @returns {enums.curve} String with the canonical name of the curve\n   * @throws if unknown\n   */\n  getName() {\n    const name = knownOIDs[this.toHex()];\n    if (!name) {\n      throw new Error('Unknown curve object identifier.');\n    }\n\n    return name;\n  }\n}\n\nexport default OID;\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n/**\n * @fileoverview Functions for reading and writing packets\n * @module packet/packet\n */\n\nimport { ArrayStream, getWriter as streamGetWriter } from '@openpgp/web-stream-tools';\nimport enums from '../enums';\nimport util from '../util';\n\nexport function readSimpleLength(bytes) {\n  let len = 0;\n  let offset;\n  const type = bytes[0];\n\n\n  if (type < 192) {\n    [len] = bytes;\n    offset = 1;\n  } else if (type < 255) {\n    len = ((bytes[0] - 192) << 8) + (bytes[1]) + 192;\n    offset = 2;\n  } else if (type === 255) {\n    len = util.readNumber(bytes.subarray(1, 1 + 4));\n    offset = 5;\n  }\n\n  return {\n    len: len,\n    offset: offset\n  };\n}\n\n/**\n * Encodes a given integer of length to the openpgp length specifier to a\n * string\n *\n * @param {Integer} length - The length to encode\n * @returns {Uint8Array} String with openpgp length representation.\n */\nexport function writeSimpleLength(length) {\n  if (length < 192) {\n    return new Uint8Array([length]);\n  } else if (length > 191 && length < 8384) {\n    /*\n      * let a = (total data packet length) - 192 let bc = two octet\n      * representation of a let d = b + 192\n      */\n    return new Uint8Array([((length - 192) >> 8) + 192, (length - 192) & 0xFF]);\n  }\n  return util.concatUint8Array([new Uint8Array([255]), util.writeNumber(length, 4)]);\n}\n\nexport function writePartialLength(power) {\n  if (power < 0 || power > 30) {\n    throw new Error('Partial Length power must be between 1 and 30');\n  }\n  return new Uint8Array([224 + power]);\n}\n\nexport function writeTag(tag_type) {\n  /* we're only generating v4 packet headers here */\n  return new Uint8Array([0xC0 | tag_type]);\n}\n\n/**\n * Writes a packet header version 4 with the given tag_type and length to a\n * string\n *\n * @param {Integer} tag_type - Tag type\n * @param {Integer} length - Length of the payload\n * @returns {String} String of the header.\n */\nexport function writeHeader(tag_type, length) {\n  /* we're only generating v4 packet headers here */\n  return util.concatUint8Array([writeTag(tag_type), writeSimpleLength(length)]);\n}\n\n/**\n * Whether the packet type supports partial lengths per RFC4880\n * @param {Integer} tag - Tag type\n * @returns {Boolean} String of the header.\n */\nexport function supportsStreaming(tag) {\n  return [\n    enums.packet.literalData,\n    enums.packet.compressedData,\n    enums.packet.symmetricallyEncryptedData,\n    enums.packet.symEncryptedIntegrityProtectedData,\n    enums.packet.aeadEncryptedData\n  ].includes(tag);\n}\n\n/**\n * Generic static Packet Parser function\n *\n * @param {Uint8Array | ReadableStream<Uint8Array>} input - Input stream as string\n * @param {Function} callback - Function to call with the parsed packet\n * @returns {Boolean} Returns false if the stream was empty and parsing is done, and true otherwise.\n */\nexport async function readPacket(reader, useStreamType, callback) {\n  let writer;\n  let callbackReturned;\n  try {\n    const peekedBytes = await reader.peekBytes(2);\n    // some sanity checks\n    if (!peekedBytes || peekedBytes.length < 2 || (peekedBytes[0] & 0x80) === 0) {\n      throw new Error('Error during parsing. This message / key probably does not conform to a valid OpenPGP format.');\n    }\n    const headerByte = await reader.readByte();\n    let tag = -1;\n    let format = -1;\n    let packetLength;\n\n    format = 0; // 0 = old format; 1 = new format\n    if ((headerByte & 0x40) !== 0) {\n      format = 1;\n    }\n\n    let packetLengthType;\n    if (format) {\n      // new format header\n      tag = headerByte & 0x3F; // bit 5-0\n    } else {\n      // old format header\n      tag = (headerByte & 0x3F) >> 2; // bit 5-2\n      packetLengthType = headerByte & 0x03; // bit 1-0\n    }\n\n    const packetSupportsStreaming = supportsStreaming(tag);\n    let packet = null;\n    if (useStreamType && packetSupportsStreaming) {\n      if (useStreamType === 'array') {\n        const arrayStream = new ArrayStream();\n        writer = streamGetWriter(arrayStream);\n        packet = arrayStream;\n      } else {\n        const transform = new TransformStream();\n        writer = streamGetWriter(transform.writable);\n        packet = transform.readable;\n      }\n      // eslint-disable-next-line callback-return\n      callbackReturned = callback({ tag, packet });\n    } else {\n      packet = [];\n    }\n\n    let wasPartialLength;\n    do {\n      if (!format) {\n        // 4.2.1. Old Format Packet Lengths\n        switch (packetLengthType) {\n          case 0:\n            // The packet has a one-octet length. The header is 2 octets\n            // long.\n            packetLength = await reader.readByte();\n            break;\n          case 1:\n            // The packet has a two-octet length. The header is 3 octets\n            // long.\n            packetLength = (await reader.readByte() << 8) | await reader.readByte();\n            break;\n          case 2:\n            // The packet has a four-octet length. The header is 5\n            // octets long.\n            packetLength = (await reader.readByte() << 24) | (await reader.readByte() << 16) | (await reader.readByte() <<\n              8) | await reader.readByte();\n            break;\n          default:\n            // 3 - The packet is of indeterminate length. The header is 1\n            // octet long, and the implementation must determine how long\n            // the packet is. If the packet is in a file, this means that\n            // the packet extends until the end of the file. In general,\n            // an implementation SHOULD NOT use indeterminate-length\n            // packets except where the end of the data will be clear\n            // from the context, and even then it is better to use a\n            // definite length, or a new format header. The new format\n            // headers described below have a mechanism for precisely\n            // encoding data of indeterminate length.\n            packetLength = Infinity;\n            break;\n        }\n      } else { // 4.2.2. New Format Packet Lengths\n        // 4.2.2.1. One-Octet Lengths\n        const lengthByte = await reader.readByte();\n        wasPartialLength = false;\n        if (lengthByte < 192) {\n          packetLength = lengthByte;\n          // 4.2.2.2. Two-Octet Lengths\n        } else if (lengthByte >= 192 && lengthByte < 224) {\n          packetLength = ((lengthByte - 192) << 8) + (await reader.readByte()) + 192;\n          // 4.2.2.4. Partial Body Lengths\n        } else if (lengthByte > 223 && lengthByte < 255) {\n          packetLength = 1 << (lengthByte & 0x1F);\n          wasPartialLength = true;\n          if (!packetSupportsStreaming) {\n            throw new TypeError('This packet type does not support partial lengths.');\n          }\n          // 4.2.2.3. Five-Octet Lengths\n        } else {\n          packetLength = (await reader.readByte() << 24) | (await reader.readByte() << 16) | (await reader.readByte() <<\n            8) | await reader.readByte();\n        }\n      }\n      if (packetLength > 0) {\n        let bytesRead = 0;\n        while (true) {\n          if (writer) await writer.ready;\n          const { done, value } = await reader.read();\n          if (done) {\n            if (packetLength === Infinity) break;\n            throw new Error('Unexpected end of packet');\n          }\n          const chunk = packetLength === Infinity ? value : value.subarray(0, packetLength - bytesRead);\n          if (writer) await writer.write(chunk);\n          else packet.push(chunk);\n          bytesRead += value.length;\n          if (bytesRead >= packetLength) {\n            reader.unshift(value.subarray(packetLength - bytesRead + value.length));\n            break;\n          }\n        }\n      }\n    } while (wasPartialLength);\n\n    if (writer) {\n      await writer.ready;\n      await writer.close();\n    } else {\n      packet = util.concatUint8Array(packet);\n      // eslint-disable-next-line callback-return\n      await callback({ tag, packet });\n    }\n  } catch (e) {\n    if (writer) {\n      await writer.abort(e);\n      return true;\n    } else {\n      throw e;\n    }\n  } finally {\n    if (writer) {\n      await callbackReturned;\n    }\n  }\n}\n\nexport class UnsupportedError extends Error {\n  constructor(...params) {\n    super(...params);\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, UnsupportedError);\n    }\n\n    this.name = 'UnsupportedError';\n  }\n}\n\n// unknown packet types are handled differently depending on the packet criticality\nexport class UnknownPacketError extends UnsupportedError {\n  constructor(...params) {\n    super(...params);\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, UnsupportedError);\n    }\n\n    this.name = 'UnknownPacketError';\n  }\n}\n\nexport class MalformedPacketError extends UnsupportedError {\n  constructor(...params) {\n    super(...params);\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, UnsupportedError);\n    }\n\n    this.name = 'MalformedPacketError';\n  }\n}\n\nexport class UnparseablePacket {\n  constructor(tag, rawContent) {\n    this.tag = tag;\n    this.rawContent = rawContent;\n  }\n\n  write() {\n    return this.rawContent;\n  }\n}\n","// OpenPGP.js - An OpenPGP implementation in javascript\n// Copyright (C) 2018 Proton Technologies AG\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n/**\n * @fileoverview Implementation of EdDSA following RFC4880bis-03 for OpenPGP\n * @module crypto/public_key/elliptic/eddsa\n */\n\nimport ed25519 from '@openpgp/tweetnacl';\nimport util from '../../../util';\nimport enums from '../../../enums';\nimport { getHashByteLength } from '../../hash';\nimport { getRandomBytes } from '../../random';\nimport { b64ToUint8Array, uint8ArrayToB64 } from '../../../encoding/base64';\n\n\n/**\n * Generate (non-legacy) EdDSA key\n * @param {module:enums.publicKey} algo - Algorithm identifier\n * @returns {Promise<{ A: Uint8Array, seed: Uint8Array }>}\n */\nexport async function generate(algo) {\n  switch (algo) {\n    case enums.publicKey.ed25519:\n      try {\n        const webCrypto = util.getWebCrypto();\n        const webCryptoKey = await webCrypto.generateKey('Ed25519', true, ['sign', 'verify'])\n          .catch(err => {\n            if (err.name === 'OperationError') { // Temporary (hopefully) fix for WebKit on Linux\n              const newErr = new Error('Unexpected key generation issue');\n              newErr.name = 'NotSupportedError';\n              throw newErr;\n            }\n            throw err;\n          });\n\n        const privateKey = await webCrypto.exportKey('jwk', webCryptoKey.privateKey);\n        const publicKey = await webCrypto.exportKey('jwk', webCryptoKey.publicKey);\n\n        return {\n          A: new Uint8Array(b64ToUint8Array(publicKey.x)),\n          seed: b64ToUint8Array(privateKey.d, true)\n        };\n      } catch (err) {\n        if (err.name !== 'NotSupportedError') {\n          throw err;\n        }\n        const seed = getRandomBytes(getPayloadSize(algo));\n        const { publicKey: A } = ed25519.sign.keyPair.fromSeed(seed);\n        return { A, seed };\n      }\n\n    case enums.publicKey.ed448: {\n      const ed448 = await util.getNobleCurve(enums.publicKey.ed448);\n      const seed = ed448.utils.randomPrivateKey();\n      const A = ed448.getPublicKey(seed);\n      return { A, seed };\n    }\n    default:\n      throw new Error('Unsupported EdDSA algorithm');\n  }\n}\n\n/**\n * Sign a message using the provided key\n * @param {module:enums.publicKey} algo - Algorithm identifier\n * @param {module:enums.hash} hashAlgo - Hash algorithm used to sign (must be sha256 or stronger)\n * @param {Uint8Array} message - Message to sign\n * @param {Uint8Array} publicKey - Public key\n * @param {Uint8Array} privateKey - Private key used to sign the message\n * @param {Uint8Array} hashed - The hashed message\n * @returns {Promise<{\n *   RS: Uint8Array\n * }>} Signature of the message\n * @async\n */\nexport async function sign(algo, hashAlgo, message, publicKey, privateKey, hashed) {\n  if (getHashByteLength(hashAlgo) < getHashByteLength(getPreferredHashAlgo(algo))) {\n    // Enforce digest sizes:\n    // - Ed25519: https://www.rfc-editor.org/rfc/rfc9580.html#section-5.2.3.4-4\n    // - Ed448: https://www.rfc-editor.org/rfc/rfc9580.html#section-5.2.3.5-4\n    throw new Error('Hash algorithm too weak for EdDSA.');\n  }\n  switch (algo) {\n    case enums.publicKey.ed25519:\n      try {\n        const webCrypto = util.getWebCrypto();\n        const jwk = privateKeyToJWK(algo, publicKey, privateKey);\n        const key = await webCrypto.importKey('jwk', jwk, 'Ed25519', false, ['sign']);\n\n        const signature = new Uint8Array(\n          await webCrypto.sign('Ed25519', key, hashed)\n        );\n\n        return { RS: signature };\n      } catch (err) {\n        if (err.name !== 'NotSupportedError') {\n          throw err;\n        }\n        const secretKey = util.concatUint8Array([privateKey, publicKey]);\n        const signature = ed25519.sign.detached(hashed, secretKey);\n        return { RS: signature };\n      }\n\n    case enums.publicKey.ed448: {\n      const ed448 = await util.getNobleCurve(enums.publicKey.ed448);\n      const signature = ed448.sign(hashed, privateKey);\n      return { RS: signature };\n    }\n    default:\n      throw new Error('Unsupported EdDSA algorithm');\n  }\n\n}\n\n/**\n * Verifies if a signature is valid for a message\n * @param {module:enums.publicKey} algo - Algorithm identifier\n * @param {module:enums.hash} hashAlgo - Hash algorithm used in the signature\n * @param  {{ RS: Uint8Array }} signature Signature to verify the message\n * @param {Uint8Array} m - Message to verify\n * @param {Uint8Array} publicKey - Public key used to verify the message\n * @param {Uint8Array} hashed - The hashed message\n * @returns {Boolean}\n * @async\n */\nexport async function verify(algo, hashAlgo, { RS }, m, publicKey, hashed) {\n  if (getHashByteLength(hashAlgo) < getHashByteLength(getPreferredHashAlgo(algo))) {\n    // Enforce digest sizes:\n    // - Ed25519: https://www.rfc-editor.org/rfc/rfc9580.html#section-5.2.3.4-4\n    // - Ed448: https://www.rfc-editor.org/rfc/rfc9580.html#section-5.2.3.5-4\n    throw new Error('Hash algorithm too weak for EdDSA.');\n  }\n  switch (algo) {\n    case enums.publicKey.ed25519:\n      try {\n        const webCrypto = util.getWebCrypto();\n        const jwk = publicKeyToJWK(algo, publicKey);\n        const key = await webCrypto.importKey('jwk', jwk, 'Ed25519', false, ['verify']);\n        const verified = await webCrypto.verify('Ed25519', key, RS, hashed);\n        return verified;\n      } catch (err) {\n        if (err.name !== 'NotSupportedError') {\n          throw err;\n        }\n        return ed25519.sign.detached.verify(hashed, RS, publicKey);\n      }\n\n    case enums.publicKey.ed448: {\n      const ed448 = await util.getNobleCurve(enums.publicKey.ed448);\n      return ed448.verify(RS, hashed, publicKey);\n    }\n    default:\n      throw new Error('Unsupported EdDSA algorithm');\n  }\n}\n/**\n * Validate (non-legacy) EdDSA parameters\n * @param {module:enums.publicKey} algo - Algorithm identifier\n * @param {Uint8Array} A - EdDSA public point\n * @param {Uint8Array} seed - EdDSA secret seed\n * @param {Uint8Array} oid - (legacy only) EdDSA OID\n * @returns {Promise<Boolean>} Whether params are valid.\n * @async\n */\nexport async function validateParams(algo, A, seed) {\n  switch (algo) {\n    case enums.publicKey.ed25519: {\n      /**\n       * Derive public point A' from private key\n       * and expect A == A'\n       * TODO: move to sign-verify using WebCrypto (same as ECDSA) when curve is more widely implemented\n       */\n      const { publicKey } = ed25519.sign.keyPair.fromSeed(seed);\n      return util.equalsUint8Array(A, publicKey);\n    }\n\n    case enums.publicKey.ed448: {\n      const ed448 = await util.getNobleCurve(enums.publicKey.ed448);\n\n      const publicKey = ed448.getPublicKey(seed);\n      return util.equalsUint8Array(A, publicKey);\n    }\n    default:\n      return false;\n  }\n}\n\nexport function getPayloadSize(algo) {\n  switch (algo) {\n    case enums.publicKey.ed25519:\n      return 32;\n\n    case enums.publicKey.ed448:\n      return 57;\n\n    default:\n      throw new Error('Unsupported EdDSA algorithm');\n  }\n}\n\nexport function getPreferredHashAlgo(algo) {\n  switch (algo) {\n    case enums.publicKey.ed25519:\n      return enums.hash.sha256;\n    case enums.publicKey.ed448:\n      return enums.hash.sha512;\n    default:\n      throw new Error('Unknown EdDSA algo');\n  }\n}\n\nconst publicKeyToJWK = (algo, publicKey) => {\n  switch (algo) {\n    case enums.publicKey.ed25519: {\n      const jwk = {\n        kty: 'OKP',\n        crv: 'Ed25519',\n        x: uint8ArrayToB64(publicKey, true),\n        ext: true\n      };\n      return jwk;\n    }\n    default:\n      throw new Error('Unsupported EdDSA algorithm');\n  }\n};\n\nconst privateKeyToJWK = (algo, publicKey, privateKey) => {\n  switch (algo) {\n    case enums.publicKey.ed25519: {\n      const jwk = publicKeyToJWK(algo, publicKey);\n      jwk.d = uint8ArrayToB64(privateKey, true);\n      return jwk;\n    }\n    default:\n      throw new Error('Unsupported EdDSA algorithm');\n  }\n};\n","/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-ciphers - MIT License (c) 2023 Paul Miller (paulmillr.com) */\n/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */\nexport function isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n/** Asserts something is boolean. */\nexport function abool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`boolean expected, not ${b}`);\n}\n/** Asserts something is positive integer. */\nexport function anumber(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error('positive integer expected, got ' + n);\n}\n/** Asserts something is Uint8Array. */\nexport function abytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n/**\n * Asserts something is hash\n * TODO: remove\n * @deprecated\n */\nexport function ahash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.createHasher');\n    anumber(h.outputLen);\n    anumber(h.blockLen);\n}\n/** Asserts a hash instance has not been destroyed / finished */\nexport function aexists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\n/** Asserts output is properly-sized byte array */\nexport function aoutput(out, instance) {\n    abytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error('digestInto() expects output buffer of length at least ' + min);\n    }\n}\n/** Cast u8 / u16 / u32 to u8. */\nexport function u8(arr) {\n    return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** Cast u8 / u16 / u32 to u32. */\nexport function u32(arr) {\n    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n/** Zeroize a byte array. Warning: JS provides no guarantees. */\nexport function clean(...arrays) {\n    for (let i = 0; i < arrays.length; i++) {\n        arrays[i].fill(0);\n    }\n}\n/** Create DataView of an array for easy byte-level manipulation. */\nexport function createView(arr) {\n    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\nconst hasHexBuiltin = /* @__PURE__ */ (() => \n// @ts-ignore\ntypeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function')();\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * Convert byte array to hex string. Uses built-in function, when available.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return bytes.toHex();\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * Convert hex string to byte array. Uses built-in function, when available.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return Uint8Array.fromHex(hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n// Used in micro\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    return BigInt(hex === '' ? '0' : '0x' + hex); // Big Endian\n}\n// Used in ff1\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\n// Used in micro, ff1\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\n// TODO: remove\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n/**\n * Converts string to bytes using UTF8 encoding.\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('string expected');\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(new Uint8Array([97, 98, 99])) // 'abc'\n */\nexport function bytesToUtf8(bytes) {\n    return new TextDecoder().decode(bytes);\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    else if (isBytes(data))\n        data = copyBytes(data);\n    else\n        throw new Error('Uint8Array expected, got ' + typeof data);\n    return data;\n}\n/**\n * Checks if two U8A use same underlying buffer and overlaps.\n * This is invalid and can corrupt data.\n */\nexport function overlapBytes(a, b) {\n    return (a.buffer === b.buffer && // best we can do, may fail with an obscure Proxy\n        a.byteOffset < b.byteOffset + b.byteLength && // a starts before b end\n        b.byteOffset < a.byteOffset + a.byteLength // b starts before a end\n    );\n}\n/**\n * If input and output overlap and input starts before output, we will overwrite end of input before\n * we start processing it, so this is not supported for most ciphers (except chacha/salse, which designed with this)\n */\nexport function complexOverlapBytes(input, output) {\n    // This is very cursed. It works somehow, but I'm completely unsure,\n    // reasoning about overlapping aligned windows is very hard.\n    if (overlapBytes(input, output) && input.byteOffset < output.byteOffset)\n        throw new Error('complex overlap of input and output is not supported');\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\nexport function checkOpts(defaults, opts) {\n    if (opts == null || typeof opts !== 'object')\n        throw new Error('options must be defined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\n/** Compares 2 uint8array-s in kinda constant time. */\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n// TODO: remove\n/** For runtime check if class implements interface. */\nexport class Hash {\n}\n/**\n * Wraps a cipher: validates args, ensures encrypt() can only be called once.\n * @__NO_SIDE_EFFECTS__\n */\nexport const wrapCipher = (params, constructor) => {\n    function wrappedCipher(key, ...args) {\n        // Validate key\n        abytes(key);\n        // Big-Endian hardware is rare. Just in case someone still decides to run ciphers:\n        if (!isLE)\n            throw new Error('Non little-endian hardware is not yet supported');\n        // Validate nonce if nonceLength is present\n        if (params.nonceLength !== undefined) {\n            const nonce = args[0];\n            if (!nonce)\n                throw new Error('nonce / iv required');\n            if (params.varSizeNonce)\n                abytes(nonce);\n            else\n                abytes(nonce, params.nonceLength);\n        }\n        // Validate AAD if tagLength present\n        const tagl = params.tagLength;\n        if (tagl && args[1] !== undefined) {\n            abytes(args[1]);\n        }\n        const cipher = constructor(key, ...args);\n        const checkOutput = (fnLength, output) => {\n            if (output !== undefined) {\n                if (fnLength !== 2)\n                    throw new Error('cipher output not supported');\n                abytes(output);\n            }\n        };\n        // Create wrapped cipher with validation and single-use encryption\n        let called = false;\n        const wrCipher = {\n            encrypt(data, output) {\n                if (called)\n                    throw new Error('cannot encrypt() twice with same key + nonce');\n                called = true;\n                abytes(data);\n                checkOutput(cipher.encrypt.length, output);\n                return cipher.encrypt(data, output);\n            },\n            decrypt(data, output) {\n                abytes(data);\n                if (tagl && data.length < tagl)\n                    throw new Error('invalid ciphertext length: smaller than tagLength=' + tagl);\n                checkOutput(cipher.decrypt.length, output);\n                return cipher.decrypt(data, output);\n            },\n        };\n        return wrCipher;\n    }\n    Object.assign(wrappedCipher, params);\n    return wrappedCipher;\n};\n/**\n * By default, returns u8a of length.\n * When out is available, it checks it for validity and uses it.\n */\nexport function getOutput(expectedLength, out, onlyAligned = true) {\n    if (out === undefined)\n        return new Uint8Array(expectedLength);\n    if (out.length !== expectedLength)\n        throw new Error('invalid output length, expected ' + expectedLength + ', got: ' + out.length);\n    if (onlyAligned && !isAligned32(out))\n        throw new Error('invalid output, must be aligned');\n    return out;\n}\n/** Polyfill for Safari 14. */\nexport function setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\nexport function u64Lengths(dataLength, aadLength, isLE) {\n    abool(isLE);\n    const num = new Uint8Array(16);\n    const view = createView(num);\n    setBigUint64(view, 0, BigInt(aadLength), isLE);\n    setBigUint64(view, 8, BigInt(dataLength), isLE);\n    return num;\n}\n// Is byte array aligned to 4 byte offset (u32)?\nexport function isAligned32(bytes) {\n    return bytes.byteOffset % 4 === 0;\n}\n// copy bytes to new u8a (aligned). Because Buffer.slice is broken.\nexport function copyBytes(bytes) {\n    return Uint8Array.from(bytes);\n}\n//# sourceMappingURL=utils.js.map","/**\n * GHash from AES-GCM and its little-endian \"mirror image\" Polyval from AES-SIV.\n *\n * Implemented in terms of GHash with conversion function for keys\n * GCM GHASH from\n * [NIST SP800-38d](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf),\n * SIV from\n * [RFC 8452](https://datatracker.ietf.org/doc/html/rfc8452).\n *\n * GHASH   modulo: x^128 + x^7   + x^2   + x     + 1\n * POLYVAL modulo: x^128 + x^127 + x^126 + x^121 + 1\n *\n * @module\n */\n// prettier-ignore\nimport { abytes, aexists, aoutput, clean, copyBytes, createView, Hash, toBytes, u32, } from \"./utils.js\";\nconst BLOCK_SIZE = 16;\n// TODO: rewrite\n// temporary padding buffer\nconst ZEROS16 = /* @__PURE__ */ new Uint8Array(16);\nconst ZEROS32 = u32(ZEROS16);\nconst POLY = 0xe1; // v = 2*v % POLY\n// v = 2*v % POLY\n// NOTE: because x + x = 0 (add/sub is same), mul2(x) != x+x\n// We can multiply any number using montgomery ladder and this function (works as double, add is simple xor)\nconst mul2 = (s0, s1, s2, s3) => {\n    const hiBit = s3 & 1;\n    return {\n        s3: (s2 << 31) | (s3 >>> 1),\n        s2: (s1 << 31) | (s2 >>> 1),\n        s1: (s0 << 31) | (s1 >>> 1),\n        s0: (s0 >>> 1) ^ ((POLY << 24) & -(hiBit & 1)), // reduce % poly\n    };\n};\nconst swapLE = (n) => (((n >>> 0) & 0xff) << 24) |\n    (((n >>> 8) & 0xff) << 16) |\n    (((n >>> 16) & 0xff) << 8) |\n    ((n >>> 24) & 0xff) |\n    0;\n/**\n * `mulX_POLYVAL(ByteReverse(H))` from spec\n * @param k mutated in place\n */\nexport function _toGHASHKey(k) {\n    k.reverse();\n    const hiBit = k[15] & 1;\n    // k >>= 1\n    let carry = 0;\n    for (let i = 0; i < k.length; i++) {\n        const t = k[i];\n        k[i] = (t >>> 1) | carry;\n        carry = (t & 1) << 7;\n    }\n    k[0] ^= -hiBit & 0xe1; // if (hiBit) n ^= 0xe1000000000000000000000000000000;\n    return k;\n}\nconst estimateWindow = (bytes) => {\n    if (bytes > 64 * 1024)\n        return 8;\n    if (bytes > 1024)\n        return 4;\n    return 2;\n};\nclass GHASH {\n    // We select bits per window adaptively based on expectedLength\n    constructor(key, expectedLength) {\n        this.blockLen = BLOCK_SIZE;\n        this.outputLen = BLOCK_SIZE;\n        this.s0 = 0;\n        this.s1 = 0;\n        this.s2 = 0;\n        this.s3 = 0;\n        this.finished = false;\n        key = toBytes(key);\n        abytes(key, 16);\n        const kView = createView(key);\n        let k0 = kView.getUint32(0, false);\n        let k1 = kView.getUint32(4, false);\n        let k2 = kView.getUint32(8, false);\n        let k3 = kView.getUint32(12, false);\n        // generate table of doubled keys (half of montgomery ladder)\n        const doubles = [];\n        for (let i = 0; i < 128; i++) {\n            doubles.push({ s0: swapLE(k0), s1: swapLE(k1), s2: swapLE(k2), s3: swapLE(k3) });\n            ({ s0: k0, s1: k1, s2: k2, s3: k3 } = mul2(k0, k1, k2, k3));\n        }\n        const W = estimateWindow(expectedLength || 1024);\n        if (![1, 2, 4, 8].includes(W))\n            throw new Error('ghash: invalid window size, expected 2, 4 or 8');\n        this.W = W;\n        const bits = 128; // always 128 bits;\n        const windows = bits / W;\n        const windowSize = (this.windowSize = 2 ** W);\n        const items = [];\n        // Create precompute table for window of W bits\n        for (let w = 0; w < windows; w++) {\n            // truth table: 00, 01, 10, 11\n            for (let byte = 0; byte < windowSize; byte++) {\n                // prettier-ignore\n                let s0 = 0, s1 = 0, s2 = 0, s3 = 0;\n                for (let j = 0; j < W; j++) {\n                    const bit = (byte >>> (W - j - 1)) & 1;\n                    if (!bit)\n                        continue;\n                    const { s0: d0, s1: d1, s2: d2, s3: d3 } = doubles[W * w + j];\n                    (s0 ^= d0), (s1 ^= d1), (s2 ^= d2), (s3 ^= d3);\n                }\n                items.push({ s0, s1, s2, s3 });\n            }\n        }\n        this.t = items;\n    }\n    _updateBlock(s0, s1, s2, s3) {\n        (s0 ^= this.s0), (s1 ^= this.s1), (s2 ^= this.s2), (s3 ^= this.s3);\n        const { W, t, windowSize } = this;\n        // prettier-ignore\n        let o0 = 0, o1 = 0, o2 = 0, o3 = 0;\n        const mask = (1 << W) - 1; // 2**W will kill performance.\n        let w = 0;\n        for (const num of [s0, s1, s2, s3]) {\n            for (let bytePos = 0; bytePos < 4; bytePos++) {\n                const byte = (num >>> (8 * bytePos)) & 0xff;\n                for (let bitPos = 8 / W - 1; bitPos >= 0; bitPos--) {\n                    const bit = (byte >>> (W * bitPos)) & mask;\n                    const { s0: e0, s1: e1, s2: e2, s3: e3 } = t[w * windowSize + bit];\n                    (o0 ^= e0), (o1 ^= e1), (o2 ^= e2), (o3 ^= e3);\n                    w += 1;\n                }\n            }\n        }\n        this.s0 = o0;\n        this.s1 = o1;\n        this.s2 = o2;\n        this.s3 = o3;\n    }\n    update(data) {\n        aexists(this);\n        data = toBytes(data);\n        abytes(data);\n        const b32 = u32(data);\n        const blocks = Math.floor(data.length / BLOCK_SIZE);\n        const left = data.length % BLOCK_SIZE;\n        for (let i = 0; i < blocks; i++) {\n            this._updateBlock(b32[i * 4 + 0], b32[i * 4 + 1], b32[i * 4 + 2], b32[i * 4 + 3]);\n        }\n        if (left) {\n            ZEROS16.set(data.subarray(blocks * BLOCK_SIZE));\n            this._updateBlock(ZEROS32[0], ZEROS32[1], ZEROS32[2], ZEROS32[3]);\n            clean(ZEROS32); // clean tmp buffer\n        }\n        return this;\n    }\n    destroy() {\n        const { t } = this;\n        // clean precompute table\n        for (const elm of t) {\n            (elm.s0 = 0), (elm.s1 = 0), (elm.s2 = 0), (elm.s3 = 0);\n        }\n    }\n    digestInto(out) {\n        aexists(this);\n        aoutput(out, this);\n        this.finished = true;\n        const { s0, s1, s2, s3 } = this;\n        const o32 = u32(out);\n        o32[0] = s0;\n        o32[1] = s1;\n        o32[2] = s2;\n        o32[3] = s3;\n        return out;\n    }\n    digest() {\n        const res = new Uint8Array(BLOCK_SIZE);\n        this.digestInto(res);\n        this.destroy();\n        return res;\n    }\n}\nclass Polyval extends GHASH {\n    constructor(key, expectedLength) {\n        key = toBytes(key);\n        abytes(key);\n        const ghKey = _toGHASHKey(copyBytes(key));\n        super(ghKey, expectedLength);\n        clean(ghKey);\n    }\n    update(data) {\n        data = toBytes(data);\n        aexists(this);\n        const b32 = u32(data);\n        const left = data.length % BLOCK_SIZE;\n        const blocks = Math.floor(data.length / BLOCK_SIZE);\n        for (let i = 0; i < blocks; i++) {\n            this._updateBlock(swapLE(b32[i * 4 + 3]), swapLE(b32[i * 4 + 2]), swapLE(b32[i * 4 + 1]), swapLE(b32[i * 4 + 0]));\n        }\n        if (left) {\n            ZEROS16.set(data.subarray(blocks * BLOCK_SIZE));\n            this._updateBlock(swapLE(ZEROS32[3]), swapLE(ZEROS32[2]), swapLE(ZEROS32[1]), swapLE(ZEROS32[0]));\n            clean(ZEROS32);\n        }\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        aoutput(out, this);\n        this.finished = true;\n        // tmp ugly hack\n        const { s0, s1, s2, s3 } = this;\n        const o32 = u32(out);\n        o32[0] = s0;\n        o32[1] = s1;\n        o32[2] = s2;\n        o32[3] = s3;\n        return out.reverse();\n    }\n}\nfunction wrapConstructorWithKey(hashCons) {\n    const hashC = (msg, key) => hashCons(key, msg.length).update(toBytes(msg)).digest();\n    const tmp = hashCons(new Uint8Array(16), 0);\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (key, expectedLength) => hashCons(key, expectedLength);\n    return hashC;\n}\n/** GHash MAC for AES-GCM. */\nexport const ghash = wrapConstructorWithKey((key, expectedLength) => new GHASH(key, expectedLength));\n/** Polyval MAC for AES-SIV. */\nexport const polyval = wrapConstructorWithKey((key, expectedLength) => new Polyval(key, expectedLength));\n//# sourceMappingURL=_polyval.js.map","/**\n * [AES](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard)\n * a.k.a. Advanced Encryption Standard\n * is a variant of Rijndael block cipher, standardized by NIST in 2001.\n * We provide the fastest available pure JS implementation.\n *\n * Data is split into 128-bit blocks. Encrypted in 10/12/14 rounds (128/192/256 bits). In every round:\n * 1. **S-box**, table substitution\n * 2. **Shift rows**, cyclic shift left of all rows of data array\n * 3. **Mix columns**, multiplying every column by fixed polynomial\n * 4. **Add round key**, round_key xor i-th column of array\n *\n * Check out [FIPS-197](https://csrc.nist.gov/files/pubs/fips/197/final/docs/fips-197.pdf)\n * and [original proposal](https://csrc.nist.gov/csrc/media/projects/cryptographic-standards-and-guidelines/documents/aes-development/rijndael-ammended.pdf)\n * @module\n */\nimport { ghash, polyval } from \"./_polyval.js\";\n// prettier-ignore\nimport { abytes, clean, complexOverlapBytes, concatBytes, copyBytes, createView, equalBytes, getOutput, isAligned32, overlapBytes, setBigUint64, u32, u64Lengths, u8, wrapCipher, } from \"./utils.js\";\nconst BLOCK_SIZE = 16;\nconst BLOCK_SIZE32 = 4;\nconst EMPTY_BLOCK = /* @__PURE__ */ new Uint8Array(BLOCK_SIZE);\nconst POLY = 0x11b; // 1 + x + x**3 + x**4 + x**8\n// TODO: remove multiplication, binary ops only\nfunction mul2(n) {\n    return (n << 1) ^ (POLY & -(n >> 7));\n}\nfunction mul(a, b) {\n    let res = 0;\n    for (; b > 0; b >>= 1) {\n        // Montgomery ladder\n        res ^= a & -(b & 1); // if (b&1) res ^=a (but const-time).\n        a = mul2(a); // a = 2*a\n    }\n    return res;\n}\n// AES S-box is generated using finite field inversion,\n// an affine transform, and xor of a constant 0x63.\nconst sbox = /* @__PURE__ */ (() => {\n    const t = new Uint8Array(256);\n    for (let i = 0, x = 1; i < 256; i++, x ^= mul2(x))\n        t[i] = x;\n    const box = new Uint8Array(256);\n    box[0] = 0x63; // first elm\n    for (let i = 0; i < 255; i++) {\n        let x = t[255 - i];\n        x |= x << 8;\n        box[t[i]] = (x ^ (x >> 4) ^ (x >> 5) ^ (x >> 6) ^ (x >> 7) ^ 0x63) & 0xff;\n    }\n    clean(t);\n    return box;\n})();\n// Inverted S-box\nconst invSbox = /* @__PURE__ */ sbox.map((_, j) => sbox.indexOf(j));\n// Rotate u32 by 8\nconst rotr32_8 = (n) => (n << 24) | (n >>> 8);\nconst rotl32_8 = (n) => (n << 8) | (n >>> 24);\n// The byte swap operation for uint32 (LE<->BE)\nconst byteSwap = (word) => ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff);\n// T-table is optimization suggested in 5.2 of original proposal (missed from FIPS-197). Changes:\n// - LE instead of BE\n// - bigger tables: T0 and T1 are merged into T01 table and T2 & T3 into T23;\n//   so index is u16, instead of u8. This speeds up things, unexpectedly\nfunction genTtable(sbox, fn) {\n    if (sbox.length !== 256)\n        throw new Error('Wrong sbox length');\n    const T0 = new Uint32Array(256).map((_, j) => fn(sbox[j]));\n    const T1 = T0.map(rotl32_8);\n    const T2 = T1.map(rotl32_8);\n    const T3 = T2.map(rotl32_8);\n    const T01 = new Uint32Array(256 * 256);\n    const T23 = new Uint32Array(256 * 256);\n    const sbox2 = new Uint16Array(256 * 256);\n    for (let i = 0; i < 256; i++) {\n        for (let j = 0; j < 256; j++) {\n            const idx = i * 256 + j;\n            T01[idx] = T0[i] ^ T1[j];\n            T23[idx] = T2[i] ^ T3[j];\n            sbox2[idx] = (sbox[i] << 8) | sbox[j];\n        }\n    }\n    return { sbox, sbox2, T0, T1, T2, T3, T01, T23 };\n}\nconst tableEncoding = /* @__PURE__ */ genTtable(sbox, (s) => (mul(s, 3) << 24) | (s << 16) | (s << 8) | mul(s, 2));\nconst tableDecoding = /* @__PURE__ */ genTtable(invSbox, (s) => (mul(s, 11) << 24) | (mul(s, 13) << 16) | (mul(s, 9) << 8) | mul(s, 14));\nconst xPowers = /* @__PURE__ */ (() => {\n    const p = new Uint8Array(16);\n    for (let i = 0, x = 1; i < 16; i++, x = mul2(x))\n        p[i] = x;\n    return p;\n})();\n/** Key expansion used in CTR. */\nfunction expandKeyLE(key) {\n    abytes(key);\n    const len = key.length;\n    if (![16, 24, 32].includes(len))\n        throw new Error('aes: invalid key size, should be 16, 24 or 32, got ' + len);\n    const { sbox2 } = tableEncoding;\n    const toClean = [];\n    if (!isAligned32(key))\n        toClean.push((key = copyBytes(key)));\n    const k32 = u32(key);\n    const Nk = k32.length;\n    const subByte = (n) => applySbox(sbox2, n, n, n, n);\n    const xk = new Uint32Array(len + 28); // expanded key\n    xk.set(k32);\n    // 4.3.1 Key expansion\n    for (let i = Nk; i < xk.length; i++) {\n        let t = xk[i - 1];\n        if (i % Nk === 0)\n            t = subByte(rotr32_8(t)) ^ xPowers[i / Nk - 1];\n        else if (Nk > 6 && i % Nk === 4)\n            t = subByte(t);\n        xk[i] = xk[i - Nk] ^ t;\n    }\n    clean(...toClean);\n    return xk;\n}\nfunction expandKeyDecLE(key) {\n    const encKey = expandKeyLE(key);\n    const xk = encKey.slice();\n    const Nk = encKey.length;\n    const { sbox2 } = tableEncoding;\n    const { T0, T1, T2, T3 } = tableDecoding;\n    // Inverse key by chunks of 4 (rounds)\n    for (let i = 0; i < Nk; i += 4) {\n        for (let j = 0; j < 4; j++)\n            xk[i + j] = encKey[Nk - i - 4 + j];\n    }\n    clean(encKey);\n    // apply InvMixColumn except first & last round\n    for (let i = 4; i < Nk - 4; i++) {\n        const x = xk[i];\n        const w = applySbox(sbox2, x, x, x, x);\n        xk[i] = T0[w & 0xff] ^ T1[(w >>> 8) & 0xff] ^ T2[(w >>> 16) & 0xff] ^ T3[w >>> 24];\n    }\n    return xk;\n}\n// Apply tables\nfunction apply0123(T01, T23, s0, s1, s2, s3) {\n    return (T01[((s0 << 8) & 0xff00) | ((s1 >>> 8) & 0xff)] ^\n        T23[((s2 >>> 8) & 0xff00) | ((s3 >>> 24) & 0xff)]);\n}\nfunction applySbox(sbox2, s0, s1, s2, s3) {\n    return (sbox2[(s0 & 0xff) | (s1 & 0xff00)] |\n        (sbox2[((s2 >>> 16) & 0xff) | ((s3 >>> 16) & 0xff00)] << 16));\n}\nfunction encrypt(xk, s0, s1, s2, s3) {\n    const { sbox2, T01, T23 } = tableEncoding;\n    let k = 0;\n    (s0 ^= xk[k++]), (s1 ^= xk[k++]), (s2 ^= xk[k++]), (s3 ^= xk[k++]);\n    const rounds = xk.length / 4 - 2;\n    for (let i = 0; i < rounds; i++) {\n        const t0 = xk[k++] ^ apply0123(T01, T23, s0, s1, s2, s3);\n        const t1 = xk[k++] ^ apply0123(T01, T23, s1, s2, s3, s0);\n        const t2 = xk[k++] ^ apply0123(T01, T23, s2, s3, s0, s1);\n        const t3 = xk[k++] ^ apply0123(T01, T23, s3, s0, s1, s2);\n        (s0 = t0), (s1 = t1), (s2 = t2), (s3 = t3);\n    }\n    // last round (without mixcolumns, so using SBOX2 table)\n    const t0 = xk[k++] ^ applySbox(sbox2, s0, s1, s2, s3);\n    const t1 = xk[k++] ^ applySbox(sbox2, s1, s2, s3, s0);\n    const t2 = xk[k++] ^ applySbox(sbox2, s2, s3, s0, s1);\n    const t3 = xk[k++] ^ applySbox(sbox2, s3, s0, s1, s2);\n    return { s0: t0, s1: t1, s2: t2, s3: t3 };\n}\n// Can't be merged with encrypt: arg positions for apply0123 / applySbox are different\nfunction decrypt(xk, s0, s1, s2, s3) {\n    const { sbox2, T01, T23 } = tableDecoding;\n    let k = 0;\n    (s0 ^= xk[k++]), (s1 ^= xk[k++]), (s2 ^= xk[k++]), (s3 ^= xk[k++]);\n    const rounds = xk.length / 4 - 2;\n    for (let i = 0; i < rounds; i++) {\n        const t0 = xk[k++] ^ apply0123(T01, T23, s0, s3, s2, s1);\n        const t1 = xk[k++] ^ apply0123(T01, T23, s1, s0, s3, s2);\n        const t2 = xk[k++] ^ apply0123(T01, T23, s2, s1, s0, s3);\n        const t3 = xk[k++] ^ apply0123(T01, T23, s3, s2, s1, s0);\n        (s0 = t0), (s1 = t1), (s2 = t2), (s3 = t3);\n    }\n    // Last round\n    const t0 = xk[k++] ^ applySbox(sbox2, s0, s3, s2, s1);\n    const t1 = xk[k++] ^ applySbox(sbox2, s1, s0, s3, s2);\n    const t2 = xk[k++] ^ applySbox(sbox2, s2, s1, s0, s3);\n    const t3 = xk[k++] ^ applySbox(sbox2, s3, s2, s1, s0);\n    return { s0: t0, s1: t1, s2: t2, s3: t3 };\n}\n// TODO: investigate merging with ctr32\nfunction ctrCounter(xk, nonce, src, dst) {\n    abytes(nonce, BLOCK_SIZE);\n    abytes(src);\n    const srcLen = src.length;\n    dst = getOutput(srcLen, dst);\n    complexOverlapBytes(src, dst);\n    const ctr = nonce;\n    const c32 = u32(ctr);\n    // Fill block (empty, ctr=0)\n    let { s0, s1, s2, s3 } = encrypt(xk, c32[0], c32[1], c32[2], c32[3]);\n    const src32 = u32(src);\n    const dst32 = u32(dst);\n    // process blocks\n    for (let i = 0; i + 4 <= src32.length; i += 4) {\n        dst32[i + 0] = src32[i + 0] ^ s0;\n        dst32[i + 1] = src32[i + 1] ^ s1;\n        dst32[i + 2] = src32[i + 2] ^ s2;\n        dst32[i + 3] = src32[i + 3] ^ s3;\n        // Full 128 bit counter with wrap around\n        let carry = 1;\n        for (let i = ctr.length - 1; i >= 0; i--) {\n            carry = (carry + (ctr[i] & 0xff)) | 0;\n            ctr[i] = carry & 0xff;\n            carry >>>= 8;\n        }\n        ({ s0, s1, s2, s3 } = encrypt(xk, c32[0], c32[1], c32[2], c32[3]));\n    }\n    // leftovers (less than block)\n    // It's possible to handle > u32 fast, but is it worth it?\n    const start = BLOCK_SIZE * Math.floor(src32.length / BLOCK_SIZE32);\n    if (start < srcLen) {\n        const b32 = new Uint32Array([s0, s1, s2, s3]);\n        const buf = u8(b32);\n        for (let i = start, pos = 0; i < srcLen; i++, pos++)\n            dst[i] = src[i] ^ buf[pos];\n        clean(b32);\n    }\n    return dst;\n}\n// AES CTR with overflowing 32 bit counter\n// It's possible to do 32le significantly simpler (and probably faster) by using u32.\n// But, we need both, and perf bottleneck is in ghash anyway.\nfunction ctr32(xk, isLE, nonce, src, dst) {\n    abytes(nonce, BLOCK_SIZE);\n    abytes(src);\n    dst = getOutput(src.length, dst);\n    const ctr = nonce; // write new value to nonce, so it can be re-used\n    const c32 = u32(ctr);\n    const view = createView(ctr);\n    const src32 = u32(src);\n    const dst32 = u32(dst);\n    const ctrPos = isLE ? 0 : 12;\n    const srcLen = src.length;\n    // Fill block (empty, ctr=0)\n    let ctrNum = view.getUint32(ctrPos, isLE); // read current counter value\n    let { s0, s1, s2, s3 } = encrypt(xk, c32[0], c32[1], c32[2], c32[3]);\n    // process blocks\n    for (let i = 0; i + 4 <= src32.length; i += 4) {\n        dst32[i + 0] = src32[i + 0] ^ s0;\n        dst32[i + 1] = src32[i + 1] ^ s1;\n        dst32[i + 2] = src32[i + 2] ^ s2;\n        dst32[i + 3] = src32[i + 3] ^ s3;\n        ctrNum = (ctrNum + 1) >>> 0; // u32 wrap\n        view.setUint32(ctrPos, ctrNum, isLE);\n        ({ s0, s1, s2, s3 } = encrypt(xk, c32[0], c32[1], c32[2], c32[3]));\n    }\n    // leftovers (less than a block)\n    const start = BLOCK_SIZE * Math.floor(src32.length / BLOCK_SIZE32);\n    if (start < srcLen) {\n        const b32 = new Uint32Array([s0, s1, s2, s3]);\n        const buf = u8(b32);\n        for (let i = start, pos = 0; i < srcLen; i++, pos++)\n            dst[i] = src[i] ^ buf[pos];\n        clean(b32);\n    }\n    return dst;\n}\n/**\n * CTR: counter mode. Creates stream cipher.\n * Requires good IV. Parallelizable. OK, but no MAC.\n */\nexport const ctr = /* @__PURE__ */ wrapCipher({ blockSize: 16, nonceLength: 16 }, function aesctr(key, nonce) {\n    function processCtr(buf, dst) {\n        abytes(buf);\n        if (dst !== undefined) {\n            abytes(dst);\n            if (!isAligned32(dst))\n                throw new Error('unaligned destination');\n        }\n        const xk = expandKeyLE(key);\n        const n = copyBytes(nonce); // align + avoid changing\n        const toClean = [xk, n];\n        if (!isAligned32(buf))\n            toClean.push((buf = copyBytes(buf)));\n        const out = ctrCounter(xk, n, buf, dst);\n        clean(...toClean);\n        return out;\n    }\n    return {\n        encrypt: (plaintext, dst) => processCtr(plaintext, dst),\n        decrypt: (ciphertext, dst) => processCtr(ciphertext, dst),\n    };\n});\nfunction validateBlockDecrypt(data) {\n    abytes(data);\n    if (data.length % BLOCK_SIZE !== 0) {\n        throw new Error('aes-(cbc/ecb).decrypt ciphertext should consist of blocks with size ' + BLOCK_SIZE);\n    }\n}\nfunction validateBlockEncrypt(plaintext, pcks5, dst) {\n    abytes(plaintext);\n    let outLen = plaintext.length;\n    const remaining = outLen % BLOCK_SIZE;\n    if (!pcks5 && remaining !== 0)\n        throw new Error('aec/(cbc-ecb): unpadded plaintext with disabled padding');\n    if (!isAligned32(plaintext))\n        plaintext = copyBytes(plaintext);\n    const b = u32(plaintext);\n    if (pcks5) {\n        let left = BLOCK_SIZE - remaining;\n        if (!left)\n            left = BLOCK_SIZE; // if no bytes left, create empty padding block\n        outLen = outLen + left;\n    }\n    dst = getOutput(outLen, dst);\n    complexOverlapBytes(plaintext, dst);\n    const o = u32(dst);\n    return { b, o, out: dst };\n}\nfunction validatePCKS(data, pcks5) {\n    if (!pcks5)\n        return data;\n    const len = data.length;\n    if (!len)\n        throw new Error('aes/pcks5: empty ciphertext not allowed');\n    const lastByte = data[len - 1];\n    if (lastByte <= 0 || lastByte > 16)\n        throw new Error('aes/pcks5: wrong padding');\n    const out = data.subarray(0, -lastByte);\n    for (let i = 0; i < lastByte; i++)\n        if (data[len - i - 1] !== lastByte)\n            throw new Error('aes/pcks5: wrong padding');\n    return out;\n}\nfunction padPCKS(left) {\n    const tmp = new Uint8Array(16);\n    const tmp32 = u32(tmp);\n    tmp.set(left);\n    const paddingByte = BLOCK_SIZE - left.length;\n    for (let i = BLOCK_SIZE - paddingByte; i < BLOCK_SIZE; i++)\n        tmp[i] = paddingByte;\n    return tmp32;\n}\n/**\n * ECB: Electronic CodeBook. Simple deterministic replacement.\n * Dangerous: always map x to y. See [AES Penguin](https://words.filippo.io/the-ecb-penguin/).\n */\nexport const ecb = /* @__PURE__ */ wrapCipher({ blockSize: 16 }, function aesecb(key, opts = {}) {\n    const pcks5 = !opts.disablePadding;\n    return {\n        encrypt(plaintext, dst) {\n            const { b, o, out: _out } = validateBlockEncrypt(plaintext, pcks5, dst);\n            const xk = expandKeyLE(key);\n            let i = 0;\n            for (; i + 4 <= b.length;) {\n                const { s0, s1, s2, s3 } = encrypt(xk, b[i + 0], b[i + 1], b[i + 2], b[i + 3]);\n                (o[i++] = s0), (o[i++] = s1), (o[i++] = s2), (o[i++] = s3);\n            }\n            if (pcks5) {\n                const tmp32 = padPCKS(plaintext.subarray(i * 4));\n                const { s0, s1, s2, s3 } = encrypt(xk, tmp32[0], tmp32[1], tmp32[2], tmp32[3]);\n                (o[i++] = s0), (o[i++] = s1), (o[i++] = s2), (o[i++] = s3);\n            }\n            clean(xk);\n            return _out;\n        },\n        decrypt(ciphertext, dst) {\n            validateBlockDecrypt(ciphertext);\n            const xk = expandKeyDecLE(key);\n            dst = getOutput(ciphertext.length, dst);\n            const toClean = [xk];\n            if (!isAligned32(ciphertext))\n                toClean.push((ciphertext = copyBytes(ciphertext)));\n            complexOverlapBytes(ciphertext, dst);\n            const b = u32(ciphertext);\n            const o = u32(dst);\n            for (let i = 0; i + 4 <= b.length;) {\n                const { s0, s1, s2, s3 } = decrypt(xk, b[i + 0], b[i + 1], b[i + 2], b[i + 3]);\n                (o[i++] = s0), (o[i++] = s1), (o[i++] = s2), (o[i++] = s3);\n            }\n            clean(...toClean);\n            return validatePCKS(dst, pcks5);\n        },\n    };\n});\n/**\n * CBC: Cipher-Block-Chaining. Key is previous round’s block.\n * Fragile: needs proper padding. Unauthenticated: needs MAC.\n */\nexport const cbc = /* @__PURE__ */ wrapCipher({ blockSize: 16, nonceLength: 16 }, function aescbc(key, iv, opts = {}) {\n    const pcks5 = !opts.disablePadding;\n    return {\n        encrypt(plaintext, dst) {\n            const xk = expandKeyLE(key);\n            const { b, o, out: _out } = validateBlockEncrypt(plaintext, pcks5, dst);\n            let _iv = iv;\n            const toClean = [xk];\n            if (!isAligned32(_iv))\n                toClean.push((_iv = copyBytes(_iv)));\n            const n32 = u32(_iv);\n            // prettier-ignore\n            let s0 = n32[0], s1 = n32[1], s2 = n32[2], s3 = n32[3];\n            let i = 0;\n            for (; i + 4 <= b.length;) {\n                (s0 ^= b[i + 0]), (s1 ^= b[i + 1]), (s2 ^= b[i + 2]), (s3 ^= b[i + 3]);\n                ({ s0, s1, s2, s3 } = encrypt(xk, s0, s1, s2, s3));\n                (o[i++] = s0), (o[i++] = s1), (o[i++] = s2), (o[i++] = s3);\n            }\n            if (pcks5) {\n                const tmp32 = padPCKS(plaintext.subarray(i * 4));\n                (s0 ^= tmp32[0]), (s1 ^= tmp32[1]), (s2 ^= tmp32[2]), (s3 ^= tmp32[3]);\n                ({ s0, s1, s2, s3 } = encrypt(xk, s0, s1, s2, s3));\n                (o[i++] = s0), (o[i++] = s1), (o[i++] = s2), (o[i++] = s3);\n            }\n            clean(...toClean);\n            return _out;\n        },\n        decrypt(ciphertext, dst) {\n            validateBlockDecrypt(ciphertext);\n            const xk = expandKeyDecLE(key);\n            let _iv = iv;\n            const toClean = [xk];\n            if (!isAligned32(_iv))\n                toClean.push((_iv = copyBytes(_iv)));\n            const n32 = u32(_iv);\n            dst = getOutput(ciphertext.length, dst);\n            if (!isAligned32(ciphertext))\n                toClean.push((ciphertext = copyBytes(ciphertext)));\n            complexOverlapBytes(ciphertext, dst);\n            const b = u32(ciphertext);\n            const o = u32(dst);\n            // prettier-ignore\n            let s0 = n32[0], s1 = n32[1], s2 = n32[2], s3 = n32[3];\n            for (let i = 0; i + 4 <= b.length;) {\n                // prettier-ignore\n                const ps0 = s0, ps1 = s1, ps2 = s2, ps3 = s3;\n                (s0 = b[i + 0]), (s1 = b[i + 1]), (s2 = b[i + 2]), (s3 = b[i + 3]);\n                const { s0: o0, s1: o1, s2: o2, s3: o3 } = decrypt(xk, s0, s1, s2, s3);\n                (o[i++] = o0 ^ ps0), (o[i++] = o1 ^ ps1), (o[i++] = o2 ^ ps2), (o[i++] = o3 ^ ps3);\n            }\n            clean(...toClean);\n            return validatePCKS(dst, pcks5);\n        },\n    };\n});\n/**\n * CFB: Cipher Feedback Mode. The input for the block cipher is the previous cipher output.\n * Unauthenticated: needs MAC.\n */\nexport const cfb = /* @__PURE__ */ wrapCipher({ blockSize: 16, nonceLength: 16 }, function aescfb(key, iv) {\n    function processCfb(src, isEncrypt, dst) {\n        abytes(src);\n        const srcLen = src.length;\n        dst = getOutput(srcLen, dst);\n        if (overlapBytes(src, dst))\n            throw new Error('overlapping src and dst not supported.');\n        const xk = expandKeyLE(key);\n        let _iv = iv;\n        const toClean = [xk];\n        if (!isAligned32(_iv))\n            toClean.push((_iv = copyBytes(_iv)));\n        if (!isAligned32(src))\n            toClean.push((src = copyBytes(src)));\n        const src32 = u32(src);\n        const dst32 = u32(dst);\n        const next32 = isEncrypt ? dst32 : src32;\n        const n32 = u32(_iv);\n        // prettier-ignore\n        let s0 = n32[0], s1 = n32[1], s2 = n32[2], s3 = n32[3];\n        for (let i = 0; i + 4 <= src32.length;) {\n            const { s0: e0, s1: e1, s2: e2, s3: e3 } = encrypt(xk, s0, s1, s2, s3);\n            dst32[i + 0] = src32[i + 0] ^ e0;\n            dst32[i + 1] = src32[i + 1] ^ e1;\n            dst32[i + 2] = src32[i + 2] ^ e2;\n            dst32[i + 3] = src32[i + 3] ^ e3;\n            (s0 = next32[i++]), (s1 = next32[i++]), (s2 = next32[i++]), (s3 = next32[i++]);\n        }\n        // leftovers (less than block)\n        const start = BLOCK_SIZE * Math.floor(src32.length / BLOCK_SIZE32);\n        if (start < srcLen) {\n            ({ s0, s1, s2, s3 } = encrypt(xk, s0, s1, s2, s3));\n            const buf = u8(new Uint32Array([s0, s1, s2, s3]));\n            for (let i = start, pos = 0; i < srcLen; i++, pos++)\n                dst[i] = src[i] ^ buf[pos];\n            clean(buf);\n        }\n        clean(...toClean);\n        return dst;\n    }\n    return {\n        encrypt: (plaintext, dst) => processCfb(plaintext, true, dst),\n        decrypt: (ciphertext, dst) => processCfb(ciphertext, false, dst),\n    };\n});\n// TODO: merge with chacha, however gcm has bitLen while chacha has byteLen\nfunction computeTag(fn, isLE, key, data, AAD) {\n    const aadLength = AAD ? AAD.length : 0;\n    const h = fn.create(key, data.length + aadLength);\n    if (AAD)\n        h.update(AAD);\n    const num = u64Lengths(8 * data.length, 8 * aadLength, isLE);\n    h.update(data);\n    h.update(num);\n    const res = h.digest();\n    clean(num);\n    return res;\n}\n/**\n * GCM: Galois/Counter Mode.\n * Modern, parallel version of CTR, with MAC.\n * Be careful: MACs can be forged.\n * Unsafe to use random nonces under the same key, due to collision chance.\n * As for nonce size, prefer 12-byte, instead of 8-byte.\n */\nexport const gcm = /* @__PURE__ */ wrapCipher({ blockSize: 16, nonceLength: 12, tagLength: 16, varSizeNonce: true }, function aesgcm(key, nonce, AAD) {\n    // NIST 800-38d doesn't enforce minimum nonce length.\n    // We enforce 8 bytes for compat with openssl.\n    // 12 bytes are recommended. More than 12 bytes would be converted into 12.\n    if (nonce.length < 8)\n        throw new Error('aes/gcm: invalid nonce length');\n    const tagLength = 16;\n    function _computeTag(authKey, tagMask, data) {\n        const tag = computeTag(ghash, false, authKey, data, AAD);\n        for (let i = 0; i < tagMask.length; i++)\n            tag[i] ^= tagMask[i];\n        return tag;\n    }\n    function deriveKeys() {\n        const xk = expandKeyLE(key);\n        const authKey = EMPTY_BLOCK.slice();\n        const counter = EMPTY_BLOCK.slice();\n        ctr32(xk, false, counter, counter, authKey);\n        // NIST 800-38d, page 15: different behavior for 96-bit and non-96-bit nonces\n        if (nonce.length === 12) {\n            counter.set(nonce);\n        }\n        else {\n            const nonceLen = EMPTY_BLOCK.slice();\n            const view = createView(nonceLen);\n            setBigUint64(view, 8, BigInt(nonce.length * 8), false);\n            // ghash(nonce || u64be(0) || u64be(nonceLen*8))\n            const g = ghash.create(authKey).update(nonce).update(nonceLen);\n            g.digestInto(counter); // digestInto doesn't trigger '.destroy'\n            g.destroy();\n        }\n        const tagMask = ctr32(xk, false, counter, EMPTY_BLOCK);\n        return { xk, authKey, counter, tagMask };\n    }\n    return {\n        encrypt(plaintext) {\n            const { xk, authKey, counter, tagMask } = deriveKeys();\n            const out = new Uint8Array(plaintext.length + tagLength);\n            const toClean = [xk, authKey, counter, tagMask];\n            if (!isAligned32(plaintext))\n                toClean.push((plaintext = copyBytes(plaintext)));\n            ctr32(xk, false, counter, plaintext, out.subarray(0, plaintext.length));\n            const tag = _computeTag(authKey, tagMask, out.subarray(0, out.length - tagLength));\n            toClean.push(tag);\n            out.set(tag, plaintext.length);\n            clean(...toClean);\n            return out;\n        },\n        decrypt(ciphertext) {\n            const { xk, authKey, counter, tagMask } = deriveKeys();\n            const toClean = [xk, authKey, tagMask, counter];\n            if (!isAligned32(ciphertext))\n                toClean.push((ciphertext = copyBytes(ciphertext)));\n            const data = ciphertext.subarray(0, -tagLength);\n            const passedTag = ciphertext.subarray(-tagLength);\n            const tag = _computeTag(authKey, tagMask, data);\n            toClean.push(tag);\n            if (!equalBytes(tag, passedTag))\n                throw new Error('aes/gcm: invalid ghash tag');\n            const out = ctr32(xk, false, counter, data);\n            clean(...toClean);\n            return out;\n        },\n    };\n});\nconst limit = (name, min, max) => (value) => {\n    if (!Number.isSafeInteger(value) || min > value || value > max) {\n        const minmax = '[' + min + '..' + max + ']';\n        throw new Error('' + name + ': expected value in range ' + minmax + ', got ' + value);\n    }\n};\n/**\n * AES-GCM-SIV: classic AES-GCM with nonce-misuse resistance.\n * Guarantees that, when a nonce is repeated, the only security loss is that identical\n * plaintexts will produce identical ciphertexts.\n * RFC 8452, https://datatracker.ietf.org/doc/html/rfc8452\n */\nexport const gcmsiv = /* @__PURE__ */ wrapCipher({ blockSize: 16, nonceLength: 12, tagLength: 16, varSizeNonce: true }, function aessiv(key, nonce, AAD) {\n    const tagLength = 16;\n    // From RFC 8452: Section 6\n    const AAD_LIMIT = limit('AAD', 0, 2 ** 36);\n    const PLAIN_LIMIT = limit('plaintext', 0, 2 ** 36);\n    const NONCE_LIMIT = limit('nonce', 12, 12);\n    const CIPHER_LIMIT = limit('ciphertext', 16, 2 ** 36 + 16);\n    abytes(key, 16, 24, 32);\n    NONCE_LIMIT(nonce.length);\n    if (AAD !== undefined)\n        AAD_LIMIT(AAD.length);\n    function deriveKeys() {\n        const xk = expandKeyLE(key);\n        const encKey = new Uint8Array(key.length);\n        const authKey = new Uint8Array(16);\n        const toClean = [xk, encKey];\n        let _nonce = nonce;\n        if (!isAligned32(_nonce))\n            toClean.push((_nonce = copyBytes(_nonce)));\n        const n32 = u32(_nonce);\n        // prettier-ignore\n        let s0 = 0, s1 = n32[0], s2 = n32[1], s3 = n32[2];\n        let counter = 0;\n        for (const derivedKey of [authKey, encKey].map(u32)) {\n            const d32 = u32(derivedKey);\n            for (let i = 0; i < d32.length; i += 2) {\n                // aes(u32le(0) || nonce)[:8] || aes(u32le(1) || nonce)[:8] ...\n                const { s0: o0, s1: o1 } = encrypt(xk, s0, s1, s2, s3);\n                d32[i + 0] = o0;\n                d32[i + 1] = o1;\n                s0 = ++counter; // increment counter inside state\n            }\n        }\n        const res = { authKey, encKey: expandKeyLE(encKey) };\n        // Cleanup\n        clean(...toClean);\n        return res;\n    }\n    function _computeTag(encKey, authKey, data) {\n        const tag = computeTag(polyval, true, authKey, data, AAD);\n        // Compute the expected tag by XORing S_s and the nonce, clearing the\n        // most significant bit of the last byte and encrypting with the\n        // message-encryption key.\n        for (let i = 0; i < 12; i++)\n            tag[i] ^= nonce[i];\n        tag[15] &= 0x7f; // Clear the highest bit\n        // encrypt tag as block\n        const t32 = u32(tag);\n        // prettier-ignore\n        let s0 = t32[0], s1 = t32[1], s2 = t32[2], s3 = t32[3];\n        ({ s0, s1, s2, s3 } = encrypt(encKey, s0, s1, s2, s3));\n        (t32[0] = s0), (t32[1] = s1), (t32[2] = s2), (t32[3] = s3);\n        return tag;\n    }\n    // actual decrypt/encrypt of message.\n    function processSiv(encKey, tag, input) {\n        let block = copyBytes(tag);\n        block[15] |= 0x80; // Force highest bit\n        const res = ctr32(encKey, true, block, input);\n        // Cleanup\n        clean(block);\n        return res;\n    }\n    return {\n        encrypt(plaintext) {\n            PLAIN_LIMIT(plaintext.length);\n            const { encKey, authKey } = deriveKeys();\n            const tag = _computeTag(encKey, authKey, plaintext);\n            const toClean = [encKey, authKey, tag];\n            if (!isAligned32(plaintext))\n                toClean.push((plaintext = copyBytes(plaintext)));\n            const out = new Uint8Array(plaintext.length + tagLength);\n            out.set(tag, plaintext.length);\n            out.set(processSiv(encKey, tag, plaintext));\n            // Cleanup\n            clean(...toClean);\n            return out;\n        },\n        decrypt(ciphertext) {\n            CIPHER_LIMIT(ciphertext.length);\n            const tag = ciphertext.subarray(-tagLength);\n            const { encKey, authKey } = deriveKeys();\n            const toClean = [encKey, authKey];\n            if (!isAligned32(ciphertext))\n                toClean.push((ciphertext = copyBytes(ciphertext)));\n            const plaintext = processSiv(encKey, tag, ciphertext.subarray(0, -tagLength));\n            const expectedTag = _computeTag(encKey, authKey, plaintext);\n            toClean.push(expectedTag);\n            if (!equalBytes(tag, expectedTag)) {\n                clean(...toClean);\n                throw new Error('invalid polyval tag');\n            }\n            // Cleanup\n            clean(...toClean);\n            return plaintext;\n        },\n    };\n});\n/**\n * AES-GCM-SIV, not AES-SIV.\n * This is legace name, use `gcmsiv` export instead.\n * @deprecated\n */\nexport const siv = gcmsiv;\nfunction isBytes32(a) {\n    return (a instanceof Uint32Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint32Array'));\n}\nfunction encryptBlock(xk, block) {\n    abytes(block, 16);\n    if (!isBytes32(xk))\n        throw new Error('_encryptBlock accepts result of expandKeyLE');\n    const b32 = u32(block);\n    let { s0, s1, s2, s3 } = encrypt(xk, b32[0], b32[1], b32[2], b32[3]);\n    (b32[0] = s0), (b32[1] = s1), (b32[2] = s2), (b32[3] = s3);\n    return block;\n}\nfunction decryptBlock(xk, block) {\n    abytes(block, 16);\n    if (!isBytes32(xk))\n        throw new Error('_decryptBlock accepts result of expandKeyLE');\n    const b32 = u32(block);\n    let { s0, s1, s2, s3 } = decrypt(xk, b32[0], b32[1], b32[2], b32[3]);\n    (b32[0] = s0), (b32[1] = s1), (b32[2] = s2), (b32[3] = s3);\n    return block;\n}\n/**\n * AES-W (base for AESKW/AESKWP).\n * Specs: [SP800-38F](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-38F.pdf),\n * [RFC 3394](https://datatracker.ietf.org/doc/rfc3394/),\n * [RFC 5649](https://datatracker.ietf.org/doc/rfc5649/).\n */\nconst AESW = {\n    /*\n    High-level pseudocode:\n    ```\n    A: u64 = IV\n    out = []\n    for (let i=0, ctr = 0; i<6; i++) {\n      for (const chunk of chunks(plaintext, 8)) {\n        A ^= swapEndianess(ctr++)\n        [A, res] = chunks(encrypt(A || chunk), 8);\n        out ||= res\n      }\n    }\n    out = A || out\n    ```\n    Decrypt is the same, but reversed.\n    */\n    encrypt(kek, out) {\n        // Size is limited to 4GB, otherwise ctr will overflow and we'll need to switch to bigints.\n        // If you need it larger, open an issue.\n        if (out.length >= 2 ** 32)\n            throw new Error('plaintext should be less than 4gb');\n        const xk = expandKeyLE(kek);\n        if (out.length === 16)\n            encryptBlock(xk, out);\n        else {\n            const o32 = u32(out);\n            // prettier-ignore\n            let a0 = o32[0], a1 = o32[1]; // A\n            for (let j = 0, ctr = 1; j < 6; j++) {\n                for (let pos = 2; pos < o32.length; pos += 2, ctr++) {\n                    const { s0, s1, s2, s3 } = encrypt(xk, a0, a1, o32[pos], o32[pos + 1]);\n                    // A = MSB(64, B) ^ t where t = (n*j)+i\n                    (a0 = s0), (a1 = s1 ^ byteSwap(ctr)), (o32[pos] = s2), (o32[pos + 1] = s3);\n                }\n            }\n            (o32[0] = a0), (o32[1] = a1); // out = A || out\n        }\n        xk.fill(0);\n    },\n    decrypt(kek, out) {\n        if (out.length - 8 >= 2 ** 32)\n            throw new Error('ciphertext should be less than 4gb');\n        const xk = expandKeyDecLE(kek);\n        const chunks = out.length / 8 - 1; // first chunk is IV\n        if (chunks === 1)\n            decryptBlock(xk, out);\n        else {\n            const o32 = u32(out);\n            // prettier-ignore\n            let a0 = o32[0], a1 = o32[1]; // A\n            for (let j = 0, ctr = chunks * 6; j < 6; j++) {\n                for (let pos = chunks * 2; pos >= 1; pos -= 2, ctr--) {\n                    a1 ^= byteSwap(ctr);\n                    const { s0, s1, s2, s3 } = decrypt(xk, a0, a1, o32[pos], o32[pos + 1]);\n                    (a0 = s0), (a1 = s1), (o32[pos] = s2), (o32[pos + 1] = s3);\n                }\n            }\n            (o32[0] = a0), (o32[1] = a1);\n        }\n        xk.fill(0);\n    },\n};\nconst AESKW_IV = /* @__PURE__ */ new Uint8Array(8).fill(0xa6); // A6A6A6A6A6A6A6A6\n/**\n * AES-KW (key-wrap). Injects static IV into plaintext, adds counter, encrypts 6 times.\n * Reduces block size from 16 to 8 bytes.\n * For padded version, use aeskwp.\n * [RFC 3394](https://datatracker.ietf.org/doc/rfc3394/),\n * [NIST.SP.800-38F](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-38F.pdf).\n */\nexport const aeskw = /* @__PURE__ */ wrapCipher({ blockSize: 8 }, (kek) => ({\n    encrypt(plaintext) {\n        if (!plaintext.length || plaintext.length % 8 !== 0)\n            throw new Error('invalid plaintext length');\n        if (plaintext.length === 8)\n            throw new Error('8-byte keys not allowed in AESKW, use AESKWP instead');\n        const out = concatBytes(AESKW_IV, plaintext);\n        AESW.encrypt(kek, out);\n        return out;\n    },\n    decrypt(ciphertext) {\n        // ciphertext must be at least 24 bytes and a multiple of 8 bytes\n        // 24 because should have at least two block (1 iv + 2).\n        // Replace with 16 to enable '8-byte keys'\n        if (ciphertext.length % 8 !== 0 || ciphertext.length < 3 * 8)\n            throw new Error('invalid ciphertext length');\n        const out = copyBytes(ciphertext);\n        AESW.decrypt(kek, out);\n        if (!equalBytes(out.subarray(0, 8), AESKW_IV))\n            throw new Error('integrity check failed');\n        out.subarray(0, 8).fill(0); // ciphertext.subarray(0, 8) === IV, but we clean it anyway\n        return out.subarray(8);\n    },\n}));\n/*\nWe don't support 8-byte keys. The rabbit hole:\n\n- Wycheproof says: \"NIST SP 800-38F does not define the wrapping of 8 byte keys.\n  RFC 3394 Section 2  on the other hand specifies that 8 byte keys are wrapped\n  by directly encrypting one block with AES.\"\n    - https://github.com/C2SP/wycheproof/blob/master/doc/key_wrap.md\n    - \"RFC 3394 specifies in Section 2, that the input for the key wrap\n      algorithm must be at least two blocks and otherwise the constant\n      field and key are simply encrypted with ECB as a single block\"\n- What RFC 3394 actually says (in Section 2):\n    - \"Before being wrapped, the key data is parsed into n blocks of 64 bits.\n      The only restriction the key wrap algorithm places on n is that n be\n      at least two\"\n    - \"For key data with length less than or equal to 64 bits, the constant\n      field used in this specification and the key data form a single\n      128-bit codebook input making this key wrap unnecessary.\"\n- Which means \"assert(n >= 2)\" and \"use something else for 8 byte keys\"\n- NIST SP800-38F actually prohibits 8-byte in \"5.3.1 Mandatory Limits\".\n  It states that plaintext for KW should be \"2 to 2^54 -1 semiblocks\".\n- So, where does \"directly encrypt single block with AES\" come from?\n    - Not RFC 3394. Pseudocode of key wrap in 2.2 explicitly uses\n      loop of 6 for any code path\n    - There is a weird W3C spec:\n      https://www.w3.org/TR/2002/REC-xmlenc-core-20021210/Overview.html#kw-aes128\n    - This spec is outdated, as admitted by Wycheproof authors\n    - There is RFC 5649 for padded key wrap, which is padding construction on\n      top of AESKW. In '4.1.2' it says: \"If the padded plaintext contains exactly\n      eight octets, then prepend the AIV as defined in Section 3 above to P[1] and\n      encrypt the resulting 128-bit block using AES in ECB mode [Modes] with key\n      K (the KEK).  In this case, the output is two 64-bit blocks C[0] and C[1]:\"\n    - Browser subtle crypto is actually crashes on wrapping keys less than 16 bytes:\n      `Error: error:1C8000E6:Provider routines::invalid input length] { opensslErrorStack: [ 'error:030000BD:digital envelope routines::update error' ]`\n\nIn the end, seems like a bug in Wycheproof.\nThe 8-byte check can be easily disabled inside of AES_W.\n*/\nconst AESKWP_IV = 0xa65959a6; // single u32le value\n/**\n * AES-KW, but with padding and allows random keys.\n * Second u32 of IV is used as counter for length.\n * [RFC 5649](https://www.rfc-editor.org/rfc/rfc5649)\n */\nexport const aeskwp = /* @__PURE__ */ wrapCipher({ blockSize: 8 }, (kek) => ({\n    encrypt(plaintext) {\n        if (!plaintext.length)\n            throw new Error('invalid plaintext length');\n        const padded = Math.ceil(plaintext.length / 8) * 8;\n        const out = new Uint8Array(8 + padded);\n        out.set(plaintext, 8);\n        const out32 = u32(out);\n        out32[0] = AESKWP_IV;\n        out32[1] = byteSwap(plaintext.length);\n        AESW.encrypt(kek, out);\n        return out;\n    },\n    decrypt(ciphertext) {\n        // 16 because should have at least one block\n        if (ciphertext.length < 16)\n            throw new Error('invalid ciphertext length');\n        const out = copyBytes(ciphertext);\n        const o32 = u32(out);\n        AESW.decrypt(kek, out);\n        const len = byteSwap(o32[1]) >>> 0;\n        const padded = Math.ceil(len / 8) * 8;\n        if (o32[0] !== AESKWP_IV || out.length - 8 !== padded)\n            throw new Error('integrity check failed');\n        for (let i = len; i < padded; i++)\n            if (out[8 + i] !== 0)\n                throw new Error('integrity check failed');\n        out.subarray(0, 8).fill(0); // ciphertext.subarray(0, 8) === IV, but we clean it anyway\n        return out.subarray(8, 8 + len);\n    },\n}));\n/** Unsafe low-level internal methods. May change at any time. */\nexport const unsafe = {\n    expandKeyLE,\n    expandKeyDecLE,\n    encrypt,\n    decrypt,\n    encryptBlock,\n    decryptBlock,\n    ctrCounter,\n    ctr32,\n};\n//# sourceMappingURL=aes.js.map","import enums from '../../enums';\n\nexport async function getLegacyCipher(algo) {\n  switch (algo) {\n    case enums.symmetric.aes128:\n    case enums.symmetric.aes192:\n    case enums.symmetric.aes256:\n      throw new Error('Not a legacy cipher');\n    case enums.symmetric.cast5:\n    case enums.symmetric.blowfish:\n    case enums.symmetric.twofish:\n    case enums.symmetric.tripledes: {\n      const { legacyCiphers } = await import('./legacy_ciphers');\n      const algoName = enums.read(enums.symmetric, algo);\n      const cipher = legacyCiphers.get(algoName);\n      if (!cipher) {\n        throw new Error('Unsupported cipher algorithm');\n      }\n      return cipher;\n    }\n    default:\n      throw new Error('Unsupported cipher algorithm');\n  }\n}\n\n/**\n * Get block size for given cipher algo\n * @param {module:enums.symmetric} algo - alrogithm identifier\n */\nfunction getCipherBlockSize(algo) {\n  switch (algo) {\n    case enums.symmetric.aes128:\n    case enums.symmetric.aes192:\n    case enums.symmetric.aes256:\n    case enums.symmetric.twofish:\n      return 16;\n    case enums.symmetric.blowfish:\n    case enums.symmetric.cast5:\n    case enums.symmetric.tripledes:\n      return 8;\n    default:\n      throw new Error('Unsupported cipher');\n  }\n}\n\n/**\n * Get key size for given cipher algo\n * @param {module:enums.symmetric} algo - alrogithm identifier\n */\nfunction getCipherKeySize(algo) {\n  switch (algo) {\n    case enums.symmetric.aes128:\n    case enums.symmetric.blowfish:\n    case enums.symmetric.cast5:\n      return 16;\n    case enums.symmetric.aes192:\n    case enums.symmetric.tripledes:\n      return 24;\n    case enums.symmetric.aes256:\n    case enums.symmetric.twofish:\n      return 32;\n    default:\n      throw new Error('Unsupported cipher');\n  }\n}\n\n/**\n * Get block and key size for given cipher algo\n * @param {module:enums.symmetric} algo - alrogithm identifier\n */\nexport function getCipherParams(algo) {\n  return { keySize: getCipherKeySize(algo), blockSize: getCipherBlockSize(algo) };\n}\n","// OpenPGP.js - An OpenPGP implementation in javascript\n// Copyright (C) 2015-2016 Decentral\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n/**\n * @fileoverview Implementation of RFC 3394 AES Key Wrap & Key Unwrap funcions\n * @see module:crypto/public_key/elliptic/ecdh\n * @module crypto/aes_kw\n */\n\nimport { aeskw as nobleAesKW } from '@noble/ciphers/aes';\nimport { getCipherParams } from './cipher';\nimport util from '../util';\n\nconst webCrypto = util.getWebCrypto();\n/**\n * AES key wrap\n * @param {enums.symmetric.aes128|enums.symmetric.aes256|enums.symmetric.aes192} algo - AES algo\n * @param {Uint8Array} key - wrapping key\n * @param {Uint8Array} dataToWrap\n * @returns {Uint8Array} wrapped key\n */\nexport async function wrap(algo, key, dataToWrap) {\n  const { keySize } = getCipherParams(algo);\n  // sanity checks, since WebCrypto does not use the `algo` input\n  if (!util.isAES(algo) || key.length !== keySize) {\n    throw new Error('Unexpected algorithm or key size');\n  }\n\n  try {\n    const wrappingKey = await webCrypto.importKey('raw', key, { name: 'AES-KW' }, false, ['wrapKey']);\n    // Import data as HMAC key, as it has no key length requirements\n    const keyToWrap = await webCrypto.importKey('raw', dataToWrap, { name: 'HMAC', hash: 'SHA-256' }, true, ['sign']);\n    const wrapped = await webCrypto.wrapKey('raw', keyToWrap, wrappingKey, { name: 'AES-KW' });\n    return new Uint8Array(wrapped);\n  } catch (err) {\n    // no 192 bit support in Chromium, which throws `OperationError`, see: https://www.chromium.org/blink/webcrypto#TOC-AES-support\n    if (err.name !== 'NotSupportedError' &&\n      !(key.length === 24 && err.name === 'OperationError')) {\n      throw err;\n    }\n    util.printDebugError('Browser did not support operation: ' + err.message);\n  }\n\n  return nobleAesKW(key).encrypt(dataToWrap);\n}\n\n/**\n * AES key unwrap\n * @param {enums.symmetric.aes128|enums.symmetric.aes256|enums.symmetric.aes192} algo - AES algo\n * @param {Uint8Array} key - wrapping key\n * @param {Uint8Array} wrappedData\n * @returns {Uint8Array} unwrapped data\n */\nexport async function unwrap(algo, key, wrappedData) {\n  const { keySize } = getCipherParams(algo);\n  // sanity checks, since WebCrypto does not use the `algo` input\n  if (!util.isAES(algo) || key.length !== keySize) {\n    throw new Error('Unexpected algorithm or key size');\n  }\n\n  let wrappingKey;\n  try {\n    wrappingKey = await webCrypto.importKey('raw', key, { name: 'AES-KW' }, false, ['unwrapKey']);\n  } catch (err) {\n    // no 192 bit support in Chromium, which throws `OperationError`, see: https://www.chromium.org/blink/webcrypto#TOC-AES-support\n    if (err.name !== 'NotSupportedError' &&\n      !(key.length === 24 && err.name === 'OperationError')) {\n      throw err;\n    }\n    util.printDebugError('Browser did not support operation: ' + err.message);\n    return nobleAesKW(key).decrypt(wrappedData);\n  }\n\n  try {\n    const unwrapped = await webCrypto.unwrapKey('raw', wrappedData, wrappingKey, { name: 'AES-KW' }, { name: 'HMAC', hash: 'SHA-256' }, true, ['sign']);\n    return new Uint8Array(await webCrypto.exportKey('raw', unwrapped));\n  } catch (err) {\n    if (err.name === 'OperationError') {\n      throw new Error('Key Data Integrity failed');\n    }\n    throw err;\n  }\n}\n","/**\n * @fileoverview This module implements HKDF using either the WebCrypto API or Node.js' crypto API.\n * @module crypto/hkdf\n */\n\nimport enums from '../enums';\nimport util from '../util';\n\nconst webCrypto = util.getWebCrypto();\n\nexport default async function computeHKDF(hashAlgo, inputKey, salt, info, outLen) {\n  const hash = enums.read(enums.webHash, hashAlgo);\n  if (!hash) throw new Error('Hash algo not supported with HKDF');\n\n  const importedKey = await webCrypto.importKey('raw', inputKey, 'HKDF', false, ['deriveBits']);\n  const bits = await webCrypto.deriveBits({ name: 'HKDF', hash, salt, info }, importedKey, outLen * 8);\n  return new Uint8Array(bits);\n}\n","/**\n * @fileoverview Key encryption and decryption for RFC 6637 ECDH\n * @module crypto/public_key/elliptic/ecdh\n */\n\nimport x25519 from '@openpgp/tweetnacl';\nimport * as aesKW from '../../aes_kw';\nimport { getRandomBytes } from '../../random';\n\nimport enums from '../../../enums';\nimport util from '../../../util';\nimport computeHKDF from '../../hkdf';\nimport { getCipherParams } from '../../cipher';\nimport { b64ToUint8Array, uint8ArrayToB64 } from '../../../encoding/base64';\n\nconst HKDF_INFO = {\n  x25519: util.encodeUTF8('OpenPGP X25519'),\n  x448: util.encodeUTF8('OpenPGP X448')\n};\n\n/**\n * Generate ECDH key for Montgomery curves\n * @param {module:enums.publicKey} algo - Algorithm identifier\n * @returns {Promise<{ A: Uint8Array, k: Uint8Array }>}\n */\nexport async function generate(algo) {\n  switch (algo) {\n    case enums.publicKey.x25519:\n      try {\n        const webCrypto = util.getWebCrypto();\n        const webCryptoKey = await webCrypto.generateKey('X25519', true, ['deriveKey', 'deriveBits'])\n          .catch(err => {\n            if (err.name === 'OperationError') { // Temporary (hopefully) fix for WebKit on Linux\n              const newErr = new Error('Unexpected key generation issue');\n              newErr.name = 'NotSupportedError';\n              throw newErr;\n            }\n            throw err;\n          });\n\n        const privateKey = await webCrypto.exportKey('jwk', webCryptoKey.privateKey);\n        const publicKey = await webCrypto.exportKey('jwk', webCryptoKey.publicKey);\n\n        if (privateKey.x !== publicKey.x) { // Weird issue with Webkit on Linux: https://bugs.webkit.org/show_bug.cgi?id=289693\n          const err = new Error('Unexpected mismatching public point');\n          err.name = 'NotSupportedError';\n          throw err;\n        }\n\n        return {\n          A: new Uint8Array(b64ToUint8Array(publicKey.x)),\n          k: b64ToUint8Array(privateKey.d)\n        };\n      } catch (err) {\n        if (err.name !== 'NotSupportedError') {\n          throw err;\n        }\n        // k stays in little-endian, unlike legacy ECDH over curve25519\n        const k = getRandomBytes(32);\n        const { publicKey: A } = x25519.box.keyPair.fromSecretKey(k);\n        return { A, k };\n      }\n\n    case enums.publicKey.x448: {\n      const x448 = await util.getNobleCurve(enums.publicKey.x448);\n      const k = x448.utils.randomPrivateKey();\n      const A = x448.getPublicKey(k);\n      return { A, k };\n    }\n    default:\n      throw new Error('Unsupported ECDH algorithm');\n  }\n}\n\n/**\n* Validate ECDH parameters\n* @param {module:enums.publicKey} algo - Algorithm identifier\n* @param {Uint8Array} A - ECDH public point\n* @param {Uint8Array} k - ECDH secret scalar\n* @returns {Promise<Boolean>} Whether params are valid.\n* @async\n*/\nexport async function validateParams(algo, A, k) {\n  switch (algo) {\n    case enums.publicKey.x25519: {\n      /**\n       * Derive public point A' from private key\n       * and expect A == A'\n       */\n      const { publicKey } = x25519.box.keyPair.fromSecretKey(k);\n      return util.equalsUint8Array(A, publicKey);\n    }\n    case enums.publicKey.x448: {\n      const x448 = await util.getNobleCurve(enums.publicKey.x448);\n      /**\n       * Derive public point A' from private key\n       * and expect A == A'\n       */\n      const publicKey = x448.getPublicKey(k);\n      return util.equalsUint8Array(A, publicKey);\n    }\n\n    default:\n      return false;\n  }\n}\n\n/**\n * Wrap and encrypt a session key\n *\n * @param {module:enums.publicKey} algo - Algorithm identifier\n * @param {Uint8Array} data - session key data to be encrypted\n * @param {Uint8Array} recipientA - Recipient public key (K_B)\n * @returns {Promise<{\n *  ephemeralPublicKey: Uint8Array,\n * wrappedKey: Uint8Array\n * }>} ephemeral public key (K_A) and encrypted key\n * @async\n */\nexport async function encrypt(algo, data, recipientA) {\n  const { ephemeralPublicKey, sharedSecret } = await generateEphemeralEncryptionMaterial(algo, recipientA);\n  const hkdfInput = util.concatUint8Array([\n    ephemeralPublicKey,\n    recipientA,\n    sharedSecret\n  ]);\n  switch (algo) {\n    case enums.publicKey.x25519: {\n      const cipherAlgo = enums.symmetric.aes128;\n      const { keySize } = getCipherParams(cipherAlgo);\n      const encryptionKey = await computeHKDF(enums.hash.sha256, hkdfInput, new Uint8Array(), HKDF_INFO.x25519, keySize);\n      const wrappedKey = await aesKW.wrap(cipherAlgo, encryptionKey, data);\n      return { ephemeralPublicKey, wrappedKey };\n    }\n    case enums.publicKey.x448: {\n      const cipherAlgo = enums.symmetric.aes256;\n      const { keySize } = getCipherParams(enums.symmetric.aes256);\n      const encryptionKey = await computeHKDF(enums.hash.sha512, hkdfInput, new Uint8Array(), HKDF_INFO.x448, keySize);\n      const wrappedKey = await aesKW.wrap(cipherAlgo, encryptionKey, data);\n      return { ephemeralPublicKey, wrappedKey };\n    }\n\n    default:\n      throw new Error('Unsupported ECDH algorithm');\n  }\n}\n\n/**\n * Decrypt and unwrap the session key\n *\n * @param {module:enums.publicKey} algo - Algorithm identifier\n * @param {Uint8Array} ephemeralPublicKey - (K_A)\n * @param {Uint8Array} wrappedKey,\n * @param {Uint8Array} A - Recipient public key (K_b), needed for KDF\n * @param {Uint8Array} k - Recipient secret key (b)\n * @returns {Promise<Uint8Array>} decrypted session key data\n * @async\n */\nexport async function decrypt(algo, ephemeralPublicKey, wrappedKey, A, k) {\n  const sharedSecret = await recomputeSharedSecret(algo, ephemeralPublicKey, A, k);\n  const hkdfInput = util.concatUint8Array([\n    ephemeralPublicKey,\n    A,\n    sharedSecret\n  ]);\n  switch (algo) {\n    case enums.publicKey.x25519: {\n      const cipherAlgo = enums.symmetric.aes128;\n      const { keySize } = getCipherParams(cipherAlgo);\n      const encryptionKey = await computeHKDF(enums.hash.sha256, hkdfInput, new Uint8Array(), HKDF_INFO.x25519, keySize);\n      return aesKW.unwrap(cipherAlgo, encryptionKey, wrappedKey);\n    }\n    case enums.publicKey.x448: {\n      const cipherAlgo = enums.symmetric.aes256;\n      const { keySize } = getCipherParams(enums.symmetric.aes256);\n      const encryptionKey = await computeHKDF(enums.hash.sha512, hkdfInput, new Uint8Array(), HKDF_INFO.x448, keySize);\n      return aesKW.unwrap(cipherAlgo, encryptionKey, wrappedKey);\n    }\n    default:\n      throw new Error('Unsupported ECDH algorithm');\n  }\n}\n\nexport function getPayloadSize(algo) {\n  switch (algo) {\n    case enums.publicKey.x25519:\n      return 32;\n\n    case enums.publicKey.x448:\n      return 56;\n\n    default:\n      throw new Error('Unsupported ECDH algorithm');\n  }\n}\n\n/**\n * Generate shared secret and ephemeral public key for encryption\n * @returns {Promise<{ ephemeralPublicKey: Uint8Array, sharedSecret: Uint8Array }>} ephemeral public key (K_A) and shared secret\n * @async\n */\nexport async function generateEphemeralEncryptionMaterial(algo, recipientA) {\n  switch (algo) {\n    case enums.publicKey.x25519:\n      try {\n        const webCrypto = util.getWebCrypto();\n        const ephemeralKeyPair = await webCrypto.generateKey('X25519', true, ['deriveKey', 'deriveBits'])\n          .catch(err => {\n            if (err.name === 'OperationError') { // Temporary (hopefully) fix for WebKit on Linux\n              const newErr = new Error('Unexpected key generation issue');\n              newErr.name = 'NotSupportedError';\n              throw newErr;\n            }\n            throw err;\n          });\n        const ephemeralPublicKeyJwt = await webCrypto.exportKey('jwk', ephemeralKeyPair.publicKey);\n        const ephemeralPrivateKeyJwt = await webCrypto.exportKey('jwk', ephemeralKeyPair.privateKey);\n        if (ephemeralPrivateKeyJwt.x !== ephemeralPublicKeyJwt.x) { // Weird issue with Webkit on Linux: https://bugs.webkit.org/show_bug.cgi?id=289693\n          const err = new Error('Unexpected mismatching public point');\n          err.name = 'NotSupportedError';\n          throw err;\n        }\n        const jwk = publicKeyToJWK(algo, recipientA);\n        const recipientPublicKey = await webCrypto.importKey('jwk', jwk, 'X25519', false, []);\n        const sharedSecretBuffer = await webCrypto.deriveBits(\n          { name: 'X25519', public: recipientPublicKey },\n          ephemeralKeyPair.privateKey,\n          getPayloadSize(algo) * 8 // in bits\n        );\n        return {\n          sharedSecret: new Uint8Array(sharedSecretBuffer),\n          ephemeralPublicKey: new Uint8Array(b64ToUint8Array(ephemeralPublicKeyJwt.x))\n        };\n      } catch (err) {\n        if (err.name !== 'NotSupportedError') {\n          throw err;\n        }\n        const ephemeralSecretKey = getRandomBytes(getPayloadSize(algo));\n        const sharedSecret = x25519.scalarMult(ephemeralSecretKey, recipientA);\n        assertNonZeroArray(sharedSecret);\n        const { publicKey: ephemeralPublicKey } = x25519.box.keyPair.fromSecretKey(ephemeralSecretKey);\n        return { ephemeralPublicKey, sharedSecret };\n      }\n    case enums.publicKey.x448: {\n      const x448 = await util.getNobleCurve(enums.publicKey.x448);\n      const ephemeralSecretKey = x448.utils.randomPrivateKey();\n      const sharedSecret = x448.getSharedSecret(ephemeralSecretKey, recipientA);\n      assertNonZeroArray(sharedSecret);\n      const ephemeralPublicKey = x448.getPublicKey(ephemeralSecretKey);\n      return { ephemeralPublicKey, sharedSecret };\n    }\n    default:\n      throw new Error('Unsupported ECDH algorithm');\n  }\n}\n\nexport async function recomputeSharedSecret(algo, ephemeralPublicKey, A, k) {\n  switch (algo) {\n    case enums.publicKey.x25519:\n      try {\n        const webCrypto = util.getWebCrypto();\n        const privateKeyJWK = privateKeyToJWK(algo, A, k);\n        const ephemeralPublicKeyJWK = publicKeyToJWK(algo, ephemeralPublicKey);\n        const privateKey = await webCrypto.importKey('jwk', privateKeyJWK, 'X25519', false, ['deriveKey', 'deriveBits']);\n        const ephemeralPublicKeyReference = await webCrypto.importKey('jwk', ephemeralPublicKeyJWK, 'X25519', false, []);\n        const sharedSecretBuffer = await webCrypto.deriveBits(\n          { name: 'X25519', public: ephemeralPublicKeyReference },\n          privateKey,\n          getPayloadSize(algo) * 8 // in bits\n        );\n        return new Uint8Array(sharedSecretBuffer);\n      } catch (err) {\n        if (err.name !== 'NotSupportedError') {\n          throw err;\n        }\n        const sharedSecret = x25519.scalarMult(k, ephemeralPublicKey);\n        assertNonZeroArray(sharedSecret);\n        return sharedSecret;\n      }\n    case enums.publicKey.x448: {\n      const x448 = await util.getNobleCurve(enums.publicKey.x448);\n      const sharedSecret = x448.getSharedSecret(k, ephemeralPublicKey);\n      assertNonZeroArray(sharedSecret);\n      return sharedSecret;\n    }\n    default:\n      throw new Error('Unsupported ECDH algorithm');\n  }\n}\n\n/**\n * x25519 and x448 produce an all-zero value when given as input a point with small order.\n * This does not lead to a security issue in the context of ECDH, but it is still unexpected,\n * hence we throw.\n * @param {Uint8Array} sharedSecret\n */\nfunction assertNonZeroArray(sharedSecret) {\n  let acc = 0;\n  for (let i = 0; i < sharedSecret.length; i++) {\n    acc |= sharedSecret[i];\n  }\n  if (acc === 0) {\n    throw new Error('Unexpected low order point');\n  }\n}\n\n\nfunction publicKeyToJWK(algo, publicKey) {\n  switch (algo) {\n    case enums.publicKey.x25519: {\n      const jwk = {\n        kty: 'OKP',\n        crv: 'X25519',\n        x: uint8ArrayToB64(publicKey, true),\n        ext: true\n      };\n      return jwk;\n    }\n    default:\n      throw new Error('Unsupported ECDH algorithm');\n  }\n}\n\nfunction privateKeyToJWK(algo, publicKey, privateKey) {\n  switch (algo) {\n    case enums.publicKey.x25519: {\n      const jwk = publicKeyToJWK(algo, publicKey);\n      jwk.d = uint8ArrayToB64(privateKey, true);\n      return jwk;\n    }\n    default:\n      throw new Error('Unsupported ECDH algorithm');\n  }\n}\n","// OpenPGP.js - An OpenPGP implementation in javascript\n// Copyright (C) 2015-2016 Decentral\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n/**\n * @fileoverview Wrapper of an instance of an Elliptic Curve\n * @module crypto/public_key/elliptic/curve\n */\nimport nacl from '@openpgp/tweetnacl';\nimport enums from '../../../enums';\nimport util from '../../../util';\nimport { uint8ArrayToB64, b64ToUint8Array } from '../../../encoding/base64';\nimport OID from '../../../type/oid';\nimport { UnsupportedError } from '../../../packet/packet';\nimport { generate as eddsaGenerate } from './eddsa';\nimport { generate as ecdhXGenerate } from './ecdh_x';\n\nconst webCrypto = util.getWebCrypto();\nconst nodeCrypto = util.getNodeCrypto();\n\nconst webCurves = {\n  [enums.curve.nistP256]: 'P-256',\n  [enums.curve.nistP384]: 'P-384',\n  [enums.curve.nistP521]: 'P-521'\n};\nconst knownCurves = nodeCrypto ? nodeCrypto.getCurves() : [];\nconst nodeCurves = nodeCrypto ? {\n  [enums.curve.secp256k1]: knownCurves.includes('secp256k1') ? 'secp256k1' : undefined,\n  [enums.curve.nistP256]: knownCurves.includes('prime256v1') ? 'prime256v1' : undefined,\n  [enums.curve.nistP384]: knownCurves.includes('secp384r1') ? 'secp384r1' : undefined,\n  [enums.curve.nistP521]: knownCurves.includes('secp521r1') ? 'secp521r1' : undefined,\n  [enums.curve.ed25519Legacy]: knownCurves.includes('ED25519') ? 'ED25519' : undefined,\n  [enums.curve.curve25519Legacy]: knownCurves.includes('X25519') ? 'X25519' : undefined,\n  [enums.curve.brainpoolP256r1]: knownCurves.includes('brainpoolP256r1') ? 'brainpoolP256r1' : undefined,\n  [enums.curve.brainpoolP384r1]: knownCurves.includes('brainpoolP384r1') ? 'brainpoolP384r1' : undefined,\n  [enums.curve.brainpoolP512r1]: knownCurves.includes('brainpoolP512r1') ? 'brainpoolP512r1' : undefined\n} : {};\n\nconst curves = {\n  [enums.curve.nistP256]: {\n    oid: [0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x03, 0x01, 0x07],\n    keyType: enums.publicKey.ecdsa,\n    hash: enums.hash.sha256,\n    cipher: enums.symmetric.aes128,\n    node: nodeCurves[enums.curve.nistP256],\n    web: webCurves[enums.curve.nistP256],\n    payloadSize: 32,\n    sharedSize: 256,\n    wireFormatLeadingByte: 0x04\n  },\n  [enums.curve.nistP384]: {\n    oid: [0x06, 0x05, 0x2B, 0x81, 0x04, 0x00, 0x22],\n    keyType: enums.publicKey.ecdsa,\n    hash: enums.hash.sha384,\n    cipher: enums.symmetric.aes192,\n    node: nodeCurves[enums.curve.nistP384],\n    web: webCurves[enums.curve.nistP384],\n    payloadSize: 48,\n    sharedSize: 384,\n    wireFormatLeadingByte: 0x04\n  },\n  [enums.curve.nistP521]: {\n    oid: [0x06, 0x05, 0x2B, 0x81, 0x04, 0x00, 0x23],\n    keyType: enums.publicKey.ecdsa,\n    hash: enums.hash.sha512,\n    cipher: enums.symmetric.aes256,\n    node: nodeCurves[enums.curve.nistP521],\n    web: webCurves[enums.curve.nistP521],\n    payloadSize: 66,\n    sharedSize: 528,\n    wireFormatLeadingByte: 0x04\n  },\n  [enums.curve.secp256k1]: {\n    oid: [0x06, 0x05, 0x2B, 0x81, 0x04, 0x00, 0x0A],\n    keyType: enums.publicKey.ecdsa,\n    hash: enums.hash.sha256,\n    cipher: enums.symmetric.aes128,\n    node: nodeCurves[enums.curve.secp256k1],\n    payloadSize: 32,\n    wireFormatLeadingByte: 0x04\n  },\n  [enums.curve.ed25519Legacy]: {\n    oid: [0x06, 0x09, 0x2B, 0x06, 0x01, 0x04, 0x01, 0xDA, 0x47, 0x0F, 0x01],\n    keyType: enums.publicKey.eddsaLegacy,\n    hash: enums.hash.sha512,\n    node: false, // nodeCurves.ed25519 TODO\n    payloadSize: 32,\n    wireFormatLeadingByte: 0x40\n  },\n  [enums.curve.curve25519Legacy]: {\n    oid: [0x06, 0x0A, 0x2B, 0x06, 0x01, 0x04, 0x01, 0x97, 0x55, 0x01, 0x05, 0x01],\n    keyType: enums.publicKey.ecdh,\n    hash: enums.hash.sha256,\n    cipher: enums.symmetric.aes128,\n    node: false, // nodeCurves.curve25519 TODO\n    payloadSize: 32,\n    wireFormatLeadingByte: 0x40\n  },\n  [enums.curve.brainpoolP256r1]: {\n    oid: [0x06, 0x09, 0x2B, 0x24, 0x03, 0x03, 0x02, 0x08, 0x01, 0x01, 0x07],\n    keyType: enums.publicKey.ecdsa,\n    hash: enums.hash.sha256,\n    cipher: enums.symmetric.aes128,\n    node: nodeCurves[enums.curve.brainpoolP256r1],\n    payloadSize: 32,\n    wireFormatLeadingByte: 0x04\n  },\n  [enums.curve.brainpoolP384r1]: {\n    oid: [0x06, 0x09, 0x2B, 0x24, 0x03, 0x03, 0x02, 0x08, 0x01, 0x01, 0x0B],\n    keyType: enums.publicKey.ecdsa,\n    hash: enums.hash.sha384,\n    cipher: enums.symmetric.aes192,\n    node: nodeCurves[enums.curve.brainpoolP384r1],\n    payloadSize: 48,\n    wireFormatLeadingByte: 0x04\n  },\n  [enums.curve.brainpoolP512r1]: {\n    oid: [0x06, 0x09, 0x2B, 0x24, 0x03, 0x03, 0x02, 0x08, 0x01, 0x01, 0x0D],\n    keyType: enums.publicKey.ecdsa,\n    hash: enums.hash.sha512,\n    cipher: enums.symmetric.aes256,\n    node: nodeCurves[enums.curve.brainpoolP512r1],\n    payloadSize: 64,\n    wireFormatLeadingByte: 0x04\n  }\n};\n\nclass CurveWithOID {\n  constructor(oidOrName) {\n    try {\n      this.name = oidOrName instanceof OID ?\n        oidOrName.getName() :\n        enums.write(enums.curve,oidOrName);\n    } catch (err) {\n      throw new UnsupportedError('Unknown curve');\n    }\n    const params = curves[this.name];\n\n    this.keyType = params.keyType;\n\n    this.oid = params.oid;\n    this.hash = params.hash;\n    this.cipher = params.cipher;\n    this.node = params.node;\n    this.web = params.web;\n    this.payloadSize = params.payloadSize;\n    this.sharedSize = params.sharedSize;\n    this.wireFormatLeadingByte = params.wireFormatLeadingByte;\n    if (this.web && util.getWebCrypto()) {\n      this.type = 'web';\n    } else if (this.node && util.getNodeCrypto()) {\n      this.type = 'node';\n    } else if (this.name === enums.curve.curve25519Legacy) {\n      this.type = 'curve25519Legacy';\n    } else if (this.name === enums.curve.ed25519Legacy) {\n      this.type = 'ed25519Legacy';\n    }\n  }\n\n  async genKeyPair() {\n    switch (this.type) {\n      case 'web':\n        try {\n          return await webGenKeyPair(this.name, this.wireFormatLeadingByte);\n        } catch (err) {\n          util.printDebugError('Browser did not support generating ec key ' + err.message);\n          return jsGenKeyPair(this.name);\n        }\n      case 'node':\n        return nodeGenKeyPair(this.name);\n      case 'curve25519Legacy': {\n        // the private key must be stored in big endian and already clamped: https://www.ietf.org/archive/id/draft-ietf-openpgp-crypto-refresh-13.html#section-5.5.5.6.1.1-3\n        const { k, A } = await ecdhXGenerate(enums.publicKey.x25519);\n        const privateKey = k.slice().reverse();\n        privateKey[0] = (privateKey[0] & 127) | 64;\n        privateKey[31] &= 248;\n        const publicKey = util.concatUint8Array([new Uint8Array([this.wireFormatLeadingByte]), A]);\n        return { publicKey, privateKey };\n      }\n      case 'ed25519Legacy': {\n        const { seed: privateKey, A } = await eddsaGenerate(enums.publicKey.ed25519);\n        const publicKey = util.concatUint8Array([new Uint8Array([this.wireFormatLeadingByte]), A]);\n        return { publicKey, privateKey };\n      }\n      default:\n        return jsGenKeyPair(this.name);\n    }\n  }\n}\n\nasync function generate(curveName) {\n  const curve = new CurveWithOID(curveName);\n  const { oid, hash, cipher } = curve;\n  const keyPair = await curve.genKeyPair();\n  return {\n    oid,\n    Q: keyPair.publicKey,\n    secret: util.leftPad(keyPair.privateKey, curve.payloadSize),\n    hash,\n    cipher\n  };\n}\n\n/**\n * Get preferred hash algo to use with the given curve\n * @param {module:type/oid} oid - curve oid\n * @returns {enums.hash} hash algorithm\n */\nfunction getPreferredHashAlgo(oid) {\n  return curves[oid.getName()].hash;\n}\n\n/**\n * Validate ECDH and ECDSA parameters\n * Not suitable for EdDSA (different secret key format)\n * @param {module:enums.publicKey} algo - EC algorithm, to filter supported curves\n * @param {module:type/oid} oid - EC object identifier\n * @param {Uint8Array} Q - EC public point\n * @param {Uint8Array} d - EC secret scalar\n * @returns {Promise<Boolean>} Whether params are valid.\n * @async\n */\nasync function validateStandardParams(algo, oid, Q, d) {\n  const supportedCurves = {\n    [enums.curve.nistP256]: true,\n    [enums.curve.nistP384]: true,\n    [enums.curve.nistP521]: true,\n    [enums.curve.secp256k1]: true,\n    [enums.curve.curve25519Legacy]: algo === enums.publicKey.ecdh,\n    [enums.curve.brainpoolP256r1]: true,\n    [enums.curve.brainpoolP384r1]: true,\n    [enums.curve.brainpoolP512r1]: true\n  };\n\n  // Check whether the given curve is supported\n  const curveName = oid.getName();\n  if (!supportedCurves[curveName]) {\n    return false;\n  }\n\n  if (curveName === enums.curve.curve25519Legacy) {\n    d = d.slice().reverse();\n    // Re-derive public point Q'\n    const { publicKey } = nacl.box.keyPair.fromSecretKey(d);\n\n    Q = new Uint8Array(Q);\n    const dG = new Uint8Array([0x40, ...publicKey]); // Add public key prefix\n    if (!util.equalsUint8Array(dG, Q)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  const nobleCurve = await util.getNobleCurve(enums.publicKey.ecdsa, curveName); // excluding curve25519Legacy, ecdh and ecdsa use the same curves\n  /*\n   * Re-derive public point Q' = dG from private key\n   * Expect Q == Q'\n   */\n  const dG = nobleCurve.getPublicKey(d, false);\n  if (!util.equalsUint8Array(dG, Q)) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Check whether the public point has a valid encoding.\n * NB: this function does not check e.g. whether the point belongs to the curve.\n */\nfunction checkPublicPointEnconding(curve, V) {\n  const { payloadSize, wireFormatLeadingByte, name: curveName } = curve;\n\n  const pointSize = (curveName === enums.curve.curve25519Legacy || curveName === enums.curve.ed25519Legacy) ? payloadSize : payloadSize * 2;\n\n  if (V[0] !== wireFormatLeadingByte || V.length !== pointSize + 1) {\n    throw new Error('Invalid point encoding');\n  }\n}\n\nexport {\n  CurveWithOID, curves, webCurves, nodeCurves, generate, getPreferredHashAlgo, jwkToRawPublic, rawPublicToJWK, privateToJWK, validateStandardParams, checkPublicPointEnconding\n};\n\n//////////////////////////\n//                      //\n//   Helper functions   //\n//                      //\n//////////////////////////\nasync function jsGenKeyPair(name) {\n  const nobleCurve = await util.getNobleCurve(enums.publicKey.ecdsa, name); // excluding curve25519Legacy, ecdh and ecdsa use the same curves\n  const privateKey = nobleCurve.utils.randomPrivateKey();\n  const publicKey = nobleCurve.getPublicKey(privateKey, false);\n  return { publicKey, privateKey };\n}\n\nasync function webGenKeyPair(name, wireFormatLeadingByte) {\n  // Note: keys generated with ECDSA and ECDH are structurally equivalent\n  const webCryptoKey = await webCrypto.generateKey({ name: 'ECDSA', namedCurve: webCurves[name] }, true, ['sign', 'verify']);\n\n  const privateKey = await webCrypto.exportKey('jwk', webCryptoKey.privateKey);\n  const publicKey = await webCrypto.exportKey('jwk', webCryptoKey.publicKey);\n\n  return {\n    publicKey: jwkToRawPublic(publicKey, wireFormatLeadingByte),\n    privateKey: b64ToUint8Array(privateKey.d, true)\n  };\n}\n\nasync function nodeGenKeyPair(name) {\n  // Note: ECDSA and ECDH key generation is structurally equivalent\n  const ecdh = nodeCrypto.createECDH(nodeCurves[name]);\n  await ecdh.generateKeys();\n  return {\n    publicKey: new Uint8Array(ecdh.getPublicKey()),\n    privateKey: new Uint8Array(ecdh.getPrivateKey())\n  };\n}\n\n//////////////////////////\n//                      //\n//   Helper functions   //\n//                      //\n//////////////////////////\n\n/**\n * @param {JsonWebKey} jwk - key for conversion\n *\n * @returns {Uint8Array} Raw public key.\n */\nfunction jwkToRawPublic(jwk, wireFormatLeadingByte) {\n  const bufX = b64ToUint8Array(jwk.x);\n  const bufY = b64ToUint8Array(jwk.y);\n  const publicKey = new Uint8Array(bufX.length + bufY.length + 1);\n  publicKey[0] = wireFormatLeadingByte;\n  publicKey.set(bufX, 1);\n  publicKey.set(bufY, bufX.length + 1);\n  return publicKey;\n}\n\n/**\n * @param {Integer} payloadSize - ec payload size\n * @param {String} name - curve name\n * @param {Uint8Array} publicKey - public key\n *\n * @returns {JsonWebKey} Public key in jwk format.\n */\nfunction rawPublicToJWK(payloadSize, name, publicKey) {\n  const len = payloadSize;\n  const bufX = publicKey.slice(1, len + 1);\n  const bufY = publicKey.slice(len + 1, len * 2 + 1);\n  // https://www.rfc-editor.org/rfc/rfc7518.txt\n  const jwk = {\n    kty: 'EC',\n    crv: name,\n    x: uint8ArrayToB64(bufX, true),\n    y: uint8ArrayToB64(bufY, true),\n    ext: true\n  };\n  return jwk;\n}\n\n/**\n * @param {Integer} payloadSize - ec payload size\n * @param {String} name - curve name\n * @param {Uint8Array} publicKey - public key\n * @param {Uint8Array} privateKey - private key\n *\n * @returns {JsonWebKey} Private key in jwk format.\n */\nfunction privateToJWK(payloadSize, name, publicKey, privateKey) {\n  const jwk = rawPublicToJWK(payloadSize, name, publicKey);\n  jwk.d = uint8ArrayToB64(privateKey, true);\n  return jwk;\n}\n","// OpenPGP.js - An OpenPGP implementation in javascript\n// Copyright (C) 2015-2016 Decentral\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n/**\n * @fileoverview Implementation of ECDSA following RFC6637 for Openpgpjs\n * @module crypto/public_key/elliptic/ecdsa\n */\n\nimport enums from '../../../enums';\nimport util from '../../../util';\nimport { getRandomBytes } from '../../random';\nimport { computeDigest } from '../../hash';\nimport { CurveWithOID, webCurves, privateToJWK, rawPublicToJWK, validateStandardParams, nodeCurves, checkPublicPointEnconding } from './oid_curves';\nimport { bigIntToUint8Array } from '../../biginteger';\n\nconst webCrypto = util.getWebCrypto();\nconst nodeCrypto = util.getNodeCrypto();\n\n/**\n * Sign a message using the provided key\n * @param {module:type/oid} oid - Elliptic curve object identifier\n * @param {module:enums.hash} hashAlgo - Hash algorithm used to sign\n * @param {Uint8Array} message - Message to sign\n * @param {Uint8Array} publicKey - Public key\n * @param {Uint8Array} privateKey - Private key used to sign the message\n * @param {Uint8Array} hashed - The hashed message\n * @returns {Promise<{\n *   r: Uint8Array,\n *   s: Uint8Array\n * }>} Signature of the message\n * @async\n */\nexport async function sign(oid, hashAlgo, message, publicKey, privateKey, hashed) {\n  const curve = new CurveWithOID(oid);\n  checkPublicPointEnconding(curve, publicKey);\n  if (message && !util.isStream(message)) {\n    const keyPair = { publicKey, privateKey };\n    switch (curve.type) {\n      case 'web':\n        // If browser doesn't support a curve, we'll catch it\n        try {\n          // Need to await to make sure browser succeeds\n          return await webSign(curve, hashAlgo, message, keyPair);\n        } catch (err) {\n          // We do not fallback if the error is related to key integrity\n          // Unfortunaley Safari does not support nistP521 and throws a DataError when using it\n          // So we need to always fallback for that curve\n          if (curve.name !== 'nistP521' && (err.name === 'DataError' || err.name === 'OperationError')) {\n            throw err;\n          }\n          util.printDebugError('Browser did not support signing: ' + err.message);\n        }\n        break;\n      case 'node':\n        return nodeSign(curve, hashAlgo, message, privateKey);\n    }\n  }\n\n  const nobleCurve = await util.getNobleCurve(enums.publicKey.ecdsa, curve.name);\n  // lowS: non-canonical sig: https://stackoverflow.com/questions/74338846/ecdsa-signature-verification-mismatch\n  const signature = nobleCurve.sign(hashed, privateKey, { lowS: false });\n  return {\n    r: bigIntToUint8Array(signature.r, 'be', curve.payloadSize),\n    s: bigIntToUint8Array(signature.s, 'be', curve.payloadSize)\n  };\n}\n\n/**\n * Verifies if a signature is valid for a message\n * @param {module:type/oid} oid - Elliptic curve object identifier\n * @param {module:enums.hash} hashAlgo - Hash algorithm used in the signature\n * @param  {{r: Uint8Array,\n             s: Uint8Array}}   signature Signature to verify\n * @param {Uint8Array} message - Message to verify\n * @param {Uint8Array} publicKey - Public key used to verify the message\n * @param {Uint8Array} hashed - The hashed message\n * @returns {Boolean}\n * @async\n */\nexport async function verify(oid, hashAlgo, signature, message, publicKey, hashed) {\n  const curve = new CurveWithOID(oid);\n  checkPublicPointEnconding(curve, publicKey);\n  // See https://github.com/openpgpjs/openpgpjs/pull/948.\n  // NB: the impact was more likely limited to Brainpool curves, since thanks\n  // to WebCrypto availability, NIST curve should not have been affected.\n  // Similarly, secp256k1 should have been used rarely enough.\n  // However, we implement the fix for all curves, since it's only needed in case of\n  // verification failure, which is unexpected, hence a minor slowdown is acceptable.\n  const tryFallbackVerificationForOldBug = async () => (\n    hashed[0] === 0 ?\n      jsVerify(curve, signature, hashed.subarray(1), publicKey) :\n      false\n  );\n\n  if (message && !util.isStream(message)) {\n    switch (curve.type) {\n      case 'web':\n        try {\n          // Need to await to make sure browser succeeds\n          const verified = await webVerify(curve, hashAlgo, signature, message, publicKey);\n          return verified || tryFallbackVerificationForOldBug();\n        } catch (err) {\n          // We do not fallback if the error is related to key integrity\n          // Unfortunately Safari does not support nistP521 and throws a DataError when using it\n          // So we need to always fallback for that curve\n          if (curve.name !== 'nistP521' && (err.name === 'DataError' || err.name === 'OperationError')) {\n            throw err;\n          }\n          util.printDebugError('Browser did not support verifying: ' + err.message);\n        }\n        break;\n      case 'node': {\n        const verified = await nodeVerify(curve, hashAlgo, signature, message, publicKey);\n        return verified || tryFallbackVerificationForOldBug();\n      }\n    }\n  }\n\n  const verified = await jsVerify(curve, signature, hashed, publicKey);\n  return verified || tryFallbackVerificationForOldBug();\n}\n\n/**\n * Validate ECDSA parameters\n * @param {module:type/oid} oid - Elliptic curve object identifier\n * @param {Uint8Array} Q - ECDSA public point\n * @param {Uint8Array} d - ECDSA secret scalar\n * @returns {Promise<Boolean>} Whether params are valid.\n * @async\n */\nexport async function validateParams(oid, Q, d) {\n  const curve = new CurveWithOID(oid);\n  // Reject curves x25519 and ed25519\n  if (curve.keyType !== enums.publicKey.ecdsa) {\n    return false;\n  }\n\n  // To speed up the validation, we try to use node- or webcrypto when available\n  // and sign + verify a random message\n  switch (curve.type) {\n    case 'web':\n    case 'node': {\n      const message = getRandomBytes(8);\n      const hashAlgo = enums.hash.sha256;\n      const hashed = await computeDigest(hashAlgo, message);\n      try {\n        const signature = await sign(oid, hashAlgo, message, Q, d, hashed);\n        // eslint-disable-next-line @typescript-eslint/return-await\n        return await verify(oid, hashAlgo, signature, message, Q, hashed);\n      } catch (err) {\n        return false;\n      }\n    }\n    default:\n      return validateStandardParams(enums.publicKey.ecdsa, oid, Q, d);\n  }\n}\n\n\n//////////////////////////\n//                      //\n//   Helper functions   //\n//                      //\n//////////////////////////\n\n/**\n * Fallback javascript implementation of ECDSA verification.\n * To be used if no native implementation is available for the given curve/operation.\n */\nasync function jsVerify(curve, signature, hashed, publicKey) {\n  const nobleCurve = await util.getNobleCurve(enums.publicKey.ecdsa, curve.name);\n  // lowS: non-canonical sig: https://stackoverflow.com/questions/74338846/ecdsa-signature-verification-mismatch\n  return nobleCurve.verify(util.concatUint8Array([signature.r, signature.s]), hashed, publicKey, { lowS: false });\n}\n\nasync function webSign(curve, hashAlgo, message, keyPair) {\n  const len = curve.payloadSize;\n  const jwk = privateToJWK(curve.payloadSize, webCurves[curve.name], keyPair.publicKey, keyPair.privateKey);\n  const key = await webCrypto.importKey(\n    'jwk',\n    jwk,\n    {\n      'name': 'ECDSA',\n      'namedCurve': webCurves[curve.name],\n      'hash': { name: enums.read(enums.webHash, curve.hash) }\n    },\n    false,\n    ['sign']\n  );\n\n  const signature = new Uint8Array(await webCrypto.sign(\n    {\n      'name': 'ECDSA',\n      'namedCurve': webCurves[curve.name],\n      'hash': { name: enums.read(enums.webHash, hashAlgo) }\n    },\n    key,\n    message\n  ));\n\n  return {\n    r: signature.slice(0, len),\n    s: signature.slice(len, len << 1)\n  };\n}\n\nasync function webVerify(curve, hashAlgo, { r, s }, message, publicKey) {\n  const jwk = rawPublicToJWK(curve.payloadSize, webCurves[curve.name], publicKey);\n  const key = await webCrypto.importKey(\n    'jwk',\n    jwk,\n    {\n      'name': 'ECDSA',\n      'namedCurve': webCurves[curve.name],\n      'hash': { name: enums.read(enums.webHash, curve.hash) }\n    },\n    false,\n    ['verify']\n  );\n\n  const signature = util.concatUint8Array([r, s]).buffer;\n\n  return webCrypto.verify(\n    {\n      'name': 'ECDSA',\n      'namedCurve': webCurves[curve.name],\n      'hash': { name: enums.read(enums.webHash, hashAlgo) }\n    },\n    key,\n    signature,\n    message\n  );\n}\n\nasync function nodeSign(curve, hashAlgo, message, privateKey) {\n  // JWT encoding cannot be used for now, as Brainpool curves are not supported\n  const ecKeyUtils = util.nodeRequire('eckey-utils');\n  const nodeBuffer = util.getNodeBuffer();\n  const { privateKey: derPrivateKey } = ecKeyUtils.generateDer({\n    curveName: nodeCurves[curve.name],\n    privateKey: nodeBuffer.from(privateKey)\n  });\n\n  const sign = nodeCrypto.createSign(enums.read(enums.hash, hashAlgo));\n  sign.write(message);\n  sign.end();\n\n  const signature = new Uint8Array(sign.sign({ key: derPrivateKey, format: 'der', type: 'sec1', dsaEncoding: 'ieee-p1363' }));\n  const len = curve.payloadSize;\n\n  return {\n    r: signature.subarray(0, len),\n    s: signature.subarray(len, len << 1)\n  };\n}\n\nasync function nodeVerify(curve, hashAlgo, { r, s }, message, publicKey) {\n  const ecKeyUtils = util.nodeRequire('eckey-utils');\n  const nodeBuffer = util.getNodeBuffer();\n  const { publicKey: derPublicKey } = ecKeyUtils.generateDer({\n    curveName: nodeCurves[curve.name],\n    publicKey: nodeBuffer.from(publicKey)\n  });\n\n  const verify = nodeCrypto.createVerify(enums.read(enums.hash, hashAlgo));\n  verify.write(message);\n  verify.end();\n\n  const signature = util.concatUint8Array([r, s]);\n\n  try {\n    return verify.verify({ key: derPublicKey, format: 'der', type: 'spki', dsaEncoding: 'ieee-p1363' }, signature);\n  } catch (err) {\n    return false;\n  }\n}\n","// OpenPGP.js - An OpenPGP implementation in javascript\n// Copyright (C) 2018 Proton Technologies AG\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n/**\n * @fileoverview Implementation of legacy EdDSA following RFC4880bis-03 for OpenPGP.\n * This key type has been deprecated by the crypto-refresh RFC.\n * @module crypto/public_key/elliptic/eddsa_legacy\n */\n\nimport nacl from '@openpgp/tweetnacl';\nimport util from '../../../util';\nimport enums from '../../../enums';\nimport { getHashByteLength } from '../../hash';\nimport { CurveWithOID, checkPublicPointEnconding } from './oid_curves';\nimport { sign as eddsaSign, verify as eddsaVerify } from './eddsa';\n\n/**\n * Sign a message using the provided legacy EdDSA key\n * @param {module:type/oid} oid - Elliptic curve object identifier\n * @param {module:enums.hash} hashAlgo - Hash algorithm used to sign (must be sha256 or stronger)\n * @param {Uint8Array} message - Message to sign\n * @param {Uint8Array} publicKey - Public key\n * @param {Uint8Array} privateKey - Private key used to sign the message\n * @param {Uint8Array} hashed - The hashed message\n * @returns {Promise<{\n *   r: Uint8Array,\n *   s: Uint8Array\n * }>} Signature of the message\n * @async\n */\nexport async function sign(oid, hashAlgo, message, publicKey, privateKey, hashed) {\n  const curve = new CurveWithOID(oid);\n  checkPublicPointEnconding(curve, publicKey);\n  if (getHashByteLength(hashAlgo) < getHashByteLength(enums.hash.sha256)) {\n    // Enforce digest sizes, since the constraint was already present in RFC4880bis:\n    // see https://tools.ietf.org/id/draft-ietf-openpgp-rfc4880bis-10.html#section-15-7.2\n    // and https://www.rfc-editor.org/rfc/rfc9580.html#section-5.2.3.3-3\n    throw new Error('Hash algorithm too weak for EdDSA.');\n  }\n  const { RS: signature } = await eddsaSign(enums.publicKey.ed25519, hashAlgo, message, publicKey.subarray(1), privateKey, hashed);\n  // EdDSA signature params are returned in little-endian format\n  return {\n    r: signature.subarray(0, 32),\n    s: signature.subarray(32)\n  };\n}\n\n/**\n * Verifies if a legacy EdDSA signature is valid for a message\n * @param {module:type/oid} oid - Elliptic curve object identifier\n * @param {module:enums.hash} hashAlgo - Hash algorithm used in the signature\n * @param  {{r: Uint8Array,\n             s: Uint8Array}}   signature Signature to verify the message\n * @param {Uint8Array} m - Message to verify\n * @param {Uint8Array} publicKey - Public key used to verify the message\n * @param {Uint8Array} hashed - The hashed message\n * @returns {Boolean}\n * @async\n */\nexport async function verify(oid, hashAlgo, { r, s }, m, publicKey, hashed) {\n  const curve = new CurveWithOID(oid);\n  checkPublicPointEnconding(curve, publicKey);\n  if (getHashByteLength(hashAlgo) < getHashByteLength(enums.hash.sha256)) {\n    // Enforce digest sizes, since the constraint was already present in RFC4880bis:\n    // see https://tools.ietf.org/id/draft-ietf-openpgp-rfc4880bis-10.html#section-15-7.2\n    // and https://www.rfc-editor.org/rfc/rfc9580.html#section-5.2.3.3-3\n    throw new Error('Hash algorithm too weak for EdDSA.');\n  }\n  const RS = util.concatUint8Array([r, s]);\n  return eddsaVerify(enums.publicKey.ed25519, hashAlgo, { RS }, m, publicKey.subarray(1), hashed);\n}\n/**\n * Validate legacy EdDSA parameters\n * @param {module:type/oid} oid - Elliptic curve object identifier\n * @param {Uint8Array} Q - EdDSA public point\n * @param {Uint8Array} k - EdDSA secret seed\n * @returns {Promise<Boolean>} Whether params are valid.\n * @async\n */\nexport async function validateParams(oid, Q, k) {\n  // Check whether the given curve is supported\n  if (oid.getName() !== enums.curve.ed25519Legacy) {\n    return false;\n  }\n\n  /**\n   * Derive public point Q' = dG from private key\n   * and expect Q == Q'\n   */\n  const { publicKey } = nacl.sign.keyPair.fromSeed(k);\n  const dG = new Uint8Array([0x40, ...publicKey]); // Add public key prefix\n  return util.equalsUint8Array(Q, dG);\n\n}\n","// OpenPGP.js - An OpenPGP implementation in javascript\n// Copyright (C) 2015-2016 Decentral\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport util from '../util';\n\n/**\n * @fileoverview Functions to add and remove PKCS5 padding\n * @see PublicKeyEncryptedSessionKeyPacket\n * @module crypto/pkcs5\n * @private\n */\n\n/**\n * Add pkcs5 padding to a message\n * @param {Uint8Array} message - message to pad\n * @returns {Uint8Array} Padded message.\n */\nexport function encode(message) {\n  const c = 8 - (message.length % 8);\n  const padded = new Uint8Array(message.length + c).fill(c);\n  padded.set(message);\n  return padded;\n}\n\n/**\n * Remove pkcs5 padding from a message\n * @param {Uint8Array} message - message to remove padding from\n * @returns {Uint8Array} Message without padding.\n */\nexport function decode(message) {\n  const len = message.length;\n  if (len > 0) {\n    const c = message[len - 1];\n    if (c >= 1) {\n      const provided = message.subarray(len - c);\n      const computed = new Uint8Array(c).fill(c);\n      if (util.equalsUint8Array(provided, computed)) {\n        return message.subarray(0, len - c);\n      }\n    }\n  }\n  throw new Error('Invalid padding');\n}\n","// OpenPGP.js - An OpenPGP implementation in javascript\n// Copyright (C) 2015-2016 Decentral\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n/**\n * @fileoverview Key encryption and decryption for RFC 6637 ECDH\n * @module crypto/public_key/elliptic/ecdh\n */\n\nimport { CurveWithOID, jwkToRawPublic, rawPublicToJWK, privateToJWK, validateStandardParams, checkPublicPointEnconding } from './oid_curves';\nimport * as aesKW from '../../aes_kw';\nimport { computeDigest } from '../../hash';\nimport enums from '../../../enums';\nimport util from '../../../util';\nimport { b64ToUint8Array } from '../../../encoding/base64';\nimport * as pkcs5 from '../../pkcs5';\nimport { getCipherParams } from '../../cipher';\nimport { generateEphemeralEncryptionMaterial as ecdhXGenerateEphemeralEncryptionMaterial, recomputeSharedSecret as ecdhXRecomputeSharedSecret } from './ecdh_x';\n\nconst webCrypto = util.getWebCrypto();\nconst nodeCrypto = util.getNodeCrypto();\n\n/**\n * Validate ECDH parameters\n * @param {module:type/oid} oid - Elliptic curve object identifier\n * @param {Uint8Array} Q - ECDH public point\n * @param {Uint8Array} d - ECDH secret scalar\n * @returns {Promise<Boolean>} Whether params are valid.\n * @async\n */\nexport async function validateParams(oid, Q, d) {\n  return validateStandardParams(enums.publicKey.ecdh, oid, Q, d);\n}\n\n// Build Param for ECDH algorithm (RFC 6637)\nfunction buildEcdhParam(public_algo, oid, kdfParams, fingerprint) {\n  return util.concatUint8Array([\n    oid.write(),\n    new Uint8Array([public_algo]),\n    kdfParams.write(),\n    util.stringToUint8Array('Anonymous Sender    '),\n    fingerprint\n  ]);\n}\n\n// Key Derivation Function (RFC 6637)\nasync function kdf(hashAlgo, X, length, param, stripLeading = false, stripTrailing = false) {\n  // Note: X is little endian for Curve25519, big-endian for all others.\n  // This is not ideal, but the RFC's are unclear\n  // https://tools.ietf.org/html/draft-ietf-openpgp-rfc4880bis-02#appendix-B\n  let i;\n  if (stripLeading) {\n    // Work around old go crypto bug\n    for (i = 0; i < X.length && X[i] === 0; i++);\n    X = X.subarray(i);\n  }\n  if (stripTrailing) {\n    // Work around old OpenPGP.js bug\n    for (i = X.length - 1; i >= 0 && X[i] === 0; i--);\n    X = X.subarray(0, i + 1);\n  }\n  const digest = await computeDigest(hashAlgo, util.concatUint8Array([\n    new Uint8Array([0, 0, 0, 1]),\n    X,\n    param\n  ]));\n  return digest.subarray(0, length);\n}\n\n/**\n * Generate ECDHE ephemeral key and secret from public key\n *\n * @param {CurveWithOID} curve - Elliptic curve object\n * @param {Uint8Array} Q - Recipient public key\n * @returns {Promise<{publicKey: Uint8Array, sharedKey: Uint8Array}>}\n * @async\n */\nasync function genPublicEphemeralKey(curve, Q) {\n  switch (curve.type) {\n    case 'curve25519Legacy': {\n      const { sharedSecret: sharedKey, ephemeralPublicKey } = await ecdhXGenerateEphemeralEncryptionMaterial(enums.publicKey.x25519, Q.subarray(1));\n      const publicKey = util.concatUint8Array([new Uint8Array([curve.wireFormatLeadingByte]), ephemeralPublicKey]);\n      return { publicKey, sharedKey }; // Note: sharedKey is little-endian here, unlike below\n    }\n    case 'web':\n      if (curve.web && util.getWebCrypto()) {\n        try {\n          return await webPublicEphemeralKey(curve, Q);\n        } catch (err) {\n          util.printDebugError(err);\n          return jsPublicEphemeralKey(curve, Q);\n        }\n      }\n      break;\n    case 'node':\n      return nodePublicEphemeralKey(curve, Q);\n    default:\n      return jsPublicEphemeralKey(curve, Q);\n\n  }\n}\n\n/**\n * Encrypt and wrap a session key\n *\n * @param {module:type/oid} oid - Elliptic curve object identifier\n * @param {module:type/kdf_params} kdfParams - KDF params including cipher and algorithm to use\n * @param {Uint8Array} data - Unpadded session key data\n * @param {Uint8Array} Q - Recipient public key\n * @param {Uint8Array} fingerprint - Recipient fingerprint, already truncated depending on the key version\n * @returns {Promise<{publicKey: Uint8Array, wrappedKey: Uint8Array}>}\n * @async\n */\nexport async function encrypt(oid, kdfParams, data, Q, fingerprint) {\n  const m = pkcs5.encode(data);\n\n  const curve = new CurveWithOID(oid);\n  checkPublicPointEnconding(curve, Q);\n  const { publicKey, sharedKey } = await genPublicEphemeralKey(curve, Q);\n  const param = buildEcdhParam(enums.publicKey.ecdh, oid, kdfParams, fingerprint);\n  const { keySize } = getCipherParams(kdfParams.cipher);\n  const Z = await kdf(kdfParams.hash, sharedKey, keySize, param);\n  const wrappedKey = await aesKW.wrap(kdfParams.cipher, Z, m);\n  return { publicKey, wrappedKey };\n}\n\n/**\n * Generate ECDHE secret from private key and public part of ephemeral key\n *\n * @param {CurveWithOID} curve - Elliptic curve object\n * @param {Uint8Array} V - Public part of ephemeral key\n * @param {Uint8Array} Q - Recipient public key\n * @param {Uint8Array} d - Recipient private key\n * @returns {Promise<{secretKey: Uint8Array, sharedKey: Uint8Array}>}\n * @async\n */\nasync function genPrivateEphemeralKey(curve, V, Q, d) {\n  if (d.length !== curve.payloadSize) {\n    const privateKey = new Uint8Array(curve.payloadSize);\n    privateKey.set(d, curve.payloadSize - d.length);\n    d = privateKey;\n  }\n  switch (curve.type) {\n    case 'curve25519Legacy': {\n      const secretKey = d.slice().reverse();\n      const sharedKey = await ecdhXRecomputeSharedSecret(enums.publicKey.x25519, V.subarray(1), Q.subarray(1), secretKey);\n      return { secretKey, sharedKey }; // Note: sharedKey is little-endian here, unlike below\n    }\n    case 'web':\n      if (curve.web && util.getWebCrypto()) {\n        try {\n          return await webPrivateEphemeralKey(curve, V, Q, d);\n        } catch (err) {\n          util.printDebugError(err);\n          return jsPrivateEphemeralKey(curve, V, d);\n        }\n      }\n      break;\n    case 'node':\n      return nodePrivateEphemeralKey(curve, V, d);\n    default:\n      return jsPrivateEphemeralKey(curve, V, d);\n  }\n}\n\n/**\n * Decrypt and unwrap the value derived from session key\n *\n * @param {module:type/oid} oid - Elliptic curve object identifier\n * @param {module:type/kdf_params} kdfParams - KDF params including cipher and algorithm to use\n * @param {Uint8Array} V - Public part of ephemeral key\n * @param {Uint8Array} C - Encrypted and wrapped value derived from session key\n * @param {Uint8Array} Q - Recipient public key\n * @param {Uint8Array} d - Recipient private key\n * @param {Uint8Array} fingerprint - Recipient fingerprint, already truncated depending on the key version\n * @returns {Promise<Uint8Array>} Value derived from session key.\n * @async\n */\nexport async function decrypt(oid, kdfParams, V, C, Q, d, fingerprint) {\n  const curve = new CurveWithOID(oid);\n  checkPublicPointEnconding(curve, Q);\n  checkPublicPointEnconding(curve, V);\n  const { sharedKey } = await genPrivateEphemeralKey(curve, V, Q, d);\n  const param = buildEcdhParam(enums.publicKey.ecdh, oid, kdfParams, fingerprint);\n  const { keySize } = getCipherParams(kdfParams.cipher);\n  let err;\n  for (let i = 0; i < 3; i++) {\n    try {\n      // Work around old go crypto bug and old OpenPGP.js bug, respectively.\n      const Z = await kdf(kdfParams.hash, sharedKey, keySize, param, i === 1, i === 2);\n      return pkcs5.decode(await aesKW.unwrap(kdfParams.cipher, Z, C));\n    } catch (e) {\n      err = e;\n    }\n  }\n  throw err;\n}\n\nasync function jsPrivateEphemeralKey(curve, V, d) {\n  const nobleCurve = await util.getNobleCurve(enums.publicKey.ecdh, curve.name);\n  // The output includes parity byte\n  const sharedSecretWithParity = nobleCurve.getSharedSecret(d, V);\n  const sharedKey = sharedSecretWithParity.subarray(1);\n  return { secretKey: d, sharedKey };\n}\n\nasync function jsPublicEphemeralKey(curve, Q) {\n  const nobleCurve = await util.getNobleCurve(enums.publicKey.ecdh, curve.name);\n  const { publicKey: V, privateKey: v } = await curve.genKeyPair();\n\n  // The output includes parity byte\n  const sharedSecretWithParity = nobleCurve.getSharedSecret(v, Q);\n  const sharedKey = sharedSecretWithParity.subarray(1);\n  return { publicKey: V, sharedKey };\n}\n\n/**\n * Generate ECDHE secret from private key and public part of ephemeral key using webCrypto\n *\n * @param {CurveWithOID} curve - Elliptic curve object\n * @param {Uint8Array} V - Public part of ephemeral key\n * @param {Uint8Array} Q - Recipient public key\n * @param {Uint8Array} d - Recipient private key\n * @returns {Promise<{secretKey: Uint8Array, sharedKey: Uint8Array}>}\n * @async\n */\nasync function webPrivateEphemeralKey(curve, V, Q, d) {\n  const recipient = privateToJWK(curve.payloadSize, curve.web, Q, d);\n  let privateKey = webCrypto.importKey(\n    'jwk',\n    recipient,\n    {\n      name: 'ECDH',\n      namedCurve: curve.web\n    },\n    true,\n    ['deriveKey', 'deriveBits']\n  );\n  const jwk = rawPublicToJWK(curve.payloadSize, curve.web, V);\n  let sender = webCrypto.importKey(\n    'jwk',\n    jwk,\n    {\n      name: 'ECDH',\n      namedCurve: curve.web\n    },\n    true,\n    []\n  );\n  [privateKey, sender] = await Promise.all([privateKey, sender]);\n  let S = webCrypto.deriveBits(\n    {\n      name: 'ECDH',\n      namedCurve: curve.web,\n      public: sender\n    },\n    privateKey,\n    curve.sharedSize\n  );\n  let secret = webCrypto.exportKey(\n    'jwk',\n    privateKey\n  );\n  [S, secret] = await Promise.all([S, secret]);\n  const sharedKey = new Uint8Array(S);\n  const secretKey = b64ToUint8Array(secret.d, true);\n  return { secretKey, sharedKey };\n}\n\n/**\n * Generate ECDHE ephemeral key and secret from public key using webCrypto\n *\n * @param {CurveWithOID} curve - Elliptic curve object\n * @param {Uint8Array} Q - Recipient public key\n * @returns {Promise<{publicKey: Uint8Array, sharedKey: Uint8Array}>}\n * @async\n */\nasync function webPublicEphemeralKey(curve, Q) {\n  const jwk = rawPublicToJWK(curve.payloadSize, curve.web, Q);\n  let keyPair = webCrypto.generateKey(\n    {\n      name: 'ECDH',\n      namedCurve: curve.web\n    },\n    true,\n    ['deriveKey', 'deriveBits']\n  );\n  let recipient = webCrypto.importKey(\n    'jwk',\n    jwk,\n    {\n      name: 'ECDH',\n      namedCurve: curve.web\n    },\n    false,\n    []\n  );\n  [keyPair, recipient] = await Promise.all([keyPair, recipient]);\n  let s = webCrypto.deriveBits(\n    {\n      name: 'ECDH',\n      namedCurve: curve.web,\n      public: recipient\n    },\n    keyPair.privateKey,\n    curve.sharedSize\n  );\n  let p = webCrypto.exportKey(\n    'jwk',\n    keyPair.publicKey\n  );\n  [s, p] = await Promise.all([s, p]);\n  const sharedKey = new Uint8Array(s);\n  const publicKey = new Uint8Array(jwkToRawPublic(p, curve.wireFormatLeadingByte));\n  return { publicKey, sharedKey };\n}\n\n/**\n * Generate ECDHE secret from private key and public part of ephemeral key using nodeCrypto\n *\n * @param {CurveWithOID} curve - Elliptic curve object\n * @param {Uint8Array} V - Public part of ephemeral key\n * @param {Uint8Array} d - Recipient private key\n * @returns {Promise<{secretKey: Uint8Array, sharedKey: Uint8Array}>}\n * @async\n */\nasync function nodePrivateEphemeralKey(curve, V, d) {\n  const recipient = nodeCrypto.createECDH(curve.node);\n  recipient.setPrivateKey(d);\n  const sharedKey = new Uint8Array(recipient.computeSecret(V));\n  const secretKey = new Uint8Array(recipient.getPrivateKey());\n  return { secretKey, sharedKey };\n}\n\n/**\n * Generate ECDHE ephemeral key and secret from public key using nodeCrypto\n *\n * @param {CurveWithOID} curve - Elliptic curve object\n * @param {Uint8Array} Q - Recipient public key\n * @returns {Promise<{publicKey: Uint8Array, sharedKey: Uint8Array}>}\n * @async\n */\nasync function nodePublicEphemeralKey(curve, Q) {\n  const sender = nodeCrypto.createECDH(curve.node);\n  sender.generateKeys();\n  const sharedKey = new Uint8Array(sender.computeSecret(Q));\n  const publicKey = new Uint8Array(sender.getPublicKey());\n  return { publicKey, sharedKey };\n}\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n/**\n * @fileoverview A Digital signature algorithm implementation\n * @module crypto/public_key/dsa\n */\nimport { getRandomBigInteger } from '../random';\nimport util from '../../util';\nimport { isProbablePrime } from './prime';\nimport { bigIntToUint8Array, bitLength, byteLength, mod, modExp, modInv, uint8ArrayToBigInt } from '../biginteger';\n\n/*\n  TODO regarding the hash function, read:\n   https://tools.ietf.org/html/rfc4880#section-13.6\n   https://tools.ietf.org/html/rfc4880#section-14\n*/\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\n/**\n * DSA Sign function\n * @param {Integer} hashAlgo\n * @param {Uint8Array} hashed\n * @param {Uint8Array} g\n * @param {Uint8Array} p\n * @param {Uint8Array} q\n * @param {Uint8Array} x\n * @returns {Promise<{ r: Uint8Array, s: Uint8Array }>}\n * @async\n */\nexport async function sign(hashAlgo, hashed, g, p, q, x) {\n  const _0n = BigInt(0);\n  p = uint8ArrayToBigInt(p);\n  q = uint8ArrayToBigInt(q);\n  g = uint8ArrayToBigInt(g);\n  x = uint8ArrayToBigInt(x);\n\n  let k;\n  let r;\n  let s;\n  let t;\n  g = mod(g, p);\n  x = mod(x, q);\n  // If the output size of the chosen hash is larger than the number of\n  // bits of q, the hash result is truncated to fit by taking the number\n  // of leftmost bits equal to the number of bits of q.  This (possibly\n  // truncated) hash function result is treated as a number and used\n  // directly in the DSA signature algorithm.\n  const h = mod(uint8ArrayToBigInt(hashed.subarray(0, byteLength(q))), q);\n  // FIPS-186-4, section 4.6:\n  // The values of r and s shall be checked to determine if r = 0 or s = 0.\n  // If either r = 0 or s = 0, a new value of k shall be generated, and the\n  // signature shall be recalculated. It is extremely unlikely that r = 0\n  // or s = 0 if signatures are generated properly.\n  while (true) {\n    // See Appendix B here: https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf\n    k = getRandomBigInteger(_1n, q); // returns in [1, q-1]\n    r = mod(modExp(g, k, p), q); // (g**k mod p) mod q\n    if (r === _0n) {\n      continue;\n    }\n    const xr = mod(x * r, q);\n    t = mod(h + xr, q); // H(m) + x*r mod q\n    s = mod(modInv(k, q) * t, q); // k**-1 * (H(m) + x*r) mod q\n    if (s === _0n) {\n      continue;\n    }\n    break;\n  }\n  return {\n    r: bigIntToUint8Array(r, 'be', byteLength(p)),\n    s: bigIntToUint8Array(s, 'be', byteLength(p))\n  };\n}\n\n/**\n * DSA Verify function\n * @param {Integer} hashAlgo\n * @param {Uint8Array} r\n * @param {Uint8Array} s\n * @param {Uint8Array} hashed\n * @param {Uint8Array} g\n * @param {Uint8Array} p\n * @param {Uint8Array} q\n * @param {Uint8Array} y\n * @returns {boolean}\n * @async\n */\nexport async function verify(hashAlgo, r, s, hashed, g, p, q, y) {\n  r = uint8ArrayToBigInt(r);\n  s = uint8ArrayToBigInt(s);\n\n  p = uint8ArrayToBigInt(p);\n  q = uint8ArrayToBigInt(q);\n  g = uint8ArrayToBigInt(g);\n  y = uint8ArrayToBigInt(y);\n\n  if (r <= _0n || r >= q ||\n      s <= _0n || s >= q) {\n    util.printDebug('invalid DSA Signature');\n    return false;\n  }\n  const h = mod(uint8ArrayToBigInt(hashed.subarray(0, byteLength(q))), q);\n  const w = modInv(s, q); // s**-1 mod q\n  if (w === _0n) {\n    util.printDebug('invalid DSA Signature');\n    return false;\n  }\n\n  g = mod(g, p);\n  y = mod(y, p);\n  const u1 = mod(h * w, q); // H(m) * w mod q\n  const u2 = mod(r * w, q); // r * w mod q\n  const t1 = modExp(g, u1, p); // g**u1 mod p\n  const t2 = modExp(y, u2, p); // y**u2 mod p\n  const v = mod(mod(t1 * t2, p), q); // (g**u1 * y**u2 mod p) mod q\n  return v === r;\n}\n\n/**\n * Validate DSA parameters\n * @param {Uint8Array} p - DSA prime\n * @param {Uint8Array} q - DSA group order\n * @param {Uint8Array} g - DSA sub-group generator\n * @param {Uint8Array} y - DSA public key\n * @param {Uint8Array} x - DSA private key\n * @returns {Promise<Boolean>} Whether params are valid.\n * @async\n */\nexport async function validateParams(p, q, g, y, x) {\n  p = uint8ArrayToBigInt(p);\n  q = uint8ArrayToBigInt(q);\n  g = uint8ArrayToBigInt(g);\n  y = uint8ArrayToBigInt(y);\n  // Check that 1 < g < p\n  if (g <= _1n || g >= p) {\n    return false;\n  }\n\n  /**\n   * Check that subgroup order q divides p-1\n   */\n  if (mod(p - _1n, q) !== _0n) {\n    return false;\n  }\n\n  /**\n   * g has order q\n   * Check that g ** q = 1 mod p\n   */\n  if (modExp(g, q, p) !== _1n) {\n    return false;\n  }\n\n  /**\n   * Check q is large and probably prime (we mainly want to avoid small factors)\n   */\n  const qSize = BigInt(bitLength(q));\n  const _150n = BigInt(150);\n  if (qSize < _150n || !isProbablePrime(q, null, 32)) {\n    return false;\n  }\n\n  /**\n   * Re-derive public key y' = g ** x mod p\n   * Expect y == y'\n   *\n   * Blinded exponentiation computes g**{rq + x} to compare to y\n   */\n  x = uint8ArrayToBigInt(x);\n  const _2n = BigInt(2);\n  const r = getRandomBigInteger(_2n << (qSize - _1n), _2n << qSize); // draw r of same size as q\n  const rqx = q * r + x;\n  if (y !== modExp(g, rqx, p)) {\n    return false;\n  }\n\n  return true;\n}\n","// OpenPGP.js - An OpenPGP implementation in javascript\n// Copyright (C) 2015-2016 Decentral\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n/**\n * Encoded symmetric key for ECDH (incl. legacy x25519)\n *\n * @module type/ecdh_symkey\n */\n\nimport util from '../util';\n\nclass ECDHSymmetricKey {\n  constructor(data) {\n    if (data) {\n      this.data = data;\n    }\n  }\n\n  /**\n   * Read an ECDHSymmetricKey from an Uint8Array:\n   * - 1 octect for the length `l`\n   * - `l` octects of encoded session key data\n   * @param {Uint8Array} bytes\n   * @returns {Number} Number of read bytes.\n   */\n  read(bytes) {\n    if (bytes.length >= 1) {\n      const length = bytes[0];\n      if (bytes.length >= 1 + length) {\n        this.data = bytes.subarray(1, 1 + length);\n        return 1 + this.data.length;\n      }\n    }\n    throw new Error('Invalid symmetric key');\n  }\n\n  /**\n   * Write an ECDHSymmetricKey as an Uint8Array\n   * @returns  {Uint8Array} Serialised data\n   */\n  write() {\n    return util.concatUint8Array([new Uint8Array([this.data.length]), this.data]);\n  }\n}\n\nexport default ECDHSymmetricKey;\n","// OpenPGP.js - An OpenPGP implementation in javascript\n// Copyright (C) 2015-2016 Decentral\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport { UnsupportedError } from '../packet/packet';\n\n/**\n * Implementation of type KDF parameters\n *\n * {@link https://tools.ietf.org/html/rfc6637#section-7|RFC 6637 7}:\n * A key derivation function (KDF) is necessary to implement the EC\n * encryption.  The Concatenation Key Derivation Function (Approved\n * Alternative 1) [NIST-SP800-56A] with the KDF hash function that is\n * SHA2-256 [FIPS-180-3] or stronger is REQUIRED.\n * @module type/kdf_params\n * @private\n */\n\nclass KDFParams {\n  /**\n   * @param {enums.hash} hash - Hash algorithm\n   * @param {enums.symmetric} cipher - Symmetric algorithm\n   */\n  constructor(data) {\n    if (data) {\n      const { hash, cipher } = data;\n      this.hash = hash;\n      this.cipher = cipher;\n    } else {\n      this.hash = null;\n      this.cipher = null;\n    }\n  }\n\n  /**\n   * Read KDFParams from an Uint8Array\n   * @param {Uint8Array} input - Where to read the KDFParams from\n   * @returns {Number} Number of read bytes.\n   */\n  read(input) {\n    if (input.length < 4 || input[0] !== 3 || input[1] !== 1) {\n      throw new UnsupportedError('Cannot read KDFParams');\n    }\n    this.hash = input[2];\n    this.cipher = input[3];\n    return 4;\n  }\n\n  /**\n   * Write KDFParams to an Uint8Array\n   * @returns  {Uint8Array}  Array with the KDFParams value\n   */\n  write() {\n    return new Uint8Array([3, 1, this.hash, this.cipher]);\n  }\n}\n\nexport default KDFParams;\n","/**\n * Encoded symmetric key for x25519 and x448\n * The payload format varies for v3 and v6 PKESK:\n * the former includes an algorithm byte preceeding the encrypted session key.\n *\n * @module type/x25519x448_symkey\n */\n\nimport util from '../util';\n\nclass ECDHXSymmetricKey {\n  static fromObject({ wrappedKey, algorithm }) {\n    const instance = new ECDHXSymmetricKey();\n    instance.wrappedKey = wrappedKey;\n    instance.algorithm = algorithm;\n    return instance;\n  }\n\n  /**\n   * - 1 octect for the length `l`\n   * - `l` octects of encoded session key data (with optional leading algorithm byte)\n   * @param {Uint8Array} bytes\n   * @returns {Number} Number of read bytes.\n   */\n  read(bytes) {\n    let read = 0;\n    let followLength = bytes[read++];\n    this.algorithm = followLength % 2 ? bytes[read++] : null; // session key size is always even\n    followLength -= followLength % 2;\n    this.wrappedKey = util.readExactSubarray(bytes, read, read + followLength); read += followLength;\n  }\n\n  /**\n   * Write an MontgomerySymmetricKey as an Uint8Array\n   * @returns  {Uint8Array} Serialised data\n   */\n  write() {\n    return util.concatUint8Array([\n      this.algorithm ?\n        new Uint8Array([this.wrappedKey.length + 1, this.algorithm]) :\n        new Uint8Array([this.wrappedKey.length]),\n      this.wrappedKey\n    ]);\n  }\n}\n\nexport default ECDHXSymmetricKey;\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n// The GPG4Browsers crypto interface\n\n/**\n * @fileoverview Provides functions for asymmetric encryption and decryption as\n * well as key generation and parameter handling for all public-key cryptosystems.\n * @module crypto/crypto\n */\n\nimport { rsa, elliptic, elgamal, dsa } from './public_key';\nimport { getRandomBytes } from './random';\nimport { getCipherParams } from './cipher';\nimport ECDHSymkey from '../type/ecdh_symkey';\nimport KDFParams from '../type/kdf_params';\nimport enums from '../enums';\nimport util from '../util';\nimport OID from '../type/oid';\nimport { UnsupportedError } from '../packet/packet';\nimport ECDHXSymmetricKey from '../type/ecdh_x_symkey';\n\n/**\n * Encrypts data using specified algorithm and public key parameters.\n * See {@link https://tools.ietf.org/html/rfc4880#section-9.1|RFC 4880 9.1} for public key algorithms.\n * @param {module:enums.publicKey} keyAlgo - Public key algorithm\n * @param {module:enums.symmetric|null} symmetricAlgo - Cipher algorithm (v3 only)\n * @param {Object} publicParams - Algorithm-specific public key parameters\n * @param {Uint8Array} data - Session key data to be encrypted\n * @param {Uint8Array} fingerprint - Recipient fingerprint\n * @returns {Promise<Object>} Encrypted session key parameters.\n * @async\n */\nexport async function publicKeyEncrypt(keyAlgo, symmetricAlgo, publicParams, data, fingerprint) {\n  switch (keyAlgo) {\n    case enums.publicKey.rsaEncrypt:\n    case enums.publicKey.rsaEncryptSign: {\n      const { n, e } = publicParams;\n      const c = await rsa.encrypt(data, n, e);\n      return { c };\n    }\n    case enums.publicKey.elgamal: {\n      const { p, g, y } = publicParams;\n      return elgamal.encrypt(data, p, g, y);\n    }\n    case enums.publicKey.ecdh: {\n      const { oid, Q, kdfParams } = publicParams;\n      const { publicKey: V, wrappedKey: C } = await elliptic.ecdh.encrypt(\n        oid, kdfParams, data, Q, fingerprint);\n      return { V, C: new ECDHSymkey(C) };\n    }\n    case enums.publicKey.x25519:\n    case enums.publicKey.x448: {\n      if (symmetricAlgo && !util.isAES(symmetricAlgo)) {\n        // see https://gitlab.com/openpgp-wg/rfc4880bis/-/merge_requests/276\n        throw new Error('X25519 and X448 keys can only encrypt AES session keys');\n      }\n      const { A } = publicParams;\n      const { ephemeralPublicKey, wrappedKey } = await elliptic.ecdhX.encrypt(\n        keyAlgo, data, A);\n      const C = ECDHXSymmetricKey.fromObject({ algorithm: symmetricAlgo, wrappedKey });\n      return { ephemeralPublicKey, C };\n    }\n    default:\n      return [];\n  }\n}\n\n/**\n * Decrypts data using specified algorithm and private key parameters.\n * See {@link https://tools.ietf.org/html/rfc4880#section-5.5.3|RFC 4880 5.5.3}\n * @param {module:enums.publicKey} algo - Public key algorithm\n * @param {Object} publicKeyParams - Algorithm-specific public key parameters\n * @param {Object} privateKeyParams - Algorithm-specific private key parameters\n * @param {Object} sessionKeyParams - Encrypted session key parameters\n * @param {Uint8Array} fingerprint - Recipient fingerprint\n * @param {Uint8Array} [randomPayload] - Data to return on decryption error, instead of throwing\n *                                    (needed for constant-time processing in RSA and ElGamal)\n * @returns {Promise<Uint8Array>} Decrypted data.\n * @throws {Error} on sensitive decryption error, unless `randomPayload` is given\n * @async\n */\nexport async function publicKeyDecrypt(algo, publicKeyParams, privateKeyParams, sessionKeyParams, fingerprint, randomPayload) {\n  switch (algo) {\n    case enums.publicKey.rsaEncryptSign:\n    case enums.publicKey.rsaEncrypt: {\n      const { c } = sessionKeyParams;\n      const { n, e } = publicKeyParams;\n      const { d, p, q, u } = privateKeyParams;\n      return rsa.decrypt(c, n, e, d, p, q, u, randomPayload);\n    }\n    case enums.publicKey.elgamal: {\n      const { c1, c2 } = sessionKeyParams;\n      const p = publicKeyParams.p;\n      const x = privateKeyParams.x;\n      return elgamal.decrypt(c1, c2, p, x, randomPayload);\n    }\n    case enums.publicKey.ecdh: {\n      const { oid, Q, kdfParams } = publicKeyParams;\n      const { d } = privateKeyParams;\n      const { V, C } = sessionKeyParams;\n      return elliptic.ecdh.decrypt(\n        oid, kdfParams, V, C.data, Q, d, fingerprint);\n    }\n    case enums.publicKey.x25519:\n    case enums.publicKey.x448: {\n      const { A } = publicKeyParams;\n      const { k } = privateKeyParams;\n      const { ephemeralPublicKey, C } = sessionKeyParams;\n      if (C.algorithm !== null && !util.isAES(C.algorithm)) {\n        throw new Error('AES session key expected');\n      }\n      return elliptic.ecdhX.decrypt(\n        algo, ephemeralPublicKey, C.wrappedKey, A, k);\n    }\n    default:\n      throw new Error('Unknown public key encryption algorithm.');\n  }\n}\n\n/**\n * Parse public key material in binary form to get the key parameters\n * @param {module:enums.publicKey} algo - The key algorithm\n * @param {Uint8Array} bytes - The key material to parse\n * @returns {{ read: Number, publicParams: Object }} Number of read bytes plus key parameters referenced by name.\n */\nexport function parsePublicKeyParams(algo, bytes) {\n  let read = 0;\n  switch (algo) {\n    case enums.publicKey.rsaEncrypt:\n    case enums.publicKey.rsaEncryptSign:\n    case enums.publicKey.rsaSign: {\n      const n = util.readMPI(bytes.subarray(read)); read += n.length + 2;\n      const e = util.readMPI(bytes.subarray(read)); read += e.length + 2;\n      return { read, publicParams: { n, e } };\n    }\n    case enums.publicKey.dsa: {\n      const p = util.readMPI(bytes.subarray(read)); read += p.length + 2;\n      const q = util.readMPI(bytes.subarray(read)); read += q.length + 2;\n      const g = util.readMPI(bytes.subarray(read)); read += g.length + 2;\n      const y = util.readMPI(bytes.subarray(read)); read += y.length + 2;\n      return { read, publicParams: { p, q, g, y } };\n    }\n    case enums.publicKey.elgamal: {\n      const p = util.readMPI(bytes.subarray(read)); read += p.length + 2;\n      const g = util.readMPI(bytes.subarray(read)); read += g.length + 2;\n      const y = util.readMPI(bytes.subarray(read)); read += y.length + 2;\n      return { read, publicParams: { p, g, y } };\n    }\n    case enums.publicKey.ecdsa: {\n      const oid = new OID(); read += oid.read(bytes);\n      checkSupportedCurve(oid);\n      const Q = util.readMPI(bytes.subarray(read)); read += Q.length + 2;\n      return { read: read, publicParams: { oid, Q } };\n    }\n    case enums.publicKey.eddsaLegacy: {\n      const oid = new OID(); read += oid.read(bytes);\n      checkSupportedCurve(oid);\n      if (oid.getName() !== enums.curve.ed25519Legacy) {\n        throw new Error('Unexpected OID for eddsaLegacy');\n      }\n      let Q = util.readMPI(bytes.subarray(read)); read += Q.length + 2;\n      Q = util.leftPad(Q, 33);\n      return { read: read, publicParams: { oid, Q } };\n    }\n    case enums.publicKey.ecdh: {\n      const oid = new OID(); read += oid.read(bytes);\n      checkSupportedCurve(oid);\n      const Q = util.readMPI(bytes.subarray(read)); read += Q.length + 2;\n      const kdfParams = new KDFParams(); read += kdfParams.read(bytes.subarray(read));\n      return { read: read, publicParams: { oid, Q, kdfParams } };\n    }\n    case enums.publicKey.ed25519:\n    case enums.publicKey.ed448:\n    case enums.publicKey.x25519:\n    case enums.publicKey.x448: {\n      const A = util.readExactSubarray(bytes, read, read + getCurvePayloadSize(algo)); read += A.length;\n      return { read, publicParams: { A } };\n    }\n    default:\n      throw new UnsupportedError('Unknown public key encryption algorithm.');\n  }\n}\n\n/**\n * Parse private key material in binary form to get the key parameters\n * @param {module:enums.publicKey} algo - The key algorithm\n * @param {Uint8Array} bytes - The key material to parse\n * @param {Object} publicParams - (ECC only) public params, needed to format some private params\n * @returns {{ read: Number, privateParams: Object }} Number of read bytes plus the key parameters referenced by name.\n */\nexport function parsePrivateKeyParams(algo, bytes, publicParams) {\n  let read = 0;\n  switch (algo) {\n    case enums.publicKey.rsaEncrypt:\n    case enums.publicKey.rsaEncryptSign:\n    case enums.publicKey.rsaSign: {\n      const d = util.readMPI(bytes.subarray(read)); read += d.length + 2;\n      const p = util.readMPI(bytes.subarray(read)); read += p.length + 2;\n      const q = util.readMPI(bytes.subarray(read)); read += q.length + 2;\n      const u = util.readMPI(bytes.subarray(read)); read += u.length + 2;\n      return { read, privateParams: { d, p, q, u } };\n    }\n    case enums.publicKey.dsa:\n    case enums.publicKey.elgamal: {\n      const x = util.readMPI(bytes.subarray(read)); read += x.length + 2;\n      return { read, privateParams: { x } };\n    }\n    case enums.publicKey.ecdsa:\n    case enums.publicKey.ecdh: {\n      const payloadSize = getCurvePayloadSize(algo, publicParams.oid);\n      let d = util.readMPI(bytes.subarray(read)); read += d.length + 2;\n      d = util.leftPad(d, payloadSize);\n      return { read, privateParams: { d } };\n    }\n    case enums.publicKey.eddsaLegacy: {\n      const payloadSize = getCurvePayloadSize(algo, publicParams.oid);\n      if (publicParams.oid.getName() !== enums.curve.ed25519Legacy) {\n        throw new Error('Unexpected OID for eddsaLegacy');\n      }\n      let seed = util.readMPI(bytes.subarray(read)); read += seed.length + 2;\n      seed = util.leftPad(seed, payloadSize);\n      return { read, privateParams: { seed } };\n    }\n    case enums.publicKey.ed25519:\n    case enums.publicKey.ed448: {\n      const payloadSize = getCurvePayloadSize(algo);\n      const seed = util.readExactSubarray(bytes, read, read + payloadSize); read += seed.length;\n      return { read, privateParams: { seed } };\n    }\n    case enums.publicKey.x25519:\n    case enums.publicKey.x448: {\n      const payloadSize = getCurvePayloadSize(algo);\n      const k = util.readExactSubarray(bytes, read, read + payloadSize); read += k.length;\n      return { read, privateParams: { k } };\n    }\n    default:\n      throw new UnsupportedError('Unknown public key encryption algorithm.');\n  }\n}\n\n/** Returns the types comprising the encrypted session key of an algorithm\n * @param {module:enums.publicKey} algo - The key algorithm\n * @param {Uint8Array} bytes - The key material to parse\n * @returns {Object} The session key parameters referenced by name.\n */\nexport function parseEncSessionKeyParams(algo, bytes) {\n  let read = 0;\n  switch (algo) {\n    //   Algorithm-Specific Fields for RSA encrypted session keys:\n    //       - MPI of RSA encrypted value m**e mod n.\n    case enums.publicKey.rsaEncrypt:\n    case enums.publicKey.rsaEncryptSign: {\n      const c = util.readMPI(bytes.subarray(read));\n      return { c };\n    }\n\n    //   Algorithm-Specific Fields for Elgamal encrypted session keys:\n    //       - MPI of Elgamal value g**k mod p\n    //       - MPI of Elgamal value m * y**k mod p\n    case enums.publicKey.elgamal: {\n      const c1 = util.readMPI(bytes.subarray(read)); read += c1.length + 2;\n      const c2 = util.readMPI(bytes.subarray(read));\n      return { c1, c2 };\n    }\n    //   Algorithm-Specific Fields for ECDH encrypted session keys:\n    //       - MPI containing the ephemeral key used to establish the shared secret\n    //       - ECDH Symmetric Key\n    case enums.publicKey.ecdh: {\n      const V = util.readMPI(bytes.subarray(read)); read += V.length + 2;\n      const C = new ECDHSymkey(); C.read(bytes.subarray(read));\n      return { V, C };\n    }\n    //   Algorithm-Specific Fields for X25519 or X448 encrypted session keys:\n    //       - 32 octets representing an ephemeral X25519 public key (or 57 octets for X448).\n    //       - A one-octet size of the following fields.\n    //       - The one-octet algorithm identifier, if it was passed (in the case of a v3 PKESK packet).\n    //       - The encrypted session key.\n    case enums.publicKey.x25519:\n    case enums.publicKey.x448: {\n      const pointSize = getCurvePayloadSize(algo);\n      const ephemeralPublicKey = util.readExactSubarray(bytes, read, read + pointSize); read += ephemeralPublicKey.length;\n      const C = new ECDHXSymmetricKey(); C.read(bytes.subarray(read));\n      return { ephemeralPublicKey, C };\n    }\n    default:\n      throw new UnsupportedError('Unknown public key encryption algorithm.');\n  }\n}\n\n/**\n * Convert params to MPI and serializes them in the proper order\n * @param {module:enums.publicKey} algo - The public key algorithm\n * @param {Object} params - The key parameters indexed by name\n * @returns {Uint8Array} The array containing the MPIs.\n */\nexport function serializeParams(algo, params) {\n  // Some algorithms do not rely on MPIs to store the binary params\n  const algosWithNativeRepresentation = new Set([\n    enums.publicKey.ed25519,\n    enums.publicKey.x25519,\n    enums.publicKey.ed448,\n    enums.publicKey.x448\n  ]);\n  const orderedParams = Object.keys(params).map(name => {\n    const param = params[name];\n    if (!util.isUint8Array(param)) return param.write();\n    return algosWithNativeRepresentation.has(algo) ? param : util.uint8ArrayToMPI(param);\n  });\n  return util.concatUint8Array(orderedParams);\n}\n\n/**\n * Generate algorithm-specific key parameters\n * @param {module:enums.publicKey} algo - The public key algorithm\n * @param {Integer} bits - Bit length for RSA keys\n * @param {module:type/oid} oid - Object identifier for ECC keys\n * @returns {Promise<{ publicParams: {Object}, privateParams: {Object} }>} The parameters referenced by name.\n * @async\n */\nexport function generateParams(algo, bits, oid) {\n  switch (algo) {\n    case enums.publicKey.rsaEncrypt:\n    case enums.publicKey.rsaEncryptSign:\n    case enums.publicKey.rsaSign:\n      return rsa.generate(bits, 65537).then(({ n, e, d, p, q, u }) => ({\n        privateParams: { d, p, q, u },\n        publicParams: { n, e }\n      }));\n    case enums.publicKey.ecdsa:\n      return elliptic.generate(oid).then(({ oid, Q, secret }) => ({\n        privateParams: { d: secret },\n        publicParams: { oid: new OID(oid), Q }\n      }));\n    case enums.publicKey.eddsaLegacy:\n      return elliptic.generate(oid).then(({ oid, Q, secret }) => ({\n        privateParams: { seed: secret },\n        publicParams: { oid: new OID(oid), Q }\n      }));\n    case enums.publicKey.ecdh:\n      return elliptic.generate(oid).then(({ oid, Q, secret, hash, cipher }) => ({\n        privateParams: { d: secret },\n        publicParams: {\n          oid: new OID(oid),\n          Q,\n          kdfParams: new KDFParams({ hash, cipher })\n        }\n      }));\n    case enums.publicKey.ed25519:\n    case enums.publicKey.ed448:\n      return elliptic.eddsa.generate(algo).then(({ A, seed }) => ({\n        privateParams: { seed },\n        publicParams: { A }\n      }));\n    case enums.publicKey.x25519:\n    case enums.publicKey.x448:\n      return elliptic.ecdhX.generate(algo).then(({ A, k }) => ({\n        privateParams: { k },\n        publicParams: { A }\n      }));\n    case enums.publicKey.dsa:\n    case enums.publicKey.elgamal:\n      throw new Error('Unsupported algorithm for key generation.');\n    default:\n      throw new Error('Unknown public key algorithm.');\n  }\n}\n\n/**\n * Validate algorithm-specific key parameters\n * @param {module:enums.publicKey} algo - The public key algorithm\n * @param {Object} publicParams - Algorithm-specific public key parameters\n * @param {Object} privateParams - Algorithm-specific private key parameters\n * @returns {Promise<Boolean>} Whether the parameters are valid.\n * @async\n */\nexport async function validateParams(algo, publicParams, privateParams) {\n  if (!publicParams || !privateParams) {\n    throw new Error('Missing key parameters');\n  }\n  switch (algo) {\n    case enums.publicKey.rsaEncrypt:\n    case enums.publicKey.rsaEncryptSign:\n    case enums.publicKey.rsaSign: {\n      const { n, e } = publicParams;\n      const { d, p, q, u } = privateParams;\n      return rsa.validateParams(n, e, d, p, q, u);\n    }\n    case enums.publicKey.dsa: {\n      const { p, q, g, y } = publicParams;\n      const { x } = privateParams;\n      return dsa.validateParams(p, q, g, y, x);\n    }\n    case enums.publicKey.elgamal: {\n      const { p, g, y } = publicParams;\n      const { x } = privateParams;\n      return elgamal.validateParams(p, g, y, x);\n    }\n    case enums.publicKey.ecdsa:\n    case enums.publicKey.ecdh: {\n      const algoModule = elliptic[enums.read(enums.publicKey, algo)];\n      const { oid, Q } = publicParams;\n      const { d } = privateParams;\n      return algoModule.validateParams(oid, Q, d);\n    }\n    case enums.publicKey.eddsaLegacy: {\n      const { Q, oid } = publicParams;\n      const { seed } = privateParams;\n      return elliptic.eddsaLegacy.validateParams(oid, Q, seed);\n    }\n    case enums.publicKey.ed25519:\n    case enums.publicKey.ed448: {\n      const { A } = publicParams;\n      const { seed } = privateParams;\n      return elliptic.eddsa.validateParams(algo, A, seed);\n    }\n    case enums.publicKey.x25519:\n    case enums.publicKey.x448: {\n      const { A } = publicParams;\n      const { k } = privateParams;\n      return elliptic.ecdhX.validateParams(algo, A, k);\n    }\n    default:\n      throw new Error('Unknown public key algorithm.');\n  }\n}\n\n/**\n * Generating a session key for the specified symmetric algorithm\n * See {@link https://tools.ietf.org/html/rfc4880#section-9.2|RFC 4880 9.2} for algorithms.\n * @param {module:enums.symmetric} algo - Symmetric encryption algorithm\n * @returns {Uint8Array} Random bytes as a string to be used as a key.\n */\nexport function generateSessionKey(algo) {\n  const { keySize } = getCipherParams(algo);\n  return getRandomBytes(keySize);\n}\n\n/**\n * Check whether the given curve OID is supported\n * @param {module:type/oid} oid - EC object identifier\n * @throws {UnsupportedError} if curve is not supported\n */\nfunction checkSupportedCurve(oid) {\n  try {\n    oid.getName();\n  } catch (e) {\n    throw new UnsupportedError('Unknown curve OID');\n  }\n}\n\n/**\n * Get encoded secret size for a given elliptic algo\n * @param {module:enums.publicKey} algo - alrogithm identifier\n * @param {module:type/oid} [oid] - curve OID if needed by algo\n */\nexport function getCurvePayloadSize(algo, oid) {\n  switch (algo) {\n    case enums.publicKey.ecdsa:\n    case enums.publicKey.ecdh:\n    case enums.publicKey.eddsaLegacy:\n      return new elliptic.CurveWithOID(oid).payloadSize;\n    case enums.publicKey.ed25519:\n    case enums.publicKey.ed448:\n      return elliptic.eddsa.getPayloadSize(algo);\n    case enums.publicKey.x25519:\n    case enums.publicKey.x448:\n      return elliptic.ecdhX.getPayloadSize(algo);\n    default:\n      throw new Error('Unknown elliptic algo');\n  }\n}\n\n/**\n * Get preferred signing hash algo for a given elliptic algo\n * @param {module:enums.publicKey} algo - alrogithm identifier\n * @param {module:type/oid} [oid] - curve OID if needed by algo\n */\nexport function getPreferredCurveHashAlgo(algo, oid) {\n  switch (algo) {\n    case enums.publicKey.ecdsa:\n    case enums.publicKey.eddsaLegacy:\n      return elliptic.getPreferredHashAlgo(oid);\n    case enums.publicKey.ed25519:\n    case enums.publicKey.ed448:\n      return elliptic.eddsa.getPreferredHashAlgo(algo);\n    default:\n      throw new Error('Unknown elliptic signing algo');\n  }\n}\n\n","// Modified by ProtonTech AG\n\n// Modified by Recurity Labs GmbH\n\n// modified version of https://www.hanewin.net/encrypt/PGdecode.js:\n\n/* OpenPGP encryption using RSA/AES\n * Copyright 2005-2006 Herbert Hanewinkel, www.haneWIN.de\n * version 2.0, check www.haneWIN.de for the latest version\n\n * This software is provided as-is, without express or implied warranty.\n * Permission to use, copy, modify, distribute or sell this software, with or\n * without fee, for any purpose and by any individual or organization, is hereby\n * granted, provided that the above copyright notice and this paragraph appear\n * in all copies. Distribution as a part of an application or binary must\n * include the above copyright notice in the documentation and/or other\n * materials provided with the application or distribution.\n */\n\n/**\n * @module crypto/mode/cfb\n */\n\nimport { cfb as nobleAesCfb, unsafe as nobleAesHelpers } from '@noble/ciphers/aes';\n\nimport { transform as streamTransform } from '@openpgp/web-stream-tools';\nimport util from '../../util';\nimport enums from '../../enums';\nimport { getLegacyCipher, getCipherParams } from '../cipher';\nimport { getRandomBytes } from '../random';\n\nconst webCrypto = util.getWebCrypto();\nconst nodeCrypto = util.getNodeCrypto();\n\nconst knownAlgos = nodeCrypto ? nodeCrypto.getCiphers() : [];\nconst nodeAlgos = {\n  idea: knownAlgos.includes('idea-cfb') ? 'idea-cfb' : undefined, /* Unused, not implemented */\n  tripledes: knownAlgos.includes('des-ede3-cfb') ? 'des-ede3-cfb' : undefined,\n  cast5: knownAlgos.includes('cast5-cfb') ? 'cast5-cfb' : undefined,\n  blowfish: knownAlgos.includes('bf-cfb') ? 'bf-cfb' : undefined,\n  aes128: knownAlgos.includes('aes-128-cfb') ? 'aes-128-cfb' : undefined,\n  aes192: knownAlgos.includes('aes-192-cfb') ? 'aes-192-cfb' : undefined,\n  aes256: knownAlgos.includes('aes-256-cfb') ? 'aes-256-cfb' : undefined\n  /* twofish is not implemented in OpenSSL */\n};\n\n/**\n * Generates a random byte prefix for the specified algorithm\n * See {@link https://tools.ietf.org/html/rfc4880#section-9.2|RFC 4880 9.2} for algorithms.\n * @param {module:enums.symmetric} algo - Symmetric encryption algorithm\n * @returns {Promise<Uint8Array>} Random bytes with length equal to the block size of the cipher, plus the last two bytes repeated.\n * @async\n */\nexport async function getPrefixRandom(algo) {\n  const { blockSize } = getCipherParams(algo);\n  const prefixrandom = await getRandomBytes(blockSize);\n  const repeat = new Uint8Array([prefixrandom[prefixrandom.length - 2], prefixrandom[prefixrandom.length - 1]]);\n  return util.concat([prefixrandom, repeat]);\n}\n\n/**\n * CFB encryption\n * @param {enums.symmetric} algo - block cipher algorithm\n * @param {Uint8Array} key\n * @param {MaybeStream<Uint8Array>} plaintext\n * @param {Uint8Array} iv\n * @param {Object} config - full configuration, defaults to openpgp.config\n * @returns MaybeStream<Uint8Array>\n */\nexport async function encrypt(algo, key, plaintext, iv, config) {\n  const algoName = enums.read(enums.symmetric, algo);\n  if (util.getNodeCrypto() && nodeAlgos[algoName]) { // Node crypto library.\n    return nodeEncrypt(algo, key, plaintext, iv);\n  }\n  if (util.isAES(algo)) {\n    return aesEncrypt(algo, key, plaintext, iv, config);\n  }\n\n  const LegacyCipher = await getLegacyCipher(algo);\n  const cipherfn = new LegacyCipher(key);\n  const block_size = cipherfn.blockSize;\n\n  const blockc = iv.slice();\n  let pt = new Uint8Array();\n  const process = chunk => {\n    if (chunk) {\n      pt = util.concatUint8Array([pt, chunk]);\n    }\n    const ciphertext = new Uint8Array(pt.length);\n    let i;\n    let j = 0;\n    while (chunk ? pt.length >= block_size : pt.length) {\n      const encblock = cipherfn.encrypt(blockc);\n      for (i = 0; i < block_size; i++) {\n        blockc[i] = pt[i] ^ encblock[i];\n        ciphertext[j++] = blockc[i];\n      }\n      pt = pt.subarray(block_size);\n    }\n    return ciphertext.subarray(0, j);\n  };\n  return streamTransform(plaintext, process, process);\n}\n\n/**\n * CFB decryption\n * @param {enums.symmetric} algo - block cipher algorithm\n * @param {Uint8Array} key\n * @param {MaybeStream<Uint8Array>} ciphertext\n * @param {Uint8Array} iv\n * @returns MaybeStream<Uint8Array>\n */\nexport async function decrypt(algo, key, ciphertext, iv) {\n  const algoName = enums.read(enums.symmetric, algo);\n  if (nodeCrypto && nodeAlgos[algoName]) { // Node crypto library.\n    return nodeDecrypt(algo, key, ciphertext, iv);\n  }\n  if (util.isAES(algo)) {\n    return aesDecrypt(algo, key, ciphertext, iv);\n  }\n\n  const LegacyCipher = await getLegacyCipher(algo);\n  const cipherfn = new LegacyCipher(key);\n  const block_size = cipherfn.blockSize;\n\n  let blockp = iv;\n  let ct = new Uint8Array();\n  const process = chunk => {\n    if (chunk) {\n      ct = util.concatUint8Array([ct, chunk]);\n    }\n    const plaintext = new Uint8Array(ct.length);\n    let i;\n    let j = 0;\n    while (chunk ? ct.length >= block_size : ct.length) {\n      const decblock = cipherfn.encrypt(blockp);\n      blockp = ct.subarray(0, block_size);\n      for (i = 0; i < block_size; i++) {\n        plaintext[j++] = blockp[i] ^ decblock[i];\n      }\n      ct = ct.subarray(block_size);\n    }\n    return plaintext.subarray(0, j);\n  };\n  return streamTransform(ciphertext, process, process);\n}\n\nclass WebCryptoEncryptor {\n  constructor(algo, key, iv) {\n    const { blockSize } = getCipherParams(algo);\n    this.key = key;\n    this.prevBlock = iv;\n    this.nextBlock = new Uint8Array(blockSize);\n    this.i = 0; // pointer inside next block\n    this.blockSize = blockSize;\n    this.zeroBlock = new Uint8Array(this.blockSize);\n  }\n\n  static async isSupported(algo) {\n    const { keySize } = getCipherParams(algo);\n    return webCrypto.importKey('raw', new Uint8Array(keySize), 'aes-cbc', false, ['encrypt'])\n      .then(() => true, () => false);\n  }\n\n  async _runCBC(plaintext, nonZeroIV) {\n    const mode = 'AES-CBC';\n    this.keyRef = this.keyRef || await webCrypto.importKey('raw', this.key, mode, false, ['encrypt']);\n    const ciphertext = await webCrypto.encrypt(\n      { name: mode, iv: nonZeroIV || this.zeroBlock },\n      this.keyRef,\n      plaintext\n    );\n    return new Uint8Array(ciphertext).subarray(0, plaintext.length);\n  }\n\n  async encryptChunk(value) {\n    const missing = this.nextBlock.length - this.i;\n    const added = value.subarray(0, missing);\n    this.nextBlock.set(added, this.i);\n    if ((this.i + value.length) >= (2 * this.blockSize)) {\n      const leftover = (value.length - missing) % this.blockSize;\n      const plaintext = util.concatUint8Array([\n        this.nextBlock,\n        value.subarray(missing, value.length - leftover)\n      ]);\n      const toEncrypt = util.concatUint8Array([\n        this.prevBlock,\n        plaintext.subarray(0, plaintext.length - this.blockSize) // stop one block \"early\", since we only need to xor the plaintext and pass it over as prevBlock\n      ]);\n\n      const encryptedBlocks = await this._runCBC(toEncrypt);\n      xorMut(encryptedBlocks, plaintext);\n      this.prevBlock = encryptedBlocks.slice(-this.blockSize);\n\n      // take care of leftover data\n      if (leftover > 0) this.nextBlock.set(value.subarray(-leftover));\n      this.i = leftover;\n\n      return encryptedBlocks;\n    }\n\n    this.i += added.length;\n    let encryptedBlock;\n    if (this.i === this.nextBlock.length) { // block ready to be encrypted\n      const curBlock = this.nextBlock;\n      encryptedBlock = await this._runCBC(this.prevBlock);\n      xorMut(encryptedBlock, curBlock);\n      this.prevBlock = encryptedBlock.slice();\n      this.i = 0;\n\n      const remaining = value.subarray(added.length);\n      this.nextBlock.set(remaining, this.i);\n      this.i += remaining.length;\n    } else {\n      encryptedBlock = new Uint8Array();\n    }\n\n    return encryptedBlock;\n  }\n\n  async finish() {\n    let result;\n    if (this.i === 0) { // nothing more to encrypt\n      result = new Uint8Array();\n    } else {\n      this.nextBlock = this.nextBlock.subarray(0, this.i);\n      const curBlock = this.nextBlock;\n      const encryptedBlock = await this._runCBC(this.prevBlock);\n      xorMut(encryptedBlock, curBlock);\n      result = encryptedBlock.subarray(0, curBlock.length);\n    }\n\n    this.clearSensitiveData();\n    return result;\n  }\n\n  clearSensitiveData() {\n    this.nextBlock.fill(0);\n    this.prevBlock.fill(0);\n    this.keyRef = null;\n    this.key = null;\n  }\n\n  async encrypt(plaintext) {\n    // plaintext is internally padded to block length before encryption\n    const encryptedWithPadding = await this._runCBC(\n      util.concatUint8Array([new Uint8Array(this.blockSize), plaintext]),\n      this.iv\n    );\n    // drop encrypted padding\n    const ct = encryptedWithPadding.subarray(0, plaintext.length);\n    xorMut(ct, plaintext);\n    this.clearSensitiveData();\n    return ct;\n  }\n}\n\nclass NobleStreamProcessor {\n  constructor(forEncryption, algo, key, iv) {\n    this.forEncryption = forEncryption;\n    const { blockSize } = getCipherParams(algo);\n    this.key = nobleAesHelpers.expandKeyLE(key);\n\n    if (iv.byteOffset % 4 !== 0) iv = iv.slice(); // aligned arrays required by noble-ciphers\n    this.prevBlock = getUint32Array(iv);\n    this.nextBlock = new Uint8Array(blockSize);\n    this.i = 0; // pointer inside next block\n    this.blockSize = blockSize;\n  }\n\n  _runCFB(src) {\n    const src32 = getUint32Array(src);\n    const dst = new Uint8Array(src.length);\n    const dst32 = getUint32Array(dst);\n    for (let i = 0; i + 4 <= dst32.length; i += 4) {\n      const { s0: e0, s1: e1, s2: e2, s3: e3 } = nobleAesHelpers.encrypt(this.key, this.prevBlock[0], this.prevBlock[1], this.prevBlock[2], this.prevBlock[3]);\n      dst32[i + 0] = src32[i + 0] ^ e0;\n      dst32[i + 1] = src32[i + 1] ^ e1;\n      dst32[i + 2] = src32[i + 2] ^ e2;\n      dst32[i + 3] = src32[i + 3] ^ e3;\n      this.prevBlock = (this.forEncryption ? dst32 : src32).slice(i, i + 4);\n    }\n    return dst;\n  }\n\n  async processChunk(value) {\n    const missing = this.nextBlock.length - this.i;\n    const added = value.subarray(0, missing);\n    this.nextBlock.set(added, this.i);\n\n    if ((this.i + value.length) >= (2 * this.blockSize)) {\n      const leftover = (value.length - missing) % this.blockSize;\n      const toProcess = util.concatUint8Array([\n        this.nextBlock,\n        value.subarray(missing, value.length - leftover)\n      ]);\n\n      const processedBlocks = this._runCFB(toProcess);\n\n      // take care of leftover data\n      if (leftover > 0) this.nextBlock.set(value.subarray(-leftover));\n      this.i = leftover;\n\n      return processedBlocks;\n    }\n\n    this.i += added.length;\n\n    let processedBlock;\n    if (this.i === this.nextBlock.length) { // block ready to be encrypted\n      processedBlock = this._runCFB(this.nextBlock);\n      this.i = 0;\n\n      const remaining = value.subarray(added.length);\n      this.nextBlock.set(remaining, this.i);\n      this.i += remaining.length;\n    } else {\n      processedBlock = new Uint8Array();\n    }\n\n    return processedBlock;\n  }\n\n  async finish() {\n    let result;\n    if (this.i === 0) { // nothing more to encrypt\n      result = new Uint8Array();\n    } else {\n      const processedBlock = this._runCFB(this.nextBlock);\n\n      result = processedBlock.subarray(0, this.i);\n    }\n\n    this.clearSensitiveData();\n    return result;\n  }\n\n  clearSensitiveData() {\n    this.nextBlock.fill(0);\n    this.prevBlock.fill(0);\n    this.key.fill(0);\n  }\n}\n\n\nasync function aesEncrypt(algo, key, pt, iv) {\n  if (webCrypto && await WebCryptoEncryptor.isSupported(algo)) { // Chromium does not implement AES with 192-bit keys\n    const cfb = new WebCryptoEncryptor(algo, key, iv);\n    return util.isStream(pt) ? streamTransform(pt, value => cfb.encryptChunk(value), () => cfb.finish()) : cfb.encrypt(pt);\n  } else if (util.isStream(pt)) { // async callbacks are not accepted by streamTransform unless the input is a stream\n    const cfb = new NobleStreamProcessor(true, algo, key, iv);\n    return streamTransform(pt, value => cfb.processChunk(value), () => cfb.finish());\n  }\n  return nobleAesCfb(key, iv).encrypt(pt);\n}\n\nasync function aesDecrypt(algo, key, ct, iv) {\n  if (util.isStream(ct)) {\n    const cfb = new NobleStreamProcessor(false, algo, key, iv);\n    return streamTransform(ct, value => cfb.processChunk(value), () => cfb.finish());\n  }\n  return nobleAesCfb(key, iv).decrypt(ct);\n}\n\nfunction xorMut(a, b) {\n  const aLength = Math.min(a.length, b.length);\n  for (let i = 0; i < aLength; i++) {\n    a[i] = a[i] ^ b[i];\n  }\n}\n\nconst getUint32Array = arr => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\nfunction nodeEncrypt(algo, key, pt, iv) {\n  const algoName = enums.read(enums.symmetric, algo);\n  const cipherObj = new nodeCrypto.createCipheriv(nodeAlgos[algoName], key, iv);\n  return streamTransform(pt, value => new Uint8Array(cipherObj.update(value)));\n}\n\nfunction nodeDecrypt(algo, key, ct, iv) {\n  const algoName = enums.read(enums.symmetric, algo);\n  const decipherObj = new nodeCrypto.createDecipheriv(nodeAlgos[algoName], key, iv);\n  return streamTransform(ct, value => new Uint8Array(decipherObj.update(value)));\n}\n","/**\n * @fileoverview This module implements AES-CMAC on top of\n * native AES-CBC using either the WebCrypto API or Node.js' crypto API.\n * @module crypto/cmac\n */\n\nimport { cbc as nobleAesCbc } from '@noble/ciphers/aes';\nimport util from '../util';\n\nconst webCrypto = util.getWebCrypto();\nconst nodeCrypto = util.getNodeCrypto();\n\n\n/**\n * This implementation of CMAC is based on the description of OMAC in\n * http://web.cs.ucdavis.edu/~rogaway/papers/eax.pdf. As per that\n * document:\n *\n * We have made a small modification to the OMAC algorithm as it was\n * originally presented, changing one of its two constants.\n * Specifically, the constant 4 at line 85 was the constant 1/2 (the\n * multiplicative inverse of 2) in the original definition of OMAC [14].\n * The OMAC authors indicate that they will promulgate this modification\n * [15], which slightly simplifies implementations.\n */\n\nconst blockLength = 16;\n\n\n/**\n * xor `padding` into the end of `data`. This function implements \"the\n * operation xor→ [which] xors the shorter string into the end of longer\n * one\". Since data is always as least as long as padding, we can\n * simplify the implementation.\n * @param {Uint8Array} data\n * @param {Uint8Array} padding\n */\nfunction rightXORMut(data, padding) {\n  const offset = data.length - blockLength;\n  for (let i = 0; i < blockLength; i++) {\n    data[i + offset] ^= padding[i];\n  }\n  return data;\n}\n\nfunction pad(data, padding, padding2) {\n  // if |M| in {n, 2n, 3n, ...}\n  if (data.length && data.length % blockLength === 0) {\n    // then return M xor→ B,\n    return rightXORMut(data, padding);\n  }\n  // else return (M || 10^(n−1−(|M| mod n))) xor→ P\n  const padded = new Uint8Array(data.length + (blockLength - (data.length % blockLength)));\n  padded.set(data);\n  padded[data.length] = 0b10000000;\n  return rightXORMut(padded, padding2);\n}\n\nconst zeroBlock = new Uint8Array(blockLength);\n\nexport default async function CMAC(key) {\n  const cbc = await CBC(key);\n\n  // L ← E_K(0^n); B ← 2L; P ← 4L\n  const padding = util.double(await cbc(zeroBlock));\n  const padding2 = util.double(padding);\n\n  return async function(data) {\n    // return CBC_K(pad(M; B, P))\n    return (await cbc(pad(data, padding, padding2))).subarray(-blockLength);\n  };\n}\n\nasync function CBC(key) {\n  if (util.getNodeCrypto()) { // Node crypto library\n    return async function(pt) {\n      const en = new nodeCrypto.createCipheriv('aes-' + (key.length * 8) + '-cbc', key, zeroBlock);\n      const ct = en.update(pt);\n      return new Uint8Array(ct);\n    };\n  }\n\n  if (util.getWebCrypto()) {\n    try {\n      key = await webCrypto.importKey('raw', key, { name: 'AES-CBC', length: key.length * 8 }, false, ['encrypt']);\n      return async function(pt) {\n        const ct = await webCrypto.encrypt({ name: 'AES-CBC', iv: zeroBlock, length: blockLength * 8 }, key, pt);\n        return new Uint8Array(ct).subarray(0, ct.byteLength - blockLength);\n      };\n    } catch (err) {\n      // no 192 bit support in Chromium, which throws `OperationError`, see: https://www.chromium.org/blink/webcrypto#TOC-AES-support\n      if (err.name !== 'NotSupportedError' &&\n        !(key.length === 24 && err.name === 'OperationError')) {\n        throw err;\n      }\n      util.printDebugError('Browser did not support operation: ' + err.message);\n    }\n  }\n\n  return async function(pt) {\n    return nobleAesCbc(key, zeroBlock, { disablePadding: true }).encrypt(pt);\n  };\n}\n","// OpenPGP.js - An OpenPGP implementation in javascript\n// Copyright (C) 2018 ProtonTech AG\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n/**\n * @fileoverview This module implements AES-EAX en/decryption on top of\n * native AES-CTR using either the WebCrypto API or Node.js' crypto API.\n * @module crypto/mode/eax\n */\n\nimport { ctr as nobleAesCtr } from '@noble/ciphers/aes';\nimport CMAC from '../cmac';\nimport util from '../../util';\nimport enums from '../../enums';\n\nconst webCrypto = util.getWebCrypto();\nconst nodeCrypto = util.getNodeCrypto();\nconst Buffer = util.getNodeBuffer();\n\n\nconst blockLength = 16;\nconst ivLength = blockLength;\nconst tagLength = blockLength;\n\nconst zero = new Uint8Array(blockLength);\nconst one = new Uint8Array(blockLength); one[blockLength - 1] = 1;\nconst two = new Uint8Array(blockLength); two[blockLength - 1] = 2;\n\nasync function OMAC(key) {\n  const cmac = await CMAC(key);\n  return function(t, message) {\n    return cmac(util.concatUint8Array([t, message]));\n  };\n}\n\nasync function CTR(key) {\n  if (util.getNodeCrypto()) { // Node crypto library\n    return async function(pt, iv) {\n      const en = new nodeCrypto.createCipheriv('aes-' + (key.length * 8) + '-ctr', key, iv);\n      const ct = Buffer.concat([en.update(pt), en.final()]);\n      return new Uint8Array(ct);\n    };\n  }\n\n  if (util.getWebCrypto()) {\n    try {\n      const keyRef = await webCrypto.importKey('raw', key, { name: 'AES-CTR', length: key.length * 8 }, false, ['encrypt']);\n      return async function(pt, iv) {\n        const ct = await webCrypto.encrypt({ name: 'AES-CTR', counter: iv, length: blockLength * 8 }, keyRef, pt);\n        return new Uint8Array(ct);\n      };\n    } catch (err) {\n      // no 192 bit support in Chromium, which throws `OperationError`, see: https://www.chromium.org/blink/webcrypto#TOC-AES-support\n      if (err.name !== 'NotSupportedError' &&\n        !(key.length === 24 && err.name === 'OperationError')) {\n        throw err;\n      }\n      util.printDebugError('Browser did not support operation: ' + err.message);\n    }\n  }\n\n  return async function(pt, iv) {\n    return nobleAesCtr(key, iv).encrypt(pt);\n  };\n}\n\n\n/**\n * Class to en/decrypt using EAX mode.\n * @param {enums.symmetric} cipher - The symmetric cipher algorithm to use\n * @param {Uint8Array} key - The encryption key\n */\nasync function EAX(cipher, key) {\n  if (cipher !== enums.symmetric.aes128 &&\n    cipher !== enums.symmetric.aes192 &&\n    cipher !== enums.symmetric.aes256) {\n    throw new Error('EAX mode supports only AES cipher');\n  }\n\n  const [\n    omac,\n    ctr\n  ] = await Promise.all([\n    OMAC(key),\n    CTR(key)\n  ]);\n\n  return {\n    /**\n     * Encrypt plaintext input.\n     * @param {Uint8Array} plaintext - The cleartext input to be encrypted\n     * @param {Uint8Array} nonce - The nonce (16 bytes)\n     * @param {Uint8Array} adata - Associated data to sign\n     * @returns {Promise<Uint8Array>} The ciphertext output.\n     */\n    encrypt: async function(plaintext, nonce, adata) {\n      const [\n        omacNonce,\n        omacAdata\n      ] = await Promise.all([\n        omac(zero, nonce),\n        omac(one, adata)\n      ]);\n      const ciphered = await ctr(plaintext, omacNonce);\n      const omacCiphered = await omac(two, ciphered);\n      const tag = omacCiphered; // Assumes that omac(*).length === tagLength.\n      for (let i = 0; i < tagLength; i++) {\n        tag[i] ^= omacAdata[i] ^ omacNonce[i];\n      }\n      return util.concatUint8Array([ciphered, tag]);\n    },\n\n    /**\n     * Decrypt ciphertext input.\n     * @param {Uint8Array} ciphertext - The ciphertext input to be decrypted\n     * @param {Uint8Array} nonce - The nonce (16 bytes)\n     * @param {Uint8Array} adata - Associated data to verify\n     * @returns {Promise<Uint8Array>} The plaintext output.\n     */\n    decrypt: async function(ciphertext, nonce, adata) {\n      if (ciphertext.length < tagLength) throw new Error('Invalid EAX ciphertext');\n      const ciphered = ciphertext.subarray(0, -tagLength);\n      const ctTag = ciphertext.subarray(-tagLength);\n      const [\n        omacNonce,\n        omacAdata,\n        omacCiphered\n      ] = await Promise.all([\n        omac(zero, nonce),\n        omac(one, adata),\n        omac(two, ciphered)\n      ]);\n      const tag = omacCiphered; // Assumes that omac(*).length === tagLength.\n      for (let i = 0; i < tagLength; i++) {\n        tag[i] ^= omacAdata[i] ^ omacNonce[i];\n      }\n      if (!util.equalsUint8Array(ctTag, tag)) throw new Error('Authentication tag mismatch');\n      const plaintext = await ctr(ciphered, omacNonce);\n      return plaintext;\n    }\n  };\n}\n\n\n/**\n * Get EAX nonce as defined by {@link https://tools.ietf.org/html/draft-ietf-openpgp-rfc4880bis-04#section-5.16.1|RFC4880bis-04, section 5.16.1}.\n * @param {Uint8Array} iv - The initialization vector (16 bytes)\n * @param {Uint8Array} chunkIndex - The chunk index (8 bytes)\n */\nEAX.getNonce = function(iv, chunkIndex) {\n  const nonce = iv.slice();\n  for (let i = 0; i < chunkIndex.length; i++) {\n    nonce[8 + i] ^= chunkIndex[i];\n  }\n  return nonce;\n};\n\nEAX.blockLength = blockLength;\nEAX.ivLength = ivLength;\nEAX.tagLength = tagLength;\n\nexport default EAX;\n","// OpenPGP.js - An OpenPGP implementation in javascript\n// Copyright (C) 2018 ProtonTech AG\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n/**\n * @fileoverview This module implements AES-OCB en/decryption.\n * @module crypto/mode/ocb\n */\n\nimport { cbc as nobleAesCbc } from '@noble/ciphers/aes';\nimport { getCipherParams } from '../cipher';\nimport util from '../../util';\n\nconst blockLength = 16;\nconst ivLength = 15;\n\n// https://tools.ietf.org/html/draft-ietf-openpgp-rfc4880bis-04#section-5.16.2:\n// While OCB [RFC7253] allows the authentication tag length to be of any\n// number up to 128 bits long, this document requires a fixed\n// authentication tag length of 128 bits (16 octets) for simplicity.\nconst tagLength = 16;\n\n\nfunction ntz(n) {\n  let ntz = 0;\n  for (let i = 1; (n & i) === 0; i <<= 1) {\n    ntz++;\n  }\n  return ntz;\n}\n\nfunction xorMut(S, T) {\n  for (let i = 0; i < S.length; i++) {\n    S[i] ^= T[i];\n  }\n  return S;\n}\n\nfunction xor(S, T) {\n  return xorMut(S.slice(), T);\n}\n\nconst zeroBlock = new Uint8Array(blockLength);\nconst one = new Uint8Array([1]);\n\n/**\n * Class to en/decrypt using OCB mode.\n * @param {enums.symmetric} cipher - The symmetric cipher algorithm to use\n * @param {Uint8Array} key - The encryption key\n */\nasync function OCB(cipher, key) {\n  const { keySize } = getCipherParams(cipher);\n  // sanity checks\n  if (!util.isAES(cipher) || key.length !== keySize) {\n    throw new Error('Unexpected algorithm or key size');\n  }\n\n  let maxNtz = 0;\n\n  // `encipher` and `decipher` cannot be async, since `crypt` shares state across calls,\n  // hence its execution cannot be broken up.\n  // As a result, WebCrypto cannot currently be used for `encipher`.\n  const encipher = block => nobleAesCbc(key, zeroBlock, { disablePadding: true }).encrypt(block);\n  const decipher = block => nobleAesCbc(key, zeroBlock, { disablePadding: true }).decrypt(block);\n  let mask;\n\n  constructKeyVariables(cipher, key);\n\n  function constructKeyVariables() {\n    const mask_x = encipher(zeroBlock);\n    const mask_$ = util.double(mask_x);\n    mask = [];\n    mask[0] = util.double(mask_$);\n\n\n    mask.x = mask_x;\n    mask.$ = mask_$;\n  }\n\n  function extendKeyVariables(text, adata) {\n    const newMaxNtz = util.nbits(Math.max(text.length, adata.length) / blockLength | 0) - 1;\n    for (let i = maxNtz + 1; i <= newMaxNtz; i++) {\n      mask[i] = util.double(mask[i - 1]);\n    }\n    maxNtz = newMaxNtz;\n  }\n\n  function hash(adata) {\n    if (!adata.length) {\n      // Fast path\n      return zeroBlock;\n    }\n\n    //\n    // Consider A as a sequence of 128-bit blocks\n    //\n    const m = adata.length / blockLength | 0;\n\n    const offset = new Uint8Array(blockLength);\n    const sum = new Uint8Array(blockLength);\n    for (let i = 0; i < m; i++) {\n      xorMut(offset, mask[ntz(i + 1)]);\n      xorMut(sum, encipher(xor(offset, adata)));\n      adata = adata.subarray(blockLength);\n    }\n\n    //\n    // Process any final partial block; compute final hash value\n    //\n    if (adata.length) {\n      xorMut(offset, mask.x);\n\n      const cipherInput = new Uint8Array(blockLength);\n      cipherInput.set(adata, 0);\n      cipherInput[adata.length] = 0b10000000;\n      xorMut(cipherInput, offset);\n\n      xorMut(sum, encipher(cipherInput));\n    }\n\n    return sum;\n  }\n\n  /**\n   * Encrypt/decrypt data.\n   * @param {encipher|decipher} fn - Encryption/decryption block cipher function\n   * @param {Uint8Array} text - The cleartext or ciphertext (without tag) input\n   * @param {Uint8Array} nonce - The nonce (15 bytes)\n   * @param {Uint8Array} adata - Associated data to sign\n   * @returns {Promise<Uint8Array>} The ciphertext or plaintext output, with tag appended in both cases.\n   */\n  function crypt(fn, text, nonce, adata) {\n    //\n    // Consider P as a sequence of 128-bit blocks\n    //\n    const m = text.length / blockLength | 0;\n\n    //\n    // Key-dependent variables\n    //\n    extendKeyVariables(text, adata);\n\n    //\n    // Nonce-dependent and per-encryption variables\n    //\n    //    Nonce = num2str(TAGLEN mod 128,7) || zeros(120-bitlen(N)) || 1 || N\n    // Note: We assume here that tagLength mod 16 == 0.\n    const paddedNonce = util.concatUint8Array([zeroBlock.subarray(0, ivLength - nonce.length), one, nonce]);\n    //    bottom = str2num(Nonce[123..128])\n    const bottom = paddedNonce[blockLength - 1] & 0b111111;\n    //    Ktop = ENCIPHER(K, Nonce[1..122] || zeros(6))\n    paddedNonce[blockLength - 1] &= 0b11000000;\n    const kTop = encipher(paddedNonce);\n    //    Stretch = Ktop || (Ktop[1..64] xor Ktop[9..72])\n    const stretched = util.concatUint8Array([kTop, xor(kTop.subarray(0, 8), kTop.subarray(1, 9))]);\n    //    Offset_0 = Stretch[1+bottom..128+bottom]\n    const offset = util.shiftRight(stretched.subarray(0 + (bottom >> 3), 17 + (bottom >> 3)), 8 - (bottom & 7)).subarray(1);\n    //    Checksum_0 = zeros(128)\n    const checksum = new Uint8Array(blockLength);\n\n    const ct = new Uint8Array(text.length + tagLength);\n\n    //\n    // Process any whole blocks\n    //\n    let i;\n    let pos = 0;\n    for (i = 0; i < m; i++) {\n      // Offset_i = Offset_{i-1} xor L_{ntz(i)}\n      xorMut(offset, mask[ntz(i + 1)]);\n      // C_i = Offset_i xor ENCIPHER(K, P_i xor Offset_i)\n      // P_i = Offset_i xor DECIPHER(K, C_i xor Offset_i)\n      ct.set(xorMut(fn(xor(offset, text)), offset), pos);\n      // Checksum_i = Checksum_{i-1} xor P_i\n      xorMut(checksum, fn === encipher ? text : ct.subarray(pos));\n\n      text = text.subarray(blockLength);\n      pos += blockLength;\n    }\n\n    //\n    // Process any final partial block and compute raw tag\n    //\n    if (text.length) {\n      // Offset_* = Offset_m xor L_*\n      xorMut(offset, mask.x);\n      // Pad = ENCIPHER(K, Offset_*)\n      const padding = encipher(offset);\n      // C_* = P_* xor Pad[1..bitlen(P_*)]\n      ct.set(xor(text, padding), pos);\n\n      // Checksum_* = Checksum_m xor (P_* || 1 || new Uint8Array(127-bitlen(P_*)))\n      const xorInput = new Uint8Array(blockLength);\n      xorInput.set(fn === encipher ? text : ct.subarray(pos, -tagLength), 0);\n      xorInput[text.length] = 0b10000000;\n      xorMut(checksum, xorInput);\n      pos += text.length;\n    }\n    // Tag = ENCIPHER(K, Checksum_* xor Offset_* xor L_$) xor HASH(K,A)\n    const tag = xorMut(encipher(xorMut(xorMut(checksum, offset), mask.$)), hash(adata));\n\n    //\n    // Assemble ciphertext\n    //\n    // C = C_1 || C_2 || ... || C_m || C_* || Tag[1..TAGLEN]\n    ct.set(tag, pos);\n    return ct;\n  }\n\n\n  return {\n    /**\n     * Encrypt plaintext input.\n     * @param {Uint8Array} plaintext - The cleartext input to be encrypted\n     * @param {Uint8Array} nonce - The nonce (15 bytes)\n     * @param {Uint8Array} adata - Associated data to sign\n     * @returns {Promise<Uint8Array>} The ciphertext output.\n     */\n    encrypt: async function(plaintext, nonce, adata) {\n      return crypt(encipher, plaintext, nonce, adata);\n    },\n\n    /**\n     * Decrypt ciphertext input.\n     * @param {Uint8Array} ciphertext - The ciphertext input to be decrypted\n     * @param {Uint8Array} nonce - The nonce (15 bytes)\n     * @param {Uint8Array} adata - Associated data to sign\n     * @returns {Promise<Uint8Array>} The ciphertext output.\n     */\n    decrypt: async function(ciphertext, nonce, adata) {\n      if (ciphertext.length < tagLength) throw new Error('Invalid OCB ciphertext');\n\n      const tag = ciphertext.subarray(-tagLength);\n      ciphertext = ciphertext.subarray(0, -tagLength);\n\n      const crypted = crypt(decipher, ciphertext, nonce, adata);\n      // if (Tag[1..TAGLEN] == T)\n      if (util.equalsUint8Array(tag, crypted.subarray(-tagLength))) {\n        return crypted.subarray(0, -tagLength);\n      }\n      throw new Error('Authentication tag mismatch');\n    }\n  };\n}\n\n\n/**\n * Get OCB nonce as defined by {@link https://tools.ietf.org/html/draft-ietf-openpgp-rfc4880bis-04#section-5.16.2|RFC4880bis-04, section 5.16.2}.\n * @param {Uint8Array} iv - The initialization vector (15 bytes)\n * @param {Uint8Array} chunkIndex - The chunk index (8 bytes)\n */\nOCB.getNonce = function(iv, chunkIndex) {\n  const nonce = iv.slice();\n  for (let i = 0; i < chunkIndex.length; i++) {\n    nonce[7 + i] ^= chunkIndex[i];\n  }\n  return nonce;\n};\n\nOCB.blockLength = blockLength;\nOCB.ivLength = ivLength;\nOCB.tagLength = tagLength;\n\nexport default OCB;\n","// OpenPGP.js - An OpenPGP implementation in javascript\n// Copyright (C) 2016 Tankred Hase\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n/**\n * @fileoverview This module wraps native AES-GCM en/decryption for both\n * the WebCrypto api as well as node.js' crypto api.\n * @module crypto/mode/gcm\n */\n\nimport { gcm as nobleAesGcm } from '@noble/ciphers/aes';\nimport util from '../../util';\nimport enums from '../../enums';\n\nconst webCrypto = util.getWebCrypto();\nconst nodeCrypto = util.getNodeCrypto();\nconst Buffer = util.getNodeBuffer();\n\nconst blockLength = 16;\nconst ivLength = 12; // size of the IV in bytes\nconst tagLength = 16; // size of the tag in bytes\nconst ALGO = 'AES-GCM';\n\n/**\n * Class to en/decrypt using GCM mode.\n * @param {enums.symmetric} cipher - The symmetric cipher algorithm to use\n * @param {Uint8Array} key - The encryption key\n */\nasync function GCM(cipher, key) {\n  if (cipher !== enums.symmetric.aes128 &&\n    cipher !== enums.symmetric.aes192 &&\n    cipher !== enums.symmetric.aes256) {\n    throw new Error('GCM mode supports only AES cipher');\n  }\n\n  if (util.getNodeCrypto()) { // Node crypto library\n    return {\n      encrypt: async function(pt, iv, adata = new Uint8Array()) {\n        const en = new nodeCrypto.createCipheriv('aes-' + (key.length * 8) + '-gcm', key, iv);\n        en.setAAD(adata);\n        const ct = Buffer.concat([en.update(pt), en.final(), en.getAuthTag()]); // append auth tag to ciphertext\n        return new Uint8Array(ct);\n      },\n\n      decrypt: async function(ct, iv, adata = new Uint8Array()) {\n        const de = new nodeCrypto.createDecipheriv('aes-' + (key.length * 8) + '-gcm', key, iv);\n        de.setAAD(adata);\n        de.setAuthTag(ct.slice(ct.length - tagLength, ct.length)); // read auth tag at end of ciphertext\n        const pt = Buffer.concat([de.update(ct.slice(0, ct.length - tagLength)), de.final()]);\n        return new Uint8Array(pt);\n      }\n    };\n  }\n\n  if (util.getWebCrypto()) {\n    try {\n      const _key = await webCrypto.importKey('raw', key, { name: ALGO }, false, ['encrypt', 'decrypt']);\n      // Safari 13 and Safari iOS 14 does not support GCM-en/decrypting empty messages\n      const webcryptoEmptyMessagesUnsupported = navigator.userAgent.match(/Version\\/13\\.\\d(\\.\\d)* Safari/) ||\n        navigator.userAgent.match(/Version\\/(13|14)\\.\\d(\\.\\d)* Mobile\\/\\S* Safari/);\n      return {\n        encrypt: async function(pt, iv, adata = new Uint8Array()) {\n          if (webcryptoEmptyMessagesUnsupported && !pt.length) {\n            return nobleAesGcm(key, iv, adata).encrypt(pt);\n          }\n          const ct = await webCrypto.encrypt({ name: ALGO, iv, additionalData: adata, tagLength: tagLength * 8 }, _key, pt);\n          return new Uint8Array(ct);\n        },\n\n        decrypt: async function(ct, iv, adata = new Uint8Array()) {\n          if (webcryptoEmptyMessagesUnsupported && ct.length === tagLength) {\n            return nobleAesGcm(key, iv, adata).decrypt(ct);\n          }\n          try {\n            const pt = await webCrypto.decrypt({ name: ALGO, iv, additionalData: adata, tagLength: tagLength * 8 }, _key, ct);\n            return new Uint8Array(pt);\n          } catch (e) {\n            if (e.name === 'OperationError') {\n              throw new Error('Authentication tag mismatch');\n            }\n          }\n        }\n      };\n    } catch (err) {\n      // no 192 bit support in Chromium, which throws `OperationError`, see: https://www.chromium.org/blink/webcrypto#TOC-AES-support\n      if (err.name !== 'NotSupportedError' &&\n        !(key.length === 24 && err.name === 'OperationError')) {\n        throw err;\n      }\n      util.printDebugError('Browser did not support operation: ' + err.message);\n    }\n  }\n\n  return {\n    encrypt: async function(pt, iv, adata) {\n      return nobleAesGcm(key, iv, adata).encrypt(pt);\n    },\n\n    decrypt: async function(ct, iv, adata) {\n      return nobleAesGcm(key, iv, adata).decrypt(ct);\n    }\n  };\n}\n\n\n/**\n * Get GCM nonce. Note: this operation is not defined by the standard.\n * A future version of the standard may define GCM mode differently,\n * hopefully under a different ID (we use Private/Experimental algorithm\n * ID 100) so that we can maintain backwards compatibility.\n * @param {Uint8Array} iv - The initialization vector (12 bytes)\n * @param {Uint8Array} chunkIndex - The chunk index (8 bytes)\n */\nGCM.getNonce = function(iv, chunkIndex) {\n  const nonce = iv.slice();\n  for (let i = 0; i < chunkIndex.length; i++) {\n    nonce[4 + i] ^= chunkIndex[i];\n  }\n  return nonce;\n};\n\nGCM.blockLength = blockLength;\nGCM.ivLength = ivLength;\nGCM.tagLength = tagLength;\n\nexport default GCM;\n","/**\n * @fileoverview Cipher modes\n * @module crypto/cipherMode\n */\n\nexport * as cfb from './cfb';\nimport eax from './eax';\nimport ocb from './ocb';\nimport gcm from './gcm';\nimport enums from '../../enums';\n\n/**\n* Get implementation of the given AEAD mode\n* @param {enums.aead} algo\n* @param {Boolean} [acceptExperimentalGCM] - whether to allow the non-standard, legacy `experimentalGCM` algo\n* @returns {Object}\n* @throws {Error} on invalid algo\n*/\nexport function getAEADMode(algo, acceptExperimentalGCM = false) {\n  switch (algo) {\n    case enums.aead.eax:\n      return eax;\n    case enums.aead.ocb:\n      return ocb;\n    case enums.aead.gcm:\n      return gcm;\n    case enums.aead.experimentalGCM:\n      if (!acceptExperimentalGCM) {\n        throw new Error('Unexpected non-standard `experimentalGCM` AEAD algorithm provided in `config.preferredAEADAlgorithm`: use `gcm` instead');\n      }\n      return gcm;\n    default:\n      throw new Error('Unsupported AEAD mode');\n  }\n}\n","/**\n * @fileoverview Provides functions for asymmetric signing and signature verification\n * @module crypto/signature\n */\n\nimport { elliptic, rsa, dsa } from './public_key';\nimport enums from '../enums';\nimport util from '../util';\nimport { UnsupportedError } from '../packet/packet';\n\n/**\n * Parse signature in binary form to get the parameters.\n * The returned values are only padded for EdDSA, since in the other cases their expected length\n * depends on the key params, hence we delegate the padding to the signature verification function.\n * See {@link https://tools.ietf.org/html/rfc4880#section-9.1|RFC 4880 9.1}\n * See {@link https://tools.ietf.org/html/rfc4880#section-5.2.2|RFC 4880 5.2.2.}\n * @param {module:enums.publicKey} algo - Public key algorithm\n * @param {Uint8Array} signature - Data for which the signature was created\n * @returns {Promise<Object>} True if signature is valid.\n * @async\n */\nexport function parseSignatureParams(algo, signature) {\n  let read = 0;\n  switch (algo) {\n    // Algorithm-Specific Fields for RSA signatures:\n    // -  MPI of RSA signature value m**d mod n.\n    case enums.publicKey.rsaEncryptSign:\n    case enums.publicKey.rsaEncrypt:\n    case enums.publicKey.rsaSign: {\n      const s = util.readMPI(signature.subarray(read)); read += s.length + 2;\n      // The signature needs to be the same length as the public key modulo n.\n      // We pad s on signature verification, where we have access to n.\n      return { read, signatureParams: { s } };\n    }\n    // Algorithm-Specific Fields for DSA or ECDSA signatures:\n    // -  MPI of DSA or ECDSA value r.\n    // -  MPI of DSA or ECDSA value s.\n    case enums.publicKey.dsa:\n    case enums.publicKey.ecdsa:\n    {\n      // If the signature payload sizes are unexpected, we will throw on verification,\n      // where we also have access to the OID curve from the key.\n      const r = util.readMPI(signature.subarray(read)); read += r.length + 2;\n      const s = util.readMPI(signature.subarray(read)); read += s.length + 2;\n      return { read, signatureParams: { r, s } };\n    }\n    // Algorithm-Specific Fields for legacy EdDSA signatures:\n    // -  MPI of an EC point r.\n    // -  EdDSA value s, in MPI, in the little endian representation\n    case enums.publicKey.eddsaLegacy: {\n      // Only Curve25519Legacy is supported (no Curve448Legacy), but the relevant checks are done on key parsing and signature\n      // verification: if the signature payload sizes are unexpected, we will throw on verification,\n      // where we also have access to the OID curve from the key.\n      const r = util.readMPI(signature.subarray(read)); read += r.length + 2;\n      const s = util.readMPI(signature.subarray(read)); read += s.length + 2;\n      return { read, signatureParams: { r, s } };\n    }\n    // Algorithm-Specific Fields for Ed25519 signatures:\n    // - 64 octets of the native signature\n    // Algorithm-Specific Fields for Ed448 signatures:\n    // - 114 octets of the native signature\n    case enums.publicKey.ed25519:\n    case enums.publicKey.ed448: {\n      const rsSize = 2 * elliptic.eddsa.getPayloadSize(algo);\n      const RS = util.readExactSubarray(signature, read, read + rsSize); read += RS.length;\n      return { read, signatureParams: { RS } };\n    }\n\n    default:\n      throw new UnsupportedError('Unknown signature algorithm.');\n  }\n}\n\n/**\n * Verifies the signature provided for data using specified algorithms and public key parameters.\n * See {@link https://tools.ietf.org/html/rfc4880#section-9.1|RFC 4880 9.1}\n * and {@link https://tools.ietf.org/html/rfc4880#section-9.4|RFC 4880 9.4}\n * for public key and hash algorithms.\n * @param {module:enums.publicKey} algo - Public key algorithm\n * @param {module:enums.hash} hashAlgo - Hash algorithm\n * @param {Object} signature - Named algorithm-specific signature parameters\n * @param {Object} publicParams - Algorithm-specific public key parameters\n * @param {Uint8Array} data - Data for which the signature was created\n * @param {Uint8Array} hashed - The hashed data\n * @returns {Promise<Boolean>} True if signature is valid.\n * @async\n */\nexport async function verify(algo, hashAlgo, signature, publicParams, data, hashed) {\n  switch (algo) {\n    case enums.publicKey.rsaEncryptSign:\n    case enums.publicKey.rsaEncrypt:\n    case enums.publicKey.rsaSign: {\n      const { n, e } = publicParams;\n      const s = util.leftPad(signature.s, n.length); // padding needed for webcrypto and node crypto\n      return rsa.verify(hashAlgo, data, s, n, e, hashed);\n    }\n    case enums.publicKey.dsa: {\n      const { g, p, q, y } = publicParams;\n      const { r, s } = signature; // no need to pad, since we always handle them as BigIntegers\n      return dsa.verify(hashAlgo, r, s, hashed, g, p, q, y);\n    }\n    case enums.publicKey.ecdsa: {\n      const { oid, Q } = publicParams;\n      const curveSize = new elliptic.CurveWithOID(oid).payloadSize;\n      // padding needed for webcrypto\n      const r = util.leftPad(signature.r, curveSize);\n      const s = util.leftPad(signature.s, curveSize);\n      return elliptic.ecdsa.verify(oid, hashAlgo, { r, s }, data, Q, hashed);\n    }\n    case enums.publicKey.eddsaLegacy: {\n      const { oid, Q } = publicParams;\n      const curveSize = new elliptic.CurveWithOID(oid).payloadSize;\n      // When dealing little-endian MPI data, we always need to left-pad it, as done with big-endian values:\n      // https://www.ietf.org/archive/id/draft-ietf-openpgp-rfc4880bis-10.html#section-3.2-9\n      const r = util.leftPad(signature.r, curveSize);\n      const s = util.leftPad(signature.s, curveSize);\n      return elliptic.eddsaLegacy.verify(oid, hashAlgo, { r, s }, data, Q, hashed);\n    }\n    case enums.publicKey.ed25519:\n    case enums.publicKey.ed448: {\n      const { A } = publicParams;\n      return elliptic.eddsa.verify(algo, hashAlgo, signature, data, A, hashed);\n    }\n    default:\n      throw new Error('Unknown signature algorithm.');\n  }\n}\n\n/**\n * Creates a signature on data using specified algorithms and private key parameters.\n * See {@link https://tools.ietf.org/html/rfc4880#section-9.1|RFC 4880 9.1}\n * and {@link https://tools.ietf.org/html/rfc4880#section-9.4|RFC 4880 9.4}\n * for public key and hash algorithms.\n * @param {module:enums.publicKey} algo - Public key algorithm\n * @param {module:enums.hash} hashAlgo - Hash algorithm\n * @param {Object} publicKeyParams - Algorithm-specific public and private key parameters\n * @param {Object} privateKeyParams - Algorithm-specific public and private key parameters\n * @param {Uint8Array} data - Data to be signed\n * @param {Uint8Array} hashed - The hashed data\n * @returns {Promise<Object>} Signature                      Object containing named signature parameters.\n * @async\n */\nexport async function sign(algo, hashAlgo, publicKeyParams, privateKeyParams, data, hashed) {\n  if (!publicKeyParams || !privateKeyParams) {\n    throw new Error('Missing key parameters');\n  }\n  switch (algo) {\n    case enums.publicKey.rsaEncryptSign:\n    case enums.publicKey.rsaEncrypt:\n    case enums.publicKey.rsaSign: {\n      const { n, e } = publicKeyParams;\n      const { d, p, q, u } = privateKeyParams;\n      const s = await rsa.sign(hashAlgo, data, n, e, d, p, q, u, hashed);\n      return { s };\n    }\n    case enums.publicKey.dsa: {\n      const { g, p, q } = publicKeyParams;\n      const { x } = privateKeyParams;\n      return dsa.sign(hashAlgo, hashed, g, p, q, x);\n    }\n    case enums.publicKey.elgamal:\n      throw new Error('Signing with Elgamal is not defined in the OpenPGP standard.');\n    case enums.publicKey.ecdsa: {\n      const { oid, Q } = publicKeyParams;\n      const { d } = privateKeyParams;\n      return elliptic.ecdsa.sign(oid, hashAlgo, data, Q, d, hashed);\n    }\n    case enums.publicKey.eddsaLegacy: {\n      const { oid, Q } = publicKeyParams;\n      const { seed } = privateKeyParams;\n      return elliptic.eddsaLegacy.sign(oid, hashAlgo, data, Q, seed, hashed);\n    }\n    case enums.publicKey.ed25519:\n    case enums.publicKey.ed448: {\n      const { A } = publicKeyParams;\n      const { seed } = privateKeyParams;\n      return elliptic.eddsa.sign(algo, hashAlgo, data, A, seed, hashed);\n    }\n    default:\n      throw new Error('Unknown signature algorithm.');\n  }\n}\n","import defaultConfig from '../../config';\nimport enums from '../../enums';\nimport util from '../../util';\nimport { getRandomBytes } from '../../crypto';\n\nconst ARGON2_TYPE = 0x02; // id\nconst ARGON2_VERSION = 0x13;\nconst ARGON2_SALT_SIZE = 16;\n\nexport class Argon2OutOfMemoryError extends Error {\n  constructor(...params) {\n    super(...params);\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, Argon2OutOfMemoryError);\n    }\n\n    this.name = 'Argon2OutOfMemoryError';\n  }\n}\n\n// cache argon wasm module\nlet loadArgonWasmModule;\nlet argon2Promise;\n// reload wasm module above this treshold, to deallocated used memory\nconst ARGON2_WASM_MEMORY_THRESHOLD_RELOAD = 2 << 19;\n\nclass Argon2S2K {\n  /**\n  * @param {Object} [config] - Full configuration, defaults to openpgp.config\n  */\n  constructor(config = defaultConfig) {\n    const { passes, parallelism, memoryExponent } = config.s2kArgon2Params;\n\n    this.type = 'argon2';\n    /**\n     * 16 bytes of salt\n     * @type {Uint8Array}\n     */\n    this.salt = null;\n    /**\n     * number of passes\n     * @type {Integer}\n     */\n    this.t = passes;\n    /**\n     * degree of parallelism (lanes)\n     * @type {Integer}\n     */\n    this.p = parallelism;\n    /**\n     * exponent indicating memory size\n     * @type {Integer}\n     */\n    this.encodedM = memoryExponent;\n  }\n\n  generateSalt() {\n    this.salt = getRandomBytes(ARGON2_SALT_SIZE);\n  }\n\n  /**\n  * Parsing function for argon2 string-to-key specifier.\n  * @param {Uint8Array} bytes - Payload of argon2 string-to-key specifier\n  * @returns {Integer} Actual length of the object.\n  */\n  read(bytes) {\n    let i = 0;\n\n    this.salt = bytes.subarray(i, i + 16);\n    i += 16;\n\n    this.t = bytes[i++];\n    this.p = bytes[i++];\n    this.encodedM = bytes[i++]; // memory size exponent, one-octect\n\n    return i;\n  }\n\n  /**\n  * Serializes s2k information\n  * @returns {Uint8Array} Binary representation of s2k.\n  */\n  write() {\n    const arr = [\n      new Uint8Array([enums.write(enums.s2k, this.type)]),\n      this.salt,\n      new Uint8Array([this.t, this.p, this.encodedM])\n    ];\n\n    return util.concatUint8Array(arr);\n  }\n\n  /**\n  * Produces a key using the specified passphrase and the defined\n  * hashAlgorithm\n  * @param {String} passphrase - Passphrase containing user input\n  * @returns {Promise<Uint8Array>} Produced key with a length corresponding to `keySize`\n  * @throws {Argon2OutOfMemoryError|Errors}\n  * @async\n  */\n  async produceKey(passphrase, keySize) {\n    const decodedM = 2 << (this.encodedM - 1);\n\n    try {\n      // on first load, the argon2 lib is imported and the WASM module is initialized.\n      // the two steps need to be atomic to avoid race conditions causing multiple wasm modules\n      // being loaded when `argon2Promise` is not initialized.\n      loadArgonWasmModule = loadArgonWasmModule || (await import('argon2id')).default;\n      argon2Promise = argon2Promise || loadArgonWasmModule();\n\n      // important to keep local ref to argon2 in case the module is reloaded by another instance\n      const argon2 = await argon2Promise;\n\n      const passwordBytes = util.encodeUTF8(passphrase);\n      const hash = argon2({\n        version: ARGON2_VERSION,\n        type: ARGON2_TYPE,\n        password: passwordBytes,\n        salt: this.salt,\n        tagLength: keySize,\n        memorySize: decodedM,\n        parallelism: this.p,\n        passes: this.t\n      });\n\n      // a lot of memory was used, reload to deallocate\n      if (decodedM > ARGON2_WASM_MEMORY_THRESHOLD_RELOAD) {\n        // it will be awaited if needed at the next `produceKey` invocation\n        argon2Promise = loadArgonWasmModule();\n        argon2Promise.catch(() => {});\n      }\n      return hash;\n    } catch (e) {\n      if (e.message && (\n        e.message.includes('Unable to grow instance memory') || // Chrome\n        e.message.includes('failed to grow memory') || // Firefox\n        e.message.includes('WebAssembly.Memory.grow') || // Safari\n        e.message.includes('Out of memory') // Safari iOS\n      )) {\n        throw new Argon2OutOfMemoryError('Could not allocate required memory for Argon2');\n      } else {\n        throw e;\n      }\n    }\n  }\n}\n\nexport default Argon2S2K;\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n/**\n * Implementation of the String-to-key specifier\n *\n * {@link https://tools.ietf.org/html/rfc4880#section-3.7|RFC4880 3.7}:\n * String-to-key (S2K) specifiers are used to convert passphrase strings\n * into symmetric-key encryption/decryption keys.  They are used in two\n * places, currently: to encrypt the secret part of private keys in the\n * private keyring, and to convert passphrases to encryption keys for\n * symmetrically encrypted messages.\n * @module type/s2k\n */\n\nimport defaultConfig from '../../config';\nimport { getRandomBytes, computeDigest } from '../../crypto';\nimport enums from '../../enums';\nimport { UnsupportedError } from '../../packet/packet';\nimport util from '../../util';\n\nclass GenericS2K {\n  /**\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   */\n  constructor(s2kType, config = defaultConfig) {\n    /**\n     * Hash function identifier, or 0 for gnu-dummy keys\n     * @type {module:enums.hash | 0}\n     */\n    this.algorithm = enums.hash.sha256;\n    /**\n     * enums.s2k identifier or 'gnu-dummy'\n     * @type {String}\n     */\n    this.type = enums.read(enums.s2k, s2kType);\n    /** @type {Integer} */\n    this.c = config.s2kIterationCountByte;\n    /** Eight bytes of salt in a binary string.\n     * @type {Uint8Array}\n     */\n    this.salt = null;\n  }\n\n  generateSalt() {\n    switch (this.type) {\n      case 'salted':\n      case 'iterated':\n        this.salt = getRandomBytes(8);\n    }\n  }\n\n  getCount() {\n    // Exponent bias, defined in RFC4880\n    const expbias = 6;\n\n    return (16 + (this.c & 15)) << ((this.c >> 4) + expbias);\n  }\n\n  /**\n   * Parsing function for a string-to-key specifier ({@link https://tools.ietf.org/html/rfc4880#section-3.7|RFC 4880 3.7}).\n   * @param {Uint8Array} bytes - Payload of string-to-key specifier\n   * @returns {Integer} Actual length of the object.\n   */\n  read(bytes) {\n    let i = 0;\n    this.algorithm = bytes[i++];\n\n    switch (this.type) {\n      case 'simple':\n        break;\n\n      case 'salted':\n        this.salt = bytes.subarray(i, i + 8);\n        i += 8;\n        break;\n\n      case 'iterated':\n        this.salt = bytes.subarray(i, i + 8);\n        i += 8;\n\n        // Octet 10: count, a one-octet, coded value\n        this.c = bytes[i++];\n        break;\n\n      case 'gnu':\n        if (util.uint8ArrayToString(bytes.subarray(i, i + 3)) === 'GNU') {\n          i += 3; // GNU\n          const gnuExtType = 1000 + bytes[i++];\n          if (gnuExtType === 1001) {\n            this.type = 'gnu-dummy';\n            // GnuPG extension mode 1001 -- don't write secret key at all\n          } else {\n            throw new UnsupportedError('Unknown s2k gnu protection mode.');\n          }\n        } else {\n          throw new UnsupportedError('Unknown s2k type.');\n        }\n        break;\n\n      default:\n        throw new UnsupportedError('Unknown s2k type.'); // unreachable\n    }\n\n    return i;\n  }\n\n  /**\n   * Serializes s2k information\n   * @returns {Uint8Array} Binary representation of s2k.\n   */\n  write() {\n    if (this.type === 'gnu-dummy') {\n      return new Uint8Array([101, 0, ...util.stringToUint8Array('GNU'), 1]);\n    }\n    const arr = [new Uint8Array([enums.write(enums.s2k, this.type), this.algorithm])];\n\n    switch (this.type) {\n      case 'simple':\n        break;\n      case 'salted':\n        arr.push(this.salt);\n        break;\n      case 'iterated':\n        arr.push(this.salt);\n        arr.push(new Uint8Array([this.c]));\n        break;\n      case 'gnu':\n        throw new Error('GNU s2k type not supported.');\n      default:\n        throw new Error('Unknown s2k type.');\n    }\n\n    return util.concatUint8Array(arr);\n  }\n\n  /**\n   * Produces a key using the specified passphrase and the defined\n   * hashAlgorithm\n   * @param {String} passphrase - Passphrase containing user input\n   * @returns {Promise<Uint8Array>} Produced key with a length corresponding to.\n   * hashAlgorithm hash length\n   * @async\n   */\n  async produceKey(passphrase, numBytes) {\n    passphrase = util.encodeUTF8(passphrase);\n\n    const arr = [];\n    let rlength = 0;\n\n    let prefixlen = 0;\n    while (rlength < numBytes) {\n      let toHash;\n      switch (this.type) {\n        case 'simple':\n          toHash = util.concatUint8Array([new Uint8Array(prefixlen), passphrase]);\n          break;\n        case 'salted':\n          toHash = util.concatUint8Array([new Uint8Array(prefixlen), this.salt, passphrase]);\n          break;\n        case 'iterated': {\n          const data = util.concatUint8Array([this.salt, passphrase]);\n          let datalen = data.length;\n          const count = Math.max(this.getCount(), datalen);\n          toHash = new Uint8Array(prefixlen + count);\n          toHash.set(data, prefixlen);\n          for (let pos = prefixlen + datalen; pos < count; pos += datalen, datalen *= 2) {\n            toHash.copyWithin(pos, prefixlen, pos);\n          }\n          break;\n        }\n        case 'gnu':\n          throw new Error('GNU s2k type not supported.');\n        default:\n          throw new Error('Unknown s2k type.');\n      }\n      const result = await computeDigest(this.algorithm, toHash);\n      arr.push(result);\n      rlength += result.length;\n      prefixlen++;\n    }\n\n    return util.concatUint8Array(arr).subarray(0, numBytes);\n  }\n}\n\nexport default GenericS2K;\n","import defaultConfig from '../../config';\nimport Argon2S2K, { Argon2OutOfMemoryError } from './argon2';\nimport GenericS2K from './generic';\nimport enums from '../../enums';\nimport { UnsupportedError } from '../../packet/packet';\n\nconst allowedS2KTypesForEncryption = new Set([enums.s2k.argon2, enums.s2k.iterated]);\n\n/**\n * Instantiate a new S2K instance of the given type\n * @param {module:enums.s2k} type\n * @oaram {Object} [config]\n * @returns {Object} New s2k object\n * @throws {Error} for unknown or unsupported types\n */\nexport function newS2KFromType(type, config = defaultConfig) {\n  switch (type) {\n    case enums.s2k.argon2:\n      return new Argon2S2K(config);\n    case enums.s2k.iterated:\n    case enums.s2k.gnu:\n    case enums.s2k.salted:\n    case enums.s2k.simple:\n      return new GenericS2K(type, config);\n    default:\n      throw new UnsupportedError('Unsupported S2K type');\n  }\n}\n\n/**\n * Instantiate a new S2K instance based on the config settings\n * @oaram {Object} config\n * @returns {Object} New s2k object\n * @throws {Error} for unknown or unsupported types\n */\nexport function newS2KFromConfig(config) {\n  const { s2kType } = config;\n\n  if (!allowedS2KTypesForEncryption.has(s2kType)) {\n    throw new Error('The provided `config.s2kType` value is not allowed');\n  }\n\n  return newS2KFromType(s2kType, config);\n}\n\nexport { Argon2OutOfMemoryError };\n","import { createRequire } from 'module';\nvar require = createRequire('/');\n// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\n// Mediocre shim\nvar Worker;\nvar workerAdd = \";var __w=require('worker_threads');__w.parentPort.on('message',function(m){onmessage({data:m})}),postMessage=function(m,t){__w.parentPort.postMessage(m,t)},close=process.exit;self=global\";\ntry {\n    Worker = require('worker_threads').Worker;\n}\ncatch (e) {\n}\nvar wk = Worker ? function (c, _, msg, transfer, cb) {\n    var done = false;\n    var w = new Worker(c + workerAdd, { eval: true })\n        .on('error', function (e) { return cb(e, null); })\n        .on('message', function (m) { return cb(null, m); })\n        .on('exit', function (c) {\n        if (c && !done)\n            cb(new Error('exited with code ' + c), null);\n    });\n    w.postMessage(msg, transfer);\n    w.terminate = function () {\n        done = true;\n        return Worker.prototype.terminate.call(w);\n    };\n    return w;\n} : function (_, __, ___, ____, cb) {\n    setImmediate(function () { return cb(new Error('async operations unsupported - update to Node 12+ (or Node 10-11 with the --experimental-worker CLI flag)'), null); });\n    var NOP = function () { };\n    return {\n        terminate: NOP,\n        postMessage: NOP\n    };\n};\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new i32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return { b: b, r: r };\n};\nvar _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b.b, revfd = _b.r;\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >> 8) | ((x & 0x00FF) << 8)) >> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 1; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    return new u8(v.subarray(s, e));\n};\n/**\n * Codes for errors generated within this library\n */\nexport var FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(e, err);\n    if (!nt)\n        throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, st, buf, dict) {\n    // source length       dict length\n    var sl = dat.length, dl = dict ? dict.length : 0;\n    if (!sl || st.f && !st.l)\n        return buf || new u8(0);\n    var noBuf = !buf;\n    // have to estimate size\n    var resize = noBuf || st.i != 2;\n    // no state\n    var noSt = st.i;\n    // Assumes roughly 33% compression ratio average\n    if (noBuf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                // ensure size\n                if (resize)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                err(1);\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17\n        if (resize)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n            if (!c)\n                err(2);\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;\n                if (!d)\n                    err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & (1 << b) - 1, pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                if (resize)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                if (bt < dt) {\n                    var shift = dl - dt, dend = Math.min(dt, end);\n                    if (shift + bt < 0)\n                        err(3);\n                    for (; bt < dend; ++bt)\n                        buf[bt] = dict[shift + bt];\n                }\n                for (; bt < end; ++bt)\n                    buf[bt] = buf[bt - dt];\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    // don't reallocate for streams or user buffers\n    return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n    d[o + 2] |= v >> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return { t: et, l: 0 };\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return { t: v, l: 1 };\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return { t: new u8(tr), l: mbt };\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return { c: cl.subarray(0, cli), n: s };\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a.t, mlb = _a.l;\n    var _b = hTree(df, 15), ddt = _b.t, mdb = _b.l;\n    var _c = lc(dlt), lclt = _c.c, nlc = _c.n;\n    var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        ++lcfreq[lclt[i] & 31];\n    for (var i = 0; i < lcdt.length; ++i)\n        ++lcfreq[lcdt[i] & 31];\n    var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];\n    if (bs >= 0 && flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >> 5) & 127), p += clct[i] >> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        var sym = syms[i];\n        if (sym > 255) {\n            var len = (sym >> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (sym >> 23) & 31), p += fleb[len];\n            var dst = sym & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (sym >> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[sym]), p += ll[sym];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new i32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, st) {\n    var s = st.z || dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var lst = st.l;\n    var pos = (st.r || 0) & 7;\n    if (lvl) {\n        if (pos)\n            w[0] = st.r >> 3;\n        var opt = deo[lvl - 1];\n        var n = opt >> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = st.p || new u16(32768), head = st.h || new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new i32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index          l/lind  waitdx          blkpos\n        var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;\n        for (; i + 2 < s; ++i) {\n            // hash value\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && (rem > 423 || !lst)) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = i - dif + j & 32767;\n                                    var pti = prev[ti];\n                                    var cd = ti - pti & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += imod - pimod & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one int32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        for (i = Math.max(i, wi); i < s; ++i) {\n            syms[li++] = dat[i];\n            ++lf[dat[i]];\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        if (!lst) {\n            st.r = (pos & 7) | w[(pos / 8) | 0] << 3;\n            // shft(pos) now 1 less if pos & 7 != 0\n            pos -= 7;\n            st.h = head, st.p = prev, st.i = i, st.w = wi;\n        }\n    }\n    else {\n        for (var i = st.w || 0; i < s + lst; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[(pos / 8) | 0] = lst;\n                e = s;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n        st.i = s;\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Adler32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a & 0xFF00) << 8 | (b & 255) << 8 | (b >> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    if (!st) {\n        st = { l: 1 };\n        if (opt.dictionary) {\n            var dict = opt.dictionary.subarray(-32768);\n            var newDat = new u8(dict.length + dat.length);\n            newDat.set(dict);\n            newDat.set(dat, dict.length);\n            dat = newDat;\n            st.w = dict.length;\n        }\n    }\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? (st.l ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 20) : (12 + opt.mem), pre, post, st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return fnStr;\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            fnStr = wcln(fns[i], fnStr, td_1);\n        ch[id] = { c: wcln(fns[m], fnStr, td_1), e: td_1 };\n    }\n    var td = mrg({}, ch[id].e);\n    return wk(ch[id].c + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gopt]; };\nvar bDflt = function () { return [u8, u16, i32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zls]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get opts\nvar gopt = function (o) { return o && {\n    out: o.size && new u8(o.size),\n    dictionary: o.dictionary\n}; };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) {\n        if (ev.data.length) {\n            strm.push(ev.data[0], ev.data[1]);\n            postMessage([ev.data[0].length]);\n        }\n        else\n            strm.flush();\n    };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id, flush, ext) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else if (!Array.isArray(dat))\n            ext(dat);\n        else if (dat.length == 1) {\n            strm.queuedSize -= dat[0];\n            if (strm.ondrain)\n                strm.ondrain(dat[0]);\n        }\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.queuedSize = 0;\n    strm.push = function (d, f) {\n        if (!strm.ondata)\n            err(5);\n        if (t)\n            strm.ondata(err(4, 0, 1), null, !!f);\n        strm.queuedSize += d.length;\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n    if (flush) {\n        strm.flush = function () { w.postMessage([]); };\n    }\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += (d[10] | d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + (o.filename ? o.filename.length + 1 : 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (o.dictionary && 32);\n    c[1] |= 31 - ((c[0] << 8) | c[1]) % 31;\n    if (o.dictionary) {\n        var h = adler();\n        h.p(o.dictionary);\n        wbytes(c, 2, h.d());\n    }\n};\n// zlib start\nvar zls = function (d, dict) {\n    if ((d[0] & 15) != 8 || (d[0] >> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        err(6, 'invalid zlib data');\n    if ((d[1] >> 5 & 1) == +!dict)\n        err(6, 'invalid zlib data: ' + (d[1] & 32 ? 'need' : 'unexpected') + ' dictionary');\n    return (d[1] >> 3 & 4) + 2;\n};\nfunction StrmOpt(opts, cb) {\n    if (typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n        this.s = { l: 0, i: 32768, w: 32768, z: 32768 };\n        // Buffer length must always be 0 mod 32768 for index calculations to be correct when modifying head and prev\n        // 98304 = 32768 (lookback) + 65536 (common chunk size)\n        this.b = new u8(98304);\n        if (this.o.dictionary) {\n            var dict = this.o.dictionary.subarray(-32768);\n            this.b.set(dict, 32768 - dict.length);\n            this.s.i = 32768 - dict.length;\n        }\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, this.s), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        var endLen = chunk.length + this.s.z;\n        if (endLen > this.b.length) {\n            if (endLen > 2 * this.b.length - 32768) {\n                var newBuf = new u8(endLen & -32768);\n                newBuf.set(this.b.subarray(0, this.s.z));\n                this.b = newBuf;\n            }\n            var split = this.b.length - this.s.z;\n            this.b.set(chunk.subarray(0, split), this.s.z);\n            this.s.z = this.b.length;\n            this.p(this.b, false);\n            this.b.set(this.b.subarray(-32768));\n            this.b.set(chunk.subarray(split), 32768);\n            this.s.z = chunk.length - split + 32768;\n            this.s.i = 32766, this.s.w = 32768;\n        }\n        else {\n            this.b.set(chunk, this.s.z);\n            this.s.z += chunk.length;\n        }\n        this.s.l = final & 1;\n        if (this.s.z > this.s.w + 8191 || final) {\n            this.p(this.b, final || false);\n            this.s.w = this.s.i, this.s.i -= 2;\n        }\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * deflated output for small inputs.\n     */\n    Deflate.prototype.flush = function () {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        this.p(this.b, false);\n        this.s.w = this.s.i, this.s.i -= 2;\n    };\n    return Deflate;\n}());\nexport { Deflate };\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6, 1);\n    }\n    return AsyncDeflate;\n}());\nexport { AsyncDeflate };\nexport function deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nexport function deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    function Inflate(opts, cb) {\n        // no StrmOpt here to avoid adding to workerizer\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);\n        this.s = { i: 0, b: dict ? dict.length : 0 };\n        this.o = new u8(32768);\n        this.p = new u8(0);\n        if (dict)\n            this.o.set(dict);\n    }\n    Inflate.prototype.e = function (c) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        if (!this.p.length)\n            this.p = c;\n        else if (c.length) {\n            var n = new u8(this.p.length + c.length);\n            n.set(this.p), n.set(c, this.p.length), this.p = n;\n        }\n    };\n    Inflate.prototype.c = function (final) {\n        this.s.i = +(this.d = final || false);\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.s, this.o);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexport { Inflate };\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    function AsyncInflate(opts, cb) {\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Inflate(ev.data);\n            onmessage = astrm(strm);\n        }, 7, 0);\n    }\n    return AsyncInflate;\n}());\nexport { AsyncInflate };\nexport function inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gopt(ev.data[1]))); }, 1, cb);\n}\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function inflateSync(data, opts) {\n    return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        this.l += chunk.length;\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, this.s);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * GZIPped output for small inputs.\n     */\n    Gzip.prototype.flush = function () {\n        Deflate.prototype.flush.call(this);\n    };\n    return Gzip;\n}());\nexport { Gzip };\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8, 1);\n    }\n    return AsyncGzip;\n}());\nexport { AsyncGzip };\nexport function gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nexport function gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\n/**\n * Streaming single or multi-member GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    function Gunzip(opts, cb) {\n        this.v = 1;\n        this.r = 0;\n        Inflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        this.r += chunk.length;\n        if (this.v) {\n            var p = this.p.subarray(this.v - 1);\n            var s = p.length > 3 ? gzs(p) : 4;\n            if (s > p.length) {\n                if (!final)\n                    return;\n            }\n            else if (this.v > 1 && this.onmember) {\n                this.onmember(this.r - p.length);\n            }\n            this.p = p.subarray(s), this.v = 0;\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n        // process concatenated GZIP\n        if (this.s.f && !this.s.l && !final) {\n            this.v = shft(this.s.p) + 9;\n            this.s = { i: 0 };\n            this.o = new u8(0);\n            this.push(new u8(0), final);\n        }\n    };\n    return Gunzip;\n}());\nexport { Gunzip };\n/**\n * Asynchronous streaming single or multi-member GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    function AsyncGunzip(opts, cb) {\n        var _this = this;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gunzip(ev.data);\n            strm.onmember = function (offset) { return postMessage(offset); };\n            onmessage = astrm(strm);\n        }, 9, 0, function (offset) { return _this.onmember && _this.onmember(offset); });\n    }\n    return AsyncGunzip;\n}());\nexport { AsyncGunzip };\nexport function gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0], ev.data[1])); }, 3, cb);\n}\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function gunzipSync(data, opts) {\n    var st = gzs(data);\n    if (st + 8 > data.length)\n        err(6, 'invalid gzip data');\n    return inflt(data.subarray(st, -8), { i: 2 }, opts && opts.out || new u8(gzl(data)), opts && opts.dictionary);\n}\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && (this.o.dictionary ? 6 : 2), f && 4, this.s);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * zlibbed output for small inputs.\n     */\n    Zlib.prototype.flush = function () {\n        Deflate.prototype.flush.call(this);\n    };\n    return Zlib;\n}());\nexport { Zlib };\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10, 1);\n    }\n    return AsyncZlib;\n}());\nexport { AsyncZlib };\nexport function zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nexport function zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, opts.dictionary ? 6 : 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    function Unzlib(opts, cb) {\n        Inflate.call(this, opts, cb);\n        this.v = opts && opts.dictionary ? 2 : 1;\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 6 && !final)\n                return;\n            this.p = this.p.subarray(zls(this.p, this.v - 1)), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexport { Unzlib };\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    function AsyncUnzlib(opts, cb) {\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Unzlib(ev.data);\n            onmessage = astrm(strm);\n        }, 11, 0);\n    }\n    return AsyncUnzlib;\n}());\nexport { AsyncUnzlib };\nexport function unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gopt(ev.data[1]))); }, 5, cb);\n}\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function unzlibSync(data, opts) {\n    return inflt(data.subarray(zls(data, opts && opts.dictionary), -4), { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\n// Default algorithm for compression (used because having a known output size allows faster decompression)\nexport { gzip as compress, AsyncGzip as AsyncCompress };\nexport { gzipSync as compressSync, Gzip as Compress };\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    function Decompress(opts, cb) {\n        this.o = StrmOpt.call(this, opts, cb) || {};\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n    }\n    // init substream\n    // overriden by AsyncDecompress\n    Decompress.prototype.i = function () {\n        var _this = this;\n        this.s.ondata = function (dat, final) {\n            _this.ondata(dat, final);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(this.o)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(this.o)\n                        : new this.Z(this.o);\n                this.i();\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexport { Decompress };\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    function AsyncDecompress(opts, cb) {\n        Decompress.call(this, opts, cb);\n        this.queuedSize = 0;\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n    }\n    AsyncDecompress.prototype.i = function () {\n        var _this = this;\n        this.s.ondata = function (err, dat, final) {\n            _this.ondata(err, dat, final);\n        };\n        this.s.ondrain = function (size) {\n            _this.queuedSize -= size;\n            if (_this.ondrain)\n                _this.ondrain(size);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        this.queuedSize += chunk.length;\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexport { AsyncDecompress };\nexport function decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function decompressSync(data, opts) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, opts)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, opts)\n            : unzlibSync(data, opts);\n}\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val))\n            op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8)\n            t[n] = [val, op];\n        else {\n            t[n += '/'] = [new u8(0), op];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return { s: r, r: slc(d, i - 1) };\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (final) {\n            if (r.length)\n                err(8);\n            this.p = null;\n        }\n        else\n            this.p = r;\n        this.ondata(s, final);\n    };\n    return DecodeUTF8;\n}());\nexport { DecodeUTF8 };\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexport { EncodeUTF8 };\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nexport function strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nexport function strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td) {\n        return td.decode(dat);\n    }\n    else {\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (r.length)\n            err(8);\n        return s;\n    }\n}\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c < 0 && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        err(10);\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >> 1)), b += 4;\n    if (c != -1) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c < 0 ? -c - 2 : c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexport { ZipPassThrough };\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexport { ZipDeflate };\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexport { AsyncZipDeflate };\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this = this;\n        if (!this.ondata)\n            err(5);\n        // finishing or finished\n        if (this.d & 2)\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535)\n                this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u, -1);\n            var chks_1 = [header];\n            var pAll_1 = function () {\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\n                    var chk = chks_2[_i];\n                    _this.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function () {\n                    if (file.terminate)\n                        file.terminate();\n                },\n                r: function () {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this.u[ind_1 + 1];\n                        if (nxt)\n                            nxt.r();\n                        else\n                            _this.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function (err, dat, final) {\n                if (err) {\n                    _this.ondata(err, dat, final);\n                    _this.terminate();\n                }\n                else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1)\n                            uf_1.r();\n                        tr_1 = 1;\n                    }\n                    else if (tr_1)\n                        pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this.d & 1))\n                        return;\n                    _this.u.splice(-1, 1);\n                    _this.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexport { Zip };\nexport function zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl(err(11, 0, 1), null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nexport function zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexport { UnzipPassThrough };\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this = this;\n        this.i = new Inflate(function (dat, final) {\n            _this.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexport { UnzipInflate };\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexport { AsyncUnzipInflate };\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this = this;\n        if (!this.onfile)\n            err(5);\n        if (!this.p)\n            err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    err(5);\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this.o[cmp_1];\n                                    if (!ctr)\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this.k[0] == chks_3 && _this.c)\n                                        _this.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexport { Unzip };\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\nexport function unzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295 || c == 65535;\n        if (z) {\n            var ze = b4(data, e - 12);\n            z = b4(data, ze) == 0x6064B50;\n            if (z) {\n                c = lft = b4(data, ze + 32);\n                o = b4(data, ze + 48);\n            }\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function (i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function (e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                }\n                else {\n                    if (d)\n                        files[fn] = d;\n                    if (!--lft)\n                        cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1)\n                    cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    // Synchronously decompress under 512KB, or barely-compressed data\n                    if (su < 524288 || sc > 0.8 * su) {\n                        try {\n                            cbl(null, inflateSync(infl, { out: new u8(su) }));\n                        }\n                        catch (e) {\n                            cbl(e, null);\n                        }\n                    }\n                    else\n                        term.push(inflate(infl, { size: su }, cbl));\n                }\n                else\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\n            }\n            else\n                cbl(null, null);\n        };\n        for (var i = 0; i < c; ++i) {\n            _loop_3(i);\n        }\n    }\n    else\n        cbd(null, {});\n    return tAll;\n}\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */\nexport function unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295 || c == 65535;\n    if (z) {\n        var ze = b4(data, e - 12);\n        z = b4(data, ze) == 0x6064B50;\n        if (z) {\n            c = b4(data, ze + 32);\n            o = b4(data, ze + 48);\n        }\n    }\n    var fltr = opts && opts.filter;\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2)\n                files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8)\n                files[fn] = inflateSync(data.subarray(b, b + sc), { out: new u8(su) });\n            else\n                err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport { isArrayStream, passiveClone as streamPassiveClone, parse as streamParse, readToEnd as streamReadToEnd } from '@openpgp/web-stream-tools';\nimport enums from '../enums';\nimport util from '../util';\n\n/**\n * Implementation of the Literal Data Packet (Tag 11)\n *\n * {@link https://tools.ietf.org/html/rfc4880#section-5.9|RFC4880 5.9}:\n * A Literal Data packet contains the body of a message; data that is not to be\n * further interpreted.\n */\nclass LiteralDataPacket {\n  static get tag() {\n    return enums.packet.literalData;\n  }\n\n  /**\n   * @param {Date} date - The creation date of the literal package\n   */\n  constructor(date = new Date()) {\n    this.format = enums.literal.utf8; // default format for literal data packets\n    this.date = util.normalizeDate(date);\n    this.text = null; // textual data representation\n    this.data = null; // literal data representation\n    this.filename = '';\n  }\n\n  /**\n   * Set the packet data to a javascript native string, end of line\n   * will be normalized to \\r\\n and by default text is converted to UTF8\n   * @param {String | ReadableStream<String>} text - Any native javascript string\n   * @param {enums.literal} [format] - The format of the string of bytes\n   */\n  setText(text, format = enums.literal.utf8) {\n    this.format = format;\n    this.text = text;\n    this.data = null;\n  }\n\n  /**\n   * Returns literal data packets as native JavaScript string\n   * with normalized end of line to \\n\n   * @param {Boolean} [clone] - Whether to return a clone so that getBytes/getText can be called again\n   * @returns {String | ReadableStream<String>} Literal data as text.\n   */\n  getText(clone = false) {\n    if (this.text === null || util.isStream(this.text)) { // Assume that this.text has been read\n      this.text = util.decodeUTF8(util.nativeEOL(this.getBytes(clone)));\n    }\n    return this.text;\n  }\n\n  /**\n   * Set the packet data to value represented by the provided string of bytes.\n   * @param {Uint8Array | ReadableStream<Uint8Array>} bytes - The string of bytes\n   * @param {enums.literal} format - The format of the string of bytes\n   */\n  setBytes(bytes, format) {\n    this.format = format;\n    this.data = bytes;\n    this.text = null;\n  }\n\n\n  /**\n   * Get the byte sequence representing the literal packet data\n   * @param {Boolean} [clone] - Whether to return a clone so that getBytes/getText can be called again\n   * @returns {Uint8Array | ReadableStream<Uint8Array>} A sequence of bytes.\n   */\n  getBytes(clone = false) {\n    if (this.data === null) {\n      // encode UTF8 and normalize EOL to \\r\\n\n      this.data = util.canonicalizeEOL(util.encodeUTF8(this.text));\n    }\n    if (clone) {\n      return streamPassiveClone(this.data);\n    }\n    return this.data;\n  }\n\n\n  /**\n   * Sets the filename of the literal packet data\n   * @param {String} filename - Any native javascript string\n   */\n  setFilename(filename) {\n    this.filename = filename;\n  }\n\n\n  /**\n   * Get the filename of the literal packet data\n   * @returns {String} Filename.\n   */\n  getFilename() {\n    return this.filename;\n  }\n\n  /**\n   * Parsing function for a literal data packet (tag 11).\n   *\n   * @param {Uint8Array | ReadableStream<Uint8Array>} input - Payload of a tag 11 packet\n   * @returns {Promise<LiteralDataPacket>} Object representation.\n   * @async\n   */\n  async read(bytes) {\n    await streamParse(bytes, async reader => {\n      // - A one-octet field that describes how the data is formatted.\n      const format = await reader.readByte(); // enums.literal\n\n      const filename_len = await reader.readByte();\n      this.filename = util.decodeUTF8(await reader.readBytes(filename_len));\n\n      this.date = util.readDate(await reader.readBytes(4));\n\n      let data = reader.remainder();\n      if (isArrayStream(data)) data = await streamReadToEnd(data);\n      this.setBytes(data, format);\n    });\n  }\n\n  /**\n   * Creates a Uint8Array representation of the packet, excluding the data\n   *\n   * @returns {Uint8Array} Uint8Array representation of the packet.\n   */\n  writeHeader() {\n    const filename = util.encodeUTF8(this.filename);\n    const filename_length = new Uint8Array([filename.length]);\n\n    const format = new Uint8Array([this.format]);\n    const date = util.writeDate(this.date);\n\n    return util.concatUint8Array([format, filename_length, filename, date]);\n  }\n\n  /**\n   * Creates a Uint8Array representation of the packet\n   *\n   * @returns {Uint8Array | ReadableStream<Uint8Array>} Uint8Array representation of the packet.\n   */\n  write() {\n    const header = this.writeHeader();\n    const data = this.getBytes();\n\n    return util.concat([header, data]);\n  }\n}\n\nexport default LiteralDataPacket;\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n/**\n * @module type/keyid\n */\n\nimport util from '../util';\n\n/**\n * Implementation of type key id\n *\n * {@link https://tools.ietf.org/html/rfc4880#section-3.3|RFC4880 3.3}:\n * A Key ID is an eight-octet scalar that identifies a key.\n * Implementations SHOULD NOT assume that Key IDs are unique.  The\n * section \"Enhanced Key Formats\" below describes how Key IDs are\n * formed.\n */\nclass KeyID {\n  constructor() {\n    this.bytes = '';\n  }\n\n  /**\n   * Parsing method for a key id\n   * @param {Uint8Array} bytes - Input to read the key id from\n   */\n  read(bytes) {\n    this.bytes = util.uint8ArrayToString(bytes.subarray(0, 8));\n    return this.bytes.length;\n  }\n\n  /**\n   * Serializes the Key ID\n   * @returns {Uint8Array} Key ID as a Uint8Array.\n   */\n  write() {\n    return util.stringToUint8Array(this.bytes);\n  }\n\n  /**\n   * Returns the Key ID represented as a hexadecimal string\n   * @returns {String} Key ID as a hexadecimal string.\n   */\n  toHex() {\n    return util.uint8ArrayToHex(util.stringToUint8Array(this.bytes));\n  }\n\n  /**\n   * Checks equality of Key ID's\n   * @param {KeyID} keyID\n   * @param {Boolean} matchWildcard - Indicates whether to check if either keyID is a wildcard\n   */\n  equals(keyID, matchWildcard = false) {\n    return (matchWildcard && (keyID.isWildcard() || this.isWildcard())) || this.bytes === keyID.bytes;\n  }\n\n  /**\n   * Checks to see if the Key ID is unset\n   * @returns {Boolean} True if the Key ID is null.\n   */\n  isNull() {\n    return this.bytes === '';\n  }\n\n  /**\n   * Checks to see if the Key ID is a \"wildcard\" Key ID (all zeros)\n   * @returns {Boolean} True if this is a wildcard Key ID.\n   */\n  isWildcard() {\n    return /^0+$/.test(this.toHex());\n  }\n\n  static mapToHex(keyID) {\n    return keyID.toHex();\n  }\n\n  static fromID(hex) {\n    const keyID = new KeyID();\n    keyID.read(util.hexToUint8Array(hex));\n    return keyID;\n  }\n\n  static wildcard() {\n    const keyID = new KeyID();\n    keyID.read(new Uint8Array(8));\n    return keyID;\n  }\n}\n\nexport default KeyID;\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport { fromAsync as streamFromAsync, slice as streamSlice, readToEnd as streamReadToEnd, clone as streamClone, transform as streamTransform } from '@openpgp/web-stream-tools';\nimport { readSimpleLength, UnsupportedError, writeSimpleLength } from './packet';\nimport KeyID from '../type/keyid';\nimport { signature, serializeParams, getRandomBytes, getHashByteLength, computeDigest } from '../crypto';\nimport enums from '../enums';\nimport util from '../util';\nimport defaultConfig from '../config';\n\n// Symbol to store cryptographic validity of the signature, to avoid recomputing multiple times on verification.\nconst verified = Symbol('verified');\n\n// A salt notation is used to randomize signatures.\n// This is to protect EdDSA signatures in particular, which are known to be vulnerable to fault attacks\n// leading to secret key extraction if two signatures over the same data can be collected (see https://github.com/jedisct1/libsodium/issues/170).\n// For simplicity, we add the salt to all algos, as it may also serve as protection in case of weaknesses in the hash algo, potentially hindering e.g.\n// some chosen-prefix attacks.\n// v6 signatures do not need to rely on this notation, as they already include a separate, built-in salt.\nconst SALT_NOTATION_NAME = 'salt@notations.openpgpjs.org';\n\n// GPG puts the Issuer and Signature subpackets in the unhashed area.\n// Tampering with those invalidates the signature, so we still trust them and parse them.\n// All other unhashed subpackets are ignored.\nconst allowedUnhashedSubpackets = new Set([\n  enums.signatureSubpacket.issuerKeyID,\n  enums.signatureSubpacket.issuerFingerprint,\n  enums.signatureSubpacket.embeddedSignature\n]);\n\n/**\n * Implementation of the Signature Packet (Tag 2)\n *\n * {@link https://tools.ietf.org/html/rfc4880#section-5.2|RFC4480 5.2}:\n * A Signature packet describes a binding between some public key and\n * some data.  The most common signatures are a signature of a file or a\n * block of text, and a signature that is a certification of a User ID.\n */\nclass SignaturePacket {\n  static get tag() {\n    return enums.packet.signature;\n  }\n\n  constructor() {\n    this.version = null;\n    /** @type {enums.signature} */\n    this.signatureType = null;\n    /** @type {enums.hash} */\n    this.hashAlgorithm = null;\n    /** @type {enums.publicKey} */\n    this.publicKeyAlgorithm = null;\n\n    this.signatureData = null;\n    this.unhashedSubpackets = [];\n    this.unknownSubpackets = [];\n    this.signedHashValue = null;\n    this.salt = null;\n\n    this.created = null;\n    this.signatureExpirationTime = null;\n    this.signatureNeverExpires = true;\n    this.exportable = null;\n    this.trustLevel = null;\n    this.trustAmount = null;\n    this.regularExpression = null;\n    this.revocable = null;\n    this.keyExpirationTime = null;\n    this.keyNeverExpires = null;\n    this.preferredSymmetricAlgorithms = null;\n    this.revocationKeyClass = null;\n    this.revocationKeyAlgorithm = null;\n    this.revocationKeyFingerprint = null;\n    this.issuerKeyID = new KeyID();\n    this.rawNotations = [];\n    this.notations = {};\n    this.preferredHashAlgorithms = null;\n    this.preferredCompressionAlgorithms = null;\n    this.keyServerPreferences = null;\n    this.preferredKeyServer = null;\n    this.isPrimaryUserID = null;\n    this.policyURI = null;\n    this.keyFlags = null;\n    this.signersUserID = null;\n    this.reasonForRevocationFlag = null;\n    this.reasonForRevocationString = null;\n    this.features = null;\n    this.signatureTargetPublicKeyAlgorithm = null;\n    this.signatureTargetHashAlgorithm = null;\n    this.signatureTargetHash = null;\n    this.embeddedSignature = null;\n    this.issuerKeyVersion = null;\n    this.issuerFingerprint = null;\n    this.preferredAEADAlgorithms = null;\n    this.preferredCipherSuites = null;\n\n    this.revoked = null;\n    this[verified] = null;\n  }\n\n  /**\n   * parsing function for a signature packet (tag 2).\n   * @param {String} bytes - Payload of a tag 2 packet\n   * @returns {SignaturePacket} Object representation.\n   */\n  read(bytes, config = defaultConfig) {\n    let i = 0;\n    this.version = bytes[i++];\n    if (this.version === 5 && !config.enableParsingV5Entities) {\n      throw new UnsupportedError('Support for v5 entities is disabled; turn on `config.enableParsingV5Entities` if needed');\n    }\n\n    if (this.version !== 4 && this.version !== 5 && this.version !== 6) {\n      throw new UnsupportedError(`Version ${this.version} of the signature packet is unsupported.`);\n    }\n\n    this.signatureType = bytes[i++];\n    this.publicKeyAlgorithm = bytes[i++];\n    this.hashAlgorithm = bytes[i++];\n\n    // hashed subpackets\n    i += this.readSubPackets(bytes.subarray(i, bytes.length), true);\n    if (!this.created) {\n      throw new Error('Missing signature creation time subpacket.');\n    }\n\n    // A V4 signature hashes the packet body\n    // starting from its first field, the version number, through the end\n    // of the hashed subpacket data.  Thus, the fields hashed are the\n    // signature version, the signature type, the public-key algorithm, the\n    // hash algorithm, the hashed subpacket length, and the hashed\n    // subpacket body.\n    this.signatureData = bytes.subarray(0, i);\n\n    // unhashed subpackets\n    i += this.readSubPackets(bytes.subarray(i, bytes.length), false);\n\n    // Two-octet field holding left 16 bits of signed hash value.\n    this.signedHashValue = bytes.subarray(i, i + 2);\n    i += 2;\n\n    // Only for v6 signatures, a variable-length field containing:\n    if (this.version === 6) {\n      // A one-octet salt size. The value MUST match the value defined\n      // for the hash algorithm as specified in Table 23 (Hash algorithm registry).\n      // To allow parsing unknown hash algos, we only check the expected salt length when verifying.\n      const saltLength = bytes[i++];\n\n      // The salt; a random value value of the specified size.\n      this.salt = bytes.subarray(i, i + saltLength);\n      i += saltLength;\n    }\n\n    const signatureMaterial = bytes.subarray(i, bytes.length);\n    const { read, signatureParams } = signature.parseSignatureParams(this.publicKeyAlgorithm, signatureMaterial);\n    if (read < signatureMaterial.length) {\n      throw new Error('Error reading MPIs');\n    }\n    this.params = signatureParams;\n  }\n\n  /**\n   * @returns {Uint8Array | ReadableStream<Uint8Array>}\n   */\n  writeParams() {\n    if (this.params instanceof Promise) {\n      return streamFromAsync(\n        async () => serializeParams(this.publicKeyAlgorithm, await this.params)\n      );\n    }\n    return serializeParams(this.publicKeyAlgorithm, this.params);\n  }\n\n  write() {\n    const arr = [];\n    arr.push(this.signatureData);\n    arr.push(this.writeUnhashedSubPackets());\n    arr.push(this.signedHashValue);\n    if (this.version === 6) {\n      arr.push(new Uint8Array([this.salt.length]));\n      arr.push(this.salt);\n    }\n    arr.push(this.writeParams());\n    return util.concat(arr);\n  }\n\n  /**\n   * Signs provided data. This needs to be done prior to serialization.\n   * @param {SecretKeyPacket} key - Private key used to sign the message.\n   * @param {Object} data - Contains packets to be signed.\n   * @param {Date} [date] - The signature creation time.\n   * @param {Boolean} [detached] - Whether to create a detached signature\n   * @throws {Error} if signing failed\n   * @async\n   */\n  async sign(key, data, date = new Date(), detached = false, config) {\n    this.version = key.version;\n\n    this.created = util.normalizeDate(date);\n    this.issuerKeyVersion = key.version;\n    this.issuerFingerprint = key.getFingerprintBytes();\n    this.issuerKeyID = key.getKeyID();\n\n    const arr = [new Uint8Array([this.version, this.signatureType, this.publicKeyAlgorithm, this.hashAlgorithm])];\n\n    // add randomness to the signature\n    if (this.version === 6) {\n      const saltLength = saltLengthForHash(this.hashAlgorithm);\n      if (this.salt === null) {\n        this.salt = getRandomBytes(saltLength);\n      } else if (saltLength !== this.salt.length) {\n        throw new Error('Provided salt does not have the required length');\n      }\n    } else if (config.nonDeterministicSignaturesViaNotation) {\n      const saltNotations = this.rawNotations.filter(({ name }) => (name === SALT_NOTATION_NAME));\n      // since re-signing the same object is not supported, it's not expected to have multiple salt notations,\n      // but we guard against it as a sanity check\n      if (saltNotations.length === 0) {\n        const saltValue = getRandomBytes(saltLengthForHash(this.hashAlgorithm));\n        this.rawNotations.push({\n          name: SALT_NOTATION_NAME,\n          value: saltValue,\n          humanReadable: false,\n          critical: false\n        });\n      } else {\n        throw new Error('Unexpected existing salt notation');\n      }\n    }\n\n    // Add hashed subpackets\n    arr.push(this.writeHashedSubPackets());\n\n    // Remove unhashed subpackets, in case some allowed unhashed\n    // subpackets existed, in order not to duplicate them (in both\n    // the hashed and unhashed subpackets) when re-signing.\n    this.unhashedSubpackets = [];\n\n    this.signatureData = util.concat(arr);\n\n    const toHash = this.toHash(this.signatureType, data, detached);\n    const hash = await this.hash(this.signatureType, data, toHash, detached);\n\n    this.signedHashValue = streamSlice(streamClone(hash), 0, 2);\n    const signed = async () => signature.sign(\n      this.publicKeyAlgorithm, this.hashAlgorithm, key.publicParams, key.privateParams, toHash, await streamReadToEnd(hash)\n    );\n    if (util.isStream(hash)) {\n      this.params = signed();\n    } else {\n      this.params = await signed();\n\n      // Store the fact that this signature is valid, e.g. for when we call `await\n      // getLatestValidSignature(this.revocationSignatures, key, data)` later.\n      // Note that this only holds up if the key and data passed to verify are the\n      // same as the ones passed to sign.\n      this[verified] = true;\n    }\n  }\n\n  /**\n   * Creates Uint8Array of bytes of all subpacket data except Issuer and Embedded Signature subpackets\n   * @returns {Uint8Array} Subpacket data.\n   */\n  writeHashedSubPackets() {\n    const sub = enums.signatureSubpacket;\n    const arr = [];\n    let bytes;\n    if (this.created === null) {\n      throw new Error('Missing signature creation time');\n    }\n    arr.push(writeSubPacket(sub.signatureCreationTime, true, util.writeDate(this.created)));\n    if (this.signatureExpirationTime !== null) {\n      arr.push(writeSubPacket(sub.signatureExpirationTime, true, util.writeNumber(this.signatureExpirationTime, 4)));\n    }\n    if (this.exportable !== null) {\n      arr.push(writeSubPacket(sub.exportableCertification, true, new Uint8Array([this.exportable ? 1 : 0])));\n    }\n    if (this.trustLevel !== null) {\n      bytes = new Uint8Array([this.trustLevel, this.trustAmount]);\n      arr.push(writeSubPacket(sub.trustSignature, true, bytes));\n    }\n    if (this.regularExpression !== null) {\n      arr.push(writeSubPacket(sub.regularExpression, true, this.regularExpression));\n    }\n    if (this.revocable !== null) {\n      arr.push(writeSubPacket(sub.revocable, true, new Uint8Array([this.revocable ? 1 : 0])));\n    }\n    if (this.keyExpirationTime !== null) {\n      arr.push(writeSubPacket(sub.keyExpirationTime, true, util.writeNumber(this.keyExpirationTime, 4)));\n    }\n    if (this.preferredSymmetricAlgorithms !== null) {\n      bytes = util.stringToUint8Array(util.uint8ArrayToString(this.preferredSymmetricAlgorithms));\n      arr.push(writeSubPacket(sub.preferredSymmetricAlgorithms, false, bytes));\n    }\n    if (this.revocationKeyClass !== null) {\n      bytes = new Uint8Array([this.revocationKeyClass, this.revocationKeyAlgorithm]);\n      bytes = util.concat([bytes, this.revocationKeyFingerprint]);\n      arr.push(writeSubPacket(sub.revocationKey, false, bytes));\n    }\n    if (!this.issuerKeyID.isNull() && this.issuerKeyVersion < 5) {\n      // If the version of [the] key is greater than 4, this subpacket\n      // MUST NOT be included in the signature.\n      // Note: making this critical breaks RPM <=4.16.\n      // See: https://github.com/ProtonMail/go-crypto/issues/263\n      arr.push(writeSubPacket(sub.issuerKeyID, false, this.issuerKeyID.write()));\n    }\n    this.rawNotations.forEach(({ name, value, humanReadable, critical }) => {\n      bytes = [new Uint8Array([humanReadable ? 0x80 : 0, 0, 0, 0])];\n      const encodedName = util.encodeUTF8(name);\n      // 2 octets of name length\n      bytes.push(util.writeNumber(encodedName.length, 2));\n      // 2 octets of value length\n      bytes.push(util.writeNumber(value.length, 2));\n      bytes.push(encodedName);\n      bytes.push(value);\n      bytes = util.concat(bytes);\n      arr.push(writeSubPacket(sub.notationData, critical, bytes));\n    });\n    if (this.preferredHashAlgorithms !== null) {\n      bytes = util.stringToUint8Array(util.uint8ArrayToString(this.preferredHashAlgorithms));\n      arr.push(writeSubPacket(sub.preferredHashAlgorithms, false, bytes));\n    }\n    if (this.preferredCompressionAlgorithms !== null) {\n      bytes = util.stringToUint8Array(util.uint8ArrayToString(this.preferredCompressionAlgorithms));\n      arr.push(writeSubPacket(sub.preferredCompressionAlgorithms, false, bytes));\n    }\n    if (this.keyServerPreferences !== null) {\n      bytes = util.stringToUint8Array(util.uint8ArrayToString(this.keyServerPreferences));\n      arr.push(writeSubPacket(sub.keyServerPreferences, false, bytes));\n    }\n    if (this.preferredKeyServer !== null) {\n      arr.push(writeSubPacket(sub.preferredKeyServer, false, util.encodeUTF8(this.preferredKeyServer)));\n    }\n    if (this.isPrimaryUserID !== null) {\n      arr.push(writeSubPacket(sub.primaryUserID, false, new Uint8Array([this.isPrimaryUserID ? 1 : 0])));\n    }\n    if (this.policyURI !== null) {\n      arr.push(writeSubPacket(sub.policyURI, false, util.encodeUTF8(this.policyURI)));\n    }\n    if (this.keyFlags !== null) {\n      bytes = util.stringToUint8Array(util.uint8ArrayToString(this.keyFlags));\n      arr.push(writeSubPacket(sub.keyFlags, true, bytes));\n    }\n    if (this.signersUserID !== null) {\n      arr.push(writeSubPacket(sub.signersUserID, false, util.encodeUTF8(this.signersUserID)));\n    }\n    if (this.reasonForRevocationFlag !== null) {\n      bytes = util.stringToUint8Array(String.fromCharCode(this.reasonForRevocationFlag) + this.reasonForRevocationString);\n      arr.push(writeSubPacket(sub.reasonForRevocation, true, bytes));\n    }\n    if (this.features !== null) {\n      bytes = util.stringToUint8Array(util.uint8ArrayToString(this.features));\n      arr.push(writeSubPacket(sub.features, false, bytes));\n    }\n    if (this.signatureTargetPublicKeyAlgorithm !== null) {\n      bytes = [new Uint8Array([this.signatureTargetPublicKeyAlgorithm, this.signatureTargetHashAlgorithm])];\n      bytes.push(util.stringToUint8Array(this.signatureTargetHash));\n      bytes = util.concat(bytes);\n      arr.push(writeSubPacket(sub.signatureTarget, true, bytes));\n    }\n    if (this.embeddedSignature !== null) {\n      arr.push(writeSubPacket(sub.embeddedSignature, true, this.embeddedSignature.write()));\n    }\n    if (this.issuerFingerprint !== null) {\n      bytes = [new Uint8Array([this.issuerKeyVersion]), this.issuerFingerprint];\n      bytes = util.concat(bytes);\n      arr.push(writeSubPacket(sub.issuerFingerprint, this.version >= 5, bytes));\n    }\n    if (this.preferredAEADAlgorithms !== null) {\n      bytes = util.stringToUint8Array(util.uint8ArrayToString(this.preferredAEADAlgorithms));\n      arr.push(writeSubPacket(sub.preferredAEADAlgorithms, false, bytes));\n    }\n    if (this.preferredCipherSuites !== null) {\n      bytes = new Uint8Array([].concat(...this.preferredCipherSuites));\n      arr.push(writeSubPacket(sub.preferredCipherSuites, false, bytes));\n    }\n\n    const result = util.concat(arr);\n    const length = util.writeNumber(result.length, this.version === 6 ? 4 : 2);\n\n    return util.concat([length, result]);\n  }\n\n  /**\n   * Creates an Uint8Array containing the unhashed subpackets\n   * @returns {Uint8Array} Subpacket data.\n   */\n  writeUnhashedSubPackets() {\n    const arr = this.unhashedSubpackets.map(({ type, critical, body }) => {\n      return writeSubPacket(type, critical, body);\n    });\n\n    const result = util.concat(arr);\n    const length = util.writeNumber(result.length, this.version === 6 ? 4 : 2);\n\n    return util.concat([length, result]);\n  }\n\n  // Signature subpackets\n  readSubPacket(bytes, hashed = true) {\n    let mypos = 0;\n\n    // The leftmost bit denotes a \"critical\" packet\n    const critical = !!(bytes[mypos] & 0x80);\n    const type = bytes[mypos] & 0x7F;\n\n    mypos++;\n\n    if (!hashed) {\n      this.unhashedSubpackets.push({\n        type,\n        critical,\n        body: bytes.subarray(mypos, bytes.length)\n      });\n      if (!allowedUnhashedSubpackets.has(type)) {\n        return;\n      }\n    }\n\n    // subpacket type\n    switch (type) {\n      case enums.signatureSubpacket.signatureCreationTime:\n        // Signature Creation Time\n        this.created = util.readDate(bytes.subarray(mypos, bytes.length));\n        break;\n      case enums.signatureSubpacket.signatureExpirationTime: {\n        // Signature Expiration Time in seconds\n        const seconds = util.readNumber(bytes.subarray(mypos, bytes.length));\n\n        this.signatureNeverExpires = seconds === 0;\n        this.signatureExpirationTime = seconds;\n\n        break;\n      }\n      case enums.signatureSubpacket.exportableCertification:\n        // Exportable Certification\n        this.exportable = bytes[mypos++] === 1;\n        break;\n      case enums.signatureSubpacket.trustSignature:\n        // Trust Signature\n        this.trustLevel = bytes[mypos++];\n        this.trustAmount = bytes[mypos++];\n        break;\n      case enums.signatureSubpacket.regularExpression:\n        // Regular Expression\n        this.regularExpression = bytes[mypos];\n        break;\n      case enums.signatureSubpacket.revocable:\n        // Revocable\n        this.revocable = bytes[mypos++] === 1;\n        break;\n      case enums.signatureSubpacket.keyExpirationTime: {\n        // Key Expiration Time in seconds\n        const seconds = util.readNumber(bytes.subarray(mypos, bytes.length));\n\n        this.keyExpirationTime = seconds;\n        this.keyNeverExpires = seconds === 0;\n\n        break;\n      }\n      case enums.signatureSubpacket.preferredSymmetricAlgorithms:\n        // Preferred Symmetric Algorithms\n        this.preferredSymmetricAlgorithms = [...bytes.subarray(mypos, bytes.length)];\n        break;\n      case enums.signatureSubpacket.revocationKey:\n        // Revocation Key\n        // (1 octet of class, 1 octet of public-key algorithm ID, 20\n        // octets of\n        // fingerprint)\n        this.revocationKeyClass = bytes[mypos++];\n        this.revocationKeyAlgorithm = bytes[mypos++];\n        this.revocationKeyFingerprint = bytes.subarray(mypos, mypos + 20);\n        break;\n\n      case enums.signatureSubpacket.issuerKeyID:\n        // Issuer\n        if (this.version === 4) {\n          this.issuerKeyID.read(bytes.subarray(mypos, bytes.length));\n        } else if (hashed) {\n          // If the version of the key is greater than 4, this subpacket MUST NOT be included in the signature,\n          // since the Issuer Fingerprint subpacket is to be used instead.\n          // The `issuerKeyID` value will be set when reading the issuerFingerprint packet.\n          // For this reason, if the issuer Key ID packet is present but unhashed, we simply ignore it,\n          // to avoid situations where `.getSigningKeyIDs()` returns a keyID potentially different from the (signed)\n          // issuerFingerprint.\n          // If the packet is hashed, then we reject the signature, to avoid verifying data different from\n          // what was parsed.\n          throw new Error('Unexpected Issuer Key ID subpacket');\n        }\n        break;\n\n      case enums.signatureSubpacket.notationData: {\n        // Notation Data\n        const humanReadable = !!(bytes[mypos] & 0x80);\n\n        // We extract key/value tuple from the byte stream.\n        mypos += 4;\n        const m = util.readNumber(bytes.subarray(mypos, mypos + 2));\n        mypos += 2;\n        const n = util.readNumber(bytes.subarray(mypos, mypos + 2));\n        mypos += 2;\n\n        const name = util.decodeUTF8(bytes.subarray(mypos, mypos + m));\n        const value = bytes.subarray(mypos + m, mypos + m + n);\n\n        this.rawNotations.push({ name, humanReadable, value, critical });\n\n        if (humanReadable) {\n          this.notations[name] = util.decodeUTF8(value);\n        }\n        break;\n      }\n      case enums.signatureSubpacket.preferredHashAlgorithms:\n        // Preferred Hash Algorithms\n        this.preferredHashAlgorithms = [...bytes.subarray(mypos, bytes.length)];\n        break;\n      case enums.signatureSubpacket.preferredCompressionAlgorithms:\n        // Preferred Compression Algorithms\n        this.preferredCompressionAlgorithms = [...bytes.subarray(mypos, bytes.length)];\n        break;\n      case enums.signatureSubpacket.keyServerPreferences:\n        // Key Server Preferences\n        this.keyServerPreferences = [...bytes.subarray(mypos, bytes.length)];\n        break;\n      case enums.signatureSubpacket.preferredKeyServer:\n        // Preferred Key Server\n        this.preferredKeyServer = util.decodeUTF8(bytes.subarray(mypos, bytes.length));\n        break;\n      case enums.signatureSubpacket.primaryUserID:\n        // Primary User ID\n        this.isPrimaryUserID = bytes[mypos++] !== 0;\n        break;\n      case enums.signatureSubpacket.policyURI:\n        // Policy URI\n        this.policyURI = util.decodeUTF8(bytes.subarray(mypos, bytes.length));\n        break;\n      case enums.signatureSubpacket.keyFlags:\n        // Key Flags\n        this.keyFlags = [...bytes.subarray(mypos, bytes.length)];\n        break;\n      case enums.signatureSubpacket.signersUserID:\n        // Signer's User ID\n        this.signersUserID = util.decodeUTF8(bytes.subarray(mypos, bytes.length));\n        break;\n      case enums.signatureSubpacket.reasonForRevocation:\n        // Reason for Revocation\n        this.reasonForRevocationFlag = bytes[mypos++];\n        this.reasonForRevocationString = util.decodeUTF8(bytes.subarray(mypos, bytes.length));\n        break;\n      case enums.signatureSubpacket.features:\n        // Features\n        this.features = [...bytes.subarray(mypos, bytes.length)];\n        break;\n      case enums.signatureSubpacket.signatureTarget: {\n        // Signature Target\n        // (1 octet public-key algorithm, 1 octet hash algorithm, N octets hash)\n        this.signatureTargetPublicKeyAlgorithm = bytes[mypos++];\n        this.signatureTargetHashAlgorithm = bytes[mypos++];\n\n        const len = getHashByteLength(this.signatureTargetHashAlgorithm);\n\n        this.signatureTargetHash = util.uint8ArrayToString(bytes.subarray(mypos, mypos + len));\n        break;\n      }\n      case enums.signatureSubpacket.embeddedSignature:\n        // Embedded Signature\n        this.embeddedSignature = new SignaturePacket();\n        this.embeddedSignature.read(bytes.subarray(mypos, bytes.length));\n        break;\n      case enums.signatureSubpacket.issuerFingerprint:\n        // Issuer Fingerprint\n        this.issuerKeyVersion = bytes[mypos++];\n        this.issuerFingerprint = bytes.subarray(mypos, bytes.length);\n        if (this.issuerKeyVersion >= 5) {\n          this.issuerKeyID.read(this.issuerFingerprint);\n        } else {\n          this.issuerKeyID.read(this.issuerFingerprint.subarray(-8));\n        }\n        break;\n      case enums.signatureSubpacket.preferredAEADAlgorithms:\n        // Preferred AEAD Algorithms\n        this.preferredAEADAlgorithms = [...bytes.subarray(mypos, bytes.length)];\n        break;\n      case enums.signatureSubpacket.preferredCipherSuites:\n        // Preferred AEAD Cipher Suites\n        this.preferredCipherSuites = [];\n        for (let i = mypos; i < bytes.length; i += 2) {\n          this.preferredCipherSuites.push([bytes[i], bytes[i + 1]]);\n        }\n        break;\n      default:\n        this.unknownSubpackets.push({\n          type,\n          critical,\n          body: bytes.subarray(mypos, bytes.length)\n        });\n        break;\n    }\n  }\n\n  readSubPackets(bytes, trusted = true, config) {\n    const subpacketLengthBytes = this.version === 6 ? 4 : 2;\n\n    // Two-octet scalar octet count for following subpacket data.\n    const subpacketLength = util.readNumber(bytes.subarray(0, subpacketLengthBytes));\n\n    let i = subpacketLengthBytes;\n\n    // subpacket data set (zero or more subpackets)\n    while (i < 2 + subpacketLength) {\n      const len = readSimpleLength(bytes.subarray(i, bytes.length));\n      i += len.offset;\n\n      this.readSubPacket(bytes.subarray(i, i + len.len), trusted, config);\n\n      i += len.len;\n    }\n\n    return i;\n  }\n\n  // Produces data to produce signature on\n  toSign(type, data) {\n    const t = enums.signature;\n\n    switch (type) {\n      case t.binary:\n        if (data.text !== null) {\n          return util.encodeUTF8(data.getText(true));\n        }\n        return data.getBytes(true);\n\n      case t.text: {\n        const bytes = data.getBytes(true);\n        // normalize EOL to \\r\\n\n        return util.canonicalizeEOL(bytes);\n      }\n      case t.standalone:\n        return new Uint8Array(0);\n\n      case t.certGeneric:\n      case t.certPersona:\n      case t.certCasual:\n      case t.certPositive:\n      case t.certRevocation: {\n        let packet;\n        let tag;\n\n        if (data.userID) {\n          tag = 0xB4;\n          packet = data.userID;\n        } else if (data.userAttribute) {\n          tag = 0xD1;\n          packet = data.userAttribute;\n        } else {\n          throw new Error('Either a userID or userAttribute packet needs to be ' +\n            'supplied for certification.');\n        }\n\n        const bytes = packet.write();\n\n        return util.concat([this.toSign(t.key, data),\n          new Uint8Array([tag]),\n          util.writeNumber(bytes.length, 4),\n          bytes]);\n      }\n      case t.subkeyBinding:\n      case t.subkeyRevocation:\n      case t.keyBinding:\n        return util.concat([this.toSign(t.key, data), this.toSign(t.key, {\n          key: data.bind\n        })]);\n\n      case t.key:\n        if (data.key === undefined) {\n          throw new Error('Key packet is required for this signature.');\n        }\n        return data.key.writeForHash(this.version);\n\n      case t.keyRevocation:\n        return this.toSign(t.key, data);\n      case t.timestamp:\n        return new Uint8Array(0);\n      case t.thirdParty:\n        throw new Error('Not implemented');\n      default:\n        throw new Error('Unknown signature type.');\n    }\n  }\n\n  calculateTrailer(data, detached) {\n    let length = 0;\n    return streamTransform(streamClone(this.signatureData), value => {\n      length += value.length;\n    }, () => {\n      const arr = [];\n      if (this.version === 5 && (this.signatureType === enums.signature.binary || this.signatureType === enums.signature.text)) {\n        if (detached) {\n          arr.push(new Uint8Array(6));\n        } else {\n          arr.push(data.writeHeader());\n        }\n      }\n      arr.push(new Uint8Array([this.version, 0xFF]));\n      if (this.version === 5) {\n        arr.push(new Uint8Array(4));\n      }\n      arr.push(util.writeNumber(length, 4));\n      // For v5, this should really be writeNumber(length, 8) rather than the\n      // hardcoded 4 zero bytes above\n      return util.concat(arr);\n    });\n  }\n\n  toHash(signatureType, data, detached = false) {\n    const bytes = this.toSign(signatureType, data);\n\n    return util.concat([this.salt || new Uint8Array(), bytes, this.signatureData, this.calculateTrailer(data, detached)]);\n  }\n\n  async hash(signatureType, data, toHash, detached = false) {\n    if (this.version === 6 && this.salt.length !== saltLengthForHash(this.hashAlgorithm)) {\n      // avoid hashing unexpected salt size\n      throw new Error('Signature salt does not have the expected length');\n    }\n\n    if (!toHash) toHash = this.toHash(signatureType, data, detached);\n    return computeDigest(this.hashAlgorithm, toHash);\n  }\n\n  /**\n   * verifies the signature packet. Note: not all signature types are implemented\n   * @param {PublicSubkeyPacket|PublicKeyPacket|\n   *         SecretSubkeyPacket|SecretKeyPacket} key - the public key to verify the signature\n   * @param {module:enums.signature} signatureType - Expected signature type\n   * @param {Uint8Array|Object} data - Data which on the signature applies\n   * @param {Date} [date] - Use the given date instead of the current time to check for signature validity and expiration\n   * @param {Boolean} [detached] - Whether to verify a detached signature\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @throws {Error} if signature validation failed\n   * @async\n   */\n  async verify(key, signatureType, data, date = new Date(), detached = false, config = defaultConfig) {\n    if (!this.issuerKeyID.equals(key.getKeyID())) {\n      throw new Error('Signature was not issued by the given public key');\n    }\n    if (this.publicKeyAlgorithm !== key.algorithm) {\n      throw new Error('Public key algorithm used to sign signature does not match issuer key algorithm.');\n    }\n\n    const isMessageSignature = signatureType === enums.signature.binary || signatureType === enums.signature.text;\n    // Cryptographic validity is cached after one successful verification.\n    // However, for message signatures, we always re-verify, since the passed `data` can change\n    const skipVerify = this[verified] && !isMessageSignature;\n    if (!skipVerify) {\n      let toHash;\n      let hash;\n      if (this.hashed) {\n        hash = await this.hashed;\n      } else {\n        toHash = this.toHash(signatureType, data, detached);\n        hash = await this.hash(signatureType, data, toHash);\n      }\n      hash = await streamReadToEnd(hash);\n      if (this.signedHashValue[0] !== hash[0] ||\n          this.signedHashValue[1] !== hash[1]) {\n        throw new Error('Signed digest did not match');\n      }\n\n      this.params = await this.params;\n\n      this[verified] = await signature.verify(\n        this.publicKeyAlgorithm, this.hashAlgorithm, this.params, key.publicParams,\n        toHash, hash\n      );\n\n      if (!this[verified]) {\n        throw new Error('Signature verification failed');\n      }\n    }\n\n    const normDate = util.normalizeDate(date);\n    if (normDate && this.created > normDate) {\n      throw new Error('Signature creation time is in the future');\n    }\n    if (normDate && normDate >= this.getExpirationTime()) {\n      throw new Error('Signature is expired');\n    }\n    if (config.rejectHashAlgorithms.has(this.hashAlgorithm)) {\n      throw new Error('Insecure hash algorithm: ' + enums.read(enums.hash, this.hashAlgorithm).toUpperCase());\n    }\n    if (config.rejectMessageHashAlgorithms.has(this.hashAlgorithm) &&\n      [enums.signature.binary, enums.signature.text].includes(this.signatureType)) {\n      throw new Error('Insecure message hash algorithm: ' + enums.read(enums.hash, this.hashAlgorithm).toUpperCase());\n    }\n    this.unknownSubpackets.forEach(({ type, critical }) => {\n      if (critical) {\n        throw new Error(`Unknown critical signature subpacket type ${type}`);\n      }\n    });\n    this.rawNotations.forEach(({ name, critical }) => {\n      if (critical && (config.knownNotations.indexOf(name) < 0)) {\n        throw new Error(`Unknown critical notation: ${name}`);\n      }\n    });\n    if (this.revocationKeyClass !== null) {\n      throw new Error('This key is intended to be revoked with an authorized key, which OpenPGP.js does not support.');\n    }\n  }\n\n  /**\n   * Verifies signature expiration date\n   * @param {Date} [date] - Use the given date for verification instead of the current time\n   * @returns {Boolean} True if expired.\n   */\n  isExpired(date = new Date()) {\n    const normDate = util.normalizeDate(date);\n    if (normDate !== null) {\n      return !(this.created <= normDate && normDate < this.getExpirationTime());\n    }\n    return false;\n  }\n\n  /**\n   * Returns the expiration time of the signature or Infinity if signature does not expire\n   * @returns {Date | Infinity} Expiration time.\n   */\n  getExpirationTime() {\n    return this.signatureNeverExpires ? Infinity : new Date(this.created.getTime() + this.signatureExpirationTime * 1000);\n  }\n}\n\nexport default SignaturePacket;\n\n/**\n * Creates a Uint8Array representation of a sub signature packet\n * @see {@link https://tools.ietf.org/html/rfc4880#section-5.2.3.1|RFC4880 5.2.3.1}\n * @see {@link https://tools.ietf.org/html/rfc4880#section-5.2.3.2|RFC4880 5.2.3.2}\n * @param {Integer} type - Subpacket signature type.\n * @param {Boolean} critical - Whether the subpacket should be critical.\n * @param {String} data - Data to be included\n * @returns {Uint8Array} The signature subpacket.\n * @private\n */\nfunction writeSubPacket(type, critical, data) {\n  const arr = [];\n  arr.push(writeSimpleLength(data.length + 1));\n  arr.push(new Uint8Array([(critical ? 0x80 : 0) | type]));\n  arr.push(data);\n  return util.concat(arr);\n}\n\n/**\n * Select the required salt length for the given hash algorithm, as per Table 23 (Hash algorithm registry) of the crypto refresh.\n * @see {@link https://datatracker.ietf.org/doc/html/draft-ietf-openpgp-crypto-refresh#section-9.5|Crypto Refresh Section 9.5}\n * @param {enums.hash} hashAlgorithm - Hash algorithm.\n * @returns {Integer} Salt length.\n * @private\n */\nfunction saltLengthForHash(hashAlgorithm) {\n  switch (hashAlgorithm) {\n    case enums.hash.sha256: return 16;\n    case enums.hash.sha384: return 24;\n    case enums.hash.sha512: return 32;\n    case enums.hash.sha224: return 16;\n    case enums.hash.sha3_256: return 16;\n    case enums.hash.sha3_512: return 32;\n    default: throw new Error('Unsupported hash function');\n  }\n}\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport { fromAsync as streamFromAsync } from '@openpgp/web-stream-tools';\nimport SignaturePacket from './signature';\nimport KeyID from '../type/keyid';\nimport enums from '../enums';\nimport util from '../util';\nimport { UnsupportedError } from './packet';\n\n/**\n * Implementation of the One-Pass Signature Packets (Tag 4)\n *\n * {@link https://tools.ietf.org/html/rfc4880#section-5.4|RFC4880 5.4}:\n * The One-Pass Signature packet precedes the signed data and contains\n * enough information to allow the receiver to begin calculating any\n * hashes needed to verify the signature.  It allows the Signature\n * packet to be placed at the end of the message, so that the signer\n * can compute the entire signed message in one pass.\n */\nclass OnePassSignaturePacket {\n  static get tag() {\n    return enums.packet.onePassSignature;\n  }\n\n  static fromSignaturePacket(signaturePacket, isLast) {\n    const onePassSig = new OnePassSignaturePacket();\n    onePassSig.version = signaturePacket.version === 6 ? 6 : 3;\n    onePassSig.signatureType = signaturePacket.signatureType;\n    onePassSig.hashAlgorithm = signaturePacket.hashAlgorithm;\n    onePassSig.publicKeyAlgorithm = signaturePacket.publicKeyAlgorithm;\n    onePassSig.issuerKeyID = signaturePacket.issuerKeyID;\n    onePassSig.salt = signaturePacket.salt; // v6 only\n    onePassSig.issuerFingerprint = signaturePacket.issuerFingerprint; // v6 only\n\n    onePassSig.flags = isLast ? 1 : 0;\n    return onePassSig;\n  }\n\n  constructor() {\n    /** A one-octet version number.  The current versions are 3 and 6. */\n    this.version = null;\n    /**\n     * A one-octet signature type.\n     * Signature types are described in\n     * {@link https://tools.ietf.org/html/rfc4880#section-5.2.1|RFC4880 Section 5.2.1}.\n     * @type {enums.signature}\n\n     */\n    this.signatureType = null;\n    /**\n     * A one-octet number describing the hash algorithm used.\n     * @see {@link https://tools.ietf.org/html/rfc4880#section-9.4|RFC4880 9.4}\n     * @type {enums.hash}\n     */\n    this.hashAlgorithm = null;\n    /**\n     * A one-octet number describing the public-key algorithm used.\n     * @see {@link https://tools.ietf.org/html/rfc4880#section-9.1|RFC4880 9.1}\n     * @type {enums.publicKey}\n     */\n    this.publicKeyAlgorithm = null;\n    /** Only for v6, a variable-length field containing the salt. */\n    this.salt = null;\n    /** Only for v3 packets, an eight-octet number holding the Key ID of the signing key. */\n    this.issuerKeyID = null;\n    /** Only for v6 packets, 32 octets of the fingerprint of the signing key. */\n    this.issuerFingerprint = null;\n    /**\n     * A one-octet number holding a flag showing whether the signature is nested.\n     * A zero value indicates that the next packet is another One-Pass Signature packet\n     * that describes another signature to be applied to the same message data.\n     */\n    this.flags = null;\n  }\n\n  /**\n   * parsing function for a one-pass signature packet (tag 4).\n   * @param {Uint8Array} bytes - Payload of a tag 4 packet\n   * @returns {OnePassSignaturePacket} Object representation.\n   */\n  read(bytes) {\n    let mypos = 0;\n    // A one-octet version number.  The current versions are 3 or 6.\n    this.version = bytes[mypos++];\n    if (this.version !== 3 && this.version !== 6) {\n      throw new UnsupportedError(`Version ${this.version} of the one-pass signature packet is unsupported.`);\n    }\n\n    // A one-octet signature type.  Signature types are described in\n    //   Section 5.2.1.\n    this.signatureType = bytes[mypos++];\n\n    // A one-octet number describing the hash algorithm used.\n    this.hashAlgorithm = bytes[mypos++];\n\n    // A one-octet number describing the public-key algorithm used.\n    this.publicKeyAlgorithm = bytes[mypos++];\n\n    if (this.version === 6) {\n      // Only for v6 signatures, a variable-length field containing:\n\n      // A one-octet salt size. The value MUST match the value defined\n      // for the hash algorithm as specified in Table 23 (Hash algorithm registry).\n      // To allow parsing unknown hash algos, we only check the expected salt length when verifying.\n      const saltLength = bytes[mypos++];\n\n      // The salt; a random value value of the specified size.\n      this.salt = bytes.subarray(mypos, mypos + saltLength);\n      mypos += saltLength;\n\n      // Only for v6 packets, 32 octets of the fingerprint of the signing key.\n      this.issuerFingerprint = bytes.subarray(mypos, mypos + 32);\n      mypos += 32;\n      this.issuerKeyID = new KeyID();\n      // For v6 the Key ID is the high-order 64 bits of the fingerprint.\n      this.issuerKeyID.read(this.issuerFingerprint);\n    } else {\n      // Only for v3 packets, an eight-octet number holding the Key ID of the signing key.\n      this.issuerKeyID = new KeyID();\n      this.issuerKeyID.read(bytes.subarray(mypos, mypos + 8));\n      mypos += 8;\n    }\n\n    // A one-octet number holding a flag showing whether the signature\n    //   is nested.  A zero value indicates that the next packet is\n    //   another One-Pass Signature packet that describes another\n    //   signature to be applied to the same message data.\n    this.flags = bytes[mypos++];\n    return this;\n  }\n\n  /**\n   * creates a string representation of a one-pass signature packet\n   * @returns {Uint8Array} A Uint8Array representation of a one-pass signature packet.\n   */\n  write() {\n    const arr = [new Uint8Array([\n      this.version,\n      this.signatureType,\n      this.hashAlgorithm,\n      this.publicKeyAlgorithm\n    ])];\n    if (this.version === 6) {\n      arr.push(\n        new Uint8Array([this.salt.length]),\n        this.salt,\n        this.issuerFingerprint\n      );\n    } else {\n      arr.push(this.issuerKeyID.write());\n    }\n    arr.push(new Uint8Array([this.flags]));\n    return util.concatUint8Array(arr);\n  }\n\n  calculateTrailer(...args) {\n    return streamFromAsync(async () => SignaturePacket.prototype.calculateTrailer.apply(await this.correspondingSig, args));\n  }\n\n  async verify() {\n    const correspondingSig = await this.correspondingSig;\n    if (!correspondingSig || correspondingSig.constructor.tag !== enums.packet.signature) {\n      throw new Error('Corresponding signature packet missing');\n    }\n    if (\n      correspondingSig.signatureType !== this.signatureType ||\n      correspondingSig.hashAlgorithm !== this.hashAlgorithm ||\n      correspondingSig.publicKeyAlgorithm !== this.publicKeyAlgorithm ||\n      !correspondingSig.issuerKeyID.equals(this.issuerKeyID) ||\n      (this.version === 3 && correspondingSig.version === 6) ||\n      (this.version === 6 && correspondingSig.version !== 6) ||\n      (this.version === 6 && !util.equalsUint8Array(correspondingSig.issuerFingerprint, this.issuerFingerprint)) ||\n      (this.version === 6 && !util.equalsUint8Array(correspondingSig.salt, this.salt))\n    ) {\n      throw new Error('Corresponding signature packet does not match one-pass signature packet');\n    }\n    correspondingSig.hashed = this.hashed;\n    return correspondingSig.verify.apply(correspondingSig, arguments);\n  }\n}\n\nOnePassSignaturePacket.prototype.hash = SignaturePacket.prototype.hash;\nOnePassSignaturePacket.prototype.toHash = SignaturePacket.prototype.toHash;\nOnePassSignaturePacket.prototype.toSign = SignaturePacket.prototype.toSign;\n\nexport default OnePassSignaturePacket;\n","import { transformPair as streamTransformPair, transform as streamTransform, getWriter as streamGetWriter, getReader as streamGetReader, clone as streamClone } from '@openpgp/web-stream-tools';\nimport {\n  readPacket, supportsStreaming,\n  writeTag, writeHeader,\n  writePartialLength, writeSimpleLength,\n  UnparseablePacket,\n  UnsupportedError,\n  UnknownPacketError,\n  MalformedPacketError\n} from './packet';\nimport util from '../util';\nimport enums from '../enums';\nimport defaultConfig from '../config';\n\n/**\n * Instantiate a new packet given its tag\n * @function newPacketFromTag\n * @param {module:enums.packet} tag - Property value from {@link module:enums.packet}\n * @param {Object} allowedPackets - mapping where keys are allowed packet tags, pointing to their Packet class\n * @returns {Object} New packet object with type based on tag\n * @throws {Error|UnsupportedError} for disallowed or unknown packets\n */\nexport function newPacketFromTag(tag, allowedPackets) {\n  if (!allowedPackets[tag]) {\n    // distinguish between disallowed packets and unknown ones\n    let packetType;\n    try {\n      packetType = enums.read(enums.packet, tag);\n    } catch (e) {\n      throw new UnknownPacketError(`Unknown packet type with tag: ${tag}`);\n    }\n    throw new Error(`Packet not allowed in this context: ${packetType}`);\n  }\n  return new allowedPackets[tag]();\n}\n\n/**\n * This class represents a list of openpgp packets.\n * Take care when iterating over it - the packets themselves\n * are stored as numerical indices.\n * @extends Array\n */\nclass PacketList extends Array {\n  /**\n   * Parses the given binary data and returns a list of packets.\n   * Equivalent to calling `read` on an empty PacketList instance.\n   * @param {Uint8Array | ReadableStream<Uint8Array>} bytes - binary data to parse\n   * @param {Object} allowedPackets - mapping where keys are allowed packet tags, pointing to their Packet class\n   * @param {Object} [config] - full configuration, defaults to openpgp.config\n   * @param {function(enums.packet[], boolean, Object): void} [grammarValidator]\n   * @param {Boolean} [delayErrors] - delay errors until the input stream has been read completely\n   * @returns {PacketList} parsed list of packets\n   * @throws on parsing errors\n   * @async\n   */\n  static async fromBinary(bytes, allowedPackets, config = defaultConfig, grammarValidator = null, delayErrors = false) {\n    const packets = new PacketList();\n    await packets.read(bytes, allowedPackets, config, grammarValidator, delayErrors);\n    return packets;\n  }\n\n  /**\n   * Reads a stream of binary data and interprets it as a list of packets.\n   * @param {Uint8Array | ReadableStream<Uint8Array>} bytes - binary data to parse\n   * @param {Object} allowedPackets - mapping where keys are allowed packet tags, pointing to their Packet class\n   * @param {Object} [config] - full configuration, defaults to openpgp.config\n   * @param {function(enums.packet[], boolean, Object): void} [grammarValidator]\n   * @param {Boolean} [delayErrors] - delay errors until the input stream has been read completely\n   * @throws on parsing errors\n   * @async\n   */\n  async read(bytes, allowedPackets, config = defaultConfig, grammarValidator = null, delayErrors = false) {\n    let additionalAllowedPackets;\n    if (config.additionalAllowedPackets.length) {\n      additionalAllowedPackets = util.constructAllowedPackets(config.additionalAllowedPackets);\n      allowedPackets = { ...allowedPackets, ...additionalAllowedPackets };\n    }\n    this.stream = streamTransformPair(bytes, async (readable, writable) => {\n      const reader = streamGetReader(readable);\n      const writer = streamGetWriter(writable);\n      try {\n        let useStreamType = util.isStream(readable);\n        while (true) {\n          await writer.ready;\n          let unauthenticatedError;\n          let wasStream;\n          await readPacket(reader, useStreamType, async parsed => {\n            try {\n              if (parsed.tag === enums.packet.marker || parsed.tag === enums.packet.trust || parsed.tag === enums.packet.padding) {\n                // According to the spec, these packet types should be ignored and not cause parsing errors, even if not explicitly allowed:\n                // - Marker packets MUST be ignored when received: https://github.com/openpgpjs/openpgpjs/issues/1145\n                // - Trust packets SHOULD be ignored outside of keyrings (unsupported): https://datatracker.ietf.org/doc/html/rfc4880#section-5.10\n                // - [Padding Packets] MUST be ignored when received: https://datatracker.ietf.org/doc/html/draft-ietf-openpgp-crypto-refresh#name-padding-packet-tag-21\n                return;\n              }\n              const packet = newPacketFromTag(parsed.tag, allowedPackets);\n              // Unknown packets throw in the call above, we ignore them\n              // in the grammar checker.\n              try {\n                grammarValidator?.recordPacket(parsed.tag, additionalAllowedPackets);\n              } catch (e) {\n                if (config.enforceGrammar) {\n                  throw e;\n                } else {\n                  util.printDebugError(e);\n                }\n              }\n              packet.packets = new PacketList();\n              packet.fromStream = util.isStream(parsed.packet);\n              wasStream = packet.fromStream;\n              try {\n                await packet.read(parsed.packet, config);\n              } catch (e) {\n                if (!(e instanceof UnsupportedError)) {\n                  throw util.wrapError(new MalformedPacketError(`Parsing ${packet.constructor.name} failed`), e);\n                }\n                throw e;\n              }\n              await writer.write(packet);\n            } catch (e) {\n              // If an implementation encounters a critical packet where the packet type is unknown in a packet sequence,\n              // it MUST reject the whole packet sequence. On the other hand, an unknown non-critical packet MUST be ignored.\n              // Packet Tags from 0 to 39 are critical. Packet Tags from 40 to 63 are non-critical.\n              const throwUnknownPacketError =\n                e instanceof UnknownPacketError &&\n                parsed.tag <= 39;\n              // In case of unsupported packet versions/algorithms/etc, we ignore the error by default\n              // (unless the packet is a data packet, see below).\n              const throwUnsupportedError =\n                e instanceof UnsupportedError &&\n                !(e instanceof UnknownPacketError) &&\n                !config.ignoreUnsupportedPackets;\n              // In case of packet parsing errors, e.name was set to 'MalformedPacketError' above.\n              // By default, we throw for these errors.\n              const throwMalformedPacketError =\n                e instanceof MalformedPacketError &&\n                !config.ignoreMalformedPackets;\n              // The packets that support streaming are the ones that contain message data.\n              // Those are also the ones we want to be more strict about and throw on all errors\n              // (since we likely cannot process the message without these packets anyway).\n              const throwDataPacketError = supportsStreaming(parsed.tag);\n              // Throw all other errors, including `GrammarError`s, disallowed packet errors, and unexpected errors.\n              const throwOtherError = !(\n                e instanceof UnknownPacketError ||\n                e instanceof UnsupportedError ||\n                e instanceof MalformedPacketError\n              );\n              if (\n                throwUnknownPacketError ||\n                throwUnsupportedError ||\n                throwMalformedPacketError ||\n                throwDataPacketError ||\n                throwOtherError\n              ) {\n                if (delayErrors) {\n                  unauthenticatedError = e;\n                } else {\n                  await writer.abort(e);\n                }\n              } else {\n                const unparsedPacket = new UnparseablePacket(parsed.tag, parsed.packet);\n                await writer.write(unparsedPacket);\n              }\n              util.printDebugError(e);\n            }\n          });\n          if (wasStream) {\n            // Don't allow more than one streaming packet, as read errors\n            // may get lost in the second packet's data stream.\n            useStreamType = null;\n          }\n\n          // If there was a parse error, read the entire input first\n          // in case there's an MDC error, which should take precedence.\n          if (unauthenticatedError) {\n            await reader.readToEnd();\n            // eslint-disable-next-line @typescript-eslint/no-throw-literal\n            throw unauthenticatedError;\n          }\n\n          // We peek to check whether this was the last packet.\n          // We peek 2 bytes instead of 1 because `readPacket` also\n          // peeks 2 bytes, and we want to cut a `subarray` of the\n          // correct length into `web-stream-tools`' `externalBuffer`\n          // as a tiny optimization here.\n          const nextPacket = await reader.peekBytes(2);\n          const done = !nextPacket || !nextPacket.length;\n          if (done) {\n            // Here we are past the MDC check for SEIPDv1 data, hence\n            // the data is always authenticated at this point.\n            try {\n              grammarValidator?.recordEnd();\n            } catch (e) {\n              if (config.enforceGrammar) {\n                throw e;\n              } else {\n                util.printDebugError(e);\n              }\n            }\n            await writer.ready;\n            await writer.close();\n            return;\n          }\n        }\n      } catch (e) {\n        await writer.abort(e);\n      }\n    });\n\n    // Wait until first few packets have been read\n    const reader = streamGetReader(this.stream);\n    while (true) {\n      const { done, value } = await reader.read();\n      if (!done) {\n        this.push(value);\n      } else {\n        this.stream = null;\n      }\n      if (done || supportsStreaming(value.constructor.tag)) {\n        break;\n      }\n    }\n    reader.releaseLock();\n  }\n\n  /**\n   * Creates a binary representation of openpgp objects contained within the\n   * class instance.\n   * @returns {Uint8Array} A Uint8Array containing valid openpgp packets.\n   */\n  write() {\n    const arr = [];\n\n    for (let i = 0; i < this.length; i++) {\n      const tag = this[i] instanceof UnparseablePacket ? this[i].tag : this[i].constructor.tag;\n      const packetbytes = this[i].write();\n      if (util.isStream(packetbytes) && supportsStreaming(this[i].constructor.tag)) {\n        let buffer = [];\n        let bufferLength = 0;\n        const minLength = 512;\n        arr.push(writeTag(tag));\n        arr.push(streamTransform(packetbytes, value => {\n          buffer.push(value);\n          bufferLength += value.length;\n          if (bufferLength >= minLength) {\n            const powerOf2 = Math.min(Math.log(bufferLength) / Math.LN2 | 0, 30);\n            const chunkSize = 2 ** powerOf2;\n            const bufferConcat = util.concat([writePartialLength(powerOf2)].concat(buffer));\n            buffer = [bufferConcat.subarray(1 + chunkSize)];\n            bufferLength = buffer[0].length;\n            return bufferConcat.subarray(0, 1 + chunkSize);\n          }\n        }, () => util.concat([writeSimpleLength(bufferLength)].concat(buffer))));\n      } else {\n        if (util.isStream(packetbytes)) {\n          let length = 0;\n          arr.push(streamTransform(streamClone(packetbytes), value => {\n            length += value.length;\n          }, () => writeHeader(tag, length)));\n        } else {\n          arr.push(writeHeader(tag, packetbytes.length));\n        }\n        arr.push(packetbytes);\n      }\n    }\n\n    return util.concat(arr);\n  }\n\n  /**\n   * Creates a new PacketList with all packets matching the given tag(s)\n   * @param {...module:enums.packet} tags - packet tags to look for\n   * @returns {PacketList}\n   */\n  filterByTag(...tags) {\n    const filtered = new PacketList();\n\n    const handle = tag => packetType => tag === packetType;\n\n    for (let i = 0; i < this.length; i++) {\n      if (tags.some(handle(this[i].constructor.tag))) {\n        filtered.push(this[i]);\n      }\n    }\n\n    return filtered;\n  }\n\n  /**\n   * Traverses packet list and returns first packet with matching tag\n   * @param {module:enums.packet} tag - The packet tag\n   * @returns {Packet|undefined}\n   */\n  findPacket(tag) {\n    return this.find(packet => packet.constructor.tag === tag);\n  }\n\n  /**\n   * Find indices of packets with the given tag(s)\n   * @param {...module:enums.packet} tags - packet tags to look for\n   * @returns {Integer[]} packet indices\n   */\n  indexOfTag(...tags) {\n    const tagIndex = [];\n    const that = this;\n\n    const handle = tag => packetType => tag === packetType;\n\n    for (let i = 0; i < this.length; i++) {\n      if (tags.some(handle(that[i].constructor.tag))) {\n        tagIndex.push(i);\n      }\n    }\n    return tagIndex;\n  }\n}\n\nexport default PacketList;\n","import enums from '../enums';\n\nexport class GrammarError extends Error {\n  constructor(...params: any[]) {\n    super(...params);\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GrammarError);\n    }\n\n    this.name = 'GrammarError';\n  }\n}\n\nenum MessageType {\n  EmptyMessage, // incl. empty signed message\n  PlaintextOrEncryptedData,\n  EncryptedSessionKeys,\n  StandaloneAdditionalAllowedData\n}\n\n/**\n * Implement OpenPGP message grammar based on: https://www.rfc-editor.org/rfc/rfc9580.html#section-10.3 .\n * It is slightly more lenient as it also allows standalone ESK sequences, as well as empty (signed) messages.\n * This latter case is needed to allow unknown packets.\n * A new `MessageGrammarValidator` instance must be created for each packet sequence, as the instance is stateful:\n * - `recordPacket` must be called for each packet in the sequence; the function will throw as soon as\n *  an invalid packet is detected.\n * - `recordEnd` must be called at the end of the packet sequence to confirm its validity.\n */\nexport class MessageGrammarValidator {\n  // PDA validator inspired by https://blog.jabberhead.tk/2022/10/26/implementing-packet-sequence-validation-using-pushdown-automata/ .\n  private state: MessageType = MessageType.EmptyMessage;\n  private leadingOnePassSignatureCounter: number = 0;\n\n  /**\n   * Determine validity of the next packet in the sequence.\n   * NB: padding, marker and unknown packets are expected to already be filtered out on parsing,\n   * and are not accepted by `recordPacket`.\n   * @param packet - packet to validate\n   * @param additionalAllowedPackets - object containing packets which are allowed anywhere in the sequence, except they cannot precede a OPS packet\n   * @throws {GrammarError} on invalid `packet` input\n   */\n  recordPacket(packet: enums.packet, additionalAllowedPackets?: { [key in enums.packet]: any }) {\n    switch (this.state) {\n      case MessageType.EmptyMessage:\n      case MessageType.StandaloneAdditionalAllowedData:\n        switch (packet) {\n          case enums.packet.literalData:\n          case enums.packet.compressedData:\n          case enums.packet.aeadEncryptedData:\n          case enums.packet.symEncryptedIntegrityProtectedData:\n          case enums.packet.symmetricallyEncryptedData:\n            this.state = MessageType.PlaintextOrEncryptedData;\n            return;\n          case enums.packet.signature:\n            // Signature | <AdditionalAllowedPacketsOnly> and\n            // OPS | Signature | <AdditionalAllowedPacketsOnly> | Signature and\n            // OPS | <AdditionalAllowedPacketsOnly> | Signature are allowed\n            if (this.state === MessageType.StandaloneAdditionalAllowedData) {\n              if (--this.leadingOnePassSignatureCounter < 0) {\n                throw new GrammarError('Trailing signature packet without OPS');\n              }\n            }\n            // this.state remains EmptyMessage or StandaloneAdditionalAllowedData\n            return;\n          case enums.packet.onePassSignature:\n            if (this.state === MessageType.StandaloneAdditionalAllowedData) {\n              // we do not allow this case, for simplicity\n              throw new GrammarError('OPS following StandaloneAdditionalAllowedData');\n            }\n            this.leadingOnePassSignatureCounter++;\n            // this.state remains EmptyMessage\n            return;\n          case enums.packet.publicKeyEncryptedSessionKey:\n          case enums.packet.symEncryptedSessionKey:\n            this.state = MessageType.EncryptedSessionKeys;\n            return;\n          default:\n            if (!additionalAllowedPackets?.[packet]) {\n              throw new GrammarError(`Unexpected packet ${packet} in state ${this.state}`);\n            }\n            this.state = MessageType.StandaloneAdditionalAllowedData;\n            return;\n        }\n      case MessageType.PlaintextOrEncryptedData:\n        switch (packet) {\n          case enums.packet.signature:\n            if (--this.leadingOnePassSignatureCounter < 0) {\n              throw new GrammarError('Trailing signature packet without OPS');\n            }\n            this.state = MessageType.PlaintextOrEncryptedData;\n            return;\n          default:\n            if (!additionalAllowedPackets?.[packet]) {\n              throw new GrammarError(`Unexpected packet ${packet} in state ${this.state}`);\n            }\n            this.state = MessageType.PlaintextOrEncryptedData;\n            return;\n        }\n      case MessageType.EncryptedSessionKeys:\n        switch (packet) {\n          case enums.packet.publicKeyEncryptedSessionKey:\n          case enums.packet.symEncryptedSessionKey:\n            this.state = MessageType.EncryptedSessionKeys;\n            return;\n          case enums.packet.symEncryptedIntegrityProtectedData:\n          case enums.packet.aeadEncryptedData:\n          case enums.packet.symmetricallyEncryptedData:\n            this.state = MessageType.PlaintextOrEncryptedData;\n            return;\n          case enums.packet.signature:\n            if (--this.leadingOnePassSignatureCounter < 0) {\n              throw new GrammarError('Trailing signature packet without OPS');\n            }\n            this.state = MessageType.PlaintextOrEncryptedData;\n            return;\n          default:\n            if (!additionalAllowedPackets?.[packet]) {\n              throw new GrammarError(`Unexpected packet ${packet} in state ${this.state}`);\n            }\n            this.state = MessageType.EncryptedSessionKeys;\n        }\n    }\n  }\n\n  /**\n   * Signal end of the packet sequence for final validity check\n   * @throws {GrammarError} on invalid sequence\n   */\n  recordEnd() {\n    switch (this.state) {\n      case MessageType.EmptyMessage: // needs to be allowed for PacketLists that only include unknown packets\n      case MessageType.PlaintextOrEncryptedData:\n      case MessageType.EncryptedSessionKeys:\n      case MessageType.StandaloneAdditionalAllowedData:\n        if (this.leadingOnePassSignatureCounter > 0) {\n          throw new GrammarError('Missing trailing signature packets');\n        }\n    }\n  }\n}\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport { Inflate, Deflate, Zlib, Unzlib } from 'fflate';\nimport { isArrayStream, fromAsync as streamFromAsync, parse as streamParse, readToEnd as streamReadToEnd } from '@openpgp/web-stream-tools';\nimport enums from '../enums';\nimport util from '../util';\nimport defaultConfig from '../config';\n\nimport LiteralDataPacket from './literal_data';\nimport OnePassSignaturePacket from './one_pass_signature';\nimport SignaturePacket from './signature';\nimport PacketList from './packetlist';\nimport { MessageGrammarValidator } from './grammar';\n\n// A Compressed Data packet can contain the following packet types\nconst allowedPackets = /*#__PURE__*/ util.constructAllowedPackets([\n  LiteralDataPacket,\n  OnePassSignaturePacket,\n  SignaturePacket\n]);\n\n/**\n * Implementation of the Compressed Data Packet (Tag 8)\n *\n * {@link https://tools.ietf.org/html/rfc4880#section-5.6|RFC4880 5.6}:\n * The Compressed Data packet contains compressed data.  Typically,\n * this packet is found as the contents of an encrypted packet, or following\n * a Signature or One-Pass Signature packet, and contains a literal data packet.\n */\nclass CompressedDataPacket {\n  static get tag() {\n    return enums.packet.compressedData;\n  }\n\n  /**\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   */\n  constructor(config = defaultConfig) {\n    /**\n     * List of packets\n     * @type {PacketList}\n     */\n    this.packets = null;\n    /**\n     * Compression algorithm\n     * @type {enums.compression}\n     */\n    this.algorithm = config.preferredCompressionAlgorithm;\n\n    /**\n     * Compressed packet data\n     * @type {Uint8Array | ReadableStream<Uint8Array>}\n     */\n    this.compressed = null;\n  }\n\n  /**\n   * Parsing function for the packet.\n   * @param {Uint8Array | ReadableStream<Uint8Array>} bytes - Payload of a tag 8 packet\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   */\n  async read(bytes, config = defaultConfig) {\n    await streamParse(bytes, async reader => {\n\n      // One octet that gives the algorithm used to compress the packet.\n      this.algorithm = await reader.readByte();\n\n      // Compressed data, which makes up the remainder of the packet.\n      this.compressed = reader.remainder();\n\n      await this.decompress(config);\n    });\n  }\n\n\n  /**\n   * Return the compressed packet.\n   * @returns {Uint8Array | ReadableStream<Uint8Array>} Binary compressed packet.\n   */\n  write() {\n    if (this.compressed === null) {\n      this.compress();\n    }\n\n    return util.concat([new Uint8Array([this.algorithm]), this.compressed]);\n  }\n\n\n  /**\n   * Decompression method for decompressing the compressed data\n   * read by read_packet\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   */\n  async decompress(config = defaultConfig) {\n    const compressionName = enums.read(enums.compression, this.algorithm);\n    const decompressionFn = decompress_fns[compressionName]; // bzip decompression is async\n    if (!decompressionFn) {\n      throw new Error(`${compressionName} decompression not supported`);\n    }\n\n    // Decompressing a Compressed Data packet MUST also yield a valid OpenPGP Message\n    this.packets = await PacketList.fromBinary(await decompressionFn(this.compressed), allowedPackets, config, new MessageGrammarValidator());\n  }\n\n  /**\n   * Compress the packet data (member decompressedData)\n   */\n  compress() {\n    const compressionName = enums.read(enums.compression, this.algorithm);\n    const compressionFn = compress_fns[compressionName];\n    if (!compressionFn) {\n      throw new Error(`${compressionName} compression not supported`);\n    }\n\n    this.compressed = compressionFn(this.packets.write());\n  }\n}\n\nexport default CompressedDataPacket;\n\n//////////////////////////\n//                      //\n//   Helper functions   //\n//                      //\n//////////////////////////\n\n/**\n * Zlib processor relying on Compression Stream API if available, or falling back to fflate otherwise.\n * @param {function(): CompressionStream|function(): DecompressionStream} compressionStreamInstantiator\n * @param {FunctionConstructor} ZlibStreamedConstructor - fflate constructor\n * @returns {ReadableStream<Uint8Array>} compressed or decompressed data\n */\nfunction zlib(compressionStreamInstantiator, ZlibStreamedConstructor) {\n  return data => {\n    if (!util.isStream(data) || isArrayStream(data)) {\n      return streamFromAsync(() => streamReadToEnd(data).then(inputData => {\n        return new Promise((resolve, reject) => {\n          const zlibStream = new ZlibStreamedConstructor();\n          zlibStream.ondata = processedData => {\n            resolve(processedData);\n          };\n          try {\n            zlibStream.push(inputData, true); // only one chunk to push\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }));\n    }\n\n    // Use Compression Streams API if available (see https://developer.mozilla.org/en-US/docs/Web/API/Compression_Streams_API)\n    if (compressionStreamInstantiator) {\n      try {\n        const compressorOrDecompressor = compressionStreamInstantiator();\n        return data.pipeThrough(compressorOrDecompressor);\n      } catch (err) {\n        // If format is unsupported in Compression/DecompressionStream, then a TypeError in thrown, and we fallback to fflate.\n        if (err.name !== 'TypeError') {\n          throw err;\n        }\n      }\n    }\n\n    // JS fallback\n    const inputReader = data.getReader();\n    const zlibStream = new ZlibStreamedConstructor();\n\n    return new ReadableStream({\n      async start(controller) {\n        zlibStream.ondata = async (value, isLast) => {\n          controller.enqueue(value);\n          if (isLast) {\n            controller.close();\n          }\n        };\n\n        while (true) {\n          const { done, value } = await inputReader.read();\n          if (done) {\n            zlibStream.push(new Uint8Array(), true);\n            return;\n          } else if (value.length) {\n            zlibStream.push(value);\n          }\n        }\n      }\n    });\n  };\n}\n\nfunction bzip2Decompress() {\n  return async function(data) {\n    const { decode: bunzipDecode } = await import('@openpgp/seek-bzip');\n    return streamFromAsync(async () => bunzipDecode(await streamReadToEnd(data)));\n  };\n}\n\n/**\n * Get Compression Stream API instatiators if the constructors are implemented.\n * NB: the return instatiator functions will throw when called if the provided `compressionFormat` is not supported\n * (supported formats cannot be determined in advance).\n * @param {'deflate-raw'|'deflate'|'gzip'|string} compressionFormat\n * @returns {{ compressor: function(): CompressionStream | false, decompressor: function(): DecompressionStream | false }}\n */\nconst getCompressionStreamInstantiators = compressionFormat => ({\n  compressor: typeof CompressionStream !== 'undefined' && (() => new CompressionStream(compressionFormat)),\n  decompressor: typeof DecompressionStream !== 'undefined' && (() => new DecompressionStream(compressionFormat))\n});\n\nconst compress_fns = {\n  zip: /*#__PURE__*/ zlib(getCompressionStreamInstantiators('deflate-raw').compressor, Deflate),\n  zlib: /*#__PURE__*/ zlib(getCompressionStreamInstantiators('deflate').compressor, Zlib)\n};\n\nconst decompress_fns = {\n  uncompressed: data => data,\n  zip: /*#__PURE__*/ zlib(getCompressionStreamInstantiators('deflate-raw').decompressor, Inflate),\n  zlib: /*#__PURE__*/ zlib(getCompressionStreamInstantiators('deflate').decompressor, Unzlib),\n  bzip2: /*#__PURE__*/ bzip2Decompress() // NB: async due to dynamic lib import\n};\n\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport { slice as streamSlice, passiveClone as streamPassiveClone, readToEnd as streamReadToEnd, concat as streamConcat, fromAsync as streamFromAsync, getReader as streamGetReader, getWriter as streamGetWriter, clone as streamClone, pipe as streamPipe, transformPair as streamTransformPair, isArrayStream, parse as streamParse } from '@openpgp/web-stream-tools';\nimport { cipherMode, getRandomBytes, getCipherParams, computeDigest } from '../crypto';\nimport computeHKDF from '../crypto/hkdf';\nimport enums from '../enums';\nimport util from '../util';\nimport defaultConfig from '../config';\n\nimport LiteralDataPacket from './literal_data';\nimport CompressedDataPacket from './compressed_data';\nimport OnePassSignaturePacket from './one_pass_signature';\nimport SignaturePacket from './signature';\nimport PacketList from './packetlist';\nimport { UnsupportedError } from './packet';\nimport { MessageGrammarValidator } from './grammar';\n\n// A SEIP packet can contain the following packet types\nconst allowedPackets = /*#__PURE__*/ util.constructAllowedPackets([\n  LiteralDataPacket,\n  CompressedDataPacket,\n  OnePassSignaturePacket,\n  SignaturePacket\n]);\n\n/**\n * Implementation of the Sym. Encrypted Integrity Protected Data Packet (Tag 18)\n *\n * {@link https://tools.ietf.org/html/rfc4880#section-5.13|RFC4880 5.13}:\n * The Symmetrically Encrypted Integrity Protected Data packet is\n * a variant of the Symmetrically Encrypted Data packet. It is a new feature\n * created for OpenPGP that addresses the problem of detecting a modification to\n * encrypted data. It is used in combination with a Modification Detection Code\n * packet.\n */\nclass SymEncryptedIntegrityProtectedDataPacket {\n  static get tag() {\n    return enums.packet.symEncryptedIntegrityProtectedData;\n  }\n\n  static fromObject({ version, aeadAlgorithm }) {\n    if (version !== 1 && version !== 2) {\n      throw new Error('Unsupported SEIPD version');\n    }\n\n    const seip = new SymEncryptedIntegrityProtectedDataPacket();\n    seip.version = version;\n    if (version === 2) {\n      seip.aeadAlgorithm = aeadAlgorithm;\n    }\n\n    return seip;\n  }\n\n  constructor() {\n    this.version = null;\n\n    // The following 4 fields are for V2 only.\n    /** @type {enums.symmetric} */\n    this.cipherAlgorithm = null;\n    /** @type {enums.aead} */\n    this.aeadAlgorithm = null;\n    this.chunkSizeByte = null;\n    this.salt = null;\n\n    this.encrypted = null;\n    this.packets = null;\n  }\n\n  async read(bytes) {\n    await streamParse(bytes, async reader => {\n      this.version = await reader.readByte();\n      // - A one-octet version number with value 1 or 2.\n      if (this.version !== 1 && this.version !== 2) {\n        throw new UnsupportedError(`Version ${this.version} of the SEIP packet is unsupported.`);\n      }\n\n      if (this.version === 2) {\n        // - A one-octet cipher algorithm.\n        this.cipherAlgorithm = await reader.readByte();\n        // - A one-octet AEAD algorithm.\n        this.aeadAlgorithm = await reader.readByte();\n        // - A one-octet chunk size.\n        this.chunkSizeByte = await reader.readByte();\n        // - Thirty-two octets of salt. The salt is used to derive the message key and must be unique.\n        this.salt = await reader.readBytes(32);\n      }\n\n      // For V1:\n      // - Encrypted data, the output of the selected symmetric-key cipher\n      //   operating in Cipher Feedback mode with shift amount equal to the\n      //   block size of the cipher (CFB-n where n is the block size).\n      // For V2:\n      // - Encrypted data, the output of the selected symmetric-key cipher operating in the given AEAD mode.\n      // - A final, summary authentication tag for the AEAD mode.\n      this.encrypted = reader.remainder();\n    });\n  }\n\n  write() {\n    if (this.version === 2) {\n      return util.concat([new Uint8Array([this.version, this.cipherAlgorithm, this.aeadAlgorithm, this.chunkSizeByte]), this.salt, this.encrypted]);\n    }\n    return util.concat([new Uint8Array([this.version]), this.encrypted]);\n  }\n\n  /**\n   * Encrypt the payload in the packet.\n   * @param {enums.symmetric} sessionKeyAlgorithm - The symmetric encryption algorithm to use\n   * @param {Uint8Array} key - The key of cipher blocksize length to be used\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<Boolean>}\n   * @throws {Error} on encryption failure\n   * @async\n   */\n  async encrypt(sessionKeyAlgorithm, key, config = defaultConfig) {\n    // We check that the session key size matches the one expected by the symmetric algorithm.\n    // This is especially important for SEIPDv2 session keys, as a key derivation step is run where the resulting key will always match the expected cipher size,\n    // but we want to ensure that the input key isn't e.g. too short.\n    // The check is done here, instead of on encrypted session key (ESK) encryption, because v6 ESK packets do not store the session key algorithm,\n    // which is instead included in the SEIPDv2 data.\n    const { blockSize, keySize } = getCipherParams(sessionKeyAlgorithm);\n    if (key.length !== keySize) {\n      throw new Error('Unexpected session key size');\n    }\n\n    let bytes = this.packets.write();\n    if (isArrayStream(bytes)) bytes = await streamReadToEnd(bytes);\n\n    if (this.version === 2) {\n      this.cipherAlgorithm = sessionKeyAlgorithm;\n\n      this.salt = getRandomBytes(32);\n      this.chunkSizeByte = config.aeadChunkSizeByte;\n      this.encrypted = await runAEAD(this, 'encrypt', key, bytes);\n    } else {\n      const prefix = await cipherMode.cfb.getPrefixRandom(sessionKeyAlgorithm);\n      const mdc = new Uint8Array([0xD3, 0x14]); // modification detection code packet\n\n      const tohash = util.concat([prefix, bytes, mdc]);\n      const hash = await computeDigest(enums.hash.sha1, streamPassiveClone(tohash));\n      const plaintext = util.concat([tohash, hash]);\n\n      this.encrypted = await cipherMode.cfb.encrypt(sessionKeyAlgorithm, key, plaintext, new Uint8Array(blockSize), config);\n    }\n    return true;\n  }\n\n  /**\n   * Decrypts the encrypted data contained in the packet.\n   * @param {enums.symmetric} sessionKeyAlgorithm - The selected symmetric encryption algorithm to be used\n   * @param {Uint8Array} key - The key of cipher blocksize length to be used\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<Boolean>}\n   * @throws {Error} on decryption failure\n   * @async\n   */\n  async decrypt(sessionKeyAlgorithm, key, config = defaultConfig) {\n    // We check that the session key size matches the one expected by the symmetric algorithm.\n    // This is especially important for SEIPDv2 session keys, as a key derivation step is run where the resulting key will always match the expected cipher size,\n    // but we want to ensure that the input key isn't e.g. too short.\n    // The check is done here, instead of on encrypted session key (ESK) decryption, because v6 ESK packets do not store the session key algorithm,\n    // which is instead included in the SEIPDv2 data.\n    if (key.length !== getCipherParams(sessionKeyAlgorithm).keySize) {\n      throw new Error('Unexpected session key size');\n    }\n\n    let encrypted = streamClone(this.encrypted);\n    if (isArrayStream(encrypted)) encrypted = await streamReadToEnd(encrypted);\n\n    let packetbytes;\n    let delayErrors = false;\n    if (this.version === 2) {\n      if (this.cipherAlgorithm !== sessionKeyAlgorithm) {\n        // sanity check\n        throw new Error('Unexpected session key algorithm');\n      }\n      packetbytes = await runAEAD(this, 'decrypt', key, encrypted);\n    } else {\n      const { blockSize } = getCipherParams(sessionKeyAlgorithm);\n      const decrypted = await cipherMode.cfb.decrypt(sessionKeyAlgorithm, key, encrypted, new Uint8Array(blockSize));\n\n      // there must be a modification detection code packet as the\n      // last packet and everything gets hashed except the hash itself\n      const realHash = streamSlice(streamPassiveClone(decrypted), -20);\n      const tohash = streamSlice(decrypted, 0, -20);\n      const verifyHash = Promise.all([\n        streamReadToEnd(await computeDigest(enums.hash.sha1, streamPassiveClone(tohash))),\n        streamReadToEnd(realHash)\n      ]).then(([hash, mdc]) => {\n        if (!util.equalsUint8Array(hash, mdc)) {\n          throw new Error('Modification detected.');\n        }\n        // this last chunk comes at the end of the stream passed to Packetlist.read's streamTransformPair,\n        // which can thus be 'done' only after the MDC has been checked.\n        return new Uint8Array();\n      });\n      const bytes = streamSlice(tohash, blockSize + 2); // Remove random prefix\n      packetbytes = streamSlice(bytes, 0, -2); // Remove MDC packet\n      packetbytes = streamConcat([packetbytes, streamFromAsync(() => verifyHash)]);\n      if (util.isStream(encrypted) && config.allowUnauthenticatedStream) {\n        delayErrors = true;\n      } else {\n        packetbytes = await streamReadToEnd(packetbytes);\n      }\n    }\n\n    // - Decrypting a version 1 Symmetrically Encrypted and Integrity Protected Data packet\n    // MUST yield a valid OpenPGP Message.\n    // - Decrypting a version 2 Symmetrically Encrypted and Integrity Protected Data packet\n    // MUST yield a valid Optionally Padded Message.\n    this.packets = await PacketList.fromBinary(packetbytes, allowedPackets, config, new MessageGrammarValidator(), delayErrors);\n    return true;\n  }\n}\n\nexport default SymEncryptedIntegrityProtectedDataPacket;\n\n/**\n * En/decrypt the payload.\n * @param {encrypt|decrypt} fn - Whether to encrypt or decrypt\n * @param {Uint8Array} key - The session key used to en/decrypt the payload\n * @param {Uint8Array | ReadableStream<Uint8Array>} data - The data to en/decrypt\n * @returns {Promise<Uint8Array | ReadableStream<Uint8Array>>}\n * @async\n */\nexport async function runAEAD(packet, fn, key, data) {\n  const isSEIPDv2 = packet instanceof SymEncryptedIntegrityProtectedDataPacket && packet.version === 2;\n  const isAEADP = !isSEIPDv2 && packet.constructor.tag === enums.packet.aeadEncryptedData; // no `instanceof` to avoid importing the corresponding class (circular import)\n  if (!isSEIPDv2 && !isAEADP) throw new Error('Unexpected packet type');\n\n  // we allow `experimentalGCM` for AEADP for backwards compatibility, since v5 keys from OpenPGP.js v5 might be declaring\n  // that preference, as the `gcm` ID had not been standardized at the time.\n  // NB: AEADP are never automatically generate as part of message encryption by OpenPGP.js, the packet must be manually created.\n  const mode = cipherMode.getAEADMode(packet.aeadAlgorithm, isAEADP);\n  const tagLengthIfDecrypting = fn === 'decrypt' ? mode.tagLength : 0;\n  const tagLengthIfEncrypting = fn === 'encrypt' ? mode.tagLength : 0;\n  const chunkSize = 2 ** (packet.chunkSizeByte + 6) + tagLengthIfDecrypting; // ((uint64_t)1 << (c + 6))\n  const chunkIndexSizeIfAEADEP = isAEADP ? 8 : 0;\n  const adataBuffer = new ArrayBuffer(13 + chunkIndexSizeIfAEADEP);\n  const adataArray = new Uint8Array(adataBuffer, 0, 5 + chunkIndexSizeIfAEADEP);\n  const adataTagArray = new Uint8Array(adataBuffer);\n  const adataView = new DataView(adataBuffer);\n  const chunkIndexArray = new Uint8Array(adataBuffer, 5, 8);\n  adataArray.set([0xC0 | packet.constructor.tag, packet.version, packet.cipherAlgorithm, packet.aeadAlgorithm, packet.chunkSizeByte], 0);\n  let chunkIndex = 0;\n  let latestPromise = Promise.resolve();\n  let cryptedBytes = 0;\n  let queuedBytes = 0;\n  let iv;\n  let ivView;\n  if (isSEIPDv2) {\n    const { keySize } = getCipherParams(packet.cipherAlgorithm);\n    const { ivLength } = mode;\n    const info = new Uint8Array(adataBuffer, 0, 5);\n    const derived = await computeHKDF(enums.hash.sha256, key, packet.salt, info, keySize + ivLength);\n    key = derived.subarray(0, keySize);\n    iv = derived.subarray(keySize); // The last 8 bytes of HKDF output are unneeded, but this avoids one copy.\n    iv.fill(0, iv.length - 8);\n    ivView = new DataView(iv.buffer, iv.byteOffset, iv.byteLength);\n  } else { // AEADEncryptedDataPacket\n    iv = packet.iv;\n    // ivView is unused in this case\n  }\n  const modeInstance = await mode(packet.cipherAlgorithm, key);\n  return streamTransformPair(data, async (readable, writable) => {\n    if (util.isStream(readable) !== 'array') {\n      const buffer = new TransformStream({}, {\n        highWaterMark: util.getHardwareConcurrency() * 2 ** (packet.chunkSizeByte + 6),\n        size: array => array.length\n      });\n      streamPipe(buffer.readable, writable);\n      writable = buffer.writable;\n    }\n    const reader = streamGetReader(readable);\n    const writer = streamGetWriter(writable);\n    try {\n      while (true) {\n        let chunk = await reader.readBytes(chunkSize + tagLengthIfDecrypting) || new Uint8Array();\n        const finalChunk = chunk.subarray(chunk.length - tagLengthIfDecrypting);\n        chunk = chunk.subarray(0, chunk.length - tagLengthIfDecrypting);\n        let cryptedPromise;\n        let done;\n        let nonce;\n        if (isSEIPDv2) { // SEIPD V2\n          nonce = iv;\n        } else { // AEADEncryptedDataPacket\n          nonce = iv.slice();\n          for (let i = 0; i < 8; i++) {\n            nonce[iv.length - 8 + i] ^= chunkIndexArray[i];\n          }\n        }\n        if (!chunkIndex || chunk.length) {\n          reader.unshift(finalChunk);\n          cryptedPromise = modeInstance[fn](chunk, nonce, adataArray);\n          cryptedPromise.catch(() => {});\n          queuedBytes += chunk.length - tagLengthIfDecrypting + tagLengthIfEncrypting;\n        } else {\n          // After the last chunk, we either encrypt a final, empty\n          // data chunk to get the final authentication tag or\n          // validate that final authentication tag.\n          adataView.setInt32(5 + chunkIndexSizeIfAEADEP + 4, cryptedBytes); // Should be setInt64(5 + chunkIndexSizeIfAEADEP, ...)\n          cryptedPromise = modeInstance[fn](finalChunk, nonce, adataTagArray);\n          cryptedPromise.catch(() => {});\n          queuedBytes += tagLengthIfEncrypting;\n          done = true;\n        }\n        cryptedBytes += chunk.length - tagLengthIfDecrypting;\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        latestPromise = latestPromise.then(() => cryptedPromise).then(async crypted => {\n          await writer.ready;\n          await writer.write(crypted);\n          queuedBytes -= crypted.length;\n        }).catch(err => writer.abort(err));\n        if (done || queuedBytes > writer.desiredSize) {\n          await latestPromise; // Respect backpressure\n        }\n        if (!done) {\n          if (isSEIPDv2) { // SEIPD V2\n            ivView.setInt32(iv.length - 4, ++chunkIndex); // Should be setInt64(iv.length - 8, ...)\n          } else { // AEADEncryptedDataPacket\n            adataView.setInt32(5 + 4, ++chunkIndex); // Should be setInt64(5, ...)\n          }\n        } else {\n          await writer.close();\n          break;\n        }\n      }\n    } catch (e) {\n      await writer.ready.catch(() => {});\n      await writer.abort(e);\n    }\n  });\n}\n","// OpenPGP.js - An OpenPGP implementation in javascript\n// Copyright (C) 2016 Tankred Hase\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport { clone as streamClone, parse as streamParse } from '@openpgp/web-stream-tools';\nimport { cipherMode, getRandomBytes } from '../crypto';\nimport enums from '../enums';\nimport util from '../util';\nimport defaultConfig from '../config';\nimport { UnsupportedError } from './packet';\nimport { runAEAD } from './sym_encrypted_integrity_protected_data';\n\nimport LiteralDataPacket from './literal_data';\nimport CompressedDataPacket from './compressed_data';\nimport OnePassSignaturePacket from './one_pass_signature';\nimport SignaturePacket from './signature';\nimport PacketList from './packetlist';\nimport { MessageGrammarValidator } from './grammar';\n\n// An AEAD-encrypted Data packet can contain the following packet types\nconst allowedPackets = /*#__PURE__*/ util.constructAllowedPackets([\n  LiteralDataPacket,\n  CompressedDataPacket,\n  OnePassSignaturePacket,\n  SignaturePacket\n]);\n\nconst VERSION = 1; // A one-octet version number of the data packet.\n\n/**\n * Implementation of the Symmetrically Encrypted Authenticated Encryption with\n * Additional Data (AEAD) Protected Data Packet\n *\n * {@link https://tools.ietf.org/html/draft-ford-openpgp-format-00#section-2.1}:\n * AEAD Protected Data Packet\n */\nclass AEADEncryptedDataPacket {\n  static get tag() {\n    return enums.packet.aeadEncryptedData;\n  }\n\n  constructor() {\n    this.version = VERSION;\n    /** @type {enums.symmetric} */\n    this.cipherAlgorithm = null;\n    /** @type {enums.aead} */\n    this.aeadAlgorithm = enums.aead.eax;\n    this.chunkSizeByte = null;\n    this.iv = null;\n    this.encrypted = null;\n    this.packets = null;\n  }\n\n  /**\n   * Parse an encrypted payload of bytes in the order: version, IV, ciphertext (see specification)\n   * @param {Uint8Array | ReadableStream<Uint8Array>} bytes\n   * @throws {Error} on parsing failure\n   */\n  async read(bytes) {\n    await streamParse(bytes, async reader => {\n      const version = await reader.readByte();\n      if (version !== VERSION) { // The only currently defined value is 1.\n        throw new UnsupportedError(`Version ${version} of the AEAD-encrypted data packet is not supported.`);\n      }\n      this.cipherAlgorithm = await reader.readByte();\n      this.aeadAlgorithm = await reader.readByte();\n      this.chunkSizeByte = await reader.readByte();\n\n      const mode = cipherMode.getAEADMode(this.aeadAlgorithm, true);\n      this.iv = await reader.readBytes(mode.ivLength);\n      this.encrypted = reader.remainder();\n    });\n  }\n\n  /**\n   * Write the encrypted payload of bytes in the order: version, IV, ciphertext (see specification)\n   * @returns {Uint8Array | ReadableStream<Uint8Array>} The encrypted payload.\n   */\n  write() {\n    return util.concat([new Uint8Array([this.version, this.cipherAlgorithm, this.aeadAlgorithm, this.chunkSizeByte]), this.iv, this.encrypted]);\n  }\n\n  /**\n   * Decrypt the encrypted payload.\n   * @param {enums.symmetric} sessionKeyAlgorithm - The session key's cipher algorithm\n   * @param {Uint8Array} key - The session key used to encrypt the payload\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @throws {Error} if decryption was not successful\n   * @async\n   */\n  async decrypt(sessionKeyAlgorithm, key, config = defaultConfig) {\n    this.packets = await PacketList.fromBinary(\n      await runAEAD(this, 'decrypt', key, streamClone(this.encrypted)),\n      allowedPackets,\n      config,\n      new MessageGrammarValidator()\n    );\n  }\n\n  /**\n   * Encrypt the packet payload.\n   * @param {enums.symmetric} sessionKeyAlgorithm - The session key's cipher algorithm\n   * @param {Uint8Array} key - The session key used to encrypt the payload\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @throws {Error} if encryption was not successful\n   * @async\n   */\n  async encrypt(sessionKeyAlgorithm, key, config = defaultConfig) {\n    this.cipherAlgorithm = sessionKeyAlgorithm;\n\n    const { ivLength } = cipherMode.getAEADMode(this.aeadAlgorithm, true);\n    this.iv = getRandomBytes(ivLength); // generate new random IV\n    this.chunkSizeByte = config.aeadChunkSizeByte;\n    const data = this.packets.write();\n    this.encrypted = await runAEAD(this, 'encrypt', key, data);\n  }\n}\n\nexport default AEADEncryptedDataPacket;\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport KeyID from '../type/keyid';\nimport { parseEncSessionKeyParams, publicKeyEncrypt, publicKeyDecrypt, getCipherParams, serializeParams } from '../crypto';\nimport enums from '../enums';\nimport util from '../util';\nimport { UnsupportedError } from './packet';\n\n/**\n * Public-Key Encrypted Session Key Packets (Tag 1)\n *\n * {@link https://tools.ietf.org/html/rfc4880#section-5.1|RFC4880 5.1}:\n * A Public-Key Encrypted Session Key packet holds the session key\n * used to encrypt a message. Zero or more Public-Key Encrypted Session Key\n * packets and/or Symmetric-Key Encrypted Session Key packets may precede a\n * Symmetrically Encrypted Data Packet, which holds an encrypted message. The\n * message is encrypted with the session key, and the session key is itself\n * encrypted and stored in the Encrypted Session Key packet(s). The\n * Symmetrically Encrypted Data Packet is preceded by one Public-Key Encrypted\n * Session Key packet for each OpenPGP key to which the message is encrypted.\n * The recipient of the message finds a session key that is encrypted to their\n * public key, decrypts the session key, and then uses the session key to\n * decrypt the message.\n */\nclass PublicKeyEncryptedSessionKeyPacket {\n  static get tag() {\n    return enums.packet.publicKeyEncryptedSessionKey;\n  }\n\n  constructor() {\n    this.version = null;\n\n    // For version 3, but also used internally by v6 in e.g. `getEncryptionKeyIDs()`\n    this.publicKeyID = new KeyID();\n\n    // For version 6:\n    this.publicKeyVersion = null;\n    this.publicKeyFingerprint = null;\n\n    // For all versions:\n    this.publicKeyAlgorithm = null;\n\n    this.sessionKey = null;\n    /**\n     * Algorithm to encrypt the message with\n     * @type {enums.symmetric}\n     */\n    this.sessionKeyAlgorithm = null;\n\n    /** @type {Object} */\n    this.encrypted = {};\n  }\n\n  static fromObject({\n    version, encryptionKeyPacket, anonymousRecipient, sessionKey, sessionKeyAlgorithm\n  }) {\n    const pkesk = new PublicKeyEncryptedSessionKeyPacket();\n\n    if (version !== 3 && version !== 6) {\n      throw new Error('Unsupported PKESK version');\n    }\n\n    pkesk.version = version;\n\n    if (version === 6) {\n      pkesk.publicKeyVersion = anonymousRecipient ? null : encryptionKeyPacket.version;\n      pkesk.publicKeyFingerprint = anonymousRecipient ? null : encryptionKeyPacket.getFingerprintBytes();\n    }\n\n    pkesk.publicKeyID = anonymousRecipient ? KeyID.wildcard() : encryptionKeyPacket.getKeyID();\n    pkesk.publicKeyAlgorithm = encryptionKeyPacket.algorithm;\n    pkesk.sessionKey = sessionKey;\n    pkesk.sessionKeyAlgorithm = sessionKeyAlgorithm;\n\n    return pkesk;\n  }\n\n  /**\n   * Parsing function for a publickey encrypted session key packet (tag 1).\n   *\n   * @param {Uint8Array} bytes - Payload of a tag 1 packet\n   */\n  read(bytes) {\n    let offset = 0;\n    this.version = bytes[offset++];\n    if (this.version !== 3 && this.version !== 6) {\n      throw new UnsupportedError(`Version ${this.version} of the PKESK packet is unsupported.`);\n    }\n    if (this.version === 6) {\n      // A one-octet size of the following two fields:\n      // - A one octet key version number.\n      // - The fingerprint of the public key or subkey to which the session key is encrypted.\n      // The size may also be zero.\n      const versionAndFingerprintLength = bytes[offset++];\n      if (versionAndFingerprintLength) {\n        this.publicKeyVersion = bytes[offset++];\n        const fingerprintLength = versionAndFingerprintLength - 1;\n        this.publicKeyFingerprint = bytes.subarray(offset, offset + fingerprintLength); offset += fingerprintLength;\n        if (this.publicKeyVersion >= 5) {\n          // For v5/6 the Key ID is the high-order 64 bits of the fingerprint.\n          this.publicKeyID.read(this.publicKeyFingerprint);\n        } else {\n          // For v4 The Key ID is the low-order 64 bits of the fingerprint.\n          this.publicKeyID.read(this.publicKeyFingerprint.subarray(-8));\n        }\n      } else {\n        // The size may also be zero, and the key version and\n        // fingerprint omitted for an \"anonymous recipient\"\n        this.publicKeyID = KeyID.wildcard();\n      }\n    } else {\n      offset += this.publicKeyID.read(bytes.subarray(offset, offset + 8));\n    }\n    this.publicKeyAlgorithm = bytes[offset++];\n    this.encrypted = parseEncSessionKeyParams(this.publicKeyAlgorithm, bytes.subarray(offset));\n    if (this.publicKeyAlgorithm === enums.publicKey.x25519 || this.publicKeyAlgorithm === enums.publicKey.x448) {\n      if (this.version === 3) {\n        this.sessionKeyAlgorithm = enums.write(enums.symmetric, this.encrypted.C.algorithm);\n      } else if (this.encrypted.C.algorithm !== null) {\n        throw new Error('Unexpected cleartext symmetric algorithm');\n      }\n    }\n  }\n\n  /**\n   * Create a binary representation of a tag 1 packet\n   *\n   * @returns {Uint8Array} The Uint8Array representation.\n   */\n  write() {\n    const arr = [\n      new Uint8Array([this.version])\n    ];\n\n    if (this.version === 6) {\n      if (this.publicKeyFingerprint !== null) {\n        arr.push(new Uint8Array([\n          this.publicKeyFingerprint.length + 1,\n          this.publicKeyVersion]\n        ));\n        arr.push(this.publicKeyFingerprint);\n      } else {\n        arr.push(new Uint8Array([0]));\n      }\n    } else {\n      arr.push(this.publicKeyID.write());\n    }\n\n    arr.push(\n      new Uint8Array([this.publicKeyAlgorithm]),\n      serializeParams(this.publicKeyAlgorithm, this.encrypted)\n    );\n\n    return util.concatUint8Array(arr);\n  }\n\n  /**\n   * Encrypt session key packet\n   * @param {PublicKeyPacket} key - Public key\n   * @throws {Error} if encryption failed\n   * @async\n   */\n  async encrypt(key) {\n    const algo = enums.write(enums.publicKey, this.publicKeyAlgorithm);\n    // No symmetric encryption algorithm identifier is passed to the public-key algorithm for a\n    // v6 PKESK packet, as it is included in the v2 SEIPD packet.\n    const sessionKeyAlgorithm = this.version === 3 ? this.sessionKeyAlgorithm : null;\n    const fingerprint = key.version === 5 ? key.getFingerprintBytes().subarray(0, 20) : key.getFingerprintBytes();\n    const encoded = encodeSessionKey(this.version, algo, sessionKeyAlgorithm, this.sessionKey);\n    this.encrypted = await publicKeyEncrypt(\n      algo, sessionKeyAlgorithm, key.publicParams, encoded, fingerprint);\n  }\n\n  /**\n   * Decrypts the session key (only for public key encrypted session key packets (tag 1)\n   * @param {SecretKeyPacket} key - decrypted private key\n   * @param {Object} [randomSessionKey] - Bogus session key to use in case of sensitive decryption error, or if the decrypted session key is of a different type/size.\n   *                                      This is needed for constant-time processing. Expected object of the form: { sessionKey: Uint8Array, sessionKeyAlgorithm: enums.symmetric }\n   * @throws {Error} if decryption failed, unless `randomSessionKey` is given\n   * @async\n   */\n  async decrypt(key, randomSessionKey) {\n    // check that session key algo matches the secret key algo\n    if (this.publicKeyAlgorithm !== key.algorithm) {\n      throw new Error('Decryption error');\n    }\n\n    const randomPayload = randomSessionKey ?\n      encodeSessionKey(this.version, this.publicKeyAlgorithm, randomSessionKey.sessionKeyAlgorithm, randomSessionKey.sessionKey) :\n      null;\n    const fingerprint = key.version === 5 ? key.getFingerprintBytes().subarray(0, 20) : key.getFingerprintBytes();\n    const decryptedData = await publicKeyDecrypt(this.publicKeyAlgorithm, key.publicParams, key.privateParams, this.encrypted, fingerprint, randomPayload);\n\n    const { sessionKey, sessionKeyAlgorithm } = decodeSessionKey(this.version, this.publicKeyAlgorithm, decryptedData, randomSessionKey);\n\n    if (this.version === 3) {\n      // v3 Montgomery curves have cleartext cipher algo\n      const hasEncryptedAlgo = this.publicKeyAlgorithm !== enums.publicKey.x25519 && this.publicKeyAlgorithm !== enums.publicKey.x448;\n      this.sessionKeyAlgorithm = hasEncryptedAlgo ? sessionKeyAlgorithm : this.sessionKeyAlgorithm;\n\n      if (sessionKey.length !== getCipherParams(this.sessionKeyAlgorithm).keySize) {\n        throw new Error('Unexpected session key size');\n      }\n    }\n    this.sessionKey = sessionKey;\n  }\n}\n\nexport default PublicKeyEncryptedSessionKeyPacket;\n\n\nfunction encodeSessionKey(version, keyAlgo, cipherAlgo, sessionKeyData) {\n  switch (keyAlgo) {\n    case enums.publicKey.rsaEncrypt:\n    case enums.publicKey.rsaEncryptSign:\n    case enums.publicKey.elgamal:\n    case enums.publicKey.ecdh:\n      // add checksum\n      return util.concatUint8Array([\n        new Uint8Array(version === 6 ? [] : [cipherAlgo]),\n        sessionKeyData,\n        util.writeChecksum(sessionKeyData.subarray(sessionKeyData.length % 8))\n      ]);\n    case enums.publicKey.x25519:\n    case enums.publicKey.x448:\n      return sessionKeyData;\n    default:\n      throw new Error('Unsupported public key algorithm');\n  }\n}\n\n\nfunction decodeSessionKey(version, keyAlgo, decryptedData, randomSessionKey) {\n  switch (keyAlgo) {\n    case enums.publicKey.rsaEncrypt:\n    case enums.publicKey.rsaEncryptSign:\n    case enums.publicKey.elgamal:\n    case enums.publicKey.ecdh: {\n      // verify checksum in constant time\n      const result = decryptedData.subarray(0, decryptedData.length - 2);\n      const checksum = decryptedData.subarray(decryptedData.length - 2);\n      const computedChecksum = util.writeChecksum(result.subarray(result.length % 8));\n      const isValidChecksum = computedChecksum[0] === checksum[0] & computedChecksum[1] === checksum[1];\n      const decryptedSessionKey = version === 6 ?\n        { sessionKeyAlgorithm: null, sessionKey: result } :\n        { sessionKeyAlgorithm: result[0], sessionKey: result.subarray(1) };\n      if (randomSessionKey) {\n        // We must not leak info about the validity of the decrypted checksum or cipher algo.\n        // The decrypted session key must be of the same algo and size as the random session key, otherwise we discard it and use the random data.\n        const isValidPayload = isValidChecksum &\n          decryptedSessionKey.sessionKeyAlgorithm === randomSessionKey.sessionKeyAlgorithm &\n          decryptedSessionKey.sessionKey.length === randomSessionKey.sessionKey.length;\n        return {\n          sessionKey: util.selectUint8Array(isValidPayload, decryptedSessionKey.sessionKey, randomSessionKey.sessionKey),\n          sessionKeyAlgorithm: version === 6 ? null : util.selectUint8(\n            isValidPayload,\n            decryptedSessionKey.sessionKeyAlgorithm,\n            randomSessionKey.sessionKeyAlgorithm\n          )\n        };\n      } else {\n        const isValidPayload = isValidChecksum && (\n          version === 6 || enums.read(enums.symmetric, decryptedSessionKey.sessionKeyAlgorithm));\n        if (isValidPayload) {\n          return decryptedSessionKey;\n        } else {\n          throw new Error('Decryption error');\n        }\n      }\n    }\n    case enums.publicKey.x25519:\n    case enums.publicKey.x448:\n      return {\n        sessionKeyAlgorithm: null,\n        sessionKey: decryptedData\n      };\n    default:\n      throw new Error('Unsupported public key algorithm');\n  }\n}\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport { newS2KFromConfig, newS2KFromType } from '../type/s2k';\nimport defaultConfig from '../config';\nimport { cipherMode, generateSessionKey, getCipherParams, getRandomBytes } from '../crypto';\nimport computeHKDF from '../crypto/hkdf';\nimport enums from '../enums';\nimport util from '../util';\nimport { UnsupportedError } from './packet';\n\n/**\n * Symmetric-Key Encrypted Session Key Packets (Tag 3)\n *\n * {@link https://tools.ietf.org/html/rfc4880#section-5.3|RFC4880 5.3}:\n * The Symmetric-Key Encrypted Session Key packet holds the\n * symmetric-key encryption of a session key used to encrypt a message.\n * Zero or more Public-Key Encrypted Session Key packets and/or\n * Symmetric-Key Encrypted Session Key packets may precede a\n * Symmetrically Encrypted Data packet that holds an encrypted message.\n * The message is encrypted with a session key, and the session key is\n * itself encrypted and stored in the Encrypted Session Key packet or\n * the Symmetric-Key Encrypted Session Key packet.\n */\nclass SymEncryptedSessionKeyPacket {\n  static get tag() {\n    return enums.packet.symEncryptedSessionKey;\n  }\n\n  /**\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   */\n  constructor(config = defaultConfig) {\n    this.version = config.aeadProtect ? 6 : 4;\n    this.sessionKey = null;\n    /**\n     * Algorithm to encrypt the session key with\n     * @type {enums.symmetric}\n     */\n    this.sessionKeyEncryptionAlgorithm = null;\n    /**\n     * Algorithm to encrypt the message with\n     * @type {enums.symmetric}\n     */\n    this.sessionKeyAlgorithm = null;\n    /**\n     * AEAD mode to encrypt the session key with (if AEAD protection is enabled)\n     * @type {enums.aead}\n     */\n    this.aeadAlgorithm = enums.write(enums.aead, config.preferredAEADAlgorithm);\n    this.encrypted = null;\n    this.s2k = null;\n    this.iv = null;\n  }\n\n  /**\n   * Parsing function for a symmetric encrypted session key packet (tag 3).\n   *\n   * @param {Uint8Array} bytes - Payload of a tag 3 packet\n   */\n  read(bytes) {\n    let offset = 0;\n\n    // A one-octet version number with value 4, 5 or 6.\n    this.version = bytes[offset++];\n    if (this.version !== 4 && this.version !== 5 && this.version !== 6) {\n      throw new UnsupportedError(`Version ${this.version} of the SKESK packet is unsupported.`);\n    }\n\n    if (this.version === 6) {\n      // A one-octet scalar octet count of the following 5 fields.\n      offset++;\n    }\n\n    // A one-octet number describing the symmetric algorithm used.\n    const algo = bytes[offset++];\n\n    if (this.version >= 5) {\n      // A one-octet AEAD algorithm.\n      this.aeadAlgorithm = bytes[offset++];\n\n      if (this.version === 6) {\n        // A one-octet scalar octet count of the following field.\n        offset++;\n      }\n    }\n\n    // A string-to-key (S2K) specifier, length as defined above.\n    const s2kType = bytes[offset++];\n    this.s2k = newS2KFromType(s2kType);\n    offset += this.s2k.read(bytes.subarray(offset, bytes.length));\n\n    if (this.version >= 5) {\n      const mode = cipherMode.getAEADMode(this.aeadAlgorithm, true);\n\n      // A starting initialization vector of size specified by the AEAD\n      // algorithm.\n      this.iv = bytes.subarray(offset, offset += mode.ivLength);\n    }\n\n    // The encrypted session key itself, which is decrypted with the\n    // string-to-key object. This is optional in version 4.\n    if (this.version >= 5 || offset < bytes.length) {\n      this.encrypted = bytes.subarray(offset, bytes.length);\n      this.sessionKeyEncryptionAlgorithm = algo;\n    } else {\n      this.sessionKeyAlgorithm = algo;\n    }\n  }\n\n  /**\n   * Create a binary representation of a tag 3 packet\n   *\n   * @returns {Uint8Array} The Uint8Array representation.\n  */\n  write() {\n    const algo = this.encrypted === null ?\n      this.sessionKeyAlgorithm :\n      this.sessionKeyEncryptionAlgorithm;\n\n    let bytes;\n\n    const s2k = this.s2k.write();\n    if (this.version === 6) {\n      const s2kLen = s2k.length;\n      const fieldsLen = 3 + s2kLen + this.iv.length;\n      bytes = util.concatUint8Array([new Uint8Array([this.version, fieldsLen, algo, this.aeadAlgorithm, s2kLen]), s2k, this.iv, this.encrypted]);\n    } else if (this.version === 5) {\n      bytes = util.concatUint8Array([new Uint8Array([this.version, algo, this.aeadAlgorithm]), s2k, this.iv, this.encrypted]);\n    } else {\n      bytes = util.concatUint8Array([new Uint8Array([this.version, algo]), s2k]);\n\n      if (this.encrypted !== null) {\n        bytes = util.concatUint8Array([bytes, this.encrypted]);\n      }\n    }\n\n    return bytes;\n  }\n\n  /**\n   * Decrypts the session key with the given passphrase\n   * @param {String} passphrase - The passphrase in string form\n   * @throws {Error} if decryption was not successful\n   * @async\n   */\n  async decrypt(passphrase) {\n    const algo = this.sessionKeyEncryptionAlgorithm !== null ?\n      this.sessionKeyEncryptionAlgorithm :\n      this.sessionKeyAlgorithm;\n\n    const { blockSize, keySize } = getCipherParams(algo);\n    const key = await this.s2k.produceKey(passphrase, keySize);\n\n    if (this.version >= 5) {\n      const mode = cipherMode.getAEADMode(this.aeadAlgorithm, true);\n      const adata = new Uint8Array([0xC0 | SymEncryptedSessionKeyPacket.tag, this.version, this.sessionKeyEncryptionAlgorithm, this.aeadAlgorithm]);\n      const encryptionKey = this.version === 6 ? await computeHKDF(enums.hash.sha256, key, new Uint8Array(), adata, keySize) : key;\n      const modeInstance = await mode(algo, encryptionKey);\n      this.sessionKey = await modeInstance.decrypt(this.encrypted, this.iv, adata);\n    } else if (this.encrypted !== null) {\n      const decrypted = await cipherMode.cfb.decrypt(algo, key, this.encrypted, new Uint8Array(blockSize));\n\n      this.sessionKeyAlgorithm = enums.write(enums.symmetric, decrypted[0]);\n      this.sessionKey = decrypted.subarray(1, decrypted.length);\n      if (this.sessionKey.length !== getCipherParams(this.sessionKeyAlgorithm).keySize) {\n        throw new Error('Unexpected session key size');\n      }\n    } else {\n      // session key size is checked as part of SEIPDv2 decryption, where we know the expected symmetric algo\n      this.sessionKey = key;\n    }\n  }\n\n  /**\n   * Encrypts the session key with the given passphrase\n   * @param {String} passphrase - The passphrase in string form\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @throws {Error} if encryption was not successful\n   * @async\n   */\n  async encrypt(passphrase, config = defaultConfig) {\n    const algo = this.sessionKeyEncryptionAlgorithm !== null ?\n      this.sessionKeyEncryptionAlgorithm :\n      this.sessionKeyAlgorithm;\n\n    this.sessionKeyEncryptionAlgorithm = algo;\n\n    this.s2k = newS2KFromConfig(config);\n    this.s2k.generateSalt();\n\n    const { blockSize, keySize } = getCipherParams(algo);\n    const key = await this.s2k.produceKey(passphrase, keySize);\n\n    if (this.sessionKey === null) {\n      this.sessionKey = generateSessionKey(this.sessionKeyAlgorithm);\n    }\n\n    if (this.version >= 5) {\n      const mode = cipherMode.getAEADMode(this.aeadAlgorithm);\n      this.iv = getRandomBytes(mode.ivLength); // generate new random IV\n      const adata = new Uint8Array([0xC0 | SymEncryptedSessionKeyPacket.tag, this.version, this.sessionKeyEncryptionAlgorithm, this.aeadAlgorithm]);\n      const encryptionKey = this.version === 6 ? await computeHKDF(enums.hash.sha256, key, new Uint8Array(), adata, keySize) : key;\n      const modeInstance = await mode(algo, encryptionKey);\n      this.encrypted = await modeInstance.encrypt(this.sessionKey, this.iv, adata);\n    } else {\n      const toEncrypt = util.concatUint8Array([\n        new Uint8Array([this.sessionKeyAlgorithm]),\n        this.sessionKey\n      ]);\n      this.encrypted = await cipherMode.cfb.encrypt(algo, key, toEncrypt, new Uint8Array(blockSize), config);\n    }\n  }\n}\n\nexport default SymEncryptedSessionKeyPacket;\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport KeyID from '../type/keyid';\nimport defaultConfig from '../config';\nimport { computeDigest, parsePublicKeyParams, serializeParams } from '../crypto';\nimport enums from '../enums';\nimport util from '../util';\nimport { UnsupportedError } from './packet';\n\n/**\n * Implementation of the Key Material Packet (Tag 5,6,7,14)\n *\n * {@link https://tools.ietf.org/html/rfc4880#section-5.5|RFC4480 5.5}:\n * A key material packet contains all the information about a public or\n * private key.  There are four variants of this packet type, and two\n * major versions.\n *\n * A Public-Key packet starts a series of packets that forms an OpenPGP\n * key (sometimes called an OpenPGP certificate).\n */\nclass PublicKeyPacket {\n  static get tag() {\n    return enums.packet.publicKey;\n  }\n\n  /**\n   * @param {Date} [date] - Creation date\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   */\n  constructor(date = new Date(), config = defaultConfig) {\n    /**\n     * Packet version\n     * @type {Integer}\n     */\n    this.version = config.v6Keys ? 6 : 4;\n    /**\n     * Key creation date.\n     * @type {Date}\n     */\n    this.created = util.normalizeDate(date);\n    /**\n     * Public key algorithm.\n     * @type {enums.publicKey}\n     */\n    this.algorithm = null;\n    /**\n     * Algorithm specific public params\n     * @type {Object}\n     */\n    this.publicParams = null;\n    /**\n     * Time until expiration in days (V3 only)\n     * @type {Integer}\n     */\n    this.expirationTimeV3 = 0;\n    /**\n     * Fingerprint bytes\n     * @type {Uint8Array}\n     */\n    this.fingerprint = null;\n    /**\n     * KeyID\n     * @type {module:type/keyid~KeyID}\n     */\n    this.keyID = null;\n  }\n\n  /**\n   * Create a PublicKeyPacket from a SecretKeyPacket\n   * @param {SecretKeyPacket} secretKeyPacket - key packet to convert\n   * @returns {PublicKeyPacket} public key packet\n   * @static\n   */\n  static fromSecretKeyPacket(secretKeyPacket) {\n    const keyPacket = new PublicKeyPacket();\n    const { version, created, algorithm, publicParams, keyID, fingerprint } = secretKeyPacket;\n    keyPacket.version = version;\n    keyPacket.created = created;\n    keyPacket.algorithm = algorithm;\n    keyPacket.publicParams = publicParams;\n    keyPacket.keyID = keyID;\n    keyPacket.fingerprint = fingerprint;\n    return keyPacket;\n  }\n\n  /**\n   * Internal Parser for public keys as specified in {@link https://tools.ietf.org/html/rfc4880#section-5.5.2|RFC 4880 section 5.5.2 Public-Key Packet Formats}\n   * @param {Uint8Array} bytes - Input array to read the packet from\n   * @returns {Object} This object with attributes set by the parser\n   * @async\n   */\n  async read(bytes, config = defaultConfig) {\n    let pos = 0;\n    // A one-octet version number (4, 5 or 6).\n    this.version = bytes[pos++];\n    if (this.version === 5 && !config.enableParsingV5Entities) {\n      throw new UnsupportedError('Support for parsing v5 entities is disabled; turn on `config.enableParsingV5Entities` if needed');\n    }\n\n    if (this.version === 4 || this.version === 5 || this.version === 6) {\n      // - A four-octet number denoting the time that the key was created.\n      this.created = util.readDate(bytes.subarray(pos, pos + 4));\n      pos += 4;\n\n      // - A one-octet number denoting the public-key algorithm of this key.\n      this.algorithm = bytes[pos++];\n\n      if (this.version >= 5) {\n        // - A four-octet scalar octet count for the following key material.\n        pos += 4;\n      }\n\n      // - A series of values comprising the key material.\n      const { read, publicParams } = parsePublicKeyParams(this.algorithm, bytes.subarray(pos));\n      // The deprecated OIDs for Ed25519Legacy and Curve25519Legacy are used in legacy version 4 keys and signatures.\n      // Implementations MUST NOT accept or generate v6 key material using the deprecated OIDs.\n      if (\n        this.version === 6 &&\n        publicParams.oid && (\n          publicParams.oid.getName() === enums.curve.curve25519Legacy ||\n          publicParams.oid.getName() === enums.curve.ed25519Legacy\n        )\n      ) {\n        throw new Error('Legacy curve25519 cannot be used with v6 keys');\n      }\n      this.publicParams = publicParams;\n      pos += read;\n\n      // we set the fingerprint and keyID already to make it possible to put together the key packets directly in the Key constructor\n      await this.computeFingerprintAndKeyID();\n      return pos;\n    }\n    throw new UnsupportedError(`Version ${this.version} of the key packet is unsupported.`);\n  }\n\n  /**\n   * Creates an OpenPGP public key packet for the given key.\n   * @returns {Uint8Array} Bytes encoding the public key OpenPGP packet.\n   */\n  write() {\n    const arr = [];\n    // Version\n    arr.push(new Uint8Array([this.version]));\n    arr.push(util.writeDate(this.created));\n    // A one-octet number denoting the public-key algorithm of this key\n    arr.push(new Uint8Array([this.algorithm]));\n\n    const params = serializeParams(this.algorithm, this.publicParams);\n    if (this.version >= 5) {\n      // A four-octet scalar octet count for the following key material\n      arr.push(util.writeNumber(params.length, 4));\n    }\n    // Algorithm-specific params\n    arr.push(params);\n    return util.concatUint8Array(arr);\n  }\n\n  /**\n   * Write packet in order to be hashed; either for a signature or a fingerprint\n   * @param {Integer} version - target version of signature or key\n   */\n  writeForHash(version) {\n    const bytes = this.writePublicKey();\n\n    const versionOctet = 0x95 + version;\n    const lengthOctets = version >= 5 ? 4 : 2;\n    return util.concatUint8Array([new Uint8Array([versionOctet]), util.writeNumber(bytes.length, lengthOctets), bytes]);\n  }\n\n  /**\n   * Check whether secret-key data is available in decrypted form. Returns null for public keys.\n   * @returns {Boolean|null}\n   */\n  isDecrypted() {\n    return null;\n  }\n\n  /**\n   * Returns the creation time of the key\n   * @returns {Date}\n   */\n  getCreationTime() {\n    return this.created;\n  }\n\n  /**\n   * Return the key ID of the key\n   * @returns {module:type/keyid~KeyID} The 8-byte key ID\n   */\n  getKeyID() {\n    return this.keyID;\n  }\n\n  /**\n   * Computes and set the key ID and fingerprint of the key\n   * @async\n   */\n  async computeFingerprintAndKeyID() {\n    await this.computeFingerprint();\n    this.keyID = new KeyID();\n\n    if (this.version >= 5) {\n      this.keyID.read(this.fingerprint.subarray(0, 8));\n    } else if (this.version === 4) {\n      this.keyID.read(this.fingerprint.subarray(12, 20));\n    } else {\n      throw new Error('Unsupported key version');\n    }\n  }\n\n  /**\n   * Computes and set the fingerprint of the key\n   */\n  async computeFingerprint() {\n    const toHash = this.writeForHash(this.version);\n\n    if (this.version >= 5) {\n      this.fingerprint = await computeDigest(enums.hash.sha256, toHash);\n    } else if (this.version === 4) {\n      this.fingerprint = await computeDigest(enums.hash.sha1, toHash);\n    } else {\n      throw new Error('Unsupported key version');\n    }\n  }\n\n  /**\n   * Returns the fingerprint of the key, as an array of bytes\n   * @returns {Uint8Array} A Uint8Array containing the fingerprint\n   */\n  getFingerprintBytes() {\n    return this.fingerprint;\n  }\n\n  /**\n   * Calculates and returns the fingerprint of the key, as a string\n   * @returns {String} A string containing the fingerprint in lowercase hex\n   */\n  getFingerprint() {\n    return util.uint8ArrayToHex(this.getFingerprintBytes());\n  }\n\n  /**\n   * Calculates whether two keys have the same fingerprint without actually calculating the fingerprint\n   * @returns {Boolean} Whether the two keys have the same version and public key data.\n   */\n  hasSameFingerprintAs(other) {\n    return this.version === other.version && util.equalsUint8Array(this.writePublicKey(), other.writePublicKey());\n  }\n\n  /**\n   * Returns algorithm information\n   * @returns {Object} An object of the form {algorithm: String, bits:int, curve:String}.\n   */\n  getAlgorithmInfo() {\n    const result = {};\n    result.algorithm = enums.read(enums.publicKey, this.algorithm);\n    // RSA, DSA or ElGamal public modulo\n    const modulo = this.publicParams.n || this.publicParams.p;\n    if (modulo) {\n      result.bits = util.uint8ArrayBitLength(modulo);\n    } else if (this.publicParams.oid) {\n      result.curve = this.publicParams.oid.getName();\n    }\n    return result;\n  }\n}\n\n/**\n * Alias of read()\n * @see PublicKeyPacket#read\n */\nPublicKeyPacket.prototype.readPublicKey = PublicKeyPacket.prototype.read;\n\n/**\n * Alias of write()\n * @see PublicKeyPacket#write\n */\nPublicKeyPacket.prototype.writePublicKey = PublicKeyPacket.prototype.write;\n\nexport default PublicKeyPacket;\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport { readToEnd as streamReadToEnd, clone as streamClone } from '@openpgp/web-stream-tools';\nimport { cipherMode, getCipherParams } from '../crypto';\nimport enums from '../enums';\nimport util from '../util';\nimport defaultConfig from '../config';\n\nimport LiteralDataPacket from './literal_data';\nimport CompressedDataPacket from './compressed_data';\nimport OnePassSignaturePacket from './one_pass_signature';\nimport SignaturePacket from './signature';\nimport PacketList from './packetlist';\n\n// A SE packet can contain the following packet types\nconst allowedPackets = /*#__PURE__*/ util.constructAllowedPackets([\n  LiteralDataPacket,\n  CompressedDataPacket,\n  OnePassSignaturePacket,\n  SignaturePacket\n]);\n\n/**\n * Implementation of the Symmetrically Encrypted Data Packet (Tag 9)\n *\n * {@link https://tools.ietf.org/html/rfc4880#section-5.7|RFC4880 5.7}:\n * The Symmetrically Encrypted Data packet contains data encrypted with a\n * symmetric-key algorithm. When it has been decrypted, it contains other\n * packets (usually a literal data packet or compressed data packet, but in\n * theory other Symmetrically Encrypted Data packets or sequences of packets\n * that form whole OpenPGP messages).\n */\nclass SymmetricallyEncryptedDataPacket {\n  static get tag() {\n    return enums.packet.symmetricallyEncryptedData;\n  }\n\n  constructor() {\n    /**\n     * Encrypted secret-key data\n     */\n    this.encrypted = null;\n    /**\n     * Decrypted packets contained within.\n     * @type {PacketList}\n     */\n    this.packets = null;\n  }\n\n  read(bytes) {\n    this.encrypted = bytes;\n  }\n\n  write() {\n    return this.encrypted;\n  }\n\n  /**\n   * Decrypt the symmetrically-encrypted packet data\n   * See {@link https://tools.ietf.org/html/rfc4880#section-9.2|RFC 4880 9.2} for algorithms.\n   * @param {module:enums.symmetric} sessionKeyAlgorithm - Symmetric key algorithm to use\n   * @param {Uint8Array} key - The key of cipher blocksize length to be used\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n\n   * @throws {Error} if decryption was not successful\n   * @async\n   */\n  async decrypt(sessionKeyAlgorithm, key, config = defaultConfig) {\n    // If MDC errors are not being ignored, all missing MDC packets in symmetrically encrypted data should throw an error\n    if (!config.allowUnauthenticatedMessages) {\n      throw new Error('Message is not authenticated.');\n    }\n\n    const { blockSize } = getCipherParams(sessionKeyAlgorithm);\n    const encrypted = await streamReadToEnd(streamClone(this.encrypted));\n    const decrypted = await cipherMode.cfb.decrypt(sessionKeyAlgorithm, key,\n      encrypted.subarray(blockSize + 2),\n      encrypted.subarray(2, blockSize + 2)\n    );\n\n    // Decrypting a Symmetrically Encrypted Data packet MUST yield a valid OpenPGP Message.\n    // But due to the lack of authentication over the decrypted data,\n    // we do not run any grammarValidator, to avoid enabling a decryption oracle\n    // (plus, there is probably a higher chance that these messages have an expected structure).\n    this.packets = await PacketList.fromBinary(decrypted, allowedPackets, config);\n  }\n\n  /**\n   * Encrypt the symmetrically-encrypted packet data\n   * See {@link https://tools.ietf.org/html/rfc4880#section-9.2|RFC 4880 9.2} for algorithms.\n   * @param {module:enums.symmetric} sessionKeyAlgorithm - Symmetric key algorithm to use\n   * @param {Uint8Array} key - The key of cipher blocksize length to be used\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @throws {Error} if encryption was not successful\n   * @async\n   */\n  async encrypt(sessionKeyAlgorithm, key, config = defaultConfig) {\n    const data = this.packets.write();\n    const { blockSize } = getCipherParams(sessionKeyAlgorithm);\n\n    const prefix = await cipherMode.cfb.getPrefixRandom(sessionKeyAlgorithm);\n    const FRE = await cipherMode.cfb.encrypt(sessionKeyAlgorithm, key, prefix, new Uint8Array(blockSize), config);\n    const ciphertext = await cipherMode.cfb.encrypt(sessionKeyAlgorithm, key, data, FRE.subarray(2), config);\n    this.encrypted = util.concat([FRE, ciphertext]);\n  }\n}\n\nexport default SymmetricallyEncryptedDataPacket;\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport enums from '../enums';\n\n/**\n * Implementation of the strange \"Marker packet\" (Tag 10)\n *\n * {@link https://tools.ietf.org/html/rfc4880#section-5.8|RFC4880 5.8}:\n * An experimental version of PGP used this packet as the Literal\n * packet, but no released version of PGP generated Literal packets with this\n * tag. With PGP 5.x, this packet has been reassigned and is reserved for use as\n * the Marker packet.\n *\n * The body of this packet consists of:\n *   The three octets 0x50, 0x47, 0x50 (which spell \"PGP\" in UTF-8).\n *\n * Such a packet MUST be ignored when received. It may be placed at the\n * beginning of a message that uses features not available in PGP\n * version 2.6 in order to cause that version to report that newer\n * software is necessary to process the message.\n */\nclass MarkerPacket {\n  static get tag() {\n    return enums.packet.marker;\n  }\n\n  /**\n   * Parsing function for a marker data packet (tag 10).\n   * @param {Uint8Array} bytes - Payload of a tag 10 packet\n   * @returns {Boolean} whether the packet payload contains \"PGP\"\n   */\n  read(bytes) {\n    if (bytes[0] === 0x50 && // P\n        bytes[1] === 0x47 && // G\n        bytes[2] === 0x50) { // P\n      return true;\n    }\n    return false;\n  }\n\n  write() {\n    return new Uint8Array([0x50, 0x47, 0x50]);\n  }\n}\n\nexport default MarkerPacket;\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport PublicKeyPacket from './public_key';\nimport enums from '../enums';\n\n/**\n * A Public-Subkey packet (tag 14) has exactly the same format as a\n * Public-Key packet, but denotes a subkey.  One or more subkeys may be\n * associated with a top-level key.  By convention, the top-level key\n * provides signature services, and the subkeys provide encryption\n * services.\n * @extends PublicKeyPacket\n */\nclass PublicSubkeyPacket extends PublicKeyPacket {\n  static get tag() {\n    return enums.packet.publicSubkey;\n  }\n\n  /**\n   * @param {Date} [date] - Creation date\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   */\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(date, config) {\n    super(date, config);\n  }\n\n  /**\n   * Create a PublicSubkeyPacket from a SecretSubkeyPacket\n   * @param {SecretSubkeyPacket} secretSubkeyPacket - subkey packet to convert\n   * @returns {SecretSubkeyPacket} public key packet\n   * @static\n   */\n  static fromSecretSubkeyPacket(secretSubkeyPacket) {\n    const keyPacket = new PublicSubkeyPacket();\n    const { version, created, algorithm, publicParams, keyID, fingerprint } = secretSubkeyPacket;\n    keyPacket.version = version;\n    keyPacket.created = created;\n    keyPacket.algorithm = algorithm;\n    keyPacket.publicParams = publicParams;\n    keyPacket.keyID = keyID;\n    keyPacket.fingerprint = fingerprint;\n    return keyPacket;\n  }\n}\n\nexport default PublicSubkeyPacket;\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport { readSimpleLength, writeSimpleLength } from './packet';\nimport enums from '../enums';\nimport util from '../util';\n\n/**\n * Implementation of the User Attribute Packet (Tag 17)\n *\n * The User Attribute packet is a variation of the User ID packet.  It\n * is capable of storing more types of data than the User ID packet,\n * which is limited to text.  Like the User ID packet, a User Attribute\n * packet may be certified by the key owner (\"self-signed\") or any other\n * key owner who cares to certify it.  Except as noted, a User Attribute\n * packet may be used anywhere that a User ID packet may be used.\n *\n * While User Attribute packets are not a required part of the OpenPGP\n * standard, implementations SHOULD provide at least enough\n * compatibility to properly handle a certification signature on the\n * User Attribute packet.  A simple way to do this is by treating the\n * User Attribute packet as a User ID packet with opaque contents, but\n * an implementation may use any method desired.\n */\nclass UserAttributePacket {\n  static get tag() {\n    return enums.packet.userAttribute;\n  }\n\n  constructor() {\n    this.attributes = [];\n  }\n\n  /**\n   * parsing function for a user attribute packet (tag 17).\n   * @param {Uint8Array} input - Payload of a tag 17 packet\n   */\n  read(bytes) {\n    let i = 0;\n    while (i < bytes.length) {\n      const len = readSimpleLength(bytes.subarray(i, bytes.length));\n      i += len.offset;\n\n      this.attributes.push(util.uint8ArrayToString(bytes.subarray(i, i + len.len)));\n      i += len.len;\n    }\n  }\n\n  /**\n   * Creates a binary representation of the user attribute packet\n   * @returns {Uint8Array} String representation.\n   */\n  write() {\n    const arr = [];\n    for (let i = 0; i < this.attributes.length; i++) {\n      arr.push(writeSimpleLength(this.attributes[i].length));\n      arr.push(util.stringToUint8Array(this.attributes[i]));\n    }\n    return util.concatUint8Array(arr);\n  }\n\n  /**\n   * Compare for equality\n   * @param {UserAttributePacket} usrAttr\n   * @returns {Boolean} True if equal.\n   */\n  equals(usrAttr) {\n    if (!usrAttr || !(usrAttr instanceof UserAttributePacket)) {\n      return false;\n    }\n    return this.attributes.every(function(attr, index) {\n      return attr === usrAttr.attributes[index];\n    });\n  }\n}\n\nexport default UserAttributePacket;\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport PublicKeyPacket from './public_key';\nimport { newS2KFromConfig, newS2KFromType } from '../type/s2k';\nimport { computeDigest, getCipherParams, parsePrivateKeyParams, serializeParams, generateParams, validateParams, getRandomBytes, cipherMode } from '../crypto';\nimport enums from '../enums';\nimport util from '../util';\nimport defaultConfig from '../config';\nimport { UnsupportedError, writeTag } from './packet';\nimport computeHKDF from '../crypto/hkdf';\n\n/**\n * A Secret-Key packet contains all the information that is found in a\n * Public-Key packet, including the public-key material, but also\n * includes the secret-key material after all the public-key fields.\n * @extends PublicKeyPacket\n */\nclass SecretKeyPacket extends PublicKeyPacket {\n  static get tag() {\n    return enums.packet.secretKey;\n  }\n\n  /**\n   * @param {Date} [date] - Creation date\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   */\n  constructor(date = new Date(), config = defaultConfig) {\n    super(date, config);\n    /**\n     * Secret-key data\n     */\n    this.keyMaterial = null;\n    /**\n     * Indicates whether secret-key data is encrypted. `this.isEncrypted === false` means data is available in decrypted form.\n     */\n    this.isEncrypted = null;\n    /**\n     * S2K usage\n     * @type {enums.symmetric}\n     */\n    this.s2kUsage = 0;\n    /**\n     * S2K object\n     * @type {type/s2k}\n     */\n    this.s2k = null;\n    /**\n     * Symmetric algorithm to encrypt the key with\n     * @type {enums.symmetric}\n     */\n    this.symmetric = null;\n    /**\n     * AEAD algorithm to encrypt the key with (if AEAD protection is enabled)\n     * @type {enums.aead}\n     */\n    this.aead = null;\n    /**\n     * Whether the key is encrypted using the legacy AEAD format proposal from RFC4880bis\n     * (i.e. it was encrypted with the flag `config.aeadProtect` in OpenPGP.js v5 or older).\n     * This value is only relevant to know how to decrypt the key:\n     * if AEAD is enabled, a v4 key is always re-encrypted using the standard AEAD mechanism.\n     * @type {Boolean}\n     * @private\n     */\n    this.isLegacyAEAD = null;\n    /**\n     * Decrypted private parameters, referenced by name\n     * @type {Object}\n     */\n    this.privateParams = null;\n    /**\n     * `true` for keys whose integrity is already confirmed, based on\n     * the AEAD encryption mechanism\n     * @type {Boolean}\n     * @private\n     */\n    this.usedModernAEAD = null;\n  }\n\n  // 5.5.3.  Secret-Key Packet Formats\n\n  /**\n   * Internal parser for private keys as specified in\n   * {@link https://tools.ietf.org/html/draft-ietf-openpgp-rfc4880bis-04#section-5.5.3|RFC4880bis-04 section 5.5.3}\n   * @param {Uint8Array} bytes - Input string to read the packet from\n   * @async\n   */\n  async read(bytes, config = defaultConfig) {\n    // - A Public-Key or Public-Subkey packet, as described above.\n    let i = await this.readPublicKey(bytes, config);\n    const startOfSecretKeyData = i;\n\n    // - One octet indicating string-to-key usage conventions.  Zero\n    //   indicates that the secret-key data is not encrypted.  255 or 254\n    //   indicates that a string-to-key specifier is being given.  Any\n    //   other value is a symmetric-key encryption algorithm identifier.\n    this.s2kUsage = bytes[i++];\n\n    // - Only for a version 5 packet, a one-octet scalar octet count of\n    //   the next 4 optional fields.\n    if (this.version === 5) {\n      i++;\n    }\n\n    // - Only for a version 6 packet where the secret key material is\n    //   encrypted (that is, where the previous octet is not zero), a one-\n    //   octet scalar octet count of the cumulative length of all the\n    //   following optional string-to-key parameter fields.\n    if (this.version === 6 && this.s2kUsage) {\n      i++;\n    }\n\n    try {\n      // - [Optional] If string-to-key usage octet was 255, 254, or 253, a\n      //   one-octet symmetric encryption algorithm.\n      if (this.s2kUsage === 255 || this.s2kUsage === 254 || this.s2kUsage === 253) {\n        this.symmetric = bytes[i++];\n\n        // - [Optional] If string-to-key usage octet was 253, a one-octet\n        //   AEAD algorithm.\n        if (this.s2kUsage === 253) {\n          this.aead = bytes[i++];\n        }\n\n        // - [Optional] Only for a version 6 packet, and if string-to-key usage\n        //   octet was 255, 254, or 253, an one-octet count of the following field.\n        if (this.version === 6) {\n          i++;\n        }\n\n        // - [Optional] If string-to-key usage octet was 255, 254, or 253, a\n        //   string-to-key specifier.  The length of the string-to-key\n        //   specifier is implied by its type, as described above.\n        const s2kType = bytes[i++];\n        this.s2k = newS2KFromType(s2kType);\n        i += this.s2k.read(bytes.subarray(i, bytes.length));\n\n        if (this.s2k.type === 'gnu-dummy') {\n          return;\n        }\n      } else if (this.s2kUsage) {\n        this.symmetric = this.s2kUsage;\n      }\n\n\n      if (this.s2kUsage) {\n        // OpenPGP.js up to v5 used to support encrypting v4 keys using AEAD as specified by draft RFC4880bis (https://www.ietf.org/archive/id/draft-ietf-openpgp-rfc4880bis-10.html#section-5.5.3-3.5).\n        // This legacy format is incompatible, but fundamentally indistinguishable, from that of the crypto-refresh for v4 keys (v5 keys are always in legacy format).\n        // While parsing the key may succeed (if IV and AES block sizes match), key decryption will always\n        // fail if the key was parsed according to the wrong format, since the keys are processed differently.\n        // Thus, for v4 keys, we rely on the caller to instruct us to process the key as legacy, via config flag.\n        this.isLegacyAEAD = this.s2kUsage === 253 && (\n          this.version === 5 || (this.version === 4 && config.parseAEADEncryptedV4KeysAsLegacy));\n        // - crypto-refresh: If string-to-key usage octet was 255, 254 [..], an initialization vector (IV)\n        // of the same length as the cipher's block size.\n        // - RFC4880bis (v5 keys, regardless of AEAD): an Initial Vector (IV) of the same length as the\n        //   cipher's block size. If string-to-key usage octet was 253 the IV is used as the nonce for the AEAD algorithm.\n        // If the AEAD algorithm requires a shorter nonce, the high-order bits of the IV are used and the remaining bits MUST be zero\n        if (this.s2kUsage !== 253 || this.isLegacyAEAD) {\n          this.iv = bytes.subarray(\n            i,\n            i + getCipherParams(this.symmetric).blockSize\n          );\n          this.usedModernAEAD = false;\n        } else {\n          // crypto-refresh: If string-to-key usage octet was 253 (that is, the secret data is AEAD-encrypted),\n          // an initialization vector (IV) of size specified by the AEAD algorithm (see Section 5.13.2), which\n          // is used as the nonce for the AEAD algorithm.\n          this.iv = bytes.subarray(\n            i,\n            i + cipherMode.getAEADMode(this.aead).ivLength\n          );\n          // the non-legacy AEAD encryption mechanism also authenticates public key params; no need for manual validation.\n          this.usedModernAEAD = true;\n        }\n\n        i += this.iv.length;\n      }\n    } catch (e) {\n      // if the s2k is unsupported, we still want to support encrypting and verifying with the given key\n      if (!this.s2kUsage) throw e; // always throw for decrypted keys\n      this.unparseableKeyMaterial = bytes.subarray(startOfSecretKeyData);\n      this.isEncrypted = true;\n    }\n\n    // - Only for a version 5 packet, a four-octet scalar octet count for\n    //   the following key material.\n    if (this.version === 5) {\n      i += 4;\n    }\n\n    // - Plain or encrypted multiprecision integers comprising the secret\n    //   key data.  These algorithm-specific fields are as described\n    //   below.\n    this.keyMaterial = bytes.subarray(i);\n    this.isEncrypted = !!this.s2kUsage;\n\n    if (!this.isEncrypted) {\n      let cleartext;\n      if (this.version === 6) {\n        cleartext = this.keyMaterial;\n      } else {\n        cleartext = this.keyMaterial.subarray(0, -2);\n        if (!util.equalsUint8Array(util.writeChecksum(cleartext), this.keyMaterial.subarray(-2))) {\n          throw new Error('Key checksum mismatch');\n        }\n      }\n      try {\n        const { read, privateParams } = parsePrivateKeyParams(this.algorithm, cleartext, this.publicParams);\n        if (read < cleartext.length) {\n          throw new Error('Error reading MPIs');\n        }\n        this.privateParams = privateParams;\n      } catch (err) {\n        if (err instanceof UnsupportedError) throw err;\n        // avoid throwing potentially sensitive errors\n        throw new Error('Error reading MPIs');\n      }\n    }\n  }\n\n  /**\n   * Creates an OpenPGP key packet for the given key.\n   * @returns {Uint8Array} A string of bytes containing the secret key OpenPGP packet.\n   */\n  write() {\n    const serializedPublicKey = this.writePublicKey();\n    if (this.unparseableKeyMaterial) {\n      return util.concatUint8Array([\n        serializedPublicKey,\n        this.unparseableKeyMaterial\n      ]);\n    }\n\n    const arr = [serializedPublicKey];\n    arr.push(new Uint8Array([this.s2kUsage]));\n\n    const optionalFieldsArr = [];\n    // - [Optional] If string-to-key usage octet was 255, 254, or 253, a\n    //   one- octet symmetric encryption algorithm.\n    if (this.s2kUsage === 255 || this.s2kUsage === 254 || this.s2kUsage === 253) {\n      optionalFieldsArr.push(this.symmetric);\n\n      // - [Optional] If string-to-key usage octet was 253, a one-octet\n      //   AEAD algorithm.\n      if (this.s2kUsage === 253) {\n        optionalFieldsArr.push(this.aead);\n      }\n\n      const s2k = this.s2k.write();\n\n      // - [Optional] Only for a version 6 packet, and if string-to-key usage\n      //   octet was 255, 254, or 253, an one-octet count of the following field.\n      if (this.version === 6) {\n        optionalFieldsArr.push(s2k.length);\n      }\n\n      // - [Optional] If string-to-key usage octet was 255, 254, or 253, a\n      //   string-to-key specifier.  The length of the string-to-key\n      //   specifier is implied by its type, as described above.\n      optionalFieldsArr.push(...s2k);\n    }\n\n    // - [Optional] If secret data is encrypted (string-to-key usage octet\n    //   not zero), an Initial Vector (IV) of the same length as the\n    //   cipher's block size.\n    if (this.s2kUsage && this.s2k.type !== 'gnu-dummy') {\n      optionalFieldsArr.push(...this.iv);\n    }\n\n    if (this.version === 5 || (this.version === 6 && this.s2kUsage)) {\n      arr.push(new Uint8Array([optionalFieldsArr.length]));\n    }\n    arr.push(new Uint8Array(optionalFieldsArr));\n\n    if (!this.isDummy()) {\n      if (!this.s2kUsage) {\n        this.keyMaterial = serializeParams(this.algorithm, this.privateParams);\n      }\n\n      if (this.version === 5) {\n        arr.push(util.writeNumber(this.keyMaterial.length, 4));\n      }\n      arr.push(this.keyMaterial);\n\n      if (!this.s2kUsage && this.version !== 6) {\n        arr.push(util.writeChecksum(this.keyMaterial));\n      }\n    }\n\n    return util.concatUint8Array(arr);\n  }\n\n  /**\n   * Check whether secret-key data is available in decrypted form.\n   * Returns false for gnu-dummy keys and null for public keys.\n   * @returns {Boolean|null}\n   */\n  isDecrypted() {\n    return this.isEncrypted === false;\n  }\n\n  /**\n   * Check whether the key includes secret key material.\n   * Some secret keys do not include it, and can thus only be used\n   * for public-key operations (encryption and verification).\n   * Such keys are:\n   * - GNU-dummy keys, where the secret material has been stripped away\n   * - encrypted keys with unsupported S2K or cipher\n   */\n  isMissingSecretKeyMaterial() {\n    return this.unparseableKeyMaterial !== undefined || this.isDummy();\n  }\n\n  /**\n   * Check whether this is a gnu-dummy key\n   * @returns {Boolean}\n   */\n  isDummy() {\n    return !!(this.s2k && this.s2k.type === 'gnu-dummy');\n  }\n\n  /**\n   * Remove private key material, converting the key to a dummy one.\n   * The resulting key cannot be used for signing/decrypting but can still verify signatures.\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   */\n  makeDummy(config = defaultConfig) {\n    if (this.isDummy()) {\n      return;\n    }\n    if (this.isDecrypted()) {\n      this.clearPrivateParams();\n    }\n    delete this.unparseableKeyMaterial;\n    this.isEncrypted = null;\n    this.keyMaterial = null;\n    this.s2k = newS2KFromType(enums.s2k.gnu, config);\n    this.s2k.algorithm = 0;\n    this.s2k.c = 0;\n    this.s2k.type = 'gnu-dummy';\n    this.s2kUsage = 254;\n    this.symmetric = enums.symmetric.aes256;\n    this.isLegacyAEAD = null;\n    this.usedModernAEAD = null;\n  }\n\n  /**\n   * Encrypt the payload. By default, we use aes256 and iterated, salted string\n   * to key specifier. If the key is in a decrypted state (isEncrypted === false)\n   * and the passphrase is empty or undefined, the key will be set as not encrypted.\n   * This can be used to remove passphrase protection after calling decrypt().\n   * @param {String} passphrase\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @throws {Error} if encryption was not successful\n   * @async\n   */\n  async encrypt(passphrase, config = defaultConfig) {\n    if (this.isDummy()) {\n      return;\n    }\n\n    if (!this.isDecrypted()) {\n      throw new Error('Key packet is already encrypted');\n    }\n\n    if (!passphrase) {\n      throw new Error('A non-empty passphrase is required for key encryption.');\n    }\n\n    this.s2k = newS2KFromConfig(config);\n    this.s2k.generateSalt();\n    const cleartext = serializeParams(this.algorithm, this.privateParams);\n    this.symmetric = enums.symmetric.aes256;\n\n    const { blockSize } = getCipherParams(this.symmetric);\n\n    if (config.aeadProtect) {\n      this.s2kUsage = 253;\n      this.aead = config.preferredAEADAlgorithm;\n      const mode = cipherMode.getAEADMode(this.aead);\n      this.isLegacyAEAD = this.version === 5; // v4 is always re-encrypted with standard format instead.\n      this.usedModernAEAD = !this.isLegacyAEAD; // legacy AEAD does not guarantee integrity of public key material\n\n      const serializedPacketTag = writeTag(this.constructor.tag);\n      const key = await produceEncryptionKey(this.version, this.s2k, passphrase, this.symmetric, this.aead, serializedPacketTag, this.isLegacyAEAD);\n\n      const modeInstance = await mode(this.symmetric, key);\n      this.iv = this.isLegacyAEAD ? getRandomBytes(blockSize) : getRandomBytes(mode.ivLength);\n      const associateData = this.isLegacyAEAD ?\n        new Uint8Array() :\n        util.concatUint8Array([serializedPacketTag, this.writePublicKey()]);\n\n      this.keyMaterial = await modeInstance.encrypt(cleartext, this.iv.subarray(0, mode.ivLength), associateData);\n    } else {\n      this.s2kUsage = 254;\n      this.usedModernAEAD = false;\n      const key = await produceEncryptionKey(this.version, this.s2k, passphrase, this.symmetric);\n      this.iv = getRandomBytes(blockSize);\n      this.keyMaterial = await cipherMode.cfb.encrypt(this.symmetric, key, util.concatUint8Array([\n        cleartext,\n        await computeDigest(enums.hash.sha1, cleartext, config)\n      ]), this.iv, config);\n    }\n  }\n\n  /**\n   * Decrypts the private key params which are needed to use the key.\n   * Successful decryption does not imply key integrity, call validate() to confirm that.\n   * {@link SecretKeyPacket.isDecrypted} should be false, as\n   * otherwise calls to this function will throw an error.\n   * @param {String} passphrase - The passphrase for this private key as string\n   * @throws {Error} if the key is already decrypted, or if decryption was not successful\n   * @async\n   */\n  async decrypt(passphrase) {\n    if (this.isDummy()) {\n      return false;\n    }\n\n    if (this.unparseableKeyMaterial) {\n      throw new Error('Key packet cannot be decrypted: unsupported S2K or cipher algo');\n    }\n\n    if (this.isDecrypted()) {\n      throw new Error('Key packet is already decrypted.');\n    }\n\n    let key;\n    const serializedPacketTag = writeTag(this.constructor.tag); // relevant for AEAD only\n    if (this.s2kUsage === 254 || this.s2kUsage === 253) {\n      key = await produceEncryptionKey(\n        this.version, this.s2k, passphrase, this.symmetric, this.aead, serializedPacketTag, this.isLegacyAEAD);\n    } else if (this.s2kUsage === 255) {\n      throw new Error('Encrypted private key is authenticated using an insecure two-byte hash');\n    } else {\n      throw new Error('Private key is encrypted using an insecure S2K function: unsalted MD5');\n    }\n\n    let cleartext;\n    if (this.s2kUsage === 253) {\n      const mode = cipherMode.getAEADMode(this.aead, true);\n      const modeInstance = await mode(this.symmetric, key);\n      try {\n        const associateData = this.isLegacyAEAD ?\n          new Uint8Array() :\n          util.concatUint8Array([serializedPacketTag, this.writePublicKey()]);\n        cleartext = await modeInstance.decrypt(this.keyMaterial, this.iv.subarray(0, mode.ivLength), associateData);\n      } catch (err) {\n        if (err.message === 'Authentication tag mismatch') {\n          throw new Error('Incorrect key passphrase: ' + err.message);\n        }\n        throw err;\n      }\n    } else {\n      const cleartextWithHash = await cipherMode.cfb.decrypt(this.symmetric, key, this.keyMaterial, this.iv);\n\n      cleartext = cleartextWithHash.subarray(0, -20);\n      const hash = await computeDigest(enums.hash.sha1, cleartext);\n\n      if (!util.equalsUint8Array(hash, cleartextWithHash.subarray(-20))) {\n        throw new Error('Incorrect key passphrase');\n      }\n    }\n\n    try {\n      const { privateParams } = parsePrivateKeyParams(this.algorithm, cleartext, this.publicParams);\n      this.privateParams = privateParams;\n    } catch (err) {\n      throw new Error('Error reading MPIs');\n    }\n    this.isEncrypted = false;\n    this.keyMaterial = null;\n    this.s2kUsage = 0;\n    this.aead = null;\n    this.symmetric = null;\n    this.isLegacyAEAD = null;\n  }\n\n  /**\n   * Checks that the key parameters are consistent\n   * @throws {Error} if validation was not successful\n   * @async\n   */\n  async validate() {\n    if (this.isDummy()) {\n      return;\n    }\n\n    if (!this.isDecrypted()) {\n      throw new Error('Key is not decrypted');\n    }\n\n    if (this.usedModernAEAD) {\n      // key integrity confirmed by successful AEAD decryption\n      return;\n    }\n\n    let validParams;\n    try {\n      // this can throw if some parameters are undefined\n      validParams = await validateParams(this.algorithm, this.publicParams, this.privateParams);\n    } catch (_) {\n      validParams = false;\n    }\n    if (!validParams) {\n      throw new Error('Key is invalid');\n    }\n  }\n\n  async generate(bits, curve) {\n    // The deprecated OIDs for Ed25519Legacy and Curve25519Legacy are used in legacy version 4 keys and signatures.\n    // Implementations MUST NOT accept or generate v6 key material using the deprecated OIDs.\n    if (this.version === 6 && (\n      (this.algorithm === enums.publicKey.ecdh && curve === enums.curve.curve25519Legacy) ||\n      this.algorithm === enums.publicKey.eddsaLegacy\n    )) {\n      throw new Error(`Cannot generate v6 keys of type 'ecc' with curve ${curve}. Generate a key of type 'curve25519' instead`);\n    }\n    const { privateParams, publicParams } = await generateParams(this.algorithm, bits, curve);\n    this.privateParams = privateParams;\n    this.publicParams = publicParams;\n    this.isEncrypted = false;\n  }\n\n  /**\n   * Clear private key parameters\n   */\n  clearPrivateParams() {\n    if (this.isMissingSecretKeyMaterial()) {\n      return;\n    }\n\n    Object.keys(this.privateParams).forEach(name => {\n      const param = this.privateParams[name];\n      param.fill(0);\n      delete this.privateParams[name];\n    });\n    this.privateParams = null;\n    this.isEncrypted = true;\n  }\n}\n\n/**\n * Derive encryption key\n * @param {Number} keyVersion - key derivation differs for v5 keys\n * @param {module:type/s2k} s2k\n * @param {String} passphrase\n * @param {module:enums.symmetric} cipherAlgo\n * @param {module:enums.aead} [aeadMode] - for AEAD-encrypted keys only (excluding v5)\n * @param {Uint8Array} [serializedPacketTag] - for AEAD-encrypted keys only (excluding v5)\n * @param {Boolean} [isLegacyAEAD] - for AEAD-encrypted keys from RFC4880bis (v4 and v5 only)\n * @returns encryption key\n */\nasync function produceEncryptionKey(keyVersion, s2k, passphrase, cipherAlgo, aeadMode, serializedPacketTag, isLegacyAEAD) {\n  if (s2k.type === 'argon2' && !aeadMode) {\n    throw new Error('Using Argon2 S2K without AEAD is not allowed');\n  }\n  if (s2k.type === 'simple' && keyVersion === 6) {\n    throw new Error('Using Simple S2K with version 6 keys is not allowed');\n  }\n  const { keySize } = getCipherParams(cipherAlgo);\n  const derivedKey = await s2k.produceKey(passphrase, keySize);\n  if (!aeadMode || keyVersion === 5 || isLegacyAEAD) {\n    return derivedKey;\n  }\n  const info = util.concatUint8Array([\n    serializedPacketTag,\n    new Uint8Array([keyVersion, cipherAlgo, aeadMode])\n  ]);\n  return computeHKDF(enums.hash.sha256, derivedKey, new Uint8Array(), info, keySize);\n}\n\nexport default SecretKeyPacket;\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport enums from '../enums';\nimport util from '../util';\nimport defaultConfig from '../config';\n\n/**\n * Implementation of the User ID Packet (Tag 13)\n *\n * A User ID packet consists of UTF-8 text that is intended to represent\n * the name and email address of the key holder.  By convention, it\n * includes an RFC 2822 [RFC2822] mail name-addr, but there are no\n * restrictions on its content.  The packet length in the header\n * specifies the length of the User ID.\n */\nclass UserIDPacket {\n  static get tag() {\n    return enums.packet.userID;\n  }\n\n  constructor() {\n    /** A string containing the user id. Usually in the form\n     * John Doe <john@example.com>\n     * @type {String}\n     */\n    this.userID = '';\n\n    this.name = '';\n    this.email = '';\n    this.comment = '';\n  }\n\n  /**\n   * Create UserIDPacket instance from object\n   * @param {Object} userID - Object specifying userID name, email and comment\n   * @returns {UserIDPacket}\n   * @static\n   */\n  static fromObject(userID) {\n    if (util.isString(userID) ||\n      (userID.name && !util.isString(userID.name)) ||\n      (userID.email && !util.isEmailAddress(userID.email)) ||\n      (userID.comment && !util.isString(userID.comment))) {\n      throw new Error('Invalid user ID format');\n    }\n    const packet = new UserIDPacket();\n    Object.assign(packet, userID);\n    const components = [];\n    if (packet.name) components.push(packet.name);\n    if (packet.comment) components.push(`(${packet.comment})`);\n    if (packet.email) components.push(`<${packet.email}>`);\n    packet.userID = components.join(' ');\n    return packet;\n  }\n\n  /**\n   * Parsing function for a user id packet (tag 13).\n   * @param {Uint8Array} input - Payload of a tag 13 packet\n   */\n  read(bytes, config = defaultConfig) {\n    const userID = util.decodeUTF8(bytes);\n    if (userID.length > config.maxUserIDLength) {\n      throw new Error('User ID string is too long');\n    }\n\n    /**\n     * We support the conventional cases described in https://www.ietf.org/id/draft-dkg-openpgp-userid-conventions-00.html#section-4.1,\n     * as well comments placed between the name (if present) and the bracketed email address:\n     * - name (comment) <email>\n     * - email\n     * In the first case, the `email` is the only required part, and it must contain the `@` symbol.\n     * The `name` and `comment` parts can include any letters, whitespace, and symbols, except for `(` and `)`,\n     * since they interfere with `comment` parsing.\n     */\n\n    const isValidEmail = str => /^[^\\s@]+@[^\\s@]+$/.test(str); // enforce single @ and no whitespace\n    const firstBracket = userID.indexOf('<');\n    const lastBracket = userID.lastIndexOf('>');\n    if (\n      firstBracket !== -1 &&\n      lastBracket !== -1 &&\n      lastBracket > firstBracket\n    ) {\n      const potentialEmail = userID.substring(firstBracket + 1, lastBracket);\n      if (isValidEmail(potentialEmail)) {\n        this.email = potentialEmail;\n        const beforeEmail = userID.substring(0, firstBracket).trim();\n        const firstParen = beforeEmail.indexOf('(');\n        const lastParen = beforeEmail.lastIndexOf(')');\n        if (firstParen !== -1 && lastParen !== -1 && lastParen > firstParen) {\n          this.comment = beforeEmail\n            .substring(firstParen + 1, lastParen)\n            .trim();\n          this.name = beforeEmail.substring(0, firstParen).trim();\n        } else {\n          this.name = beforeEmail;\n          this.comment = '';\n        }\n      }\n    } else if (isValidEmail(userID.trim())) {\n      // unbracketed email case\n      this.email = userID.trim();\n      this.name = '';\n      this.comment = '';\n    }\n\n    this.userID = userID;\n  }\n\n  /**\n   * Creates a binary representation of the user id packet\n   * @returns {Uint8Array} Binary representation.\n   */\n  write() {\n    return util.encodeUTF8(this.userID);\n  }\n\n  equals(otherUserID) {\n    return otherUserID && otherUserID.userID === this.userID;\n  }\n}\n\nexport default UserIDPacket;\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport SecretKeyPacket from './secret_key';\nimport enums from '../enums';\nimport defaultConfig from '../config';\n\n/**\n * A Secret-Subkey packet (tag 7) is the subkey analog of the Secret\n * Key packet and has exactly the same format.\n * @extends SecretKeyPacket\n */\nclass SecretSubkeyPacket extends SecretKeyPacket {\n  static get tag() {\n    return enums.packet.secretSubkey;\n  }\n\n  /**\n   * @param {Date} [date] - Creation date\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   */\n  constructor(date = new Date(), config = defaultConfig) {\n    super(date, config);\n  }\n}\n\nexport default SecretSubkeyPacket;\n","import enums from '../enums';\nimport { UnsupportedError } from './packet';\n\n/**\n * Implementation of the Trust Packet (Tag 12)\n *\n * {@link https://tools.ietf.org/html/rfc4880#section-5.10|RFC4880 5.10}:\n * The Trust packet is used only within keyrings and is not normally\n * exported.  Trust packets contain data that record the user's\n * specifications of which key holders are trustworthy introducers,\n * along with other information that implementing software uses for\n * trust information.  The format of Trust packets is defined by a given\n * implementation.\n *\n * Trust packets SHOULD NOT be emitted to output streams that are\n * transferred to other users, and they SHOULD be ignored on any input\n * other than local keyring files.\n */\nclass TrustPacket {\n  static get tag() {\n    return enums.packet.trust;\n  }\n\n  /**\n   * Parsing function for a trust packet (tag 12).\n   * Currently not implemented as we ignore trust packets\n   */\n  read() {\n    throw new UnsupportedError('Trust packets are not supported');\n  }\n\n  write() {\n    throw new UnsupportedError('Trust packets are not supported');\n  }\n}\n\nexport default TrustPacket;\n","// OpenPGP.js - An OpenPGP implementation in javascript\n// Copyright (C) 2022 Proton AG\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport { getRandomBytes } from '../crypto';\nimport enums from '../enums';\n\n/**\n * Implementation of the Padding Packet\n *\n * {@link https://datatracker.ietf.org/doc/html/draft-ietf-openpgp-crypto-refresh#name-padding-packet-tag-21}:\n * Padding Packet\n */\nclass PaddingPacket {\n  static get tag() {\n    return enums.packet.padding;\n  }\n\n  constructor() {\n    this.padding = null;\n  }\n\n  /**\n   * Read a padding packet\n   * @param {Uint8Array | ReadableStream<Uint8Array>} bytes\n   */\n  read(bytes) { // eslint-disable-line @typescript-eslint/no-unused-vars\n    // Padding packets are ignored, so this function is never called.\n  }\n\n  /**\n   * Write the padding packet\n   * @returns {Uint8Array} The padding packet.\n   */\n  write() {\n    return this.padding;\n  }\n\n  /**\n   * Create random padding.\n   * @param {Number} length - The length of padding to be generated.\n   * @throws {Error} if padding generation was not successful\n   * @async\n   */\n  async createPadding(length) {\n    this.padding = await getRandomBytes(length);\n  }\n}\n\nexport default PaddingPacket;\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport { armor, unarmor } from './encoding/armor';\nimport { PacketList, SignaturePacket } from './packet';\nimport enums from './enums';\nimport util from './util';\nimport defaultConfig from './config';\n\n// A Signature can contain the following packets\nconst allowedPackets = /*#__PURE__*/ util.constructAllowedPackets([SignaturePacket]);\n\n/**\n * Class that represents an OpenPGP signature.\n */\nexport class Signature {\n  /**\n   * @param {PacketList} packetlist - The signature packets\n   */\n  constructor(packetlist) {\n    this.packets = packetlist || new PacketList();\n  }\n\n  /**\n   * Returns binary encoded signature\n   * @returns {ReadableStream<Uint8Array>} Binary signature.\n   */\n  write() {\n    return this.packets.write();\n  }\n\n  /**\n   * Returns ASCII armored text of signature\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {ReadableStream<String>} ASCII armor.\n   */\n  armor(config = defaultConfig) {\n    // An ASCII-armored sequence of Signature packets that only includes v6 Signature packets MUST NOT contain a CRC24 footer.\n    const emitChecksum = this.packets.some(packet => packet.constructor.tag === SignaturePacket.tag && packet.version !== 6);\n    return armor(enums.armor.signature, this.write(), undefined, undefined, undefined, emitChecksum, config);\n  }\n\n  /**\n   * Returns an array of KeyIDs of all of the issuers who created this signature\n   * @returns {Array<KeyID>} The Key IDs of the signing keys\n   */\n  getSigningKeyIDs() {\n    return this.packets.map(packet => packet.issuerKeyID);\n  }\n}\n\n/**\n * reads an (optionally armored) OpenPGP signature and returns a signature object\n * @param {Object} options\n * @param {String} [options.armoredSignature] - Armored signature to be parsed\n * @param {Uint8Array} [options.binarySignature] - Binary signature to be parsed\n * @param {Object} [options.config] - Custom configuration settings to overwrite those in [config]{@link module:config}\n * @returns {Promise<Signature>} New signature object.\n * @async\n * @static\n */\nexport async function readSignature({ armoredSignature, binarySignature, config, ...rest }) {\n  config = { ...defaultConfig, ...config };\n  let input = armoredSignature || binarySignature;\n  if (!input) {\n    throw new Error('readSignature: must pass options object containing `armoredSignature` or `binarySignature`');\n  }\n  if (armoredSignature && !util.isString(armoredSignature)) {\n    throw new Error('readSignature: options.armoredSignature must be a string');\n  }\n  if (binarySignature && !util.isUint8Array(binarySignature)) {\n    throw new Error('readSignature: options.binarySignature must be a Uint8Array');\n  }\n  const unknownOptions = Object.keys(rest); if (unknownOptions.length > 0) throw new Error(`Unknown option: ${unknownOptions.join(', ')}`);\n\n  if (armoredSignature) {\n    const { type, data } = await unarmor(input, config);\n    if (type !== enums.armor.signature) {\n      throw new Error('Armored text not of type signature');\n    }\n    input = data;\n  }\n  const packetlist = await PacketList.fromBinary(input, allowedPackets, config);\n  return new Signature(packetlist);\n}\n","/**\n * @fileoverview Provides helpers methods for key module\n * @module key/helper\n */\n\nimport {\n  SecretKeyPacket,\n  SecretSubkeyPacket,\n  SignaturePacket\n} from '../packet';\nimport enums from '../enums';\nimport { getPreferredCurveHashAlgo, getHashByteLength } from '../crypto';\nimport util from '../util';\nimport defaultConfig from '../config';\n\nexport async function generateSecretSubkey(options, config) {\n  const secretSubkeyPacket = new SecretSubkeyPacket(options.date, config);\n  secretSubkeyPacket.packets = null;\n  secretSubkeyPacket.algorithm = enums.write(enums.publicKey, options.algorithm);\n  await secretSubkeyPacket.generate(options.rsaBits, options.curve);\n  await secretSubkeyPacket.computeFingerprintAndKeyID();\n  return secretSubkeyPacket;\n}\n\nexport async function generateSecretKey(options, config) {\n  const secretKeyPacket = new SecretKeyPacket(options.date, config);\n  secretKeyPacket.packets = null;\n  secretKeyPacket.algorithm = enums.write(enums.publicKey, options.algorithm);\n  await secretKeyPacket.generate(options.rsaBits, options.curve, options.config);\n  await secretKeyPacket.computeFingerprintAndKeyID();\n  return secretKeyPacket;\n}\n\n/**\n * Returns the valid and non-expired signature that has the latest creation date, while ignoring signatures created in the future.\n * @param {Array<SignaturePacket>} signatures - List of signatures\n * @param {PublicKeyPacket|PublicSubkeyPacket} publicKey - Public key packet to verify the signature\n * @param {module:enums.signature} signatureType - Signature type to determine how to hash the data (NB: for userID signatures,\n *                          `enums.signatures.certGeneric` should be given regardless of the actual trust level)\n * @param {Date} date - Use the given date instead of the current time\n * @param {Object} config - full configuration\n * @returns {Promise<SignaturePacket>} The latest valid signature.\n * @async\n */\nexport async function getLatestValidSignature(signatures, publicKey, signatureType, dataToVerify, date = new Date(), config) {\n  let latestValid;\n  let exception;\n  for (let i = signatures.length - 1; i >= 0; i--) {\n    try {\n      if (\n        (!latestValid || signatures[i].created >= latestValid.created)\n      ) {\n        await signatures[i].verify(publicKey, signatureType, dataToVerify, date, undefined, config);\n        latestValid = signatures[i];\n      }\n    } catch (e) {\n      exception = e;\n    }\n  }\n  if (!latestValid) {\n    throw util.wrapError(\n      `Could not find valid ${enums.read(enums.signature, signatureType)} signature in key ${publicKey.getKeyID().toHex()}`\n        .replace('certGeneric ', 'self-')\n        .replace(/([a-z])([A-Z])/g, (_, $1, $2) => $1 + ' ' + $2.toLowerCase()),\n      exception);\n  }\n  return latestValid;\n}\n\nexport function isDataExpired(keyPacket, signature, date = new Date()) {\n  const normDate = util.normalizeDate(date);\n  if (normDate !== null) {\n    const expirationTime = getKeyExpirationTime(keyPacket, signature);\n    return !(keyPacket.created <= normDate && normDate < expirationTime);\n  }\n  return false;\n}\n\n/**\n * Create Binding signature to the key according to the {@link https://tools.ietf.org/html/rfc4880#section-5.2.1}\n * @param {SecretSubkeyPacket} subkey - Subkey key packet\n * @param {SecretKeyPacket} primaryKey - Primary key packet\n * @param {Object} options\n * @param {Object} config - Full configuration\n */\nexport async function createBindingSignature(subkey, primaryKey, options, config) {\n  const dataToSign = {};\n  dataToSign.key = primaryKey;\n  dataToSign.bind = subkey;\n  const signatureProperties = { signatureType: enums.signature.subkeyBinding };\n  if (options.sign) {\n    signatureProperties.keyFlags = [enums.keyFlags.signData];\n    signatureProperties.embeddedSignature = await createSignaturePacket(dataToSign, [], subkey, {\n      signatureType: enums.signature.keyBinding\n    }, options.date, undefined, undefined, undefined, config);\n  } else {\n    signatureProperties.keyFlags = [enums.keyFlags.encryptCommunication | enums.keyFlags.encryptStorage];\n  }\n  if (options.keyExpirationTime > 0) {\n    signatureProperties.keyExpirationTime = options.keyExpirationTime;\n    signatureProperties.keyNeverExpires = false;\n  }\n  const subkeySignaturePacket = await createSignaturePacket(dataToSign, [], primaryKey, signatureProperties, options.date, undefined, undefined, undefined, config);\n  return subkeySignaturePacket;\n}\n\n/**\n * Returns the preferred signature hash algorithm for a set of keys.\n * @param {Array<Key>} [targetKeys] - The keys to get preferences from\n * @param {SecretKeyPacket|SecretSubkeyPacket} signingKeyPacket - key packet used for signing\n * @param {Date} [date] - Use the given date for verification instead of the current time\n * @param {Object} [targetUserID] - User IDs corresponding to `targetKeys` to get preferences from\n * @param {Object} config - full configuration\n * @returns {Promise<enums.hash>}\n * @async\n */\nexport async function getPreferredHashAlgo(targetKeys, signingKeyPacket, date = new Date(), targetUserIDs = [], config) {\n  /**\n   * If `preferredSenderAlgo` appears in the prefs of all recipients, we pick it; otherwise, we use the\n   * strongest supported algo (`defaultAlgo` is always implicitly supported by all keys).\n   * if no keys are available, `preferredSenderAlgo` is returned.\n   * For ECC signing key, the curve preferred hash is taken into account as well (see logic below).\n   */\n  const defaultAlgo = enums.hash.sha256; // MUST implement\n  const preferredSenderAlgo = config.preferredHashAlgorithm;\n\n  const supportedAlgosPerTarget = await Promise.all(targetKeys.map(async (key, i) => {\n    const selfCertification = await key.getPrimarySelfSignature(date, targetUserIDs[i], config);\n    const targetPrefs = selfCertification.preferredHashAlgorithms;\n    return targetPrefs || [];\n  }));\n  const supportedAlgosMap = new Map(); // use Map over object to preserve numeric keys\n  for (const supportedAlgos of supportedAlgosPerTarget) {\n    for (const hashAlgo of supportedAlgos) {\n      try {\n        // ensure that `hashAlgo` is recognized/implemented by us, otherwise e.g. `getHashByteLength` will throw later on\n        const supportedAlgo = enums.write(enums.hash, hashAlgo);\n        supportedAlgosMap.set(\n          supportedAlgo,\n          supportedAlgosMap.has(supportedAlgo) ? supportedAlgosMap.get(supportedAlgo) + 1 : 1\n        );\n      } catch {}\n    }\n  }\n  const isSupportedHashAlgo = hashAlgo => targetKeys.length === 0 || supportedAlgosMap.get(hashAlgo) === targetKeys.length || hashAlgo === defaultAlgo;\n  const getStrongestSupportedHashAlgo = () => {\n    if (supportedAlgosMap.size === 0) {\n      return defaultAlgo;\n    }\n    const sortedHashAlgos = Array.from(supportedAlgosMap.keys())\n      .filter(hashAlgo => isSupportedHashAlgo(hashAlgo))\n      .sort((algoA, algoB) => getHashByteLength(algoA) - getHashByteLength(algoB));\n    const strongestHashAlgo = sortedHashAlgos[0];\n    // defaultAlgo is always implicitly supported, and might be stronger than the rest\n    return getHashByteLength(strongestHashAlgo) >= getHashByteLength(defaultAlgo) ? strongestHashAlgo : defaultAlgo;\n  };\n\n  const eccAlgos = new Set([\n    enums.publicKey.ecdsa,\n    enums.publicKey.eddsaLegacy,\n    enums.publicKey.ed25519,\n    enums.publicKey.ed448\n  ]);\n\n  if (eccAlgos.has(signingKeyPacket.algorithm)) {\n    // For ECC, the returned hash algo MUST be at least as strong as `preferredCurveHashAlgo`, see:\n    // - ECDSA: https://www.rfc-editor.org/rfc/rfc9580.html#section-5.2.3.2-5\n    // - EdDSALegacy: https://www.rfc-editor.org/rfc/rfc9580.html#section-5.2.3.3-3\n    // - Ed25519: https://www.rfc-editor.org/rfc/rfc9580.html#section-5.2.3.4-4\n    // - Ed448: https://www.rfc-editor.org/rfc/rfc9580.html#section-5.2.3.5-4\n    // Hence, we return the `preferredHashAlgo` as long as it's supported and strong enough;\n    // Otherwise, we look at the strongest supported algo, and ultimately fallback to the curve\n    // preferred algo, even if not supported by all targets.\n    const preferredCurveAlgo = getPreferredCurveHashAlgo(signingKeyPacket.algorithm, signingKeyPacket.publicParams.oid);\n\n    const preferredSenderAlgoIsSupported = isSupportedHashAlgo(preferredSenderAlgo);\n    const preferredSenderAlgoStrongerThanCurveAlgo = getHashByteLength(preferredSenderAlgo) >= getHashByteLength(preferredCurveAlgo);\n\n    if (preferredSenderAlgoIsSupported && preferredSenderAlgoStrongerThanCurveAlgo) {\n      return preferredSenderAlgo;\n    } else {\n      const strongestSupportedAlgo = getStrongestSupportedHashAlgo();\n      return getHashByteLength(strongestSupportedAlgo) >= getHashByteLength(preferredCurveAlgo) ?\n        strongestSupportedAlgo :\n        preferredCurveAlgo;\n    }\n  }\n\n  // `preferredSenderAlgo` may be weaker than the default, but we do not guard against this,\n  // since it was manually set by the sender.\n  return isSupportedHashAlgo(preferredSenderAlgo) ? preferredSenderAlgo : getStrongestSupportedHashAlgo();\n}\n\n/**\n * Returns the preferred compression algorithm for a set of keys\n * @param {Array<Key>} [keys] - Set of keys\n * @param {Date} [date] - Use the given date for verification instead of the current time\n * @param {Array} [userIDs] - User IDs\n * @param {Object} [config] - Full configuration, defaults to openpgp.config\n * @returns {Promise<module:enums.compression>} Preferred compression algorithm\n * @async\n */\nexport async function getPreferredCompressionAlgo(keys = [], date = new Date(), userIDs = [], config = defaultConfig) {\n  const defaultAlgo = enums.compression.uncompressed;\n  const preferredSenderAlgo = config.preferredCompressionAlgorithm;\n\n  // if preferredSenderAlgo appears in the prefs of all recipients, we pick it\n  // otherwise we use the default algo\n  // if no keys are available, preferredSenderAlgo is returned\n  const senderAlgoSupport = await Promise.all(keys.map(async function(key, i) {\n    const selfCertification = await key.getPrimarySelfSignature(date, userIDs[i], config);\n    const recipientPrefs = selfCertification.preferredCompressionAlgorithms;\n    return !!recipientPrefs && recipientPrefs.indexOf(preferredSenderAlgo) >= 0;\n  }));\n  return senderAlgoSupport.every(Boolean) ? preferredSenderAlgo : defaultAlgo;\n}\n\n/**\n * Returns the preferred symmetric and AEAD algorithm (if any) for a set of keys\n * @param {Array<Key>} [keys] - Set of keys\n * @param {Date} [date] - Use the given date for verification instead of the current time\n * @param {Array} [userIDs] - User IDs\n * @param {Object} [config] - Full configuration, defaults to openpgp.config\n * @returns {Promise<{ symmetricAlgo: module:enums.symmetric, aeadAlgo: module:enums.aead | undefined }>} Object containing the preferred symmetric algorithm, and the preferred AEAD algorithm, or undefined if CFB is preferred\n * @async\n */\nexport async function getPreferredCipherSuite(keys = [], date = new Date(), userIDs = [], config = defaultConfig) {\n  const selfSigs = await Promise.all(keys.map((key, i) => key.getPrimarySelfSignature(date, userIDs[i], config)));\n  const withAEAD = keys.length ?\n    selfSigs.every(selfSig => selfSig.features && (selfSig.features[0] & enums.features.seipdv2)) :\n    config.aeadProtect;\n\n  if (withAEAD) {\n    const defaultCipherSuite = { symmetricAlgo: enums.symmetric.aes128, aeadAlgo: enums.aead.ocb };\n    const desiredCipherSuites = [\n      { symmetricAlgo: config.preferredSymmetricAlgorithm, aeadAlgo: config.preferredAEADAlgorithm },\n      { symmetricAlgo: config.preferredSymmetricAlgorithm, aeadAlgo: enums.aead.ocb },\n      { symmetricAlgo: enums.symmetric.aes128, aeadAlgo: config.preferredAEADAlgorithm }\n    ];\n    for (const desiredCipherSuite of desiredCipherSuites) {\n      if (selfSigs.every(selfSig => selfSig.preferredCipherSuites && selfSig.preferredCipherSuites.some(\n        cipherSuite => cipherSuite[0] === desiredCipherSuite.symmetricAlgo && cipherSuite[1] === desiredCipherSuite.aeadAlgo\n      ))) {\n        return desiredCipherSuite;\n      }\n    }\n    return defaultCipherSuite;\n  }\n  const defaultSymAlgo = enums.symmetric.aes128;\n  const desiredSymAlgo = config.preferredSymmetricAlgorithm;\n  return {\n    symmetricAlgo: selfSigs.every(selfSig => selfSig.preferredSymmetricAlgorithms && selfSig.preferredSymmetricAlgorithms.includes(desiredSymAlgo)) ?\n      desiredSymAlgo :\n      defaultSymAlgo,\n    aeadAlgo: undefined\n  };\n}\n\n/**\n * Create signature packet\n * @param {Object} dataToSign - Contains packets to be signed\n * @param {Array<Key>} recipientKeys - keys to get preferences from\n * @param  {SecretKeyPacket|\n *          SecretSubkeyPacket}              signingKeyPacket secret key packet for signing\n * @param {Object} [signatureProperties] - Properties to write on the signature packet before signing\n * @param {Date} [date] - Override the creationtime of the signature\n * @param {Object} [userID] - User ID\n * @param {Array} [notations] - Notation Data to add to the signature, e.g. [{ name: 'test@example.org', value: new TextEncoder().encode('test'), humanReadable: true, critical: false }]\n * @param {Object} [detached] - Whether to create a detached signature packet\n * @param {Object} config - full configuration\n * @returns {Promise<SignaturePacket>} Signature packet.\n */\nexport async function createSignaturePacket(dataToSign, recipientKeys, signingKeyPacket, signatureProperties, date, recipientUserIDs, notations = [], detached = false, config) {\n  if (signingKeyPacket.isDummy()) {\n    throw new Error('Cannot sign with a gnu-dummy key.');\n  }\n  if (!signingKeyPacket.isDecrypted()) {\n    throw new Error('Signing key is not decrypted.');\n  }\n  const signaturePacket = new SignaturePacket();\n  Object.assign(signaturePacket, signatureProperties);\n  signaturePacket.publicKeyAlgorithm = signingKeyPacket.algorithm;\n  signaturePacket.hashAlgorithm = await getPreferredHashAlgo(recipientKeys, signingKeyPacket, date, recipientUserIDs, config);\n  signaturePacket.rawNotations = [...notations];\n  await signaturePacket.sign(signingKeyPacket, dataToSign, date, detached, config);\n  return signaturePacket;\n}\n\n/**\n * Merges signatures from source[attr] to dest[attr]\n * @param {Object} source\n * @param {Object} dest\n * @param {String} attr\n * @param {Date} [date] - date to use for signature expiration check, instead of the current time\n * @param {Function} [checkFn] - signature only merged if true\n */\nexport async function mergeSignatures(source, dest, attr, date = new Date(), checkFn) {\n  source = source[attr];\n  if (source) {\n    if (!dest[attr].length) {\n      dest[attr] = source;\n    } else {\n      await Promise.all(source.map(async function(sourceSig) {\n        if (!sourceSig.isExpired(date) && (!checkFn || await checkFn(sourceSig)) &&\n            !dest[attr].some(function(destSig) {\n              return util.equalsUint8Array(destSig.writeParams(), sourceSig.writeParams());\n            })) {\n          dest[attr].push(sourceSig);\n        }\n      }));\n    }\n  }\n}\n\n/**\n * Checks if a given certificate or binding signature is revoked\n * @param  {SecretKeyPacket|\n *          PublicKeyPacket}        primaryKey   The primary key packet\n * @param {Object} dataToVerify - The data to check\n * @param {Array<SignaturePacket>} revocations - The revocation signatures to check\n * @param {SignaturePacket} signature - The certificate or signature to check\n * @param  {PublicSubkeyPacket|\n *          SecretSubkeyPacket|\n *          PublicKeyPacket|\n *          SecretKeyPacket} key, optional The key packet to verify the signature, instead of the primary key\n * @param {Date} date - Use the given date instead of the current time\n * @param {Object} config - Full configuration\n * @returns {Promise<Boolean>} True if the signature revokes the data.\n * @async\n */\nexport async function isDataRevoked(primaryKey, signatureType, dataToVerify, revocations, signature, key, date = new Date(), config) {\n  key = key || primaryKey;\n  const revocationKeyIDs = [];\n  await Promise.all(revocations.map(async function(revocationSignature) {\n    try {\n      if (\n        // Note: a third-party revocation signature could legitimately revoke a\n        // self-signature if the signature has an authorized revocation key.\n        // However, we don't support passing authorized revocation keys, nor\n        // verifying such revocation signatures. Instead, we indicate an error\n        // when parsing a key with an authorized revocation key, and ignore\n        // third-party revocation signatures here. (It could also be revoking a\n        // third-party key certification, which should only affect\n        // `verifyAllCertifications`.)\n        !signature || revocationSignature.issuerKeyID.equals(signature.issuerKeyID)\n      ) {\n        const isHardRevocation = ![\n          enums.reasonForRevocation.keyRetired,\n          enums.reasonForRevocation.keySuperseded,\n          enums.reasonForRevocation.userIDInvalid\n        ].includes(revocationSignature.reasonForRevocationFlag);\n\n        await revocationSignature.verify(\n          key, signatureType, dataToVerify, isHardRevocation ? null : date, false, config\n        );\n\n        // TODO get an identifier of the revoked object instead\n        revocationKeyIDs.push(revocationSignature.issuerKeyID);\n      }\n    } catch (e) {}\n  }));\n  // TODO further verify that this is the signature that should be revoked\n  if (signature) {\n    signature.revoked = revocationKeyIDs.some(keyID => keyID.equals(signature.issuerKeyID)) ? true :\n      signature.revoked || false;\n    return signature.revoked;\n  }\n  return revocationKeyIDs.length > 0;\n}\n\n/**\n * Returns key expiration time based on the given certification signature.\n * The expiration time of the signature is ignored.\n * @param {PublicSubkeyPacket|PublicKeyPacket} keyPacket - key to check\n * @param {SignaturePacket} signature - signature to process\n * @returns {Date|Infinity} expiration time or infinity if the key does not expire\n */\nexport function getKeyExpirationTime(keyPacket, signature) {\n  let expirationTime;\n  // check V4 expiration time\n  if (signature.keyNeverExpires === false) {\n    expirationTime = keyPacket.created.getTime() + signature.keyExpirationTime * 1000;\n  }\n  return expirationTime ? new Date(expirationTime) : Infinity;\n}\n\nexport function sanitizeKeyOptions(options, subkeyDefaults = {}) {\n  options.type = options.type || subkeyDefaults.type;\n  options.curve = options.curve || subkeyDefaults.curve;\n  options.rsaBits = options.rsaBits || subkeyDefaults.rsaBits;\n  options.keyExpirationTime = options.keyExpirationTime !== undefined ? options.keyExpirationTime : subkeyDefaults.keyExpirationTime;\n  options.passphrase = util.isString(options.passphrase) ? options.passphrase : subkeyDefaults.passphrase;\n  options.date = options.date || subkeyDefaults.date;\n\n  options.sign = options.sign || false;\n\n  switch (options.type) {\n    case 'ecc': // NB: this case also handles legacy eddsa and x25519 keys, based on `options.curve`\n      try {\n        options.curve = enums.write(enums.curve, options.curve);\n      } catch (e) {\n        throw new Error('Unknown curve');\n      }\n      if (options.curve === enums.curve.ed25519Legacy || options.curve === enums.curve.curve25519Legacy ||\n        options.curve === 'ed25519' || options.curve === 'curve25519') { // keep support for curve names without 'Legacy' addition, for now\n        options.curve = options.sign ? enums.curve.ed25519Legacy : enums.curve.curve25519Legacy;\n      }\n      if (options.sign) {\n        options.algorithm = options.curve === enums.curve.ed25519Legacy ? enums.publicKey.eddsaLegacy : enums.publicKey.ecdsa;\n      } else {\n        options.algorithm = enums.publicKey.ecdh;\n      }\n      break;\n    case 'curve25519':\n      options.algorithm = options.sign ? enums.publicKey.ed25519 : enums.publicKey.x25519;\n      break;\n    case 'curve448':\n      options.algorithm = options.sign ? enums.publicKey.ed448 : enums.publicKey.x448;\n      break;\n    case 'rsa':\n      options.algorithm = enums.publicKey.rsaEncryptSign;\n      break;\n    default:\n      throw new Error(`Unsupported key type ${options.type}`);\n  }\n  return options;\n}\n\nexport function validateSigningKeyPacket(keyPacket, signature, config) {\n  switch (keyPacket.algorithm) {\n    case enums.publicKey.rsaEncryptSign:\n    case enums.publicKey.rsaSign:\n    case enums.publicKey.dsa:\n    case enums.publicKey.ecdsa:\n    case enums.publicKey.eddsaLegacy:\n    case enums.publicKey.ed25519:\n    case enums.publicKey.ed448:\n      if (!signature.keyFlags && !config.allowMissingKeyFlags) {\n        throw new Error('None of the key flags is set: consider passing `config.allowMissingKeyFlags`');\n      }\n      return !signature.keyFlags ||\n        (signature.keyFlags[0] & enums.keyFlags.signData) !== 0;\n    default:\n      return false;\n  }\n}\n\nexport function validateEncryptionKeyPacket(keyPacket, signature, config) {\n  switch (keyPacket.algorithm) {\n    case enums.publicKey.rsaEncryptSign:\n    case enums.publicKey.rsaEncrypt:\n    case enums.publicKey.elgamal:\n    case enums.publicKey.ecdh:\n    case enums.publicKey.x25519:\n    case enums.publicKey.x448:\n      if (!signature.keyFlags && !config.allowMissingKeyFlags) {\n        throw new Error('None of the key flags is set: consider passing `config.allowMissingKeyFlags`');\n      }\n      return !signature.keyFlags ||\n        (signature.keyFlags[0] & enums.keyFlags.encryptCommunication) !== 0 ||\n        (signature.keyFlags[0] & enums.keyFlags.encryptStorage) !== 0;\n    default:\n      return false;\n  }\n}\n\nexport function validateDecryptionKeyPacket(keyPacket, signature, config) {\n  if (!signature.keyFlags && !config.allowMissingKeyFlags) {\n    throw new Error('None of the key flags is set: consider passing `config.allowMissingKeyFlags`');\n  }\n\n  switch (keyPacket.algorithm) {\n    case enums.publicKey.rsaEncryptSign:\n    case enums.publicKey.rsaEncrypt:\n    case enums.publicKey.elgamal:\n    case enums.publicKey.ecdh:\n    case enums.publicKey.x25519:\n    case enums.publicKey.x448: {\n      const isValidSigningKeyPacket = !signature.keyFlags || (signature.keyFlags[0] & enums.keyFlags.signData) !== 0;\n      if (isValidSigningKeyPacket && config.allowInsecureDecryptionWithSigningKeys) {\n        // This is only relevant for RSA keys, all other signing algorithms cannot decrypt\n        return true;\n      }\n\n      return !signature.keyFlags ||\n      (signature.keyFlags[0] & enums.keyFlags.encryptCommunication) !== 0 ||\n      (signature.keyFlags[0] & enums.keyFlags.encryptStorage) !== 0;\n    }\n    default:\n      return false;\n  }\n}\n\n/**\n * Check key against blacklisted algorithms and minimum strength requirements.\n * @param {SecretKeyPacket|PublicKeyPacket|\n *        SecretSubkeyPacket|PublicSubkeyPacket} keyPacket\n * @param {Config} config\n * @throws {Error} if the key packet does not meet the requirements\n */\nexport function checkKeyRequirements(keyPacket, config) {\n  const keyAlgo = enums.write(enums.publicKey, keyPacket.algorithm);\n  const algoInfo = keyPacket.getAlgorithmInfo();\n  if (config.rejectPublicKeyAlgorithms.has(keyAlgo)) {\n    throw new Error(`${algoInfo.algorithm} keys are considered too weak.`);\n  }\n  switch (keyAlgo) {\n    case enums.publicKey.rsaEncryptSign:\n    case enums.publicKey.rsaSign:\n    case enums.publicKey.rsaEncrypt:\n      if (algoInfo.bits < config.minRSABits) {\n        throw new Error(`RSA keys shorter than ${config.minRSABits} bits are considered too weak.`);\n      }\n      break;\n    case enums.publicKey.ecdsa:\n    case enums.publicKey.eddsaLegacy:\n    case enums.publicKey.ecdh:\n      if (config.rejectCurves.has(algoInfo.curve)) {\n        throw new Error(`Support for ${algoInfo.algorithm} keys using curve ${algoInfo.curve} is disabled.`);\n      }\n      break;\n    default:\n      break;\n  }\n}\n","/**\n * @module key/User\n */\n\nimport enums from '../enums';\nimport util from '../util';\nimport { PacketList } from '../packet';\nimport { mergeSignatures, isDataRevoked, createSignaturePacket } from './helper';\nimport defaultConfig from '../config';\n\n/**\n * Class that represents an user ID or attribute packet and the relevant signatures.\n  * @param {UserIDPacket|UserAttributePacket} userPacket - packet containing the user info\n  * @param {Key} mainKey - reference to main Key object containing the primary key and subkeys that the user is associated with\n */\nclass User {\n  constructor(userPacket, mainKey) {\n    this.userID = userPacket.constructor.tag === enums.packet.userID ? userPacket : null;\n    this.userAttribute = userPacket.constructor.tag === enums.packet.userAttribute ? userPacket : null;\n    this.selfCertifications = [];\n    this.otherCertifications = [];\n    this.revocationSignatures = [];\n    this.mainKey = mainKey;\n  }\n\n  /**\n   * Transforms structured user data to packetlist\n   * @returns {PacketList}\n   */\n  toPacketList() {\n    const packetlist = new PacketList();\n    packetlist.push(this.userID || this.userAttribute);\n    packetlist.push(...this.revocationSignatures);\n    packetlist.push(...this.selfCertifications);\n    packetlist.push(...this.otherCertifications);\n    return packetlist;\n  }\n\n  /**\n   * Shallow clone\n   * @returns {User}\n   */\n  clone() {\n    const user = new User(this.userID || this.userAttribute, this.mainKey);\n    user.selfCertifications = [...this.selfCertifications];\n    user.otherCertifications = [...this.otherCertifications];\n    user.revocationSignatures = [...this.revocationSignatures];\n    return user;\n  }\n\n  /**\n   * Generate third-party certifications over this user and its primary key\n   * @param {Array<PrivateKey>} signingKeys - Decrypted private keys for signing\n   * @param {Date} [date] - Date to use as creation date of the certificate, instead of the current time\n   * @param {Object} config - Full configuration\n   * @returns {Promise<User>} New user with new certifications.\n   * @async\n   */\n  async certify(signingKeys, date, config) {\n    const primaryKey = this.mainKey.keyPacket;\n    const dataToSign = {\n      userID: this.userID,\n      userAttribute: this.userAttribute,\n      key: primaryKey\n    };\n    const user = new User(dataToSign.userID || dataToSign.userAttribute, this.mainKey);\n    user.otherCertifications = await Promise.all(signingKeys.map(async function(privateKey) {\n      if (!privateKey.isPrivate()) {\n        throw new Error('Need private key for signing');\n      }\n      if (privateKey.hasSameFingerprintAs(primaryKey)) {\n        throw new Error(\"The user's own key can only be used for self-certifications\");\n      }\n      const signingKey = await privateKey.getSigningKey(undefined, date, undefined, config);\n      return createSignaturePacket(dataToSign, [privateKey], signingKey.keyPacket, {\n        // Most OpenPGP implementations use generic certification (0x10)\n        signatureType: enums.signature.certGeneric,\n        keyFlags: [enums.keyFlags.certifyKeys | enums.keyFlags.signData]\n      }, date, undefined, undefined, undefined, config);\n    }));\n    await user.update(this, date, config);\n    return user;\n  }\n\n  /**\n   * Checks if a given certificate of the user is revoked\n   * @param {SignaturePacket} certificate - The certificate to verify\n   * @param  {PublicSubkeyPacket|\n   *          SecretSubkeyPacket|\n   *          PublicKeyPacket|\n   *          SecretKeyPacket} [keyPacket] The key packet to verify the signature, instead of the primary key\n   * @param {Date} [date] - Use the given date for verification instead of the current time\n   * @param {Object} config - Full configuration\n   * @returns {Promise<Boolean>} True if the certificate is revoked.\n   * @async\n   */\n  async isRevoked(certificate, keyPacket, date = new Date(), config = defaultConfig) {\n    const primaryKey = this.mainKey.keyPacket;\n    return isDataRevoked(primaryKey, enums.signature.certRevocation, {\n      key: primaryKey,\n      userID: this.userID,\n      userAttribute: this.userAttribute\n    }, this.revocationSignatures, certificate, keyPacket, date, config);\n  }\n\n  /**\n   * Verifies the user certificate.\n   * @param {SignaturePacket} certificate - A certificate of this user\n   * @param {Array<PublicKey>} verificationKeys - Array of keys to verify certificate signatures\n   * @param {Date} [date] - Use the given date instead of the current time\n   * @param {Object} config - Full configuration\n   * @returns {Promise<true|null>} true if the certificate could be verified, or null if the verification keys do not correspond to the certificate\n   * @throws if the user certificate is invalid.\n   * @async\n   */\n  async verifyCertificate(certificate, verificationKeys, date = new Date(), config) {\n    const that = this;\n    const primaryKey = this.mainKey.keyPacket;\n    const dataToVerify = {\n      userID: this.userID,\n      userAttribute: this.userAttribute,\n      key: primaryKey\n    };\n    const { issuerKeyID } = certificate;\n    const issuerKeys = verificationKeys.filter(key => key.getKeys(issuerKeyID).length > 0);\n    if (issuerKeys.length === 0) {\n      return null;\n    }\n    await Promise.all(issuerKeys.map(async key => {\n      const signingKey = await key.getSigningKey(issuerKeyID, certificate.created, undefined, config);\n      if (certificate.revoked || await that.isRevoked(certificate, signingKey.keyPacket, date, config)) {\n        throw new Error('User certificate is revoked');\n      }\n      try {\n        await certificate.verify(signingKey.keyPacket, enums.signature.certGeneric, dataToVerify, date, undefined, config);\n      } catch (e) {\n        throw util.wrapError('User certificate is invalid', e);\n      }\n    }));\n    return true;\n  }\n\n  /**\n   * Verifies all user certificates\n   * @param {Array<PublicKey>} verificationKeys - Array of keys to verify certificate signatures\n   * @param {Date} [date] - Use the given date instead of the current time\n   * @param {Object} config - Full configuration\n   * @returns {Promise<Array<{\n   *   keyID: module:type/keyid~KeyID,\n   *   valid: Boolean | null\n   * }>>} List of signer's keyID and validity of signature.\n   *      Signature validity is null if the verification keys do not correspond to the certificate.\n   * @async\n   */\n  async verifyAllCertifications(verificationKeys, date = new Date(), config) {\n    const that = this;\n    const certifications = this.selfCertifications.concat(this.otherCertifications);\n    return Promise.all(certifications.map(async certification => ({\n      keyID: certification.issuerKeyID,\n      valid: await that.verifyCertificate(certification, verificationKeys, date, config).catch(() => false)\n    })));\n  }\n\n  /**\n   * Verify User. Checks for existence of self signatures, revocation signatures\n   * and validity of self signature.\n   * @param {Date} date - Use the given date instead of the current time\n   * @param {Object} config - Full configuration\n   * @returns {Promise<true>} Status of user.\n   * @throws {Error} if there are no valid self signatures.\n   * @async\n   */\n  async verify(date = new Date(), config) {\n    if (!this.selfCertifications.length) {\n      throw new Error('No self-certifications found');\n    }\n    const that = this;\n    const primaryKey = this.mainKey.keyPacket;\n    const dataToVerify = {\n      userID: this.userID,\n      userAttribute: this.userAttribute,\n      key: primaryKey\n    };\n    // TODO replace when Promise.some or Promise.any are implemented\n    let exception;\n    for (let i = this.selfCertifications.length - 1; i >= 0; i--) {\n      try {\n        const selfCertification = this.selfCertifications[i];\n        if (selfCertification.revoked || await that.isRevoked(selfCertification, undefined, date, config)) {\n          throw new Error('Self-certification is revoked');\n        }\n        try {\n          await selfCertification.verify(primaryKey, enums.signature.certGeneric, dataToVerify, date, undefined, config);\n        } catch (e) {\n          throw util.wrapError('Self-certification is invalid', e);\n        }\n        return true;\n      } catch (e) {\n        exception = e;\n      }\n    }\n    throw exception;\n  }\n\n  /**\n   * Update user with new components from specified user\n   * @param {User} sourceUser - Source user to merge\n   * @param {Date} date - Date to verify the validity of signatures\n   * @param {Object} config - Full configuration\n   * @returns {Promise<undefined>}\n   * @async\n   */\n  async update(sourceUser, date, config) {\n    const primaryKey = this.mainKey.keyPacket;\n    const dataToVerify = {\n      userID: this.userID,\n      userAttribute: this.userAttribute,\n      key: primaryKey\n    };\n    // self signatures\n    await mergeSignatures(sourceUser, this, 'selfCertifications', date, async function(srcSelfSig) {\n      try {\n        await srcSelfSig.verify(primaryKey, enums.signature.certGeneric, dataToVerify, date, false, config);\n        return true;\n      } catch (e) {\n        return false;\n      }\n    });\n    // other signatures\n    await mergeSignatures(sourceUser, this, 'otherCertifications', date);\n    // revocation signatures\n    await mergeSignatures(sourceUser, this, 'revocationSignatures', date, function(srcRevSig) {\n      return isDataRevoked(primaryKey, enums.signature.certRevocation, dataToVerify, [srcRevSig], undefined, undefined, date, config);\n    });\n  }\n\n  /**\n   * Revokes the user\n   * @param {SecretKeyPacket} primaryKey - decrypted private primary key for revocation\n   * @param {Object} reasonForRevocation - optional, object indicating the reason for revocation\n   * @param  {module:enums.reasonForRevocation} reasonForRevocation.flag optional, flag indicating the reason for revocation\n   * @param  {String} reasonForRevocation.string optional, string explaining the reason for revocation\n   * @param {Date} date - optional, override the creationtime of the revocation signature\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<User>} New user with revocation signature.\n   * @async\n   */\n  async revoke(\n    primaryKey,\n    {\n      flag: reasonForRevocationFlag = enums.reasonForRevocation.noReason,\n      string: reasonForRevocationString = ''\n    } = {},\n    date = new Date(),\n    config = defaultConfig\n  ) {\n    const dataToSign = {\n      userID: this.userID,\n      userAttribute: this.userAttribute,\n      key: primaryKey\n    };\n    const user = new User(dataToSign.userID || dataToSign.userAttribute, this.mainKey);\n    user.revocationSignatures.push(await createSignaturePacket(dataToSign, [], primaryKey, {\n      signatureType: enums.signature.certRevocation,\n      reasonForRevocationFlag: enums.write(enums.reasonForRevocation, reasonForRevocationFlag),\n      reasonForRevocationString\n    }, date, undefined, undefined, false, config));\n    await user.update(this);\n    return user;\n  }\n}\n\nexport default User;\n","/**\n * @module key/Subkey\n */\n\nimport enums from '../enums';\nimport * as helper from './helper';\nimport { PacketList } from '../packet';\nimport defaultConfig from '../config';\n\n/**\n * Class that represents a subkey packet and the relevant signatures.\n * @borrows PublicSubkeyPacket#getKeyID as Subkey#getKeyID\n * @borrows PublicSubkeyPacket#getFingerprint as Subkey#getFingerprint\n * @borrows PublicSubkeyPacket#hasSameFingerprintAs as Subkey#hasSameFingerprintAs\n * @borrows PublicSubkeyPacket#getAlgorithmInfo as Subkey#getAlgorithmInfo\n * @borrows PublicSubkeyPacket#getCreationTime as Subkey#getCreationTime\n * @borrows PublicSubkeyPacket#isDecrypted as Subkey#isDecrypted\n */\nclass Subkey {\n  /**\n   * @param {SecretSubkeyPacket|PublicSubkeyPacket} subkeyPacket - subkey packet to hold in the Subkey\n   * @param {Key} mainKey - reference to main Key object, containing the primary key packet corresponding to the subkey\n   */\n  constructor(subkeyPacket, mainKey) {\n    this.keyPacket = subkeyPacket;\n    this.bindingSignatures = [];\n    this.revocationSignatures = [];\n    this.mainKey = mainKey;\n  }\n\n  /**\n   * Transforms structured subkey data to packetlist\n   * @returns {PacketList}\n   */\n  toPacketList() {\n    const packetlist = new PacketList();\n    packetlist.push(this.keyPacket);\n    packetlist.push(...this.revocationSignatures);\n    packetlist.push(...this.bindingSignatures);\n    return packetlist;\n  }\n\n  /**\n   * Shallow clone\n   * @return {Subkey}\n   */\n  clone() {\n    const subkey = new Subkey(this.keyPacket, this.mainKey);\n    subkey.bindingSignatures = [...this.bindingSignatures];\n    subkey.revocationSignatures = [...this.revocationSignatures];\n    return subkey;\n  }\n\n  /**\n   * Checks if a binding signature of a subkey is revoked\n   * @param {SignaturePacket} signature - The binding signature to verify\n   * @param  {PublicSubkeyPacket|\n   *          SecretSubkeyPacket|\n   *          PublicKeyPacket|\n   *          SecretKeyPacket} key, optional The key to verify the signature\n   * @param {Date} [date] - Use the given date for verification instead of the current time\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<Boolean>} True if the binding signature is revoked.\n   * @async\n   */\n  async isRevoked(signature, key, date = new Date(), config = defaultConfig) {\n    const primaryKey = this.mainKey.keyPacket;\n    return helper.isDataRevoked(\n      primaryKey, enums.signature.subkeyRevocation, {\n        key: primaryKey,\n        bind: this.keyPacket\n      }, this.revocationSignatures, signature, key, date, config\n    );\n  }\n\n  /**\n   * Verify subkey. Checks for revocation signatures, expiration time\n   * and valid binding signature.\n   * @param {Date} date - Use the given date instead of the current time\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<SignaturePacket>}\n   * @throws {Error}           if the subkey is invalid.\n   * @async\n   */\n  async verify(date = new Date(), config = defaultConfig) {\n    const primaryKey = this.mainKey.keyPacket;\n    const dataToVerify = { key: primaryKey, bind: this.keyPacket };\n    // check subkey binding signatures\n    const bindingSignature = await helper.getLatestValidSignature(this.bindingSignatures, primaryKey, enums.signature.subkeyBinding, dataToVerify, date, config);\n    // check binding signature is not revoked\n    if (bindingSignature.revoked || await this.isRevoked(bindingSignature, null, date, config)) {\n      throw new Error('Subkey is revoked');\n    }\n    // check for expiration time\n    if (helper.isDataExpired(this.keyPacket, bindingSignature, date)) {\n      throw new Error('Subkey is expired');\n    }\n    return bindingSignature;\n  }\n\n  /**\n   * Returns the expiration time of the subkey or Infinity if key does not expire.\n   * Returns null if the subkey is invalid.\n   * @param {Date} date - Use the given date instead of the current time\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<Date | Infinity | null>}\n   * @async\n   */\n  async getExpirationTime(date = new Date(), config = defaultConfig) {\n    const primaryKey = this.mainKey.keyPacket;\n    const dataToVerify = { key: primaryKey, bind: this.keyPacket };\n    let bindingSignature;\n    try {\n      bindingSignature = await helper.getLatestValidSignature(this.bindingSignatures, primaryKey, enums.signature.subkeyBinding, dataToVerify, date, config);\n    } catch (e) {\n      return null;\n    }\n    const keyExpiry = helper.getKeyExpirationTime(this.keyPacket, bindingSignature);\n    const sigExpiry = bindingSignature.getExpirationTime();\n    return keyExpiry < sigExpiry ? keyExpiry : sigExpiry;\n  }\n\n  /**\n   * Update subkey with new components from specified subkey\n   * @param {Subkey} subkey - Source subkey to merge\n   * @param {Date} [date] - Date to verify validity of signatures\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @throws {Error} if update failed\n   * @async\n   */\n  async update(subkey, date = new Date(), config = defaultConfig) {\n    const primaryKey = this.mainKey.keyPacket;\n    if (!this.hasSameFingerprintAs(subkey)) {\n      throw new Error('Subkey update method: fingerprints of subkeys not equal');\n    }\n    // key packet\n    if (this.keyPacket.constructor.tag === enums.packet.publicSubkey &&\n        subkey.keyPacket.constructor.tag === enums.packet.secretSubkey) {\n      this.keyPacket = subkey.keyPacket;\n    }\n    // update missing binding signatures\n    const that = this;\n    const dataToVerify = { key: primaryKey, bind: that.keyPacket };\n    await helper.mergeSignatures(subkey, this, 'bindingSignatures', date, async function(srcBindSig) {\n      for (let i = 0; i < that.bindingSignatures.length; i++) {\n        if (that.bindingSignatures[i].issuerKeyID.equals(srcBindSig.issuerKeyID)) {\n          if (srcBindSig.created > that.bindingSignatures[i].created) {\n            that.bindingSignatures[i] = srcBindSig;\n          }\n          return false;\n        }\n      }\n      try {\n        await srcBindSig.verify(primaryKey, enums.signature.subkeyBinding, dataToVerify, date, undefined, config);\n        return true;\n      } catch (e) {\n        return false;\n      }\n    });\n    // revocation signatures\n    await helper.mergeSignatures(subkey, this, 'revocationSignatures', date, function(srcRevSig) {\n      return helper.isDataRevoked(primaryKey, enums.signature.subkeyRevocation, dataToVerify, [srcRevSig], undefined, undefined, date, config);\n    });\n  }\n\n  /**\n   * Revokes the subkey\n   * @param {SecretKeyPacket} primaryKey - decrypted private primary key for revocation\n   * @param {Object} reasonForRevocation - optional, object indicating the reason for revocation\n   * @param  {module:enums.reasonForRevocation} reasonForRevocation.flag optional, flag indicating the reason for revocation\n   * @param  {String} reasonForRevocation.string optional, string explaining the reason for revocation\n   * @param {Date} date - optional, override the creationtime of the revocation signature\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<Subkey>} New subkey with revocation signature.\n   * @async\n   */\n  async revoke(\n    primaryKey,\n    {\n      flag: reasonForRevocationFlag = enums.reasonForRevocation.noReason,\n      string: reasonForRevocationString = ''\n    } = {},\n    date = new Date(),\n    config = defaultConfig\n  ) {\n    const dataToSign = { key: primaryKey, bind: this.keyPacket };\n    const subkey = new Subkey(this.keyPacket, this.mainKey);\n    subkey.revocationSignatures.push(await helper.createSignaturePacket(dataToSign, [], primaryKey, {\n      signatureType: enums.signature.subkeyRevocation,\n      reasonForRevocationFlag: enums.write(enums.reasonForRevocation, reasonForRevocationFlag),\n      reasonForRevocationString\n    }, date, undefined, undefined, false, config));\n    await subkey.update(this);\n    return subkey;\n  }\n\n  hasSameFingerprintAs(other) {\n    return this.keyPacket.hasSameFingerprintAs(other.keyPacket || other);\n  }\n}\n\n['getKeyID', 'getFingerprint', 'getAlgorithmInfo', 'getCreationTime', 'isDecrypted'].forEach(name => {\n  Subkey.prototype[name] =\n    function() {\n      return this.keyPacket[name]();\n    };\n});\n\nexport default Subkey;\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport { armor, unarmor } from '../encoding/armor';\nimport {\n  PacketList,\n  SignaturePacket\n} from '../packet';\nimport defaultConfig from '../config';\nimport enums from '../enums';\nimport util from '../util';\nimport User from './user';\nimport Subkey from './subkey';\nimport * as helper from './helper';\nimport { UnparseablePacket } from '../packet/packet';\n\n// A key revocation certificate can contain the following packets\nconst allowedRevocationPackets = /*#__PURE__*/ util.constructAllowedPackets([SignaturePacket]);\nconst mainKeyPacketTags = new Set([enums.packet.publicKey, enums.packet.privateKey]);\nconst keyPacketTags = new Set([\n  enums.packet.publicKey, enums.packet.privateKey,\n  enums.packet.publicSubkey, enums.packet.privateSubkey\n]);\n\n/**\n * Abstract class that represents an OpenPGP key. Must contain a primary key.\n * Can contain additional subkeys, signatures, user ids, user attributes.\n * @borrows PublicKeyPacket#getKeyID as Key#getKeyID\n * @borrows PublicKeyPacket#getFingerprint as Key#getFingerprint\n * @borrows PublicKeyPacket#hasSameFingerprintAs as Key#hasSameFingerprintAs\n * @borrows PublicKeyPacket#getAlgorithmInfo as Key#getAlgorithmInfo\n * @borrows PublicKeyPacket#getCreationTime as Key#getCreationTime\n */\nclass Key {\n  /**\n   * Transforms packetlist to structured key data\n   * @param {PacketList} packetlist - The packets that form a key\n   * @param {Set<enums.packet>} disallowedPackets - disallowed packet tags\n   */\n  packetListToStructure(packetlist, disallowedPackets = new Set()) {\n    let user;\n    let primaryKeyID;\n    let subkey;\n    let ignoreUntil;\n\n    for (const packet of packetlist) {\n\n      if (packet instanceof UnparseablePacket) {\n        const isUnparseableKeyPacket = keyPacketTags.has(packet.tag);\n        if (isUnparseableKeyPacket && !ignoreUntil) {\n          // Since non-key packets apply to the preceding key packet, if a (sub)key is Unparseable we must\n          // discard all non-key packets that follow, until another (sub)key packet is found.\n          if (mainKeyPacketTags.has(packet.tag)) {\n            ignoreUntil = mainKeyPacketTags;\n          } else {\n            ignoreUntil = keyPacketTags;\n          }\n        }\n        continue;\n      }\n\n      const tag = packet.constructor.tag;\n      if (ignoreUntil) {\n        if (!ignoreUntil.has(tag)) continue;\n        ignoreUntil = null;\n      }\n      if (disallowedPackets.has(tag)) {\n        throw new Error(`Unexpected packet type: ${tag}`);\n      }\n      switch (tag) {\n        case enums.packet.publicKey:\n        case enums.packet.secretKey:\n          if (this.keyPacket) {\n            throw new Error('Key block contains multiple keys');\n          }\n          this.keyPacket = packet;\n          primaryKeyID = this.getKeyID();\n          if (!primaryKeyID) {\n            throw new Error('Missing Key ID');\n          }\n          break;\n        case enums.packet.userID:\n        case enums.packet.userAttribute:\n          user = new User(packet, this);\n          this.users.push(user);\n          break;\n        case enums.packet.publicSubkey:\n        case enums.packet.secretSubkey:\n          user = null;\n          subkey = new Subkey(packet, this);\n          this.subkeys.push(subkey);\n          break;\n        case enums.packet.signature:\n          switch (packet.signatureType) {\n            case enums.signature.certGeneric:\n            case enums.signature.certPersona:\n            case enums.signature.certCasual:\n            case enums.signature.certPositive:\n              if (!user) {\n                util.printDebug('Dropping certification signatures without preceding user packet');\n                continue;\n              }\n              if (packet.issuerKeyID.equals(primaryKeyID)) {\n                user.selfCertifications.push(packet);\n              } else {\n                user.otherCertifications.push(packet);\n              }\n              break;\n            case enums.signature.certRevocation:\n              if (user) {\n                user.revocationSignatures.push(packet);\n              } else {\n                this.directSignatures.push(packet);\n              }\n              break;\n            case enums.signature.key:\n              this.directSignatures.push(packet);\n              break;\n            case enums.signature.subkeyBinding:\n              if (!subkey) {\n                util.printDebug('Dropping subkey binding signature without preceding subkey packet');\n                continue;\n              }\n              subkey.bindingSignatures.push(packet);\n              break;\n            case enums.signature.keyRevocation:\n              this.revocationSignatures.push(packet);\n              break;\n            case enums.signature.subkeyRevocation:\n              if (!subkey) {\n                util.printDebug('Dropping subkey revocation signature without preceding subkey packet');\n                continue;\n              }\n              subkey.revocationSignatures.push(packet);\n              break;\n          }\n          break;\n      }\n    }\n  }\n\n  /**\n   * Transforms structured key data to packetlist\n   * @returns {PacketList} The packets that form a key.\n   */\n  toPacketList() {\n    const packetlist = new PacketList();\n    packetlist.push(this.keyPacket);\n    packetlist.push(...this.revocationSignatures);\n    packetlist.push(...this.directSignatures);\n    this.users.map(user => packetlist.push(...user.toPacketList()));\n    this.subkeys.map(subkey => packetlist.push(...subkey.toPacketList()));\n    return packetlist;\n  }\n\n  /**\n   * Clones the key object. The copy is shallow, as it references the same packet objects as the original. However, if the top-level API is used, the two key instances are effectively independent.\n   * @param {Boolean} [clonePrivateParams=false] Only relevant for private keys: whether the secret key paramenters should be deeply copied. This is needed if e.g. `encrypt()` is to be called either on the clone or the original key.\n   * @returns {Promise<Key>} Clone of the key.\n   */\n  clone(clonePrivateParams = false) {\n    const key = new this.constructor(this.toPacketList());\n    if (clonePrivateParams) {\n      key.getKeys().forEach(k => {\n        // shallow clone the key packets\n        k.keyPacket = Object.create(\n          Object.getPrototypeOf(k.keyPacket),\n          Object.getOwnPropertyDescriptors(k.keyPacket)\n        );\n        if (!k.keyPacket.isDecrypted()) return;\n        // deep clone the private params, which are cleared during encryption\n        const privateParams = {};\n        Object.keys(k.keyPacket.privateParams).forEach(name => {\n          privateParams[name] = new Uint8Array(k.keyPacket.privateParams[name]);\n        });\n        k.keyPacket.privateParams = privateParams;\n      });\n    }\n    return key;\n  }\n\n  /**\n   * Returns an array containing all public or private subkeys matching keyID;\n   * If no keyID is given, returns all subkeys.\n   * @param {type/keyID} [keyID] - key ID to look for\n   * @returns {Array<Subkey>} array of subkeys\n   */\n  getSubkeys(keyID = null) {\n    const subkeys = this.subkeys.filter(subkey => (\n      !keyID || subkey.getKeyID().equals(keyID, true)\n    ));\n    return subkeys;\n  }\n\n  /**\n   * Returns an array containing all public or private keys matching keyID.\n   * If no keyID is given, returns all keys, starting with the primary key.\n   * @param {type/keyid~KeyID} [keyID] - key ID to look for\n   * @returns {Array<Key|Subkey>} array of keys\n   */\n  getKeys(keyID = null) {\n    const keys = [];\n    if (!keyID || this.getKeyID().equals(keyID, true)) {\n      keys.push(this);\n    }\n    return keys.concat(this.getSubkeys(keyID));\n  }\n\n  /**\n   * Returns key IDs of all keys\n   * @returns {Array<module:type/keyid~KeyID>}\n   */\n  getKeyIDs() {\n    return this.getKeys().map(key => key.getKeyID());\n  }\n\n  /**\n   * Returns userIDs\n   * @returns {Array<string>} Array of userIDs.\n   */\n  getUserIDs() {\n    return this.users.map(user => {\n      return user.userID ? user.userID.userID : null;\n    }).filter(userID => userID !== null);\n  }\n\n  /**\n   * Returns binary encoded key\n   * @returns {Uint8Array} Binary key.\n   */\n  write() {\n    return this.toPacketList().write();\n  }\n\n  /**\n   * Returns last created key or key by given keyID that is available for signing and verification\n   * @param  {module:type/keyid~KeyID} [keyID] - key ID of a specific key to retrieve\n   * @param  {Date} [date] - use the fiven date date to  to check key validity instead of the current date\n   * @param  {Object} [userID] - filter keys for the given user ID\n   * @param  {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<Key|Subkey>} signing key\n   * @throws if no valid signing key was found\n   * @async\n   */\n  async getSigningKey(keyID = null, date = new Date(), userID = {}, config = defaultConfig) {\n    await this.verifyPrimaryKey(date, userID, config);\n    const primaryKey = this.keyPacket;\n    try {\n      helper.checkKeyRequirements(primaryKey, config);\n    } catch (err) {\n      throw util.wrapError('Could not verify primary key', err);\n    }\n    // Prefer the most recently created valid subkey, or the subkey with\n    // the highest algorithm ID in case of equal creation timestamps.\n    const subkeys = this.subkeys.slice().sort((a, b) => (\n      b.keyPacket.created - a.keyPacket.created ||\n      b.keyPacket.algorithm - a.keyPacket.algorithm\n    ));\n    let exception;\n    for (const subkey of subkeys) {\n      if (!keyID || subkey.getKeyID().equals(keyID)) {\n        try {\n          await subkey.verify(date, config);\n          const dataToVerify = { key: primaryKey, bind: subkey.keyPacket };\n          const bindingSignature = await helper.getLatestValidSignature(\n            subkey.bindingSignatures, primaryKey, enums.signature.subkeyBinding, dataToVerify, date, config\n          );\n          if (!helper.validateSigningKeyPacket(subkey.keyPacket, bindingSignature, config)) {\n            continue;\n          }\n          if (!bindingSignature.embeddedSignature) {\n            throw new Error('Missing embedded signature');\n          }\n          // verify embedded signature\n          await helper.getLatestValidSignature(\n            [bindingSignature.embeddedSignature], subkey.keyPacket, enums.signature.keyBinding, dataToVerify, date, config\n          );\n          helper.checkKeyRequirements(subkey.keyPacket, config);\n          return subkey;\n        } catch (e) {\n          exception = e;\n        }\n      }\n    }\n\n    try {\n      const selfCertification = await this.getPrimarySelfSignature(date, userID, config);\n      if ((!keyID || primaryKey.getKeyID().equals(keyID)) &&\n          helper.validateSigningKeyPacket(primaryKey, selfCertification, config)) {\n        helper.checkKeyRequirements(primaryKey, config);\n        return this;\n      }\n    } catch (e) {\n      exception = e;\n    }\n    throw util.wrapError('Could not find valid signing key packet in key ' + this.getKeyID().toHex(), exception);\n  }\n\n  /**\n   * Returns last created key or key by given keyID that is available for encryption or decryption\n   * @param  {module:type/keyid~KeyID} [keyID] - key ID of a specific key to retrieve\n   * @param  {Date}   [date] - use the fiven date date to  to check key validity instead of the current date\n   * @param  {Object} [userID] - filter keys for the given user ID\n   * @param  {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<Key|Subkey>} encryption key\n   * @throws if no valid encryption key was found\n   * @async\n   */\n  async getEncryptionKey(keyID, date = new Date(), userID = {}, config = defaultConfig) {\n    await this.verifyPrimaryKey(date, userID, config);\n    const primaryKey = this.keyPacket;\n    try {\n      helper.checkKeyRequirements(primaryKey, config);\n    } catch (err) {\n      throw util.wrapError('Could not verify primary key', err);\n    }\n    // Prefer the most recently created valid subkey, or the subkey with\n    // the highest algorithm ID in case of equal creation timestamps.\n    const subkeys = this.subkeys.slice().sort((a, b) => (\n      b.keyPacket.created - a.keyPacket.created ||\n      b.keyPacket.algorithm - a.keyPacket.algorithm\n    ));\n    let exception;\n    for (const subkey of subkeys) {\n      if (!keyID || subkey.getKeyID().equals(keyID)) {\n        try {\n          await subkey.verify(date, config);\n          const dataToVerify = { key: primaryKey, bind: subkey.keyPacket };\n          const bindingSignature = await helper.getLatestValidSignature(subkey.bindingSignatures, primaryKey, enums.signature.subkeyBinding, dataToVerify, date, config);\n          if (helper.validateEncryptionKeyPacket(subkey.keyPacket, bindingSignature, config)) {\n            helper.checkKeyRequirements(subkey.keyPacket, config);\n            return subkey;\n          }\n        } catch (e) {\n          exception = e;\n        }\n      }\n    }\n\n    try {\n      // if no valid subkey for encryption, evaluate primary key\n      const selfCertification = await this.getPrimarySelfSignature(date, userID, config);\n      if ((!keyID || primaryKey.getKeyID().equals(keyID)) &&\n          helper.validateEncryptionKeyPacket(primaryKey, selfCertification, config)) {\n        helper.checkKeyRequirements(primaryKey, config);\n        return this;\n      }\n    } catch (e) {\n      exception = e;\n    }\n    throw util.wrapError('Could not find valid encryption key packet in key ' + this.getKeyID().toHex(), exception);\n  }\n\n  /**\n   * Checks if a signature on a key is revoked\n   * @param {SignaturePacket} signature - The signature to verify\n   * @param  {PublicSubkeyPacket|\n   *          SecretSubkeyPacket|\n   *          PublicKeyPacket|\n   *          SecretKeyPacket} key, optional The key to verify the signature\n   * @param {Date} [date] - Use the given date for verification, instead of the current time\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<Boolean>} True if the certificate is revoked.\n   * @async\n   */\n  async isRevoked(signature, key, date = new Date(), config = defaultConfig) {\n    return helper.isDataRevoked(\n      this.keyPacket, enums.signature.keyRevocation, { key: this.keyPacket }, this.revocationSignatures, signature, key, date, config\n    );\n  }\n\n  /**\n   * Verify primary key. Checks for revocation signatures, expiration time\n   * and valid self signature. Throws if the primary key is invalid.\n   * @param {Date} [date] - Use the given date for verification instead of the current time\n   * @param {Object} [userID] - User ID\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @throws {Error} If key verification failed\n   * @async\n   */\n  async verifyPrimaryKey(date = new Date(), userID = {}, config = defaultConfig) {\n    const primaryKey = this.keyPacket;\n    // check for key revocation signatures\n    if (await this.isRevoked(null, null, date, config)) {\n      throw new Error('Primary key is revoked');\n    }\n    // check for valid, unrevoked, unexpired self signature\n    const selfCertification = await this.getPrimarySelfSignature(date, userID, config);\n    // check for expiration time in binding signatures\n    if (helper.isDataExpired(primaryKey, selfCertification, date)) {\n      throw new Error('Primary key is expired');\n    }\n    if (primaryKey.version !== 6) {\n      // check for expiration time in direct signatures (for V6 keys, the above already did so)\n      const directSignature = await helper.getLatestValidSignature(\n        this.directSignatures, primaryKey, enums.signature.key, { key: primaryKey }, date, config\n      ).catch(() => {}); // invalid signatures are discarded, to avoid breaking the key\n\n      if (directSignature && helper.isDataExpired(primaryKey, directSignature, date)) {\n        throw new Error('Primary key is expired');\n      }\n    }\n  }\n\n  /**\n   * Returns the expiration date of the primary key, considering self-certifications and direct-key signatures.\n   * Returns `Infinity` if the key doesn't expire, or `null` if the key is revoked or invalid.\n   * @param  {Object} [userID] - User ID to consider instead of the primary user\n   * @param  {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<Date | Infinity | null>}\n   * @async\n   */\n  async getExpirationTime(userID, config = defaultConfig) {\n    let primaryKeyExpiry;\n    try {\n      const selfCertification = await this.getPrimarySelfSignature(null, userID, config);\n      const selfSigKeyExpiry = helper.getKeyExpirationTime(this.keyPacket, selfCertification);\n      const selfSigExpiry = selfCertification.getExpirationTime();\n      const directSignature = this.keyPacket.version !== 6 && // For V6 keys, the above already returns the direct-key signature.\n        await helper.getLatestValidSignature(\n          this.directSignatures, this.keyPacket, enums.signature.key, { key: this.keyPacket }, null, config\n        ).catch(() => {});\n      if (directSignature) {\n        const directSigKeyExpiry = helper.getKeyExpirationTime(this.keyPacket, directSignature);\n        // We do not support the edge case where the direct signature expires, since it would invalidate the corresponding key expiration,\n        // causing a discountinous validy period for the key\n        primaryKeyExpiry = Math.min(selfSigKeyExpiry, selfSigExpiry, directSigKeyExpiry);\n      } else {\n        primaryKeyExpiry = selfSigKeyExpiry < selfSigExpiry ? selfSigKeyExpiry : selfSigExpiry;\n      }\n    } catch (e) {\n      primaryKeyExpiry = null;\n    }\n\n    return util.normalizeDate(primaryKeyExpiry);\n  }\n\n\n  /**\n   * For V4 keys, returns the self-signature of the primary user.\n   * For V5 keys, returns the latest valid direct-key self-signature.\n   * This self-signature is to be used to check the key expiration,\n   * algorithm preferences, and so on.\n   * @param {Date} [date] - Use the given date for verification instead of the current time\n   * @param {Object} [userID] - User ID to get instead of the primary user for V4 keys, if it exists\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<SignaturePacket>} The primary self-signature\n   * @async\n   */\n  async getPrimarySelfSignature(date = new Date(), userID = {}, config = defaultConfig) {\n    const primaryKey = this.keyPacket;\n    if (primaryKey.version === 6) {\n      return helper.getLatestValidSignature(\n        this.directSignatures, primaryKey, enums.signature.key, { key: primaryKey }, date, config\n      );\n    }\n    const { selfCertification } = await this.getPrimaryUser(date, userID, config);\n    return selfCertification;\n  }\n\n  /**\n   * Returns primary user and most significant (latest valid) self signature\n   * - if multiple primary users exist, returns the one with the latest self signature\n   * - otherwise, returns the user with the latest self signature\n   * @param {Date} [date] - Use the given date for verification instead of the current time\n   * @param {Object} [userID] - User ID to get instead of the primary user, if it exists\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<{\n   *   user: User,\n   *   selfCertification: SignaturePacket\n   * }>} The primary user and the self signature\n   * @async\n   */\n  async getPrimaryUser(date = new Date(), userID = {}, config = defaultConfig) {\n    const primaryKey = this.keyPacket;\n    const users = [];\n    let exception;\n    for (let i = 0; i < this.users.length; i++) {\n      try {\n        const user = this.users[i];\n        if (!user.userID) {\n          continue;\n        }\n        if (\n          (userID.name !== undefined && user.userID.name !== userID.name) ||\n          (userID.email !== undefined && user.userID.email !== userID.email) ||\n          (userID.comment !== undefined && user.userID.comment !== userID.comment)\n        ) {\n          throw new Error('Could not find user that matches that user ID');\n        }\n        const dataToVerify = { userID: user.userID, key: primaryKey };\n        const selfCertification = await helper.getLatestValidSignature(user.selfCertifications, primaryKey, enums.signature.certGeneric, dataToVerify, date, config);\n        users.push({ index: i, user, selfCertification });\n      } catch (e) {\n        exception = e;\n      }\n    }\n    if (!users.length) {\n      // eslint-disable-next-line @typescript-eslint/no-throw-literal\n      throw exception || new Error('Could not find primary user');\n    }\n    await Promise.all(users.map(async function (a) {\n      return a.selfCertification.revoked || a.user.isRevoked(a.selfCertification, null, date, config);\n    }));\n    // sort by primary user flag and signature creation time\n    const primaryUser = users.sort(function(a, b) {\n      const A = a.selfCertification;\n      const B = b.selfCertification;\n      return B.revoked - A.revoked || A.isPrimaryUserID - B.isPrimaryUserID || A.created - B.created;\n    }).pop();\n    const { user, selfCertification: cert } = primaryUser;\n    if (cert.revoked || await user.isRevoked(cert, null, date, config)) {\n      throw new Error('Primary user is revoked');\n    }\n    return primaryUser;\n  }\n\n  /**\n   * Update key with new components from specified key with same key ID:\n   * users, subkeys, certificates are merged into the destination key,\n   * duplicates and expired signatures are ignored.\n   *\n   * If the source key is a private key and the destination key is public,\n   * a private key is returned.\n   * @param {Key} sourceKey - Source key to merge\n   * @param {Date} [date] - Date to verify validity of signatures and keys\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<Key>} updated key\n   * @async\n   */\n  async update(sourceKey, date = new Date(), config = defaultConfig) {\n    if (!this.hasSameFingerprintAs(sourceKey)) {\n      throw new Error('Primary key fingerprints must be equal to update the key');\n    }\n    if (!this.isPrivate() && sourceKey.isPrivate()) {\n      // check for equal subkey packets\n      const equal = (this.subkeys.length === sourceKey.subkeys.length) &&\n            (this.subkeys.every(destSubkey => {\n              return sourceKey.subkeys.some(srcSubkey => {\n                return destSubkey.hasSameFingerprintAs(srcSubkey);\n              });\n            }));\n      if (!equal) {\n        throw new Error('Cannot update public key with private key if subkeys mismatch');\n      }\n\n      return sourceKey.update(this, config);\n    }\n    // from here on, either:\n    // - destination key is private, source key is public\n    // - the keys are of the same type\n    // hence we don't need to convert the destination key type\n    const updatedKey = this.clone();\n    // revocation signatures\n    await helper.mergeSignatures(sourceKey, updatedKey, 'revocationSignatures', date, srcRevSig => {\n      return helper.isDataRevoked(updatedKey.keyPacket, enums.signature.keyRevocation, updatedKey, [srcRevSig], null, sourceKey.keyPacket, date, config);\n    });\n    // direct signatures\n    await helper.mergeSignatures(sourceKey, updatedKey, 'directSignatures', date);\n    // update users\n    await Promise.all(sourceKey.users.map(async srcUser => {\n      // multiple users with the same ID/attribute are not explicitly disallowed by the spec\n      // hence we support them, just in case\n      const usersToUpdate = updatedKey.users.filter(dstUser => (\n        (srcUser.userID && srcUser.userID.equals(dstUser.userID)) ||\n        (srcUser.userAttribute && srcUser.userAttribute.equals(dstUser.userAttribute))\n      ));\n      if (usersToUpdate.length > 0) {\n        await Promise.all(\n          usersToUpdate.map(userToUpdate => userToUpdate.update(srcUser, date, config))\n        );\n      } else {\n        const newUser = srcUser.clone();\n        newUser.mainKey = updatedKey;\n        updatedKey.users.push(newUser);\n      }\n    }));\n    // update subkeys\n    await Promise.all(sourceKey.subkeys.map(async srcSubkey => {\n      // multiple subkeys with same fingerprint might be preset\n      const subkeysToUpdate = updatedKey.subkeys.filter(dstSubkey => (\n        dstSubkey.hasSameFingerprintAs(srcSubkey)\n      ));\n      if (subkeysToUpdate.length > 0) {\n        await Promise.all(\n          subkeysToUpdate.map(subkeyToUpdate => subkeyToUpdate.update(srcSubkey, date, config))\n        );\n      } else {\n        const newSubkey = srcSubkey.clone();\n        newSubkey.mainKey = updatedKey;\n        updatedKey.subkeys.push(newSubkey);\n      }\n    }));\n\n    return updatedKey;\n  }\n\n  /**\n   * Get revocation certificate from a revoked key.\n   *   (To get a revocation certificate for an unrevoked key, call revoke() first.)\n   * @param {Date} date - Use the given date instead of the current time\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<String>} Armored revocation certificate.\n   * @async\n   */\n  async getRevocationCertificate(date = new Date(), config = defaultConfig) {\n    const dataToVerify = { key: this.keyPacket };\n    const revocationSignature = await helper.getLatestValidSignature(this.revocationSignatures, this.keyPacket, enums.signature.keyRevocation, dataToVerify, date, config);\n    const packetlist = new PacketList();\n    packetlist.push(revocationSignature);\n    // An ASCII-armored Transferable Public Key packet sequence of a v6 key MUST NOT contain a CRC24 footer.\n    const emitChecksum = this.keyPacket.version !== 6;\n    return armor(enums.armor.publicKey, packetlist.write(), null, null, 'This is a revocation certificate', emitChecksum, config);\n  }\n\n  /**\n   * Applies a revocation certificate to a key\n   * This adds the first signature packet in the armored text to the key,\n   * if it is a valid revocation signature.\n   * @param {String} revocationCertificate - armored revocation certificate\n   * @param {Date} [date] - Date to verify the certificate\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<Key>} Revoked key.\n   * @async\n   */\n  async applyRevocationCertificate(revocationCertificate, date = new Date(), config = defaultConfig) {\n    const input = await unarmor(revocationCertificate, config);\n    const packetlist = await PacketList.fromBinary(input.data, allowedRevocationPackets, config);\n    const revocationSignature = packetlist.findPacket(enums.packet.signature);\n    if (!revocationSignature || revocationSignature.signatureType !== enums.signature.keyRevocation) {\n      throw new Error('Could not find revocation signature packet');\n    }\n    if (!revocationSignature.issuerKeyID.equals(this.getKeyID())) {\n      throw new Error('Revocation signature does not match key');\n    }\n    try {\n      await revocationSignature.verify(this.keyPacket, enums.signature.keyRevocation, { key: this.keyPacket }, date, undefined, config);\n    } catch (e) {\n      throw util.wrapError('Could not verify revocation signature', e);\n    }\n    const key = this.clone();\n    key.revocationSignatures.push(revocationSignature);\n    return key;\n  }\n\n  /**\n   * Signs primary user of key\n   * @param {Array<PrivateKey>} privateKeys - decrypted private keys for signing\n   * @param {Date} [date] - Use the given date for verification instead of the current time\n   * @param {Object} [userID] - User ID to get instead of the primary user, if it exists\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<Key>} Key with new certificate signature.\n   * @async\n   */\n  async signPrimaryUser(privateKeys, date, userID, config = defaultConfig) {\n    const { index, user } = await this.getPrimaryUser(date, userID, config);\n    const userSign = await user.certify(privateKeys, date, config);\n    const key = this.clone();\n    key.users[index] = userSign;\n    return key;\n  }\n\n  /**\n   * Signs all users of key\n   * @param {Array<PrivateKey>} privateKeys - decrypted private keys for signing\n   * @param {Date} [date] - Use the given date for signing, instead of the current time\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<Key>} Key with new certificate signature.\n   * @async\n   */\n  async signAllUsers(privateKeys, date = new Date(), config = defaultConfig) {\n    const key = this.clone();\n    key.users = await Promise.all(this.users.map(function(user) {\n      return user.certify(privateKeys, date, config);\n    }));\n    return key;\n  }\n\n  /**\n   * Verifies primary user of key\n   * - if no arguments are given, verifies the self certificates;\n   * - otherwise, verifies all certificates signed with given keys.\n   * @param {Array<PublicKey>} [verificationKeys] - array of keys to verify certificate signatures, instead of the primary key\n   * @param {Date} [date] - Use the given date for verification instead of the current time\n   * @param {Object} [userID] - User ID to get instead of the primary user, if it exists\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<Array<{\n   *   keyID: module:type/keyid~KeyID,\n   *   valid: Boolean|null\n   * }>>} List of signer's keyID and validity of signature.\n   *      Signature validity is null if the verification keys do not correspond to the certificate.\n   * @async\n   */\n  async verifyPrimaryUser(verificationKeys, date = new Date(), userID, config = defaultConfig) {\n    const primaryKey = this.keyPacket;\n    const { user } = await this.getPrimaryUser(date, userID, config);\n    const results = verificationKeys ?\n      await user.verifyAllCertifications(verificationKeys, date, config) :\n      [{ keyID: primaryKey.getKeyID(), valid: await user.verify(date, config).catch(() => false) }];\n    return results;\n  }\n\n  /**\n   * Verifies all users of key\n   * - if no arguments are given, verifies the self certificates;\n   * - otherwise, verifies all certificates signed with given keys.\n   * @param {Array<PublicKey>} [verificationKeys] - array of keys to verify certificate signatures\n   * @param {Date} [date] - Use the given date for verification instead of the current time\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<Array<{\n   *   userID: String,\n   *   keyID: module:type/keyid~KeyID,\n   *   valid: Boolean|null\n   * }>>} List of userID, signer's keyID and validity of signature.\n   *      Signature validity is null if the verification keys do not correspond to the certificate.\n   * @async\n   */\n  async verifyAllUsers(verificationKeys, date = new Date(), config = defaultConfig) {\n    const primaryKey = this.keyPacket;\n    const results = [];\n    await Promise.all(this.users.map(async user => {\n      const signatures = verificationKeys ?\n        await user.verifyAllCertifications(verificationKeys, date, config) :\n        [{ keyID: primaryKey.getKeyID(), valid: await user.verify(date, config).catch(() => false) }];\n\n      results.push(...signatures.map(\n        signature => ({\n          userID: user.userID ? user.userID.userID : null,\n          userAttribute: user.userAttribute,\n          keyID: signature.keyID,\n          valid: signature.valid\n        }))\n      );\n    }));\n    return results;\n  }\n}\n\n['getKeyID', 'getFingerprint', 'getAlgorithmInfo', 'getCreationTime', 'hasSameFingerprintAs'].forEach(name => {\n  Key.prototype[name] =\n  Subkey.prototype[name];\n});\n\nexport default Key;\n","// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport { armor } from '../encoding/armor';\nimport defaultConfig from '../config';\nimport enums from '../enums';\nimport Key from './key';\n\n/**\n * Class that represents an OpenPGP Public Key\n */\nclass PublicKey extends Key {\n  /**\n   * @param {PacketList} packetlist - The packets that form this key\n   */\n  constructor(packetlist) {\n    super();\n    this.keyPacket = null;\n    this.revocationSignatures = [];\n    this.directSignatures = [];\n    this.users = [];\n    this.subkeys = [];\n    if (packetlist) {\n      this.packetListToStructure(packetlist, new Set([enums.packet.secretKey, enums.packet.secretSubkey]));\n      if (!this.keyPacket) {\n        throw new Error('Invalid key: missing public-key packet');\n      }\n    }\n  }\n\n  /**\n   * Returns true if this is a private key\n   * @returns {false}\n   */\n  isPrivate() {\n    return false;\n  }\n\n  /**\n   * Returns key as public key (shallow copy)\n   * @returns {PublicKey} New public Key\n   */\n  toPublic() {\n    return this;\n  }\n\n  /**\n   * Returns ASCII armored text of key\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {ReadableStream<String>} ASCII armor.\n   */\n  armor(config = defaultConfig) {\n    // An ASCII-armored Transferable Public Key packet sequence of a v6 key MUST NOT contain a CRC24 footer.\n    const emitChecksum = this.keyPacket.version !== 6;\n    return armor(enums.armor.publicKey, this.toPacketList().write(), undefined, undefined, undefined, emitChecksum, config);\n  }\n}\n\nexport default PublicKey;\n\n","import PublicKey from './public_key';\nimport { armor } from '../encoding/armor';\nimport {\n  PacketList,\n  PublicKeyPacket,\n  PublicSubkeyPacket\n} from '../packet';\nimport defaultConfig from '../config';\nimport enums from '../enums';\nimport * as helper from './helper';\n\n/**\n * Class that represents an OpenPGP Private key\n */\nclass PrivateKey extends PublicKey {\n  /**\n * @param {PacketList} packetlist - The packets that form this key\n */\n  constructor(packetlist) {\n    super();\n    this.packetListToStructure(packetlist, new Set([enums.packet.publicKey, enums.packet.publicSubkey]));\n    if (!this.keyPacket) {\n      throw new Error('Invalid key: missing private-key packet');\n    }\n  }\n\n  /**\n   * Returns true if this is a private key\n   * @returns {Boolean}\n   */\n  isPrivate() {\n    return true;\n  }\n\n  /**\n   * Returns key as public key (shallow copy)\n   * @returns {PublicKey} New public Key\n   */\n  toPublic() {\n    const packetlist = new PacketList();\n    const keyPackets = this.toPacketList();\n    for (const keyPacket of keyPackets) {\n      switch (keyPacket.constructor.tag) {\n        case enums.packet.secretKey: {\n          const pubKeyPacket = PublicKeyPacket.fromSecretKeyPacket(keyPacket);\n          packetlist.push(pubKeyPacket);\n          break;\n        }\n        case enums.packet.secretSubkey: {\n          const pubSubkeyPacket = PublicSubkeyPacket.fromSecretSubkeyPacket(keyPacket);\n          packetlist.push(pubSubkeyPacket);\n          break;\n        }\n        default:\n          packetlist.push(keyPacket);\n      }\n    }\n    return new PublicKey(packetlist);\n  }\n\n  /**\n   * Returns ASCII armored text of key\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {ReadableStream<String>} ASCII armor.\n   */\n  armor(config = defaultConfig) {\n    // An ASCII-armored Transferable Public Key packet sequence of a v6 key MUST NOT contain a CRC24 footer.\n    const emitChecksum = this.keyPacket.version !== 6;\n    return armor(enums.armor.privateKey, this.toPacketList().write(), undefined, undefined, undefined, emitChecksum, config);\n  }\n\n  /**\n   * Returns all keys that are available for decryption, matching the keyID when given\n   * This is useful to retrieve keys for session key decryption\n   * @param  {module:type/keyid~KeyID} keyID, optional\n   * @param  {Date}              date, optional\n   * @param  {String}            userID, optional\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<Array<Key|Subkey>>} Array of decryption keys.\n   * @throws {Error} if no decryption key is found\n   * @async\n   */\n  async getDecryptionKeys(keyID, date = new Date(), userID = {}, config = defaultConfig) {\n    const primaryKey = this.keyPacket;\n    const keys = [];\n    let exception = null;\n    for (let i = 0; i < this.subkeys.length; i++) {\n      if (!keyID || this.subkeys[i].getKeyID().equals(keyID, true)) {\n        if (this.subkeys[i].keyPacket.isDummy()) {\n          exception = exception || new Error('Gnu-dummy key packets cannot be used for decryption');\n          continue;\n        }\n\n        try {\n          const dataToVerify = { key: primaryKey, bind: this.subkeys[i].keyPacket };\n          const bindingSignature = await helper.getLatestValidSignature(this.subkeys[i].bindingSignatures, primaryKey, enums.signature.subkeyBinding, dataToVerify, date, config);\n          if (helper.validateDecryptionKeyPacket(this.subkeys[i].keyPacket, bindingSignature, config)) {\n            keys.push(this.subkeys[i]);\n          }\n        } catch (e) {\n          exception = e;\n        }\n      }\n    }\n\n    // evaluate primary key\n    const selfCertification = await this.getPrimarySelfSignature(date, userID, config);\n    if ((!keyID || primaryKey.getKeyID().equals(keyID, true)) && helper.validateDecryptionKeyPacket(primaryKey, selfCertification, config)) {\n      if (primaryKey.isDummy()) {\n        exception = exception || new Error('Gnu-dummy key packets cannot be used for decryption');\n      } else {\n        keys.push(this);\n      }\n    }\n\n    if (keys.length === 0) {\n      // eslint-disable-next-line @typescript-eslint/no-throw-literal\n      throw exception || new Error('No decryption key packets found');\n    }\n\n    return keys;\n  }\n\n  /**\n   * Returns true if the primary key or any subkey is decrypted.\n   * A dummy key is considered encrypted.\n   */\n  isDecrypted() {\n    return this.getKeys().some(({ keyPacket }) => keyPacket.isDecrypted());\n  }\n\n  /**\n   * Check whether the private and public primary key parameters correspond\n   * Together with verification of binding signatures, this guarantees key integrity\n   * In case of gnu-dummy primary key, it is enough to validate any signing subkeys\n   *   otherwise all encryption subkeys are validated\n   * If only gnu-dummy keys are found, we cannot properly validate so we throw an error\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @throws {Error} if validation was not successful and the key cannot be trusted\n   * @async\n   */\n  async validate(config = defaultConfig) {\n    if (!this.isPrivate()) {\n      throw new Error('Cannot validate a public key');\n    }\n\n    let signingKeyPacket;\n    if (!this.keyPacket.isDummy()) {\n      signingKeyPacket = this.keyPacket;\n    } else {\n      /**\n       * It is enough to validate any signing keys\n       * since its binding signatures are also checked\n       */\n      const signingKey = await this.getSigningKey(null, null, undefined, { ...config, rejectPublicKeyAlgorithms: new Set(), minRSABits: 0 });\n      // This could again be a dummy key\n      if (signingKey && !signingKey.keyPacket.isDummy()) {\n        signingKeyPacket = signingKey.keyPacket;\n      }\n    }\n\n    if (signingKeyPacket) {\n      return signingKeyPacket.validate();\n    } else {\n      const keys = this.getKeys();\n      const allDummies = keys.map(key => key.keyPacket.isDummy()).every(Boolean);\n      if (allDummies) {\n        throw new Error('Cannot validate an all-gnu-dummy key');\n      }\n\n      return Promise.all(keys.map(async key => key.keyPacket.validate()));\n    }\n  }\n\n  /**\n   * Clear private key parameters\n   */\n  clearPrivateParams() {\n    this.getKeys().forEach(({ keyPacket }) => {\n      if (keyPacket.isDecrypted()) {\n        keyPacket.clearPrivateParams();\n      }\n    });\n  }\n\n  /**\n   * Revokes the key\n   * @param {Object} reasonForRevocation - optional, object indicating the reason for revocation\n   * @param  {module:enums.reasonForRevocation} reasonForRevocation.flag optional, flag indicating the reason for revocation\n   * @param  {String} reasonForRevocation.string optional, string explaining the reason for revocation\n   * @param {Date} date - optional, override the creationtime of the revocation signature\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<PrivateKey>} New key with revocation signature.\n   * @async\n   */\n  async revoke(\n    {\n      flag: reasonForRevocationFlag = enums.reasonForRevocation.noReason,\n      string: reasonForRevocationString = ''\n    } = {},\n    date = new Date(),\n    config = defaultConfig\n  ) {\n    if (!this.isPrivate()) {\n      throw new Error('Need private key for revoking');\n    }\n    const dataToSign = { key: this.keyPacket };\n    const key = this.clone();\n    key.revocationSignatures.push(await helper.createSignaturePacket(dataToSign, [], this.keyPacket, {\n      signatureType: enums.signature.keyRevocation,\n      reasonForRevocationFlag: enums.write(enums.reasonForRevocation, reasonForRevocationFlag),\n      reasonForRevocationString\n    }, date, undefined, undefined, undefined, config));\n    return key;\n  }\n\n\n  /**\n   * Generates a new OpenPGP subkey, and returns a clone of the Key object with the new subkey added.\n   * Supports RSA and ECC keys, as well as the newer Curve448 and Curve25519.\n   * Defaults to the algorithm and bit size/curve of the primary key. DSA primary keys default to RSA subkeys.\n   * @param {ecc|rsa|curve25519|curve448} options.type The subkey algorithm: ECC, RSA, Curve448 or Curve25519 (new format).\n   *                                                   Note: Curve448 and Curve25519 are not widely supported yet.\n   * @param {String}  options.curve      (optional) Elliptic curve for ECC keys\n   * @param {Integer} options.rsaBits    (optional) Number of bits for RSA subkeys\n   * @param {Number}  options.keyExpirationTime (optional) Number of seconds from the key creation time after which the key expires\n   * @param {Date}    options.date       (optional) Override the creation date of the key and the key signatures\n   * @param {Boolean} options.sign       (optional) Indicates whether the subkey should sign rather than encrypt. Defaults to false\n   * @param {Object}  options.config     (optional) custom configuration settings to overwrite those in [config]{@link module:config}\n   * @returns {Promise<PrivateKey>}\n   * @async\n   */\n  async addSubkey(options = {}) {\n    const config = { ...defaultConfig, ...options.config };\n    if (options.passphrase) {\n      throw new Error('Subkey could not be encrypted here, please encrypt whole key');\n    }\n    if (options.rsaBits < config.minRSABits) {\n      throw new Error(`rsaBits should be at least ${config.minRSABits}, got: ${options.rsaBits}`);\n    }\n    const secretKeyPacket = this.keyPacket;\n    if (secretKeyPacket.isDummy()) {\n      throw new Error('Cannot add subkey to gnu-dummy primary key');\n    }\n    if (!secretKeyPacket.isDecrypted()) {\n      throw new Error('Key is not decrypted');\n    }\n    const defaultOptions = secretKeyPacket.getAlgorithmInfo();\n    defaultOptions.type = getDefaultSubkeyType(defaultOptions.algorithm);\n    defaultOptions.rsaBits = defaultOptions.bits || 4096;\n    defaultOptions.curve = defaultOptions.curve || 'curve25519Legacy';\n    options = helper.sanitizeKeyOptions(options, defaultOptions);\n    // Every subkey for a v4 primary key MUST be a v4 subkey.\n    // Every subkey for a v6 primary key MUST be a v6 subkey.\n    // For v5 keys, since we dropped generation support, a v4 subkey is added.\n    // The config is always overwritten since we cannot tell if the defaultConfig was changed by the user.\n    const keyPacket = await helper.generateSecretSubkey(options, { ...config, v6Keys: this.keyPacket.version === 6 });\n    helper.checkKeyRequirements(keyPacket, config);\n    const bindingSignature = await helper.createBindingSignature(keyPacket, secretKeyPacket, options, config);\n    const packetList = this.toPacketList();\n    packetList.push(keyPacket, bindingSignature);\n    return new PrivateKey(packetList);\n  }\n}\n\nfunction getDefaultSubkeyType(algoName) {\n  const algo = enums.write(enums.publicKey, algoName);\n  // NB: no encryption-only algos, since they cannot be in primary keys\n  switch (algo) {\n    case enums.publicKey.rsaEncrypt:\n    case enums.publicKey.rsaEncryptSign:\n    case enums.publicKey.rsaSign:\n    case enums.publicKey.dsa:\n      return 'rsa';\n    case enums.publicKey.ecdsa:\n    case enums.publicKey.eddsaLegacy:\n      return 'ecc';\n    case enums.publicKey.ed25519:\n      return 'curve25519';\n    case enums.publicKey.ed448:\n      return 'curve448';\n    default:\n      throw new Error('Unsupported algorithm');\n  }\n}\n\nexport default PrivateKey;\n","// OpenPGP.js - An OpenPGP implementation in javascript\n// Copyright (C) 2015-2016 Decentral\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport {\n  PacketList,\n  UserIDPacket,\n  SignaturePacket,\n  PublicKeyPacket,\n  PublicSubkeyPacket,\n  SecretKeyPacket,\n  SecretSubkeyPacket,\n  UserAttributePacket\n} from '../packet';\nimport PrivateKey from './private_key';\nimport PublicKey from './public_key';\nimport * as helper from './helper';\nimport enums from '../enums';\nimport util from '../util';\nimport defaultConfig from '../config';\nimport { unarmor } from '../encoding/armor';\n\n// A Key can contain the following packets\nconst allowedKeyPackets = /*#__PURE__*/ util.constructAllowedPackets([\n  PublicKeyPacket,\n  PublicSubkeyPacket,\n  SecretKeyPacket,\n  SecretSubkeyPacket,\n  UserIDPacket,\n  UserAttributePacket,\n  SignaturePacket\n]);\n\n/**\n * Creates a PublicKey or PrivateKey depending on the packetlist in input\n * @param {PacketList} - packets to parse\n * @return {Key} parsed key\n * @throws if no key packet was found\n */\nfunction createKey(packetlist) {\n  for (const packet of packetlist) {\n    switch (packet.constructor.tag) {\n      case enums.packet.secretKey:\n        return new PrivateKey(packetlist);\n      case enums.packet.publicKey:\n        return new PublicKey(packetlist);\n    }\n  }\n  throw new Error('No key packet found');\n}\n\n\n/**\n * Generates a new OpenPGP key. Supports RSA and ECC keys, as well as the newer Curve448 and Curve25519 keys.\n * By default, primary and subkeys will be of same type.\n * @param {ecc|rsa|curve448|curve25519} options.type                  The primary key algorithm type: ECC, RSA, Curve448 or Curve25519 (new format).\n * @param {String}  options.curve                 Elliptic curve for ECC keys\n * @param {Integer} options.rsaBits               Number of bits for RSA keys\n * @param {Array<String|Object>} options.userIDs  User IDs as strings or objects: 'Jo Doe <info@jo.com>' or { name:'Jo Doe', email:'info@jo.com' }\n * @param {String}  options.passphrase            Passphrase used to encrypt the resulting private key\n * @param {Number}  options.keyExpirationTime     (optional) Number of seconds from the key creation time after which the key expires\n * @param {Date}    options.date                  Creation date of the key and the key signatures\n * @param {Object} config - Full configuration\n * @param {Array<Object>} options.subkeys         (optional) options for each subkey, default to main key options. e.g. [{sign: true, passphrase: '123'}]\n *                                                  sign parameter defaults to false, and indicates whether the subkey should sign rather than encrypt\n * @returns {Promise<{{ key: PrivateKey, revocationCertificate: String }}>}\n * @async\n * @static\n * @private\n */\nexport async function generate(options, config) {\n  options.sign = true; // primary key is always a signing key\n  options = helper.sanitizeKeyOptions(options);\n  options.subkeys = options.subkeys.map((subkey, index) => helper.sanitizeKeyOptions(options.subkeys[index], options));\n  let promises = [helper.generateSecretKey(options, config)];\n  promises = promises.concat(options.subkeys.map(options => helper.generateSecretSubkey(options, config)));\n  const packets = await Promise.all(promises);\n\n  const key = await wrapKeyObject(packets[0], packets.slice(1), options, config);\n  const revocationCertificate = await key.getRevocationCertificate(options.date, config);\n  key.revocationSignatures = [];\n  return { key, revocationCertificate };\n}\n\n/**\n * Reformats and signs an OpenPGP key with a given User ID. Currently only supports RSA keys.\n * @param {PrivateKey} options.privateKey         The private key to reformat\n * @param {Array<String|Object>} options.userIDs  User IDs as strings or objects: 'Jo Doe <info@jo.com>' or { name:'Jo Doe', email:'info@jo.com' }\n * @param {String} options.passphrase             Passphrase used to encrypt the resulting private key\n * @param {Number} options.keyExpirationTime      Number of seconds from the key creation time after which the key expires\n * @param {Date}   options.date                   Override the creation date of the key signatures\n * @param {Array<Object>} options.subkeys         (optional) options for each subkey, default to main key options. e.g. [{sign: true, passphrase: '123'}]\n * @param {Object} config - Full configuration\n *\n * @returns {Promise<{{ key: PrivateKey, revocationCertificate: String }}>}\n * @async\n * @static\n * @private\n */\nexport async function reformat(options, config) {\n  options = sanitize(options);\n  const { privateKey } = options;\n\n  if (!privateKey.isPrivate()) {\n    throw new Error('Cannot reformat a public key');\n  }\n\n  if (privateKey.keyPacket.isDummy()) {\n    throw new Error('Cannot reformat a gnu-dummy primary key');\n  }\n\n  const isDecrypted = privateKey.getKeys().every(({ keyPacket }) => keyPacket.isDecrypted());\n  if (!isDecrypted) {\n    throw new Error('Key is not decrypted');\n  }\n\n  const secretKeyPacket = privateKey.keyPacket;\n\n  if (!options.subkeys) {\n    options.subkeys = await Promise.all(privateKey.subkeys.map(async subkey => {\n      const secretSubkeyPacket = subkey.keyPacket;\n      const dataToVerify = { key: secretKeyPacket, bind: secretSubkeyPacket };\n      const bindingSignature = await (\n        helper.getLatestValidSignature(subkey.bindingSignatures, secretKeyPacket, enums.signature.subkeyBinding, dataToVerify, null, config)\n      ).catch(() => ({}));\n      return {\n        sign: bindingSignature.keyFlags && (bindingSignature.keyFlags[0] & enums.keyFlags.signData)\n      };\n    }));\n  }\n\n  const secretSubkeyPackets = privateKey.subkeys.map(subkey => subkey.keyPacket);\n  if (options.subkeys.length !== secretSubkeyPackets.length) {\n    throw new Error('Number of subkey options does not match number of subkeys');\n  }\n\n  options.subkeys = options.subkeys.map(subkeyOptions => sanitize(subkeyOptions, options));\n\n  const key = await wrapKeyObject(secretKeyPacket, secretSubkeyPackets, options, config);\n  const revocationCertificate = await key.getRevocationCertificate(options.date, config);\n  key.revocationSignatures = [];\n  return { key, revocationCertificate };\n\n  function sanitize(options, subkeyDefaults = {}) {\n    options.keyExpirationTime = options.keyExpirationTime || subkeyDefaults.keyExpirationTime;\n    options.passphrase = util.isString(options.passphrase) ? options.passphrase : subkeyDefaults.passphrase;\n    options.date = options.date || subkeyDefaults.date;\n\n    return options;\n  }\n}\n\n/**\n * Construct PrivateKey object from the given key packets, add certification signatures and set passphrase protection\n * The new key includes a revocation certificate that must be removed before returning the key, otherwise the key is considered revoked.\n * @param {SecretKeyPacket} secretKeyPacket\n * @param {SecretSubkeyPacket} secretSubkeyPackets\n * @param {Object} options\n * @param {Object} config - Full configuration\n * @returns {PrivateKey}\n */\nasync function wrapKeyObject(secretKeyPacket, secretSubkeyPackets, options, config) {\n  // set passphrase protection\n  if (options.passphrase) {\n    await secretKeyPacket.encrypt(options.passphrase, config);\n  }\n\n  await Promise.all(secretSubkeyPackets.map(async function(secretSubkeyPacket, index) {\n    const subkeyPassphrase = options.subkeys[index].passphrase;\n    if (subkeyPassphrase) {\n      await secretSubkeyPacket.encrypt(subkeyPassphrase, config);\n    }\n  }));\n\n  const packetlist = new PacketList();\n  packetlist.push(secretKeyPacket);\n\n  function createPreferredAlgos(algos, preferredAlgo) {\n    return [preferredAlgo, ...algos.filter(algo => algo !== preferredAlgo)];\n  }\n\n  function getKeySignatureProperties() {\n    const signatureProperties = {};\n    signatureProperties.keyFlags = [enums.keyFlags.certifyKeys | enums.keyFlags.signData];\n    const symmetricAlgorithms = createPreferredAlgos([\n      // prefer aes256, aes128, no aes192 (no Web Crypto support in Chrome: https://www.chromium.org/blink/webcrypto#TOC-AES-support)\n      enums.symmetric.aes256,\n      enums.symmetric.aes128\n    ], config.preferredSymmetricAlgorithm);\n    signatureProperties.preferredSymmetricAlgorithms = symmetricAlgorithms;\n    if (config.aeadProtect) {\n      const aeadAlgorithms = createPreferredAlgos([\n        enums.aead.gcm,\n        enums.aead.eax,\n        enums.aead.ocb\n      ], config.preferredAEADAlgorithm);\n      signatureProperties.preferredCipherSuites = aeadAlgorithms.flatMap(aeadAlgorithm => {\n        return symmetricAlgorithms.map(symmetricAlgorithm => {\n          return [symmetricAlgorithm, aeadAlgorithm];\n        });\n      });\n    }\n    signatureProperties.preferredHashAlgorithms = createPreferredAlgos([\n      enums.hash.sha512,\n      enums.hash.sha256,\n      enums.hash.sha3_512,\n      enums.hash.sha3_256\n    ], config.preferredHashAlgorithm);\n    signatureProperties.preferredCompressionAlgorithms = createPreferredAlgos([\n      enums.compression.uncompressed,\n      enums.compression.zlib,\n      enums.compression.zip\n    ], config.preferredCompressionAlgorithm);\n    // integrity protection always enabled\n    signatureProperties.features = [0];\n    signatureProperties.features[0] |= enums.features.modificationDetection;\n    if (config.aeadProtect) {\n      signatureProperties.features[0] |= enums.features.seipdv2;\n    }\n    if (options.keyExpirationTime > 0) {\n      signatureProperties.keyExpirationTime = options.keyExpirationTime;\n      signatureProperties.keyNeverExpires = false;\n    }\n    return signatureProperties;\n  }\n\n  if (secretKeyPacket.version === 6) { // add direct key signature with key prefs\n    const dataToSign = {\n      key: secretKeyPacket\n    };\n\n    const signatureProperties = getKeySignatureProperties();\n    signatureProperties.signatureType = enums.signature.key;\n\n    const signaturePacket = await helper.createSignaturePacket(dataToSign, [], secretKeyPacket, signatureProperties, options.date, undefined, undefined, undefined, config);\n    packetlist.push(signaturePacket);\n  }\n\n  await Promise.all(options.userIDs.map(async function(userID, index) {\n    const userIDPacket = UserIDPacket.fromObject(userID);\n    const dataToSign = {\n      userID: userIDPacket,\n      key: secretKeyPacket\n    };\n    const signatureProperties = secretKeyPacket.version !== 6 ? getKeySignatureProperties() : {};\n    signatureProperties.signatureType = enums.signature.certPositive;\n    if (index === 0) {\n      signatureProperties.isPrimaryUserID = true;\n    }\n\n    const signaturePacket = await helper.createSignaturePacket(dataToSign, [], secretKeyPacket, signatureProperties, options.date, undefined, undefined, undefined, config);\n\n    return { userIDPacket, signaturePacket };\n  })).then(list => {\n    list.forEach(({ userIDPacket, signaturePacket }) => {\n      packetlist.push(userIDPacket);\n      packetlist.push(signaturePacket);\n    });\n  });\n\n  await Promise.all(secretSubkeyPackets.map(async function(secretSubkeyPacket, index) {\n    const subkeyOptions = options.subkeys[index];\n    const subkeySignaturePacket = await helper.createBindingSignature(secretSubkeyPacket, secretKeyPacket, subkeyOptions, config);\n    return { secretSubkeyPacket, subkeySignaturePacket };\n  })).then(packets => {\n    packets.forEach(({ secretSubkeyPacket, subkeySignaturePacket }) => {\n      packetlist.push(secretSubkeyPacket);\n      packetlist.push(subkeySignaturePacket);\n    });\n  });\n\n  // Add revocation signature packet for creating a revocation certificate.\n  // This packet should be removed before returning the key.\n  const dataToSign = { key: secretKeyPacket };\n  packetlist.push(await helper.createSignaturePacket(dataToSign, [], secretKeyPacket, {\n    signatureType: enums.signature.keyRevocation,\n    reasonForRevocationFlag: enums.reasonForRevocation.noReason,\n    reasonForRevocationString: ''\n  }, options.date, undefined, undefined, undefined, config));\n\n  if (options.passphrase) {\n    secretKeyPacket.clearPrivateParams();\n  }\n\n  await Promise.all(secretSubkeyPackets.map(async function(secretSubkeyPacket, index) {\n    const subkeyPassphrase = options.subkeys[index].passphrase;\n    if (subkeyPassphrase) {\n      secretSubkeyPacket.clearPrivateParams();\n    }\n  }));\n\n  return new PrivateKey(packetlist);\n}\n\n/**\n * Reads an (optionally armored) OpenPGP key and returns a key object\n * @param {Object} options\n * @param {String} [options.armoredKey] - Armored key to be parsed\n * @param {Uint8Array} [options.binaryKey] - Binary key to be parsed\n * @param {Object} [options.config] - Custom configuration settings to overwrite those in [config]{@link module:config}\n * @returns {Promise<Key>} Key object.\n * @async\n * @static\n */\nexport async function readKey({ armoredKey, binaryKey, config, ...rest }) {\n  config = { ...defaultConfig, ...config };\n  if (!armoredKey && !binaryKey) {\n    throw new Error('readKey: must pass options object containing `armoredKey` or `binaryKey`');\n  }\n  if (armoredKey && !util.isString(armoredKey)) {\n    throw new Error('readKey: options.armoredKey must be a string');\n  }\n  if (binaryKey && !util.isUint8Array(binaryKey)) {\n    throw new Error('readKey: options.binaryKey must be a Uint8Array');\n  }\n  const unknownOptions = Object.keys(rest); if (unknownOptions.length > 0) throw new Error(`Unknown option: ${unknownOptions.join(', ')}`);\n\n  let input;\n  if (armoredKey) {\n    const { type, data } = await unarmor(armoredKey, config);\n    if (!(type === enums.armor.publicKey || type === enums.armor.privateKey)) {\n      throw new Error('Armored text not of type key');\n    }\n    input = data;\n  } else {\n    input = binaryKey;\n  }\n  const packetlist = await PacketList.fromBinary(input, allowedKeyPackets, config);\n  const keyIndex = packetlist.indexOfTag(enums.packet.publicKey, enums.packet.secretKey);\n  if (keyIndex.length === 0) {\n    throw new Error('No key packet found');\n  }\n  const firstKeyPacketList = packetlist.slice(keyIndex[0], keyIndex[1]);\n  return createKey(firstKeyPacketList);\n}\n\n/**\n * Reads an (optionally armored) OpenPGP private key and returns a PrivateKey object\n * @param {Object} options\n * @param {String} [options.armoredKey] - Armored key to be parsed\n * @param {Uint8Array} [options.binaryKey] - Binary key to be parsed\n * @param {Object} [options.config] - Custom configuration settings to overwrite those in [config]{@link module:config}\n * @returns {Promise<PrivateKey>} Key object.\n * @async\n * @static\n */\nexport async function readPrivateKey({ armoredKey, binaryKey, config, ...rest }) {\n  config = { ...defaultConfig, ...config };\n  if (!armoredKey && !binaryKey) {\n    throw new Error('readPrivateKey: must pass options object containing `armoredKey` or `binaryKey`');\n  }\n  if (armoredKey && !util.isString(armoredKey)) {\n    throw new Error('readPrivateKey: options.armoredKey must be a string');\n  }\n  if (binaryKey && !util.isUint8Array(binaryKey)) {\n    throw new Error('readPrivateKey: options.binaryKey must be a Uint8Array');\n  }\n  const unknownOptions = Object.keys(rest); if (unknownOptions.length > 0) throw new Error(`Unknown option: ${unknownOptions.join(', ')}`);\n\n  let input;\n  if (armoredKey) {\n    const { type, data } = await unarmor(armoredKey, config);\n    if (!(type === enums.armor.privateKey)) {\n      throw new Error('Armored text not of type private key');\n    }\n    input = data;\n  } else {\n    input = binaryKey;\n  }\n  const packetlist = await PacketList.fromBinary(input, allowedKeyPackets, config);\n  const keyIndex = packetlist.indexOfTag(enums.packet.publicKey, enums.packet.secretKey);\n  for (let i = 0; i < keyIndex.length; i++) {\n    if (packetlist[keyIndex[i]].constructor.tag === enums.packet.publicKey) {\n      continue;\n    }\n    const firstPrivateKeyList = packetlist.slice(keyIndex[i], keyIndex[i + 1]);\n    return new PrivateKey(firstPrivateKeyList);\n  }\n  throw new Error('No secret key packet found');\n}\n\n/**\n * Reads an (optionally armored) OpenPGP key block and returns a list of key objects\n * @param {Object} options\n * @param {String} [options.armoredKeys] - Armored keys to be parsed\n * @param {Uint8Array} [options.binaryKeys] - Binary keys to be parsed\n * @param {Object} [options.config] - Custom configuration settings to overwrite those in [config]{@link module:config}\n * @returns {Promise<Array<Key>>} Key objects.\n * @async\n * @static\n */\nexport async function readKeys({ armoredKeys, binaryKeys, config, ...rest }) {\n  config = { ...defaultConfig, ...config };\n  let input = armoredKeys || binaryKeys;\n  if (!input) {\n    throw new Error('readKeys: must pass options object containing `armoredKeys` or `binaryKeys`');\n  }\n  if (armoredKeys && !util.isString(armoredKeys)) {\n    throw new Error('readKeys: options.armoredKeys must be a string');\n  }\n  if (binaryKeys && !util.isUint8Array(binaryKeys)) {\n    throw new Error('readKeys: options.binaryKeys must be a Uint8Array');\n  }\n  const unknownOptions = Object.keys(rest); if (unknownOptions.length > 0) throw new Error(`Unknown option: ${unknownOptions.join(', ')}`);\n\n  if (armoredKeys) {\n    const { type, data } = await unarmor(armoredKeys, config);\n    if (type !== enums.armor.publicKey && type !== enums.armor.privateKey) {\n      throw new Error('Armored text not of type key');\n    }\n    input = data;\n  }\n  const keys = [];\n  const packetlist = await PacketList.fromBinary(input, allowedKeyPackets, config);\n  const keyIndex = packetlist.indexOfTag(enums.packet.publicKey, enums.packet.secretKey);\n  if (keyIndex.length === 0) {\n    throw new Error('No key packet found');\n  }\n  for (let i = 0; i < keyIndex.length; i++) {\n    const oneKeyList = packetlist.slice(keyIndex[i], keyIndex[i + 1]);\n    const newKey = createKey(oneKeyList);\n    keys.push(newKey);\n  }\n  return keys;\n}\n\n/**\n * Reads an (optionally armored) OpenPGP private key block and returns a list of PrivateKey objects\n * @param {Object} options\n * @param {String} [options.armoredKeys] - Armored keys to be parsed\n * @param {Uint8Array} [options.binaryKeys] - Binary keys to be parsed\n * @param {Object} [options.config] - Custom configuration settings to overwrite those in [config]{@link module:config}\n * @returns {Promise<Array<PrivateKey>>} Key objects.\n * @async\n * @static\n */\nexport async function readPrivateKeys({ armoredKeys, binaryKeys, config }) {\n  config = { ...defaultConfig, ...config };\n  let input = armoredKeys || binaryKeys;\n  if (!input) {\n    throw new Error('readPrivateKeys: must pass options object containing `armoredKeys` or `binaryKeys`');\n  }\n  if (armoredKeys && !util.isString(armoredKeys)) {\n    throw new Error('readPrivateKeys: options.armoredKeys must be a string');\n  }\n  if (binaryKeys && !util.isUint8Array(binaryKeys)) {\n    throw new Error('readPrivateKeys: options.binaryKeys must be a Uint8Array');\n  }\n  if (armoredKeys) {\n    const { type, data } = await unarmor(armoredKeys, config);\n    if (type !== enums.armor.privateKey) {\n      throw new Error('Armored text not of type private key');\n    }\n    input = data;\n  }\n  const keys = [];\n  const packetlist = await PacketList.fromBinary(input, allowedKeyPackets, config);\n  const keyIndex = packetlist.indexOfTag(enums.packet.publicKey, enums.packet.secretKey);\n  for (let i = 0; i < keyIndex.length; i++) {\n    if (packetlist[keyIndex[i]].constructor.tag === enums.packet.publicKey) {\n      continue;\n    }\n    const oneKeyList = packetlist.slice(keyIndex[i], keyIndex[i + 1]);\n    const newKey = new PrivateKey(oneKeyList);\n    keys.push(newKey);\n  }\n  if (keys.length === 0) {\n    throw new Error('No secret key packet found');\n  }\n  return keys;\n}\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport { isArrayStream, cancel as streamCancel, readToEnd as streamReadToEnd, fromAsync as streamFromAsync, transformPair as streamTransformPair, getWriter as streamGetWriter, getReader as streamGetReader } from '@openpgp/web-stream-tools';\nimport { armor, unarmor } from './encoding/armor';\nimport { Argon2OutOfMemoryError } from './type/s2k';\nimport defaultConfig from './config';\nimport { generateSessionKey } from './crypto';\nimport enums from './enums';\nimport util from './util';\nimport { Signature } from './signature';\nimport { getPreferredCipherSuite, createSignaturePacket } from './key';\nimport {\n  PacketList,\n  LiteralDataPacket,\n  CompressedDataPacket,\n  AEADEncryptedDataPacket,\n  SymEncryptedIntegrityProtectedDataPacket,\n  SymmetricallyEncryptedDataPacket,\n  PublicKeyEncryptedSessionKeyPacket,\n  SymEncryptedSessionKeyPacket,\n  OnePassSignaturePacket,\n  SignaturePacket\n} from './packet';\nimport { MessageGrammarValidator } from './packet/grammar';\n\n// A Message can contain the following packets\nconst allowedMessagePackets = /*#__PURE__*/ util.constructAllowedPackets([\n  LiteralDataPacket,\n  CompressedDataPacket,\n  AEADEncryptedDataPacket,\n  SymEncryptedIntegrityProtectedDataPacket,\n  SymmetricallyEncryptedDataPacket,\n  PublicKeyEncryptedSessionKeyPacket,\n  SymEncryptedSessionKeyPacket,\n  OnePassSignaturePacket,\n  SignaturePacket\n]);\n// A SKESK packet can contain the following packets\nconst allowedSymSessionKeyPackets = /*#__PURE__*/ util.constructAllowedPackets([SymEncryptedSessionKeyPacket]);\n// A detached signature can contain the following packets\nconst allowedDetachedSignaturePackets = /*#__PURE__*/ util.constructAllowedPackets([SignaturePacket]);\n\n/**\n * Class that represents an OpenPGP message.\n * Can be an encrypted message, signed message, compressed message or literal message\n * See {@link https://tools.ietf.org/html/rfc4880#section-11.3}\n */\nexport class Message {\n  /**\n   * @param {PacketList} packetlist - The packets that form this message\n   */\n  constructor(packetlist) {\n    this.packets = packetlist || new PacketList();\n  }\n\n  /**\n   * Returns the key IDs of the keys to which the session key is encrypted\n   * @returns {Array<module:type/keyid~KeyID>} Array of keyID objects.\n   */\n  getEncryptionKeyIDs() {\n    const keyIDs = [];\n    const pkESKeyPacketlist = this.packets.filterByTag(enums.packet.publicKeyEncryptedSessionKey);\n    pkESKeyPacketlist.forEach(function(packet) {\n      keyIDs.push(packet.publicKeyID);\n    });\n    return keyIDs;\n  }\n\n  /**\n   * Returns the key IDs of the keys that signed the message\n   * @returns {Array<module:type/keyid~KeyID>} Array of keyID objects.\n   */\n  getSigningKeyIDs() {\n    const msg = this.unwrapCompressed();\n    // search for one pass signatures\n    const onePassSigList = msg.packets.filterByTag(enums.packet.onePassSignature);\n    if (onePassSigList.length > 0) {\n      return onePassSigList.map(packet => packet.issuerKeyID);\n    }\n    // if nothing found look for signature packets\n    const signatureList = msg.packets.filterByTag(enums.packet.signature);\n    return signatureList.map(packet => packet.issuerKeyID);\n  }\n\n  /**\n   * Decrypt the message. Either a private key, a session key, or a password must be specified.\n   * @param {Array<PrivateKey>} [decryptionKeys] - Private keys with decrypted secret data\n   * @param {Array<String>} [passwords] - Passwords used to decrypt\n   * @param {Array<Object>} [sessionKeys] - Session keys in the form: { data:Uint8Array, algorithm:String, [aeadAlgorithm:String] }\n   * @param {Date} [date] - Use the given date for key verification instead of the current time\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<Message>} New message with decrypted content.\n   * @async\n   */\n  async decrypt(decryptionKeys, passwords, sessionKeys, date = new Date(), config = defaultConfig) {\n    const symEncryptedPacketlist = this.packets.filterByTag(\n      enums.packet.symmetricallyEncryptedData,\n      enums.packet.symEncryptedIntegrityProtectedData,\n      enums.packet.aeadEncryptedData\n    );\n\n    if (symEncryptedPacketlist.length === 0) {\n      throw new Error('No encrypted data found');\n    }\n\n    const symEncryptedPacket = symEncryptedPacketlist[0];\n    const expectedSymmetricAlgorithm = symEncryptedPacket.cipherAlgorithm;\n\n    const sessionKeyObjects = sessionKeys || await this.decryptSessionKeys(decryptionKeys, passwords, expectedSymmetricAlgorithm, date, config);\n\n    let exception = null;\n    const decryptedPromise = Promise.all(sessionKeyObjects.map(async ({ algorithm: algorithmName, data }) => {\n      if (!util.isUint8Array(data) || (!symEncryptedPacket.cipherAlgorithm && !util.isString(algorithmName))) {\n        throw new Error('Invalid session key for decryption.');\n      }\n\n      try {\n        const algo = symEncryptedPacket.cipherAlgorithm || enums.write(enums.symmetric, algorithmName);\n        await symEncryptedPacket.decrypt(algo, data, config);\n      } catch (e) {\n        util.printDebugError(e);\n        exception = e;\n      }\n    }));\n    // We don't await stream.cancel here because it only returns when the other copy is canceled too.\n    streamCancel(symEncryptedPacket.encrypted); // Don't keep copy of encrypted data in memory.\n    symEncryptedPacket.encrypted = null;\n    await decryptedPromise;\n\n    if (!symEncryptedPacket.packets || !symEncryptedPacket.packets.length) {\n      throw exception || new Error('Decryption failed.');\n    }\n\n    const resultMsg = new Message(symEncryptedPacket.packets);\n    symEncryptedPacket.packets = new PacketList(); // remove packets after decryption\n\n    return resultMsg;\n  }\n\n  /**\n   * Decrypt encrypted session keys either with private keys or passwords.\n   * @param {Array<PrivateKey>} [decryptionKeys] - Private keys with decrypted secret data\n   * @param {Array<String>} [passwords] - Passwords used to decrypt\n   * @param {enums.symmetric} [expectedSymmetricAlgorithm] - The symmetric algorithm the SEIPDv2 / AEAD packet is encrypted with (if applicable)\n   * @param {Date} [date] - Use the given date for key verification, instead of current time\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<Array<{\n   *   data: Uint8Array,\n   *   algorithm: String\n   * }>>} array of object with potential sessionKey, algorithm pairs\n   * @async\n   */\n  async decryptSessionKeys(decryptionKeys, passwords, expectedSymmetricAlgorithm, date = new Date(), config = defaultConfig) {\n    let decryptedSessionKeyPackets = [];\n\n    let exception;\n    if (passwords) {\n      const skeskPackets = this.packets.filterByTag(enums.packet.symEncryptedSessionKey);\n      if (skeskPackets.length === 0) {\n        throw new Error('No symmetrically encrypted session key packet found.');\n      }\n      await Promise.all(passwords.map(async function(password, i) {\n        let packets;\n        if (i) {\n          packets = await PacketList.fromBinary(skeskPackets.write(), allowedSymSessionKeyPackets, config);\n        } else {\n          packets = skeskPackets;\n        }\n        await Promise.all(packets.map(async function(skeskPacket) {\n          try {\n            await skeskPacket.decrypt(password);\n            decryptedSessionKeyPackets.push(skeskPacket);\n          } catch (err) {\n            util.printDebugError(err);\n            if (err instanceof Argon2OutOfMemoryError) {\n              exception = err;\n            }\n          }\n        }));\n      }));\n    } else if (decryptionKeys) {\n      const pkeskPackets = this.packets.filterByTag(enums.packet.publicKeyEncryptedSessionKey);\n      if (pkeskPackets.length === 0) {\n        throw new Error('No public key encrypted session key packet found.');\n      }\n      await Promise.all(pkeskPackets.map(async function(pkeskPacket) {\n        await Promise.all(decryptionKeys.map(async function(decryptionKey) {\n          let decryptionKeyPackets;\n          try {\n            // do not check key expiration to allow decryption of old messages\n            decryptionKeyPackets = (await decryptionKey.getDecryptionKeys(pkeskPacket.publicKeyID, null, undefined, config)).map(key => key.keyPacket);\n          } catch (err) {\n            exception = err;\n            return;\n          }\n\n          let algos = [\n            enums.symmetric.aes256, // Old OpenPGP.js default fallback\n            enums.symmetric.aes128, // RFC4880bis fallback\n            enums.symmetric.tripledes, // RFC4880 fallback\n            enums.symmetric.cast5 // Golang OpenPGP fallback\n          ];\n          try {\n            const selfCertification = await decryptionKey.getPrimarySelfSignature(date, undefined, config); // TODO: Pass userID from somewhere.\n            if (selfCertification.preferredSymmetricAlgorithms) {\n              algos = algos.concat(selfCertification.preferredSymmetricAlgorithms);\n            }\n          } catch (e) {}\n\n          await Promise.all(decryptionKeyPackets.map(async function(decryptionKeyPacket) {\n            if (!decryptionKeyPacket.isDecrypted()) {\n              throw new Error('Decryption key is not decrypted.');\n            }\n\n            // To hinder CCA attacks against PKCS1, we carry out a constant-time decryption flow if the `constantTimePKCS1Decryption` config option is set.\n            const doConstantTimeDecryption = config.constantTimePKCS1Decryption && (\n              pkeskPacket.publicKeyAlgorithm === enums.publicKey.rsaEncrypt ||\n              pkeskPacket.publicKeyAlgorithm === enums.publicKey.rsaEncryptSign ||\n              pkeskPacket.publicKeyAlgorithm === enums.publicKey.rsaSign ||\n              pkeskPacket.publicKeyAlgorithm === enums.publicKey.elgamal\n            );\n\n            if (doConstantTimeDecryption) {\n              // The goal is to not reveal whether PKESK decryption (specifically the PKCS1 decoding step) failed, hence, we always proceed to decrypt the message,\n              // either with the successfully decrypted session key, or with a randomly generated one.\n              // Since the SEIP/AEAD's symmetric algorithm and key size are stored in the encrypted portion of the PKESK, and the execution flow cannot depend on\n              // the decrypted payload, we always assume the message to be encrypted with one of the symmetric algorithms specified in `config.constantTimePKCS1DecryptionSupportedSymmetricAlgorithms`:\n              // - If the PKESK decryption succeeds, and the session key cipher is in the supported set, then we try to decrypt the data with the decrypted session key as well as with the\n              // randomly generated keys of the remaining key types.\n              // - If the PKESK decryptions fails, or if it succeeds but support for the cipher is not enabled, then we discard the session key and try to decrypt the data using only the randomly\n              // generated session keys.\n              // NB: as a result, if the data is encrypted with a non-suported cipher, decryption will always fail.\n\n              const serialisedPKESK = pkeskPacket.write(); // make copies to be able to decrypt the PKESK packet multiple times\n              await Promise.all((\n                expectedSymmetricAlgorithm ?\n                  [expectedSymmetricAlgorithm] :\n                  Array.from(config.constantTimePKCS1DecryptionSupportedSymmetricAlgorithms)\n              ).map(async sessionKeyAlgorithm => {\n                const pkeskPacketCopy = new PublicKeyEncryptedSessionKeyPacket();\n                pkeskPacketCopy.read(serialisedPKESK);\n                const randomSessionKey = {\n                  sessionKeyAlgorithm,\n                  sessionKey: generateSessionKey(sessionKeyAlgorithm)\n                };\n                try {\n                  await pkeskPacketCopy.decrypt(decryptionKeyPacket, randomSessionKey);\n                  decryptedSessionKeyPackets.push(pkeskPacketCopy);\n                } catch (err) {\n                  // `decrypt` can still throw some non-security-sensitive errors\n                  util.printDebugError(err);\n                  exception = err;\n                }\n              }));\n\n            } else {\n              try {\n                await pkeskPacket.decrypt(decryptionKeyPacket);\n                const symmetricAlgorithm = expectedSymmetricAlgorithm || pkeskPacket.sessionKeyAlgorithm;\n                if (symmetricAlgorithm && !algos.includes(enums.write(enums.symmetric, symmetricAlgorithm))) {\n                  throw new Error('A non-preferred symmetric algorithm was used.');\n                }\n                decryptedSessionKeyPackets.push(pkeskPacket);\n              } catch (err) {\n                util.printDebugError(err);\n                exception = err;\n              }\n            }\n          }));\n        }));\n        streamCancel(pkeskPacket.encrypted); // Don't keep copy of encrypted data in memory.\n        pkeskPacket.encrypted = null;\n      }));\n    } else {\n      throw new Error('No key or password specified.');\n    }\n\n    if (decryptedSessionKeyPackets.length > 0) {\n      // Return only unique session keys\n      if (decryptedSessionKeyPackets.length > 1) {\n        const seen = new Set();\n        decryptedSessionKeyPackets = decryptedSessionKeyPackets.filter(item => {\n          const k = item.sessionKeyAlgorithm + util.uint8ArrayToString(item.sessionKey);\n          if (seen.has(k)) {\n            return false;\n          }\n          seen.add(k);\n          return true;\n        });\n      }\n\n      return decryptedSessionKeyPackets.map(packet => ({\n        data: packet.sessionKey,\n        algorithm: packet.sessionKeyAlgorithm && enums.read(enums.symmetric, packet.sessionKeyAlgorithm)\n      }));\n    }\n    throw exception || new Error('Session key decryption failed.');\n  }\n\n  /**\n   * Get literal data that is the body of the message\n   * @returns {(Uint8Array|null)} Literal body of the message as Uint8Array.\n   */\n  getLiteralData() {\n    const msg = this.unwrapCompressed();\n    const literal = msg.packets.findPacket(enums.packet.literalData);\n    return (literal && literal.getBytes()) || null;\n  }\n\n  /**\n   * Get filename from literal data packet\n   * @returns {(String|null)} Filename of literal data packet as string.\n   */\n  getFilename() {\n    const msg = this.unwrapCompressed();\n    const literal = msg.packets.findPacket(enums.packet.literalData);\n    return (literal && literal.getFilename()) || null;\n  }\n\n  /**\n   * Get literal data as text\n   * @returns {(String|null)} Literal body of the message interpreted as text.\n   */\n  getText() {\n    const msg = this.unwrapCompressed();\n    const literal = msg.packets.findPacket(enums.packet.literalData);\n    if (literal) {\n      return literal.getText();\n    }\n    return null;\n  }\n\n  /**\n   * Generate a new session key object, taking the algorithm preferences of the passed encryption keys into account, if any.\n   * @param {Array<PublicKey>} [encryptionKeys] - Public key(s) to select algorithm preferences for\n   * @param {Date} [date] - Date to select algorithm preferences at\n   * @param {Array<Object>} [userIDs] - User IDs to select algorithm preferences for\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<{ data: Uint8Array, algorithm: String, aeadAlgorithm: undefined|String }>} Object with session key data and algorithms.\n   * @async\n   */\n  static async generateSessionKey(encryptionKeys = [], date = new Date(), userIDs = [], config = defaultConfig) {\n    const { symmetricAlgo, aeadAlgo } = await getPreferredCipherSuite(encryptionKeys, date, userIDs, config);\n    const symmetricAlgoName = enums.read(enums.symmetric, symmetricAlgo);\n    const aeadAlgoName = aeadAlgo ? enums.read(enums.aead, aeadAlgo) : undefined;\n\n    await Promise.all(encryptionKeys.map(key => key.getEncryptionKey()\n      .catch(() => null) // ignore key strength requirements\n      .then(maybeKey => {\n        if (maybeKey && (maybeKey.keyPacket.algorithm === enums.publicKey.x25519 || maybeKey.keyPacket.algorithm === enums.publicKey.x448) &&\n          !aeadAlgoName && !util.isAES(symmetricAlgo)) { // if AEAD is defined, then PKESK v6 are used, and the algo info is encrypted\n          throw new Error('Could not generate a session key compatible with the given `encryptionKeys`: X22519 and X448 keys can only be used to encrypt AES session keys; change `config.preferredSymmetricAlgorithm` accordingly.');\n        }\n      })\n    ));\n\n    const sessionKeyData = generateSessionKey(symmetricAlgo);\n    return { data: sessionKeyData, algorithm: symmetricAlgoName, aeadAlgorithm: aeadAlgoName };\n  }\n\n  /**\n   * Encrypt the message either with public keys, passwords, or both at once.\n   * @param {Array<PublicKey>} [encryptionKeys] - Public key(s) for message encryption\n   * @param {Array<String>} [passwords] - Password(s) for message encryption\n   * @param {Object} [sessionKey] - Session key in the form: { data:Uint8Array, algorithm:String, [aeadAlgorithm:String] }\n   * @param {Boolean} [wildcard] - Use a key ID of 0 instead of the public key IDs\n   * @param {Array<module:type/keyid~KeyID>} [encryptionKeyIDs] - Array of key IDs to use for encryption. Each encryptionKeyIDs[i] corresponds to keys[i]\n   * @param {Date} [date] - Override the creation date of the literal package\n   * @param {Array<Object>} [userIDs] - User IDs to encrypt for, e.g. [{ name:'Robert Receiver', email:'robert@openpgp.org' }]\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<Message>} New message with encrypted content.\n   * @async\n   */\n  async encrypt(encryptionKeys, passwords, sessionKey, wildcard = false, encryptionKeyIDs = [], date = new Date(), userIDs = [], config = defaultConfig) {\n    if (sessionKey) {\n      if (!util.isUint8Array(sessionKey.data) || !util.isString(sessionKey.algorithm)) {\n        throw new Error('Invalid session key for encryption.');\n      }\n    } else if (encryptionKeys && encryptionKeys.length) {\n      sessionKey = await Message.generateSessionKey(encryptionKeys, date, userIDs, config);\n    } else if (passwords && passwords.length) {\n      sessionKey = await Message.generateSessionKey(undefined, undefined, undefined, config);\n    } else {\n      throw new Error('No keys, passwords, or session key provided.');\n    }\n\n    const { data: sessionKeyData, algorithm: algorithmName, aeadAlgorithm: aeadAlgorithmName } = sessionKey;\n\n    const msg = await Message.encryptSessionKey(sessionKeyData, algorithmName, aeadAlgorithmName, encryptionKeys, passwords, wildcard, encryptionKeyIDs, date, userIDs, config);\n\n    const symEncryptedPacket = SymEncryptedIntegrityProtectedDataPacket.fromObject({\n      version: aeadAlgorithmName ? 2 : 1,\n      aeadAlgorithm: aeadAlgorithmName ? enums.write(enums.aead, aeadAlgorithmName) : null\n    });\n    symEncryptedPacket.packets = this.packets;\n\n    const algorithm = enums.write(enums.symmetric, algorithmName);\n    await symEncryptedPacket.encrypt(algorithm, sessionKeyData, config);\n\n    msg.packets.push(symEncryptedPacket);\n    symEncryptedPacket.packets = new PacketList(); // remove packets after encryption\n    return msg;\n  }\n\n  /**\n   * Encrypt a session key either with public keys, passwords, or both at once.\n   * @param {Uint8Array} sessionKey - session key for encryption\n   * @param {String} algorithmName - session key algorithm\n   * @param {String} [aeadAlgorithmName] - AEAD algorithm, e.g. 'eax' or 'ocb'\n   * @param {Array<PublicKey>} [encryptionKeys] - Public key(s) for message encryption\n   * @param {Array<String>} [passwords] - For message encryption\n   * @param {Boolean} [wildcard] - Use a key ID of 0 instead of the public key IDs\n   * @param {Array<module:type/keyid~KeyID>} [encryptionKeyIDs] - Array of key IDs to use for encryption. Each encryptionKeyIDs[i] corresponds to encryptionKeys[i]\n   * @param {Date} [date] - Override the date\n   * @param {Array} [userIDs] - User IDs to encrypt for, e.g. [{ name:'Robert Receiver', email:'robert@openpgp.org' }]\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<Message>} New message with encrypted content.\n   * @async\n   */\n  static async encryptSessionKey(sessionKey, algorithmName, aeadAlgorithmName, encryptionKeys, passwords, wildcard = false, encryptionKeyIDs = [], date = new Date(), userIDs = [], config = defaultConfig) {\n    const packetlist = new PacketList();\n    const symmetricAlgorithm = enums.write(enums.symmetric, algorithmName);\n    const aeadAlgorithm = aeadAlgorithmName && enums.write(enums.aead, aeadAlgorithmName);\n\n    if (encryptionKeys) {\n      const results = await Promise.all(encryptionKeys.map(async function(primaryKey, i) {\n        const encryptionKey = await primaryKey.getEncryptionKey(encryptionKeyIDs[i], date, userIDs, config);\n\n        const pkESKeyPacket = PublicKeyEncryptedSessionKeyPacket.fromObject({\n          version: aeadAlgorithm ? 6 : 3,\n          encryptionKeyPacket: encryptionKey.keyPacket,\n          anonymousRecipient: wildcard,\n          sessionKey,\n          sessionKeyAlgorithm: symmetricAlgorithm\n        });\n\n        await pkESKeyPacket.encrypt(encryptionKey.keyPacket);\n        delete pkESKeyPacket.sessionKey; // delete plaintext session key after encryption\n        return pkESKeyPacket;\n      }));\n      packetlist.push(...results);\n    }\n    if (passwords) {\n      const testDecrypt = async function(keyPacket, password) {\n        try {\n          await keyPacket.decrypt(password);\n          return 1;\n        } catch (e) {\n          return 0;\n        }\n      };\n\n      const sum = (accumulator, currentValue) => accumulator + currentValue;\n\n      const encryptPassword = async function(sessionKey, algorithm, aeadAlgorithm, password) {\n        const symEncryptedSessionKeyPacket = new SymEncryptedSessionKeyPacket(config);\n        symEncryptedSessionKeyPacket.sessionKey = sessionKey;\n        symEncryptedSessionKeyPacket.sessionKeyAlgorithm = algorithm;\n        if (aeadAlgorithm) {\n          symEncryptedSessionKeyPacket.aeadAlgorithm = aeadAlgorithm;\n        }\n        await symEncryptedSessionKeyPacket.encrypt(password, config);\n\n        if (config.passwordCollisionCheck) {\n          const results = await Promise.all(passwords.map(pwd => testDecrypt(symEncryptedSessionKeyPacket, pwd)));\n          if (results.reduce(sum) !== 1) {\n            return encryptPassword(sessionKey, algorithm, password);\n          }\n        }\n\n        delete symEncryptedSessionKeyPacket.sessionKey; // delete plaintext session key after encryption\n        return symEncryptedSessionKeyPacket;\n      };\n\n      const results = await Promise.all(passwords.map(pwd => encryptPassword(sessionKey, symmetricAlgorithm, aeadAlgorithm, pwd)));\n      packetlist.push(...results);\n    }\n\n    return new Message(packetlist);\n  }\n\n  /**\n   * Sign the message (the literal data packet of the message)\n   * @param {Array<PrivateKey>} signingKeys - private keys with decrypted secret key data for signing\n   * @param {Array<Key>} recipientKeys - recipient keys to get the signing preferences from\n   * @param {Signature} [signature] - Any existing detached signature to add to the message\n   * @param {Array<module:type/keyid~KeyID>} [signingKeyIDs] - Array of key IDs to use for signing. Each signingKeyIDs[i] corresponds to signingKeys[i]\n   * @param {Date} [date] - Override the creation time of the signature\n   * @param {Array<UserID>} [signingUserIDs] - User IDs to sign with, e.g. [{ name:'Steve Sender', email:'steve@openpgp.org' }]\n   * @param {Array<UserID>} [recipientUserIDs] - User IDs associated with `recipientKeys` to get the signing preferences from\n   * @param {Array} [notations] - Notation Data to add to the signatures, e.g. [{ name: 'test@example.org', value: new TextEncoder().encode('test'), humanReadable: true, critical: false }]\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<Message>} New message with signed content.\n   * @async\n   */\n  async sign(signingKeys = [], recipientKeys = [], signature = null, signingKeyIDs = [], date = new Date(), signingUserIDs = [], recipientUserIDs = [], notations = [], config = defaultConfig) {\n    const packetlist = new PacketList();\n\n    const literalDataPacket = this.packets.findPacket(enums.packet.literalData);\n    if (!literalDataPacket) {\n      throw new Error('No literal data packet to sign.');\n    }\n\n    const signaturePackets = await createSignaturePackets(literalDataPacket, signingKeys, recipientKeys, signature, signingKeyIDs, date, signingUserIDs, recipientUserIDs, notations, false, config); // this returns the existing signature packets as well\n    const onePassSignaturePackets = signaturePackets.map(\n      (signaturePacket, i) => OnePassSignaturePacket.fromSignaturePacket(signaturePacket, i === 0))\n      .reverse(); // innermost OPS refers to the first signature packet\n\n    packetlist.push(...onePassSignaturePackets);\n    packetlist.push(literalDataPacket);\n    packetlist.push(...signaturePackets);\n\n    return new Message(packetlist);\n  }\n\n  /**\n   * Compresses the message (the literal and -if signed- signature data packets of the message)\n   * @param {module:enums.compression} algo - compression algorithm\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Message} New message with compressed content.\n   */\n  compress(algo, config = defaultConfig) {\n    if (algo === enums.compression.uncompressed) {\n      return this;\n    }\n\n    const compressed = new CompressedDataPacket(config);\n    compressed.algorithm = algo;\n    compressed.packets = this.packets;\n\n    const packetList = new PacketList();\n    packetList.push(compressed);\n\n    return new Message(packetList);\n  }\n\n  /**\n   * Create a detached signature for the message (the literal data packet of the message)\n   * @param {Array<PrivateKey>} signingKeys - private keys with decrypted secret key data for signing\n   * @param {Array<Key>} recipientKeys - recipient keys to get the signing preferences from\n   * @param {Signature} [signature] - Any existing detached signature\n   * @param {Array<module:type/keyid~KeyID>} [signingKeyIDs] - Array of key IDs to use for signing. Each signingKeyIDs[i] corresponds to signingKeys[i]\n   * @param {Date} [date] - Override the creation time of the signature\n   * @param {Array<UserID>} [signingUserIDs] - User IDs to sign with, e.g. [{ name:'Steve Sender', email:'steve@openpgp.org' }]\n   * @param {Array<UserID>} [recipientUserIDs] - User IDs associated with `recipientKeys` to get the signing preferences from\n   * @param {Array} [notations] - Notation Data to add to the signatures, e.g. [{ name: 'test@example.org', value: new TextEncoder().encode('test'), humanReadable: true, critical: false }]\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<Signature>} New detached signature of message content.\n   * @async\n   */\n  async signDetached(signingKeys = [], recipientKeys = [], signature = null, signingKeyIDs = [], recipientKeyIDs = [], date = new Date(), userIDs = [], notations = [], config = defaultConfig) {\n    const literalDataPacket = this.packets.findPacket(enums.packet.literalData);\n    if (!literalDataPacket) {\n      throw new Error('No literal data packet to sign.');\n    }\n    return new Signature(await createSignaturePackets(literalDataPacket, signingKeys, recipientKeys, signature, signingKeyIDs, recipientKeyIDs, date, userIDs, notations, true, config));\n  }\n\n  /**\n   * Verify message signatures\n   * @param {Array<PublicKey>} verificationKeys - Array of public keys to verify signatures\n   * @param {Date} [date] - Verify the signature against the given date, i.e. check signature creation time < date < expiration time\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<Array<{\n   *   keyID: module:type/keyid~KeyID,\n   *   signature: Promise<Signature>,\n   *   verified: Promise<true>\n   * }>>} List of signer's keyID and validity of signatures.\n   * @async\n   */\n  async verify(verificationKeys, date = new Date(), config = defaultConfig) {\n    const msg = this.unwrapCompressed();\n    const literalDataList = msg.packets.filterByTag(enums.packet.literalData);\n    if (literalDataList.length !== 1) {\n      throw new Error('Can only verify message with one literal data packet.');\n    }\n    let packets = msg.packets;\n    if (isArrayStream(packets.stream)) {\n      packets = packets.concat(await streamReadToEnd(packets.stream, _ => _ || []));\n    }\n    const onePassSigList = packets.filterByTag(enums.packet.onePassSignature).reverse();\n    const signatureList = packets.filterByTag(enums.packet.signature);\n    if (onePassSigList.length && !signatureList.length && util.isStream(packets.stream) && !isArrayStream(packets.stream)) {\n      await Promise.all(onePassSigList.map(async onePassSig => {\n        onePassSig.correspondingSig = new Promise((resolve, reject) => {\n          onePassSig.correspondingSigResolve = resolve;\n          onePassSig.correspondingSigReject = reject;\n        });\n        onePassSig.signatureData = streamFromAsync(async () => (await onePassSig.correspondingSig).signatureData);\n        onePassSig.hashed = streamReadToEnd(await onePassSig.hash(onePassSig.signatureType, literalDataList[0], undefined, false));\n        onePassSig.hashed.catch(() => {});\n      }));\n      packets.stream = streamTransformPair(packets.stream, async (readable, writable) => {\n        const reader = streamGetReader(readable);\n        const writer = streamGetWriter(writable);\n        try {\n          for (let i = 0; i < onePassSigList.length; i++) {\n            const { value: signature } = await reader.read();\n            onePassSigList[i].correspondingSigResolve(signature);\n          }\n          await reader.readToEnd();\n          await writer.ready;\n          await writer.close();\n        } catch (e) {\n          onePassSigList.forEach(onePassSig => {\n            onePassSig.correspondingSigReject(e);\n          });\n          await writer.abort(e);\n        }\n      });\n      return createVerificationObjects(onePassSigList, literalDataList, verificationKeys, date, false, config);\n    }\n    return createVerificationObjects(signatureList, literalDataList, verificationKeys, date, false, config);\n  }\n\n  /**\n   * Verify detached message signature\n   * @param {Array<PublicKey>} verificationKeys - Array of public keys to verify signatures\n   * @param {Signature} signature\n   * @param {Date} date - Verify the signature against the given date, i.e. check signature creation time < date < expiration time\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<Array<{\n   *   keyID: module:type/keyid~KeyID,\n   *   signature: Promise<Signature>,\n   *   verified: Promise<true>\n   * }>>} List of signer's keyID and validity of signature.\n   * @async\n   */\n  verifyDetached(signature, verificationKeys, date = new Date(), config = defaultConfig) {\n    const msg = this.unwrapCompressed();\n    const literalDataList = msg.packets.filterByTag(enums.packet.literalData);\n    if (literalDataList.length !== 1) {\n      throw new Error('Can only verify message with one literal data packet.');\n    }\n    const signatureList = signature.packets.filterByTag(enums.packet.signature); // drop UnparsablePackets\n    return createVerificationObjects(signatureList, literalDataList, verificationKeys, date, true, config);\n  }\n\n  /**\n   * Unwrap compressed message\n   * @returns {Message} Message Content of compressed message.\n   */\n  unwrapCompressed() {\n    const compressed = this.packets.filterByTag(enums.packet.compressedData);\n    if (compressed.length) {\n      return new Message(compressed[0].packets);\n    }\n    return this;\n  }\n\n  /**\n   * Append signature to unencrypted message object\n   * @param {String|Uint8Array} detachedSignature - The detached ASCII-armored or Uint8Array PGP signature\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   */\n  async appendSignature(detachedSignature, config = defaultConfig) {\n    await this.packets.read(\n      util.isUint8Array(detachedSignature) ? detachedSignature : (await unarmor(detachedSignature)).data,\n      allowedDetachedSignaturePackets,\n      config\n    );\n  }\n\n  /**\n   * Returns binary encoded message\n   * @returns {ReadableStream<Uint8Array>} Binary message.\n   */\n  write() {\n    return this.packets.write();\n  }\n\n  /**\n   * Returns ASCII armored text of message\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {ReadableStream<String>} ASCII armor.\n   */\n  armor(config = defaultConfig) {\n    const trailingPacket = this.packets[this.packets.length - 1];\n    // An ASCII-armored Encrypted Message packet sequence that ends in an v2 SEIPD packet MUST NOT contain a CRC24 footer.\n    // An ASCII-armored sequence of Signature packets that only includes v6 Signature packets MUST NOT contain a CRC24 footer.\n    const emitChecksum = trailingPacket.constructor.tag === SymEncryptedIntegrityProtectedDataPacket.tag ?\n      trailingPacket.version !== 2 :\n      this.packets.some(packet => packet.constructor.tag === SignaturePacket.tag && packet.version !== 6);\n    return armor(enums.armor.message, this.write(), null, null, null, emitChecksum, config);\n  }\n}\n\n/**\n * Create signature packets for the message\n * @param {LiteralDataPacket} literalDataPacket - the literal data packet to sign\n * @param {Array<PrivateKey>} [signingKeys] - private keys with decrypted secret key data for signing\n * @param {Array<Key>} [recipientKeys] - recipient keys to get the signing preferences from\n * @param {Signature} [signature] - Any existing detached signature to append\n * @param {Array<module:type/keyid~KeyID>} [signingKeyIDs] - Array of key IDs to use for signing. Each signingKeyIDs[i] corresponds to signingKeys[i]\n * @param {Date} [date] - Override the creationtime of the signature\n * @param {Array<UserID>} [signingUserIDs] - User IDs to sign to, e.g. [{ name:'Steve Sender', email:'steve@openpgp.org' }]\n * @param {Array<UserID>} [recipientUserIDs] - User IDs associated with `recipientKeys` to get the signing preferences from\n * @param {Array} [notations] - Notation Data to add to the signatures, e.g. [{ name: 'test@example.org', value: new TextEncoder().encode('test'), humanReadable: true, critical: false }]\n * @param {Array} [signatureSalts] - A list of signature salts matching the number of signingKeys that should be used for v6 signatures\n * @param {Boolean} [detached] - Whether to create detached signature packets\n * @param {Object} [config] - Full configuration, defaults to openpgp.config\n * @returns {Promise<PacketList>} List of signature packets.\n * @async\n * @private\n */\nexport async function createSignaturePackets(literalDataPacket, signingKeys, recipientKeys = [], signature = null, signingKeyIDs = [], date = new Date(), signingUserIDs = [], recipientUserIDs = [], notations = [], detached = false, config = defaultConfig) {\n  const packetlist = new PacketList();\n\n  // If data packet was created from Uint8Array, use binary, otherwise use text\n  const signatureType = literalDataPacket.text === null ?\n    enums.signature.binary : enums.signature.text;\n\n  await Promise.all(signingKeys.map(async (primaryKey, i) => {\n    const signingUserID = signingUserIDs[i];\n    if (!primaryKey.isPrivate()) {\n      throw new Error('Need private key for signing');\n    }\n    const signingKey = await primaryKey.getSigningKey(signingKeyIDs[i], date, signingUserID, config);\n    return createSignaturePacket(literalDataPacket, recipientKeys.length ? recipientKeys : [primaryKey], signingKey.keyPacket, { signatureType }, date, recipientUserIDs, notations, detached, config);\n  })).then(signatureList => {\n    packetlist.push(...signatureList);\n  });\n\n  if (signature) {\n    const existingSigPacketlist = signature.packets.filterByTag(enums.packet.signature);\n    packetlist.push(...existingSigPacketlist);\n  }\n  return packetlist;\n}\n\n/**\n * Create object containing signer's keyID and validity of signature\n * @param {SignaturePacket} signature - Signature packet\n * @param {Array<LiteralDataPacket>} literalDataList - Array of literal data packets\n * @param {Array<PublicKey>} verificationKeys - Array of public keys to verify signatures\n * @param {Date} [date] - Check signature validity with respect to the given date\n * @param {Boolean} [detached] - Whether to verify detached signature packets\n * @param {Object} [config] - Full configuration, defaults to openpgp.config\n * @returns {Promise<{\n *   keyID: module:type/keyid~KeyID,\n *   signature: Promise<Signature>,\n *   verified: Promise<true>\n * }>} signer's keyID and validity of signature\n * @async\n * @private\n */\nasync function createVerificationObject(signature, literalDataList, verificationKeys, date = new Date(), detached = false, config = defaultConfig) {\n  let primaryKey;\n  let unverifiedSigningKey;\n\n  for (const key of verificationKeys) {\n    const issuerKeys = key.getKeys(signature.issuerKeyID);\n    if (issuerKeys.length > 0) {\n      primaryKey = key;\n      unverifiedSigningKey = issuerKeys[0];\n      break;\n    }\n  }\n\n  const isOnePassSignature = signature instanceof OnePassSignaturePacket;\n  const signaturePacketPromise = isOnePassSignature ? signature.correspondingSig : signature;\n\n  const verifiedSig = {\n    keyID: signature.issuerKeyID,\n    verified: (async () => {\n      if (!unverifiedSigningKey) {\n        throw new Error(`Could not find signing key with key ID ${signature.issuerKeyID.toHex()}`);\n      }\n\n      await signature.verify(unverifiedSigningKey.keyPacket, signature.signatureType, literalDataList[0], date, detached, config);\n      const signaturePacket = await signaturePacketPromise;\n      if (unverifiedSigningKey.getCreationTime() > signaturePacket.created) {\n        throw new Error('Key is newer than the signature');\n      }\n      // We pass the signature creation time to check whether the key was expired at the time of signing.\n      // We check this after signature verification because for streamed one-pass signatures, the creation time is not available before\n      try {\n        await primaryKey.getSigningKey(unverifiedSigningKey.getKeyID(), signaturePacket.created, undefined, config);\n      } catch (e) {\n        // If a key was reformatted then the self-signatures of the signing key might be in the future compared to the message signature,\n        // making the key invalid at the time of signing.\n        // However, if the key is valid at the given `date`, we still allow using it provided the relevant `config` setting is enabled.\n        // Note: we do not support the edge case of a key that was reformatted and it has expired.\n        if (config.allowInsecureVerificationWithReformattedKeys && e.message.match(/Signature creation time is in the future/)) {\n          await primaryKey.getSigningKey(unverifiedSigningKey.getKeyID(), date, undefined, config);\n        } else {\n          throw e;\n        }\n      }\n      return true;\n    })(),\n    signature: (async () => {\n      const signaturePacket = await signaturePacketPromise;\n      const packetlist = new PacketList();\n      signaturePacket && packetlist.push(signaturePacket);\n      return new Signature(packetlist);\n    })()\n  };\n\n  // Mark potential promise rejections as \"handled\". This is needed because in\n  // some cases, we reject them before the user has a reasonable chance to\n  // handle them (e.g. `await readToEnd(result.data); await result.verified` and\n  // the data stream errors).\n  verifiedSig.signature.catch(() => {});\n  verifiedSig.verified.catch(() => {});\n\n  return verifiedSig;\n}\n\n/**\n * Create list of objects containing signer's keyID and validity of signature\n * @param {Array<SignaturePacket>} signatureList - Array of signature packets\n * @param {Array<LiteralDataPacket>} literalDataList - Array of literal data packets\n * @param {Array<PublicKey>} verificationKeys - Array of public keys to verify signatures\n * @param {Date} date - Verify the signature against the given date,\n *                    i.e. check signature creation time < date < expiration time\n * @param {Boolean} [detached] - Whether to verify detached signature packets\n * @param {Object} [config] - Full configuration, defaults to openpgp.config\n * @returns {Promise<Array<{\n *   keyID: module:type/keyid~KeyID,\n *   signature: Promise<Signature>,\n *   verified: Promise<true>\n * }>>} list of signer's keyID and validity of signatures (one entry per signature packet in input)\n * @async\n * @private\n */\nexport async function createVerificationObjects(signatureList, literalDataList, verificationKeys, date = new Date(), detached = false, config = defaultConfig) {\n  return Promise.all(signatureList.filter(function(signature) {\n    return ['text', 'binary'].includes(enums.read(enums.signature, signature.signatureType));\n  }).map(async function(signature) {\n    return createVerificationObject(signature, literalDataList, verificationKeys, date, detached, config);\n  }));\n}\n\n/**\n * Reads an (optionally armored) OpenPGP message and returns a Message object\n * @param {Object} options\n * @param {String | ReadableStream<String>} [options.armoredMessage] - Armored message to be parsed\n * @param {Uint8Array | ReadableStream<Uint8Array>} [options.binaryMessage] - Binary to be parsed\n * @param {Object} [options.config] - Custom configuration settings to overwrite those in [config]{@link module:config}\n * @returns {Promise<Message>} New message object.\n * @async\n * @static\n */\nexport async function readMessage({ armoredMessage, binaryMessage, config, ...rest }) {\n  config = { ...defaultConfig, ...config };\n  let input = armoredMessage || binaryMessage;\n  if (!input) {\n    throw new Error('readMessage: must pass options object containing `armoredMessage` or `binaryMessage`');\n  }\n  if (armoredMessage && !util.isString(armoredMessage) && !util.isStream(armoredMessage)) {\n    throw new Error('readMessage: options.armoredMessage must be a string or stream');\n  }\n  if (binaryMessage && !util.isUint8Array(binaryMessage) && !util.isStream(binaryMessage)) {\n    throw new Error('readMessage: options.binaryMessage must be a Uint8Array or stream');\n  }\n  const unknownOptions = Object.keys(rest); if (unknownOptions.length > 0) throw new Error(`Unknown option: ${unknownOptions.join(', ')}`);\n\n  const streamType = util.isStream(input);\n  if (armoredMessage) {\n    const { type, data } = await unarmor(input, config);\n    if (type !== enums.armor.message) {\n      throw new Error('Armored text not of type message');\n    }\n    input = data;\n  }\n  const packetlist = await PacketList.fromBinary(input, allowedMessagePackets, config, new MessageGrammarValidator());\n  const message = new Message(packetlist);\n  message.fromStream = streamType;\n  return message;\n}\n\n/**\n * Creates new message object from text or binary data.\n * @param {Object} options\n * @param {String | ReadableStream<String>} [options.text] - The text message contents\n * @param {Uint8Array | ReadableStream<Uint8Array>} [options.binary] - The binary message contents\n * @param {String} [options.filename=\"\"] - Name of the file (if any)\n * @param {Date} [options.date=current date] - Date of the message, or modification date of the file\n * @param {'utf8'|'binary'|'text'|'mime'} [options.format='utf8' if text is passed, 'binary' otherwise] - Data packet type\n * @returns {Promise<Message>} New message object.\n * @async\n * @static\n */\nexport async function createMessage({ text, binary, filename, date = new Date(), format = text !== undefined ? 'utf8' : 'binary', ...rest }) {\n  const input = text !== undefined ? text : binary;\n  if (input === undefined) {\n    throw new Error('createMessage: must pass options object containing `text` or `binary`');\n  }\n  if (text && !util.isString(text) && !util.isStream(text)) {\n    throw new Error('createMessage: options.text must be a string or stream');\n  }\n  if (binary && !util.isUint8Array(binary) && !util.isStream(binary)) {\n    throw new Error('createMessage: options.binary must be a Uint8Array or stream');\n  }\n  const unknownOptions = Object.keys(rest); if (unknownOptions.length > 0) throw new Error(`Unknown option: ${unknownOptions.join(', ')}`);\n\n  const streamType = util.isStream(input);\n  const literalDataPacket = new LiteralDataPacket(date);\n  if (text !== undefined) {\n    literalDataPacket.setText(input, enums.write(enums.literal, format));\n  } else {\n    literalDataPacket.setBytes(input, enums.write(enums.literal, format));\n  }\n  if (filename !== undefined) {\n    literalDataPacket.setFilename(filename);\n  }\n  const literalDataPacketlist = new PacketList();\n  literalDataPacketlist.push(literalDataPacket);\n  const message = new Message(literalDataPacketlist);\n  message.fromStream = streamType;\n  return message;\n}\n","// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport { armor, unarmor } from './encoding/armor';\nimport enums from './enums';\nimport util from './util';\nimport { PacketList, LiteralDataPacket, SignaturePacket } from './packet';\nimport { Signature } from './signature';\nimport { createVerificationObjects, createSignaturePackets } from './message';\nimport defaultConfig from './config';\n\n// A Cleartext message can contain the following packets\nconst allowedPackets = /*#__PURE__*/ util.constructAllowedPackets([SignaturePacket]);\n\n/**\n * Class that represents an OpenPGP cleartext signed message.\n * See {@link https://tools.ietf.org/html/rfc4880#section-7}\n */\nexport class CleartextMessage {\n  /**\n   * @param {String} text - The cleartext of the signed message\n   * @param {Signature} signature - The detached signature or an empty signature for unsigned messages\n   */\n  constructor(text, signature) {\n    // remove trailing whitespace and normalize EOL to canonical form <CR><LF>\n    this.text = util.removeTrailingSpaces(text).replace(/\\r?\\n/g, '\\r\\n');\n    if (signature && !(signature instanceof Signature)) {\n      throw new Error('Invalid signature input');\n    }\n    this.signature = signature || new Signature(new PacketList());\n  }\n\n  /**\n   * Returns the key IDs of the keys that signed the cleartext message\n   * @returns {Array<module:type/keyid~KeyID>} Array of keyID objects.\n   */\n  getSigningKeyIDs() {\n    const keyIDs = [];\n    const signatureList = this.signature.packets;\n    signatureList.forEach(function(packet) {\n      keyIDs.push(packet.issuerKeyID);\n    });\n    return keyIDs;\n  }\n\n  /**\n   * Sign the cleartext message\n   * @param {Array<Key>} signingKeys - private keys with decrypted secret key data for signing\n   * @param {Array<Key>} recipientKeys - recipient keys to get the signing preferences from\n   * @param {Signature} [signature] - Any existing detached signature\n   * @param {Array<module:type/keyid~KeyID>} [signingKeyIDs] - Array of key IDs to use for signing. Each signingKeyIDs[i] corresponds to privateKeys[i]\n   * @param {Date} [date] - The creation time of the signature that should be created\n   * @param {Array} [signingKeyIDs] - User IDs to sign with, e.g. [{ name:'Steve Sender', email:'steve@openpgp.org' }]\n   * @param {Array} [recipientUserIDs] - User IDs associated with `recipientKeys` to get the signing preferences from\n   * @param {Array} [notations] - Notation Data to add to the signatures, e.g. [{ name: 'test@example.org', value: new TextEncoder().encode('test'), humanReadable: true, critical: false }]\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<CleartextMessage>} New cleartext message with signed content.\n   * @async\n   */\n  async sign(signingKeys, recipientKeys = [], signature = null, signingKeyIDs = [], date = new Date(), signingUserIDs = [], recipientUserIDs = [], notations = [], config = defaultConfig) {\n    const literalDataPacket = new LiteralDataPacket();\n    literalDataPacket.setText(this.text);\n    const newSignature = new Signature(await createSignaturePackets(literalDataPacket, signingKeys, recipientKeys, signature, signingKeyIDs, date, signingUserIDs, recipientUserIDs, notations, true, config));\n    return new CleartextMessage(this.text, newSignature);\n  }\n\n  /**\n   * Verify signatures of cleartext signed message\n   * @param {Array<Key>} keys - Array of keys to verify signatures\n   * @param {Date} [date] - Verify the signature against the given date, i.e. check signature creation time < date < expiration time\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {Promise<Array<{\n   *   keyID: module:type/keyid~KeyID,\n   *   signature: Promise<Signature>,\n   *   verified: Promise<true>\n   * }>>} List of signer's keyID and validity of signature.\n   * @async\n   */\n  verify(keys, date = new Date(), config = defaultConfig) {\n    const signatureList = this.signature.packets.filterByTag(enums.packet.signature); // drop UnparsablePackets\n    const literalDataPacket = new LiteralDataPacket();\n    // we assume that cleartext signature is generated based on UTF8 cleartext\n    literalDataPacket.setText(this.text);\n    return createVerificationObjects(signatureList, [literalDataPacket], keys, date, true, config);\n  }\n\n  /**\n   * Get cleartext\n   * @returns {String} Cleartext of message.\n   */\n  getText() {\n    // normalize end of line to \\n\n    return this.text.replace(/\\r\\n/g, '\\n');\n  }\n\n  /**\n   * Returns ASCII armored text of cleartext signed message\n   * @param {Object} [config] - Full configuration, defaults to openpgp.config\n   * @returns {String | ReadableStream<String>} ASCII armor.\n   */\n  armor(config = defaultConfig) {\n    // emit header and checksum if one of the signatures has a version not 6\n    const emitHeaderAndChecksum = this.signature.packets.some(packet => packet.version !== 6);\n    const hash = emitHeaderAndChecksum ?\n      Array.from(new Set(this.signature.packets.map(\n        packet => enums.read(enums.hash, packet.hashAlgorithm).toUpperCase()\n      ))).join() :\n      null;\n\n    const body = {\n      hash,\n      text: this.text,\n      data: this.signature.packets.write()\n    };\n\n    // An ASCII-armored sequence of Signature packets that only includes v6 Signature packets MUST NOT contain a CRC24 footer.\n    return armor(enums.armor.signed, body, undefined, undefined, undefined, emitHeaderAndChecksum, config);\n  }\n}\n\n/**\n * Reads an OpenPGP cleartext signed message and returns a CleartextMessage object\n * @param {Object} options\n * @param {String} options.cleartextMessage - Text to be parsed\n * @param {Object} [options.config] - Custom configuration settings to overwrite those in [config]{@link module:config}\n * @returns {Promise<CleartextMessage>} New cleartext message object.\n * @async\n * @static\n */\nexport async function readCleartextMessage({ cleartextMessage, config, ...rest }) {\n  config = { ...defaultConfig, ...config };\n  if (!cleartextMessage) {\n    throw new Error('readCleartextMessage: must pass options object containing `cleartextMessage`');\n  }\n  if (!util.isString(cleartextMessage)) {\n    throw new Error('readCleartextMessage: options.cleartextMessage must be a string');\n  }\n  const unknownOptions = Object.keys(rest); if (unknownOptions.length > 0) throw new Error(`Unknown option: ${unknownOptions.join(', ')}`);\n\n  const input = await unarmor(cleartextMessage);\n  if (input.type !== enums.armor.signed) {\n    throw new Error('No cleartext signed message.');\n  }\n  const packetlist = await PacketList.fromBinary(input.data, allowedPackets, config);\n  verifyHeaders(input.headers, packetlist);\n  const signature = new Signature(packetlist);\n  return new CleartextMessage(input.text, signature);\n}\n\n/**\n * Compare hash algorithm specified in the armor header with signatures\n * @param {Array<String>} headers - Armor headers\n * @param {PacketList} packetlist - The packetlist with signature packets\n * @private\n */\nfunction verifyHeaders(headers, packetlist) {\n  const checkHashAlgos = function(hashAlgos) {\n    const check = packet => algo => packet.hashAlgorithm === algo;\n\n    for (let i = 0; i < packetlist.length; i++) {\n      if (packetlist[i].constructor.tag === enums.packet.signature && !hashAlgos.some(check(packetlist[i]))) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const hashAlgos = [];\n  headers.forEach(header => {\n    const hashHeader = header.match(/^Hash: (.+)$/); // get header value\n    if (hashHeader) {\n      const parsedHashIDs = hashHeader[1]\n        .replace(/\\s/g, '') // remove whitespace\n        .split(',')\n        .map(hashName => {\n          try {\n            return enums.write(enums.hash, hashName.toLowerCase());\n          } catch (e) {\n            throw new Error('Unknown hash algorithm in armor header: ' + hashName.toLowerCase());\n          }\n        });\n      hashAlgos.push(...parsedHashIDs);\n    } else {\n      throw new Error('Only \"Hash\" header allowed in cleartext signed message');\n    }\n  });\n\n  if (hashAlgos.length && !checkHashAlgos(hashAlgos)) {\n    throw new Error('Hash algorithm mismatch in armor header and signature');\n  }\n}\n\n/**\n * Creates a new CleartextMessage object from text\n * @param {Object} options\n * @param {String} options.text\n * @static\n * @async\n */\nexport async function createCleartextMessage({ text, ...rest }) {\n  if (!text) {\n    throw new Error('createCleartextMessage: must pass options object containing `text`');\n  }\n  if (!util.isString(text)) {\n    throw new Error('createCleartextMessage: options.text must be a string');\n  }\n  const unknownOptions = Object.keys(rest); if (unknownOptions.length > 0) throw new Error(`Unknown option: ${unknownOptions.join(', ')}`);\n\n  return new CleartextMessage(text);\n}\n","// OpenPGP.js - An OpenPGP implementation in javascript\n// Copyright (C) 2016 Tankred Hase\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nimport { fromAsync as streamFromAsync, concat as streamConcat, transformPair as streamTransformPair, pipe as streamPipe, readToEnd as streamReadToEnd, getWriter as streamGetWriter } from '@openpgp/web-stream-tools';\nimport { Message } from './message';\nimport { CleartextMessage } from './cleartext';\nimport { generate, reformat, getPreferredCompressionAlgo } from './key';\nimport defaultConfig from './config';\nimport util from './util';\nimport { checkKeyRequirements } from './key/helper';\n\n\n//////////////////////\n//                  //\n//   Key handling   //\n//                  //\n//////////////////////\n\n\n/**\n * Generates a new OpenPGP key pair. Supports RSA and ECC keys, as well as the newer Curve448 and Curve25519 keys.\n * By default, primary and subkeys will be of same type.\n * The generated primary key will have signing capabilities. By default, one subkey with encryption capabilities is also generated.\n * @param {Object} options\n * @param {Object|Array<Object>} options.userIDs - User IDs as objects: `{ name: 'Jo Doe', email: 'info@jo.com' }`\n * @param {'ecc'|'rsa'|'curve448'|'curve25519'} [options.type='ecc'] - The primary key algorithm type: ECC (default for v4 keys), RSA, Curve448 or Curve25519 (new format, default for v6 keys).\n *                                                                     Note: Curve448 and Curve25519 (new format) are not widely supported yet.\n * @param {String} [options.passphrase=(not protected)] - The passphrase used to encrypt the generated private key. If omitted or empty, the key won't be encrypted.\n * @param {Number} [options.rsaBits=4096] - Number of bits for RSA keys\n * @param {String} [options.curve='curve25519Legacy'] - Elliptic curve for ECC keys:\n *                                             curve25519Legacy (default), nistP256, nistP384, nistP521, secp256k1,\n *                                             brainpoolP256r1, brainpoolP384r1, or brainpoolP512r1\n * @param {Date} [options.date=current date] - Override the creation date of the key and the key signatures\n * @param {Number} [options.keyExpirationTime=0 (never expires)] - Number of seconds from the key creation time after which the key expires\n * @param {Array<Object>} [options.subkeys=a single encryption subkey] - Options for each subkey e.g. `[{sign: true, passphrase: '123'}]`\n *                                             default to main key options, except for `sign` parameter that defaults to false, and indicates whether the subkey should sign rather than encrypt\n * @param {'armored'|'binary'|'object'} [options.format='armored'] - format of the output keys\n * @param {Object} [options.config] - Custom configuration settings to overwrite those in [config]{@link module:config}\n * @returns {Promise<Object>} The generated key object in the form:\n *                                     { privateKey:PrivateKey|Uint8Array|String, publicKey:PublicKey|Uint8Array|String, revocationCertificate:String }\n * @async\n * @static\n */\nexport async function generateKey({ userIDs = [], passphrase, type, curve, rsaBits = 4096, keyExpirationTime = 0, date = new Date(), subkeys = [{}], format = 'armored', config, ...rest }) {\n  config = { ...defaultConfig, ...config }; checkConfig(config);\n  if (!type && !curve) {\n    type = config.v6Keys ? 'curve25519' : 'ecc'; // default to new curve25519 for v6 keys (legacy curve25519 cannot be used with them)\n    curve = 'curve25519Legacy'; // unused with type != 'ecc'\n  } else {\n    type = type || 'ecc';\n    curve = curve || 'curve25519Legacy';\n  }\n  userIDs = toArray(userIDs);\n  const unknownOptions = Object.keys(rest); if (unknownOptions.length > 0) throw new Error(`Unknown option: ${unknownOptions.join(', ')}`);\n\n  if (userIDs.length === 0 && !config.v6Keys) {\n    throw new Error('UserIDs are required for V4 keys');\n  }\n  if (type === 'rsa' && rsaBits < config.minRSABits) {\n    throw new Error(`rsaBits should be at least ${config.minRSABits}, got: ${rsaBits}`);\n  }\n\n  const options = { userIDs, passphrase, type, rsaBits, curve, keyExpirationTime, date, subkeys };\n\n  try {\n    const { key, revocationCertificate } = await generate(options, config);\n    key.getKeys().forEach(({ keyPacket }) => checkKeyRequirements(keyPacket, config));\n\n    return {\n      privateKey: formatObject(key, format, config),\n      publicKey: formatObject(key.toPublic(), format, config),\n      revocationCertificate\n    };\n  } catch (err) {\n    throw util.wrapError('Error generating keypair', err);\n  }\n}\n\n/**\n * Reformats signature packets for a key and rewraps key object.\n * @param {Object} options\n * @param {PrivateKey} options.privateKey - Private key to reformat\n * @param {Object|Array<Object>} options.userIDs - User IDs as objects: `{ name: 'Jo Doe', email: 'info@jo.com' }`\n * @param {String} [options.passphrase=(not protected)] - The passphrase used to encrypt the reformatted private key. If omitted or empty, the key won't be encrypted.\n * @param {Number} [options.keyExpirationTime=0 (never expires)] - Number of seconds from the key creation time after which the key expires\n * @param {Date}   [options.date] - Override the creation date of the key signatures. If the key was previously used to sign messages, it is recommended\n *                                  to set the same date as the key creation time to ensure that old message signatures will still be verifiable using the reformatted key.\n * @param {'armored'|'binary'|'object'} [options.format='armored'] - format of the output keys\n * @param {Object} [options.config] - Custom configuration settings to overwrite those in [config]{@link module:config}\n * @returns {Promise<Object>} The generated key object in the form:\n *                                     { privateKey:PrivateKey|Uint8Array|String, publicKey:PublicKey|Uint8Array|String, revocationCertificate:String }\n * @async\n * @static\n */\nexport async function reformatKey({ privateKey, userIDs = [], passphrase, keyExpirationTime = 0, date, format = 'armored', config, ...rest }) {\n  config = { ...defaultConfig, ...config }; checkConfig(config);\n  userIDs = toArray(userIDs);\n  const unknownOptions = Object.keys(rest); if (unknownOptions.length > 0) throw new Error(`Unknown option: ${unknownOptions.join(', ')}`);\n\n  if (userIDs.length === 0 && privateKey.keyPacket.version !== 6) {\n    throw new Error('UserIDs are required for V4 keys');\n  }\n  const options = { privateKey, userIDs, passphrase, keyExpirationTime, date };\n\n  try {\n    const { key: reformattedKey, revocationCertificate } = await reformat(options, config);\n\n    return {\n      privateKey: formatObject(reformattedKey, format, config),\n      publicKey: formatObject(reformattedKey.toPublic(), format, config),\n      revocationCertificate\n    };\n  } catch (err) {\n    throw util.wrapError('Error reformatting keypair', err);\n  }\n}\n\n/**\n * Revokes a key. Requires either a private key or a revocation certificate.\n *   If a revocation certificate is passed, the reasonForRevocation parameter will be ignored.\n * @param {Object} options\n * @param {Key} options.key - Public or private key to revoke\n * @param {String} [options.revocationCertificate] - Revocation certificate to revoke the key with\n * @param {Object} [options.reasonForRevocation] - Object indicating the reason for revocation\n * @param {module:enums.reasonForRevocation} [options.reasonForRevocation.flag=[noReason]{@link module:enums.reasonForRevocation}] - Flag indicating the reason for revocation\n * @param {String} [options.reasonForRevocation.string=\"\"] - String explaining the reason for revocation\n * @param {Date} [options.date] - Use the given date instead of the current time to verify validity of revocation certificate (if provided), or as creation time of the revocation signature\n * @param {'armored'|'binary'|'object'} [options.format='armored'] - format of the output key(s)\n * @param {Object} [options.config] - Custom configuration settings to overwrite those in [config]{@link module:config}\n * @returns {Promise<Object>} The revoked key in the form:\n *                              { privateKey:PrivateKey|Uint8Array|String, publicKey:PublicKey|Uint8Array|String } if private key is passed, or\n *                              { privateKey: null, publicKey:PublicKey|Uint8Array|String } otherwise\n * @async\n * @static\n */\nexport async function revokeKey({ key, revocationCertificate, reasonForRevocation, date = new Date(), format = 'armored', config, ...rest }) {\n  config = { ...defaultConfig, ...config }; checkConfig(config);\n  const unknownOptions = Object.keys(rest); if (unknownOptions.length > 0) throw new Error(`Unknown option: ${unknownOptions.join(', ')}`);\n\n  try {\n    const revokedKey = revocationCertificate ?\n      await key.applyRevocationCertificate(revocationCertificate, date, config) :\n      await key.revoke(reasonForRevocation, date, config);\n\n    return revokedKey.isPrivate() ? {\n      privateKey: formatObject(revokedKey, format, config),\n      publicKey: formatObject(revokedKey.toPublic(), format, config)\n    } : {\n      privateKey: null,\n      publicKey: formatObject(revokedKey, format, config)\n    };\n  } catch (err) {\n    throw util.wrapError('Error revoking key', err);\n  }\n}\n\n/**\n * Unlock a private key with the given passphrase.\n * This method does not change the original key.\n * @param {Object} options\n * @param {PrivateKey} options.privateKey - The private key to decrypt\n * @param {String|Array<String>} options.passphrase - The user's passphrase(s)\n * @param {Object} [options.config] - Custom configuration settings to overwrite those in [config]{@link module:config}\n * @returns {Promise<PrivateKey>} The unlocked key object.\n * @async\n */\nexport async function decryptKey({ privateKey, passphrase, config, ...rest }) {\n  config = { ...defaultConfig, ...config }; checkConfig(config);\n  const unknownOptions = Object.keys(rest); if (unknownOptions.length > 0) throw new Error(`Unknown option: ${unknownOptions.join(', ')}`);\n\n  if (!privateKey.isPrivate()) {\n    throw new Error('Cannot decrypt a public key');\n  }\n  const clonedPrivateKey = privateKey.clone(true);\n  const passphrases = util.isArray(passphrase) ? passphrase : [passphrase];\n\n  try {\n    await Promise.all(clonedPrivateKey.getKeys().map(key => (\n      // try to decrypt each key with any of the given passphrases\n      util.anyPromise(passphrases.map(passphrase => key.keyPacket.decrypt(passphrase)))\n    )));\n\n    await clonedPrivateKey.validate(config);\n    return clonedPrivateKey;\n  } catch (err) {\n    clonedPrivateKey.clearPrivateParams();\n    throw util.wrapError('Error decrypting private key', err);\n  }\n}\n\n/**\n * Lock a private key with the given passphrase.\n * This method does not change the original key.\n * @param {Object} options\n * @param {PrivateKey} options.privateKey - The private key to encrypt\n * @param {String|Array<String>} options.passphrase - If multiple passphrases, they should be in the same order as the packets each should encrypt\n * @param {Object} [options.config] - Custom configuration settings to overwrite those in [config]{@link module:config}\n * @returns {Promise<PrivateKey>} The locked key object.\n * @async\n */\nexport async function encryptKey({ privateKey, passphrase, config, ...rest }) {\n  config = { ...defaultConfig, ...config }; checkConfig(config);\n  const unknownOptions = Object.keys(rest); if (unknownOptions.length > 0) throw new Error(`Unknown option: ${unknownOptions.join(', ')}`);\n\n  if (!privateKey.isPrivate()) {\n    throw new Error('Cannot encrypt a public key');\n  }\n  const clonedPrivateKey = privateKey.clone(true);\n\n  const keys = clonedPrivateKey.getKeys();\n  const passphrases = util.isArray(passphrase) ? passphrase : new Array(keys.length).fill(passphrase);\n  if (passphrases.length !== keys.length) {\n    throw new Error('Invalid number of passphrases given for key encryption');\n  }\n\n  try {\n    await Promise.all(keys.map(async (key, i) => {\n      const { keyPacket } = key;\n      await keyPacket.encrypt(passphrases[i], config);\n      keyPacket.clearPrivateParams();\n    }));\n    return clonedPrivateKey;\n  } catch (err) {\n    clonedPrivateKey.clearPrivateParams();\n    throw util.wrapError('Error encrypting private key', err);\n  }\n}\n\n\n///////////////////////////////////////////\n//                                       //\n//   Message encryption and decryption   //\n//                                       //\n///////////////////////////////////////////\n\n\n/**\n * Encrypts a message using public keys, passwords or both at once. At least one of `encryptionKeys`, `passwords` or `sessionKeys`\n *   must be specified. If signing keys are specified, those will be used to sign the message.\n * @param {Object} options\n * @param {Message} options.message - Message to be encrypted as created by {@link createMessage}\n * @param {PublicKey|PublicKey[]} [options.encryptionKeys] - Array of keys or single key, used to encrypt the message\n * @param {PrivateKey|PrivateKey[]} [options.signingKeys] - Private keys for signing. If omitted message will not be signed\n * @param {String|String[]} [options.passwords] - Array of passwords or a single password to encrypt the message\n * @param {Object} [options.sessionKey] - Session key in the form: `{ data:Uint8Array, algorithm:String }`\n * @param {'armored'|'binary'|'object'} [options.format='armored'] - Format of the returned message\n * @param {Signature} [options.signature] - A detached signature to add to the encrypted message\n * @param {Boolean} [options.wildcard=false] - Use a key ID of 0 instead of the public key IDs\n * @param {KeyID|KeyID[]} [options.signingKeyIDs=latest-created valid signing (sub)keys] - Array of key IDs to use for signing. Each `signingKeyIDs[i]` corresponds to `signingKeys[i]`\n * @param {KeyID|KeyID[]} [options.encryptionKeyIDs=latest-created valid encryption (sub)keys] - Array of key IDs to use for encryption. Each `encryptionKeyIDs[i]` corresponds to `encryptionKeys[i]`\n * @param {Date} [options.date=current date] - Override the creation date of the message signature\n * @param {Object|Object[]} [options.signingUserIDs=primary user IDs] - Array of user IDs to sign with, one per key in `signingKeys`, e.g. `[{ name: 'Steve Sender', email: 'steve@openpgp.org' }]`\n * @param {Object|Object[]} [options.encryptionUserIDs=primary user IDs] - Array of user IDs to encrypt for, one per key in `encryptionKeys`, e.g. `[{ name: 'Robert Receiver', email: 'robert@openpgp.org' }]`\n * @param {Object|Object[]} [options.signatureNotations=[]] - Array of notations to add to the signatures, e.g. `[{ name: 'test@example.org', value: new TextEncoder().encode('test'), humanReadable: true, critical: false }]`\n * @param {Object} [options.config] - Custom configuration settings to overwrite those in [config]{@link module:config}\n * @returns {Promise<MaybeStream<String>|MaybeStream<Uint8Array>>} Encrypted message (string if `armor` was true, the default; Uint8Array if `armor` was false).\n * @async\n * @static\n */\nexport async function encrypt({ message, encryptionKeys, signingKeys, passwords, sessionKey, format = 'armored', signature = null, wildcard = false, signingKeyIDs = [], encryptionKeyIDs = [], date = new Date(), signingUserIDs = [], encryptionUserIDs = [], signatureNotations = [], config, ...rest }) {\n  config = { ...defaultConfig, ...config }; checkConfig(config);\n  checkMessage(message); checkOutputMessageFormat(format);\n  encryptionKeys = toArray(encryptionKeys); signingKeys = toArray(signingKeys); passwords = toArray(passwords);\n  signingKeyIDs = toArray(signingKeyIDs); encryptionKeyIDs = toArray(encryptionKeyIDs); signingUserIDs = toArray(signingUserIDs); encryptionUserIDs = toArray(encryptionUserIDs); signatureNotations = toArray(signatureNotations);\n  if (rest.detached) {\n    throw new Error(\"The `detached` option has been removed from openpgp.encrypt, separately call openpgp.sign instead. Don't forget to remove the `privateKeys` option as well.\");\n  }\n  if (rest.publicKeys) throw new Error('The `publicKeys` option has been removed from openpgp.encrypt, pass `encryptionKeys` instead');\n  if (rest.privateKeys) throw new Error('The `privateKeys` option has been removed from openpgp.encrypt, pass `signingKeys` instead');\n  if (rest.armor !== undefined) throw new Error('The `armor` option has been removed from openpgp.encrypt, pass `format` instead.');\n  const unknownOptions = Object.keys(rest); if (unknownOptions.length > 0) throw new Error(`Unknown option: ${unknownOptions.join(', ')}`);\n\n  if (!signingKeys) {\n    signingKeys = [];\n  }\n\n  try {\n    if (signingKeys.length || signature) { // sign the message only if signing keys or signature is specified\n      message = await message.sign(signingKeys, encryptionKeys, signature, signingKeyIDs, date, signingUserIDs, encryptionKeyIDs, signatureNotations, config);\n    }\n    message = message.compress(\n      await getPreferredCompressionAlgo(encryptionKeys, date, encryptionUserIDs, config),\n      config\n    );\n    message = await message.encrypt(encryptionKeys, passwords, sessionKey, wildcard, encryptionKeyIDs, date, encryptionUserIDs, config);\n    if (format === 'object') return message;\n    // serialize data\n    const armor = format === 'armored';\n    const data = armor ? message.armor(config) : message.write();\n    return await convertStream(data);\n  } catch (err) {\n    throw util.wrapError('Error encrypting message', err);\n  }\n}\n\n/**\n * Decrypts a message with the user's private key, a session key or a password.\n * One of `decryptionKeys`, `sessionkeys` or `passwords` must be specified (passing a combination of these options is not supported).\n * @param {Object} options\n * @param {Message} options.message - The message object with the encrypted data\n * @param {PrivateKey|PrivateKey[]} [options.decryptionKeys] - Private keys with decrypted secret key data or session key\n * @param {String|String[]} [options.passwords] - Passwords to decrypt the message\n * @param {Object|Object[]} [options.sessionKeys] - Session keys in the form: { data:Uint8Array, algorithm:String }\n * @param {PublicKey|PublicKey[]} [options.verificationKeys] - Array of public keys or single key, to verify signatures\n * @param {Boolean} [options.expectSigned=false] - If true, data decryption fails if the message is not signed with the provided publicKeys\n * @param {'utf8'|'binary'} [options.format='utf8'] - Whether to return data as a string(Stream) or Uint8Array(Stream). If 'utf8' (the default), also normalize newlines.\n * @param {Signature} [options.signature] - Detached signature for verification\n * @param {Date} [options.date=current date] - Use the given date for verification instead of the current time\n * @param {Object} [options.config] - Custom configuration settings to overwrite those in [config]{@link module:config}\n * @returns {Promise<Object>} Object containing decrypted and verified message in the form:\n *\n *     {\n *       data: MaybeStream<String>, (if format was 'utf8', the default)\n *       data: MaybeStream<Uint8Array>, (if format was 'binary')\n *       filename: String,\n *       signatures: [\n *         {\n *           keyID: module:type/keyid~KeyID,\n *           verified: Promise<true>,\n *           signature: Promise<Signature>\n *         }, ...\n *       ]\n *     }\n *\n *     where `signatures` contains a separate entry for each signature packet found in the input message.\n * @async\n * @static\n */\nexport async function decrypt({ message, decryptionKeys, passwords, sessionKeys, verificationKeys, expectSigned = false, format = 'utf8', signature = null, date = new Date(), config, ...rest }) {\n  config = { ...defaultConfig, ...config }; checkConfig(config);\n  checkMessage(message); verificationKeys = toArray(verificationKeys); decryptionKeys = toArray(decryptionKeys); passwords = toArray(passwords); sessionKeys = toArray(sessionKeys);\n  if (rest.privateKeys) throw new Error('The `privateKeys` option has been removed from openpgp.decrypt, pass `decryptionKeys` instead');\n  if (rest.publicKeys) throw new Error('The `publicKeys` option has been removed from openpgp.decrypt, pass `verificationKeys` instead');\n  const unknownOptions = Object.keys(rest); if (unknownOptions.length > 0) throw new Error(`Unknown option: ${unknownOptions.join(', ')}`);\n\n  try {\n    const decrypted = await message.decrypt(decryptionKeys, passwords, sessionKeys, date, config);\n    if (!verificationKeys) {\n      verificationKeys = [];\n    }\n\n    const result = {};\n    result.signatures = signature ? await decrypted.verifyDetached(signature, verificationKeys, date, config) : await decrypted.verify(verificationKeys, date, config);\n    result.data = format === 'binary' ? decrypted.getLiteralData() : decrypted.getText();\n    result.filename = decrypted.getFilename();\n    linkStreams(result, message, ...new Set([decrypted, decrypted.unwrapCompressed()]));\n    if (expectSigned) {\n      if (verificationKeys.length === 0) {\n        throw new Error('Verification keys are required to verify message signatures');\n      }\n      if (result.signatures.length === 0) {\n        throw new Error('Message is not signed');\n      }\n      result.data = streamConcat([\n        result.data,\n        streamFromAsync(async () => {\n          await util.anyPromise(result.signatures.map(sig => sig.verified));\n          return format === 'binary' ? new Uint8Array() : '';\n        })\n      ]);\n    }\n    result.data = await convertStream(result.data);\n    return result;\n  } catch (err) {\n    throw util.wrapError('Error decrypting message', err);\n  }\n}\n\n\n//////////////////////////////////////////\n//                                      //\n//   Message signing and verification   //\n//                                      //\n//////////////////////////////////////////\n\n\n/**\n * Signs a message.\n * @param {Object} options\n * @param {CleartextMessage|Message} options.message - (cleartext) message to be signed\n * @param {PrivateKey|PrivateKey[]} options.signingKeys - Array of keys or single key with decrypted secret key data to sign cleartext\n * @param {Key|Key[]} options.recipientKeys - Array of keys or single to get the signing preferences from\n * @param {'armored'|'binary'|'object'} [options.format='armored'] - Format of the returned message\n * @param {Boolean} [options.detached=false] - If the return value should contain a detached signature\n * @param {KeyID|KeyID[]} [options.signingKeyIDs=latest-created valid signing (sub)keys] - Array of key IDs to use for signing. Each signingKeyIDs[i] corresponds to signingKeys[i]\n * @param {Date} [options.date=current date] - Override the creation date of the signature\n * @param {Object|Object[]} [options.signingUserIDs=primary user IDs] - Array of user IDs to sign with, one per key in `signingKeys`, e.g. `[{ name: 'Steve Sender', email: 'steve@openpgp.org' }]`\n * @param {Object|Object[]} [options.recipientUserIDs=primary user IDs] - Array of user IDs to get the signing preferences from, one per key in `recipientKeys`\n * @param {Object|Object[]} [options.signatureNotations=[]] - Array of notations to add to the signatures, e.g. `[{ name: 'test@example.org', value: new TextEncoder().encode('test'), humanReadable: true, critical: false }]`\n * @param {Object} [options.config] - Custom configuration settings to overwrite those in [config]{@link module:config}\n * @returns {Promise<MaybeStream<String|Uint8Array>>} Signed message (string if `armor` was true, the default; Uint8Array if `armor` was false).\n * @async\n * @static\n */\nexport async function sign({ message, signingKeys, recipientKeys = [], format = 'armored', detached = false, signingKeyIDs = [], date = new Date(), signingUserIDs = [], recipientUserIDs = [], signatureNotations = [], config, ...rest }) {\n  config = { ...defaultConfig, ...config }; checkConfig(config);\n  checkCleartextOrMessage(message); checkOutputMessageFormat(format);\n  signingKeys = toArray(signingKeys); signingKeyIDs = toArray(signingKeyIDs); signingUserIDs = toArray(signingUserIDs); recipientKeys = toArray(recipientKeys); recipientUserIDs = toArray(recipientUserIDs); signatureNotations = toArray(signatureNotations);\n\n  if (rest.privateKeys) throw new Error('The `privateKeys` option has been removed from openpgp.sign, pass `signingKeys` instead');\n  if (rest.armor !== undefined) throw new Error('The `armor` option has been removed from openpgp.sign, pass `format` instead.');\n  const unknownOptions = Object.keys(rest); if (unknownOptions.length > 0) throw new Error(`Unknown option: ${unknownOptions.join(', ')}`);\n\n  if (message instanceof CleartextMessage && format === 'binary') throw new Error('Cannot return signed cleartext message in binary format');\n  if (message instanceof CleartextMessage && detached) throw new Error('Cannot detach-sign a cleartext message');\n\n  if (!signingKeys || signingKeys.length === 0) {\n    throw new Error('No signing keys provided');\n  }\n\n  try {\n    let signature;\n    if (detached) {\n      signature = await message.signDetached(signingKeys, recipientKeys, undefined, signingKeyIDs, date, signingUserIDs, recipientUserIDs, signatureNotations, config);\n    } else {\n      signature = await message.sign(signingKeys, recipientKeys, undefined, signingKeyIDs, date, signingUserIDs, recipientUserIDs, signatureNotations, config);\n    }\n    if (format === 'object') return signature;\n\n    const armor = format === 'armored';\n    signature = armor ? signature.armor(config) : signature.write();\n    if (detached) {\n      signature = streamTransformPair(message.packets.write(), async (readable, writable) => {\n        await Promise.all([\n          streamPipe(signature, writable),\n          streamReadToEnd(readable).catch(() => {})\n        ]);\n      });\n    }\n    return await convertStream(signature);\n  } catch (err) {\n    throw util.wrapError('Error signing message', err);\n  }\n}\n\n/**\n * Verifies signatures of cleartext signed message\n * @param {Object} options\n * @param {CleartextMessage|Message} options.message - (cleartext) message object with signatures\n * @param {PublicKey|PublicKey[]} options.verificationKeys - Array of publicKeys or single key, to verify signatures\n * @param {Boolean} [options.expectSigned=false] - If true, verification throws if the message is not signed with the provided publicKeys\n * @param {'utf8'|'binary'} [options.format='utf8'] - Whether to return data as a string(Stream) or Uint8Array(Stream). If 'utf8' (the default), also normalize newlines.\n * @param {Signature} [options.signature] - Detached signature for verification\n * @param {Date} [options.date=current date] - Use the given date for verification instead of the current time\n * @param {Object} [options.config] - Custom configuration settings to overwrite those in [config]{@link module:config}\n * @returns {Promise<Object>} Object containing verified message in the form:\n *\n *     {\n *       data: MaybeStream<String>, (if `message` was a CleartextMessage)\n *       data: MaybeStream<Uint8Array>, (if `message` was a Message)\n *       signatures: [\n *         {\n *           keyID: module:type/keyid~KeyID,\n *           verified: Promise<true>,\n *           signature: Promise<Signature>\n *         }, ...\n *       ]\n *     }\n *\n *     where `signatures` contains a separate entry for each signature packet found in the input message.\n * @async\n * @static\n */\nexport async function verify({ message, verificationKeys, expectSigned = false, format = 'utf8', signature = null, date = new Date(), config, ...rest }) {\n  config = { ...defaultConfig, ...config }; checkConfig(config);\n  checkCleartextOrMessage(message); verificationKeys = toArray(verificationKeys);\n  if (rest.publicKeys) throw new Error('The `publicKeys` option has been removed from openpgp.verify, pass `verificationKeys` instead');\n  const unknownOptions = Object.keys(rest); if (unknownOptions.length > 0) throw new Error(`Unknown option: ${unknownOptions.join(', ')}`);\n\n  if (message instanceof CleartextMessage && format === 'binary') throw new Error(\"Can't return cleartext message data as binary\");\n  if (message instanceof CleartextMessage && signature) throw new Error(\"Can't verify detached cleartext signature\");\n\n  try {\n    const result = {};\n    if (signature) {\n      result.signatures = await message.verifyDetached(signature, verificationKeys, date, config);\n    } else {\n      result.signatures = await message.verify(verificationKeys, date, config);\n    }\n    result.data = format === 'binary' ? message.getLiteralData() : message.getText();\n    if (message.fromStream && !signature) {\n      linkStreams(result, ...new Set([message, message.unwrapCompressed()]));\n    }\n    if (expectSigned) {\n      if (result.signatures.length === 0) {\n        throw new Error('Message is not signed');\n      }\n      result.data = streamConcat([\n        result.data,\n        streamFromAsync(async () => {\n          await util.anyPromise(result.signatures.map(sig => sig.verified));\n          return format === 'binary' ? new Uint8Array() : '';\n        })\n      ]);\n    }\n    result.data = await convertStream(result.data);\n    return result;\n  } catch (err) {\n    throw util.wrapError('Error verifying signed message', err);\n  }\n}\n\n\n///////////////////////////////////////////////\n//                                           //\n//   Session key encryption and decryption   //\n//                                           //\n///////////////////////////////////////////////\n\n/**\n * Generate a new session key object, taking the algorithm preferences of the passed public keys into account, if any.\n * @param {Object} options\n * @param {PublicKey|PublicKey[]} [options.encryptionKeys] - Array of public keys or single key used to select algorithm preferences for. If no keys are given, the algorithm will be [config.preferredSymmetricAlgorithm]{@link module:config.preferredSymmetricAlgorithm}\n * @param {Date} [options.date=current date] - Date to select algorithm preferences at\n * @param {Object|Object[]} [options.encryptionUserIDs=primary user IDs] - User IDs to select algorithm preferences for\n * @param {Object} [options.config] - Custom configuration settings to overwrite those in [config]{@link module:config}\n * @returns {Promise<{ data: Uint8Array, algorithm: String }>} Object with session key data and algorithm.\n * @async\n * @static\n */\nexport async function generateSessionKey({ encryptionKeys, date = new Date(), encryptionUserIDs = [], config, ...rest }) {\n  config = { ...defaultConfig, ...config }; checkConfig(config);\n  encryptionKeys = toArray(encryptionKeys); encryptionUserIDs = toArray(encryptionUserIDs);\n  if (rest.publicKeys) throw new Error('The `publicKeys` option has been removed from openpgp.generateSessionKey, pass `encryptionKeys` instead');\n  const unknownOptions = Object.keys(rest); if (unknownOptions.length > 0) throw new Error(`Unknown option: ${unknownOptions.join(', ')}`);\n\n  try {\n    const sessionKeys = await Message.generateSessionKey(encryptionKeys, date, encryptionUserIDs, config);\n    return sessionKeys;\n  } catch (err) {\n    throw util.wrapError('Error generating session key', err);\n  }\n}\n\n/**\n * Encrypt a symmetric session key with public keys, passwords, or both at once.\n * At least one of `encryptionKeys` or `passwords` must be specified.\n * @param {Object} options\n * @param {Uint8Array} options.data - The session key to be encrypted e.g. 16 random bytes (for aes128)\n * @param {String} options.algorithm - Algorithm of the symmetric session key e.g. 'aes128' or 'aes256'\n * @param {String} [options.aeadAlgorithm] - AEAD algorithm, e.g. 'eax' or 'ocb'\n * @param {PublicKey|PublicKey[]} [options.encryptionKeys] - Array of public keys or single key, used to encrypt the key\n * @param {String|String[]} [options.passwords] - Passwords for the message\n * @param {'armored'|'binary'} [options.format='armored'] - Format of the returned value\n * @param {Boolean} [options.wildcard=false] - Use a key ID of 0 instead of the public key IDs\n * @param {KeyID|KeyID[]} [options.encryptionKeyIDs=latest-created valid encryption (sub)keys] - Array of key IDs to use for encryption. Each encryptionKeyIDs[i] corresponds to encryptionKeys[i]\n * @param {Date} [options.date=current date] - Override the date\n * @param {Object|Object[]} [options.encryptionUserIDs=primary user IDs] - Array of user IDs to encrypt for, one per key in `encryptionKeys`, e.g. `[{ name: 'Phil Zimmermann', email: 'phil@openpgp.org' }]`\n * @param {Object} [options.config] - Custom configuration settings to overwrite those in [config]{@link module:config}\n * @returns {Promise<String|Uint8Array>} Encrypted session keys (string if `armor` was true, the default; Uint8Array if `armor` was false).\n * @async\n * @static\n */\nexport async function encryptSessionKey({ data, algorithm, aeadAlgorithm, encryptionKeys, passwords, format = 'armored', wildcard = false, encryptionKeyIDs = [], date = new Date(), encryptionUserIDs = [], config, ...rest }) {\n  config = { ...defaultConfig, ...config }; checkConfig(config);\n  checkBinary(data); checkString(algorithm, 'algorithm'); checkOutputMessageFormat(format);\n  encryptionKeys = toArray(encryptionKeys); passwords = toArray(passwords); encryptionKeyIDs = toArray(encryptionKeyIDs); encryptionUserIDs = toArray(encryptionUserIDs);\n  if (rest.publicKeys) throw new Error('The `publicKeys` option has been removed from openpgp.encryptSessionKey, pass `encryptionKeys` instead');\n  const unknownOptions = Object.keys(rest); if (unknownOptions.length > 0) throw new Error(`Unknown option: ${unknownOptions.join(', ')}`);\n\n  if ((!encryptionKeys || encryptionKeys.length === 0) && (!passwords || passwords.length === 0)) {\n    throw new Error('No encryption keys or passwords provided.');\n  }\n\n  try {\n    const message = await Message.encryptSessionKey(data, algorithm, aeadAlgorithm, encryptionKeys, passwords, wildcard, encryptionKeyIDs, date, encryptionUserIDs, config);\n    return formatObject(message, format, config);\n  } catch (err) {\n    throw util.wrapError('Error encrypting session key', err);\n  }\n}\n\n/**\n * Decrypt symmetric session keys using private keys or passwords (not both).\n * One of `decryptionKeys` or `passwords` must be specified.\n * @param {Object} options\n * @param {Message} options.message - A message object containing the encrypted session key packets\n * @param {PrivateKey|PrivateKey[]} [options.decryptionKeys] - Private keys with decrypted secret key data\n * @param {String|String[]} [options.passwords] - Passwords to decrypt the session key\n * @param {Date} [options.date] - Date to use for key verification instead of the current time\n * @param {Object} [options.config] - Custom configuration settings to overwrite those in [config]{@link module:config}\n * @returns {Promise<Object[]>} Array of decrypted session key, algorithm pairs in the form:\n *                                            { data:Uint8Array, algorithm:String }\n * @throws if no session key could be found or decrypted\n * @async\n * @static\n */\nexport async function decryptSessionKeys({ message, decryptionKeys, passwords, date = new Date(), config, ...rest }) {\n  config = { ...defaultConfig, ...config }; checkConfig(config);\n  checkMessage(message); decryptionKeys = toArray(decryptionKeys); passwords = toArray(passwords);\n  if (rest.privateKeys) throw new Error('The `privateKeys` option has been removed from openpgp.decryptSessionKeys, pass `decryptionKeys` instead');\n  const unknownOptions = Object.keys(rest); if (unknownOptions.length > 0) throw new Error(`Unknown option: ${unknownOptions.join(', ')}`);\n\n  try {\n    const sessionKeys = await message.decryptSessionKeys(decryptionKeys, passwords, undefined, date, config);\n    return sessionKeys;\n  } catch (err) {\n    throw util.wrapError('Error decrypting session keys', err);\n  }\n}\n\n\n//////////////////////////\n//                      //\n//   Helper functions   //\n//                      //\n//////////////////////////\n\n\n/**\n * Input validation\n * @private\n */\nfunction checkString(data, name) {\n  if (!util.isString(data)) {\n    throw new Error('Parameter [' + (name || 'data') + '] must be of type String');\n  }\n}\nfunction checkBinary(data, name) {\n  if (!util.isUint8Array(data)) {\n    throw new Error('Parameter [' + (name || 'data') + '] must be of type Uint8Array');\n  }\n}\nfunction checkMessage(message) {\n  if (!(message instanceof Message)) {\n    throw new Error('Parameter [message] needs to be of type Message');\n  }\n}\nfunction checkCleartextOrMessage(message) {\n  if (!(message instanceof CleartextMessage) && !(message instanceof Message)) {\n    throw new Error('Parameter [message] needs to be of type Message or CleartextMessage');\n  }\n}\nfunction checkOutputMessageFormat(format) {\n  if (format !== 'armored' && format !== 'binary' && format !== 'object') {\n    throw new Error(`Unsupported format ${format}`);\n  }\n}\nconst defaultConfigPropsCount = Object.keys(defaultConfig).length;\nfunction checkConfig(config) {\n  const inputConfigProps = Object.keys(config);\n  if (inputConfigProps.length !== defaultConfigPropsCount) {\n    for (const inputProp of inputConfigProps) {\n      if (defaultConfig[inputProp] === undefined) {\n        throw new Error(`Unknown config property: ${inputProp}`);\n      }\n    }\n  }\n}\n\n/**\n * Normalize parameter to an array if it is not undefined.\n * @param {Object} param - the parameter to be normalized\n * @returns {Array<Object>|undefined} The resulting array or undefined.\n * @private\n */\nfunction toArray(param) {\n  if (param && !util.isArray(param)) {\n    param = [param];\n  }\n  return param;\n}\n\n/**\n * Convert data to or from Stream\n * @param {Object} data - the data to convert\n * @returns {Promise<Object>} The data in the respective format.\n * @async\n * @private\n */\nasync function convertStream(data) {\n  const streamType = util.isStream(data);\n  if (streamType === 'array') {\n    return streamReadToEnd(data);\n  }\n  return data;\n}\n\n/**\n * Link result.data to the input message stream for cancellation.\n * Also, forward errors in the input message and intermediate messages to result.data.\n * @param {Object} result - the data to convert\n * @param {Message} message - message object provided by the user\n * @param {Message} intermediateMessages - intermediate message object with packet streams to link\n * @returns {Object}\n * @private\n */\nfunction linkStreams(result, inputMessage, ...intermediateMessages) {\n  result.data = streamTransformPair(inputMessage.packets.stream, async (readable, writable) => {\n    await streamPipe(result.data, writable, {\n      preventClose: true\n    });\n    const writer = streamGetWriter(writable);\n    try {\n      // Forward errors in the message streams to result.data.\n      await streamReadToEnd(readable, _ => _);\n      await Promise.all(intermediateMessages.map(intermediate => streamReadToEnd(intermediate.packets.stream, _ => _)));\n      // if result.data throws, the writable will be in errored state, and `close()` fails, but its ok.\n      await writer.close();\n    } catch (e) {\n      await writer.abort(e);\n    }\n  });\n}\n\n/**\n * Convert the object to the given format\n * @param {Key|Message} object\n * @param {'armored'|'binary'|'object'} format\n * @param {Object} config - Full configuration\n * @returns {String|Uint8Array|Object}\n */\nfunction formatObject(object, format, config) {\n  switch (format) {\n    case 'object':\n      return object;\n    case 'armored':\n      return object.armor(config);\n    case 'binary':\n      return object.write();\n    default:\n      throw new Error(`Unsupported format ${format}`);\n  }\n}\n","/**\n * Internal webcrypto alias.\n * We prefer WebCrypto aka globalThis.crypto, which exists in node.js 16+.\n * Falls back to Node.js built-in crypto for Node.js <=v14.\n * See utils.ts for details.\n * @module\n */\n// @ts-ignore\nimport * as nc from 'node:crypto';\nexport const crypto = nc && typeof nc === 'object' && 'webcrypto' in nc\n    ? nc.webcrypto\n    : nc && typeof nc === 'object' && 'randomBytes' in nc\n        ? nc\n        : undefined;\n//# sourceMappingURL=cryptoNode.js.map","/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */\nexport function isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n/** Asserts something is positive integer. */\nexport function anumber(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error('positive integer expected, got ' + n);\n}\n/** Asserts something is Uint8Array. */\nexport function abytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n/** Asserts something is hash */\nexport function ahash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.createHasher');\n    anumber(h.outputLen);\n    anumber(h.blockLen);\n}\n/** Asserts a hash instance has not been destroyed / finished */\nexport function aexists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\n/** Asserts output is properly-sized byte array */\nexport function aoutput(out, instance) {\n    abytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error('digestInto() expects output buffer of length at least ' + min);\n    }\n}\n/** Cast u8 / u16 / u32 to u8. */\nexport function u8(arr) {\n    return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** Cast u8 / u16 / u32 to u32. */\nexport function u32(arr) {\n    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n/** Zeroize a byte array. Warning: JS provides no guarantees. */\nexport function clean(...arrays) {\n    for (let i = 0; i < arrays.length; i++) {\n        arrays[i].fill(0);\n    }\n}\n/** Create DataView of an array for easy byte-level manipulation. */\nexport function createView(arr) {\n    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** The rotate right (circular right shift) operation for uint32 */\nexport function rotr(word, shift) {\n    return (word << (32 - shift)) | (word >>> shift);\n}\n/** The rotate left (circular left shift) operation for uint32 */\nexport function rotl(word, shift) {\n    return (word << shift) | ((word >>> (32 - shift)) >>> 0);\n}\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n/** The byte swap operation for uint32 */\nexport function byteSwap(word) {\n    return (((word << 24) & 0xff000000) |\n        ((word << 8) & 0xff0000) |\n        ((word >>> 8) & 0xff00) |\n        ((word >>> 24) & 0xff));\n}\n/** Conditionally byte swap if on a big-endian platform */\nexport const swap8IfBE = isLE\n    ? (n) => n\n    : (n) => byteSwap(n);\n/** @deprecated */\nexport const byteSwapIfBE = swap8IfBE;\n/** In place byte swap for Uint32Array */\nexport function byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n    return arr;\n}\nexport const swap32IfBE = isLE\n    ? (u) => u\n    : byteSwap32;\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\nconst hasHexBuiltin = /* @__PURE__ */ (() => \n// @ts-ignore\ntypeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function')();\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * Convert byte array to hex string. Uses built-in function, when available.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return bytes.toHex();\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * Convert hex string to byte array. Uses built-in function, when available.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return Uint8Array.fromHex(hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */\nexport const nextTick = async () => { };\n/** Returns control to thread each 'tick' ms to avoid blocking. */\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * Converts string to bytes using UTF8 encoding.\n * @example utf8ToBytes('abc') // Uint8Array.from([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('string expected');\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\nexport function bytesToUtf8(bytes) {\n    return new TextDecoder().decode(bytes);\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/**\n * Helper for KDFs: consumes uint8array or string.\n * When string is passed, does utf8 decoding, using TextDecoder.\n */\nexport function kdfInputToBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/** Copies several Uint8Arrays into one. */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n        throw new Error('options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\n/** For runtime check if class implements interface */\nexport class Hash {\n}\n/** Wraps hash function, creating an interface on top of it */\nexport function createHasher(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function createOptHasher(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function createXOFer(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport const wrapConstructor = createHasher;\nexport const wrapConstructorWithOpts = createOptHasher;\nexport const wrapXOFConstructorWithOpts = createXOFer;\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    // Legacy Node.js compatibility\n    if (crypto && typeof crypto.randomBytes === 'function') {\n        return Uint8Array.from(crypto.randomBytes(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","/**\n * Hex, bytes and number utilities.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { abytes as abytes_, bytesToHex as bytesToHex_, concatBytes as concatBytes_, hexToBytes as hexToBytes_, isBytes as isBytes_, } from '@noble/hashes/utils.js';\nexport { abytes, anumber, bytesToHex, bytesToUtf8, concatBytes, hexToBytes, isBytes, randomBytes, utf8ToBytes, } from '@noble/hashes/utils.js';\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nexport function abool(title, value) {\n    if (typeof value !== 'boolean')\n        throw new Error(title + ' boolean expected, got ' + value);\n}\n// Used in weierstrass, der\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? '0' + hex : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex_(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    abytes_(bytes);\n    return hexToNumber(bytesToHex_(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes_(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes_(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes_(hex);\n        }\n        catch (e) {\n            throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n        }\n    }\n    else if (isBytes_(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(title + ' must be hex string or Uint8Array');\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\n// export const utf8ToBytes: typeof utf8ToBytes_ = utf8ToBytes_;\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\n// export const bytesToUtf8: typeof bytesToUtf8_ = bytesToUtf8_;\n// Is positive bigint\nconst isPosBig = (n) => typeof n === 'bigint' && _0n <= n;\nexport function inRange(n, min, max) {\n    return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title, n, min, max) {\n    // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n    // consider P=256n, min=0n, max=P\n    // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n    // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n    // - our way is the cleanest:               `inRange('x', x, 0n, P)\n    if (!inRange(n, min, max))\n        throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n * TODO: merge with nLength in modular\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_1n << BigInt(n)) - _1n;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    const u8n = (len) => new Uint8Array(len); // creates Uint8Array\n    const u8of = (byte) => Uint8Array.of(byte); // another shortcut\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n(0)) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8of(0x00), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8of(0x01), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes_(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes_(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error('invalid validator function');\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error('param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\nexport function isHash(val) {\n    return typeof val === 'function' && Number.isSafeInteger(val.outputLen);\n}\nexport function _validateObject(object, fields, optFields = {}) {\n    if (!object || typeof object !== 'object')\n        throw new Error('expected valid options object');\n    function checkField(fieldName, expectedType, isOpt) {\n        const val = object[fieldName];\n        if (isOpt && val === undefined)\n            return;\n        const current = typeof val;\n        if (current !== expectedType || val === null)\n            throw new Error(`param \"${fieldName}\" is invalid: expected ${expectedType}, got ${current}`);\n    }\n    Object.entries(fields).forEach(([k, v]) => checkField(k, v, false));\n    Object.entries(optFields).forEach(([k, v]) => checkField(k, v, true));\n}\n/**\n * throws not implemented error\n */\nexport const notImplemented = () => {\n    throw new Error('not implemented');\n};\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized(fn) {\n    const map = new WeakMap();\n    return (arg, ...args) => {\n        const val = map.get(arg);\n        if (val !== undefined)\n            return val;\n        const computed = fn(arg, ...args);\n        map.set(arg, computed);\n        return computed;\n    };\n}\n//# sourceMappingURL=utils.js.map","/**\n * Utils for modular division and fields.\n * Field over 11 is a finite (Galois) field is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { _validateObject, anumber, bitMask, bytesToNumberBE, bytesToNumberLE, ensureBytes, numberToBytesBE, numberToBytesLE, } from \"../utils.js\";\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5);\nconst _8n = /* @__PURE__ */ BigInt(8);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num, power, modulo) {\n    return FpPow(Field(modulo), num, power);\n}\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number, modulo) {\n    if (number === _0n)\n        throw new Error('invert: expected non-zero number');\n    if (modulo <= _0n)\n        throw new Error('invert: expected positive modulus, got ' + modulo);\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n// Not all roots are possible! Example which will throw:\n// const NUM =\n// n = 72057594037927816n;\n// Fp = Field(BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'));\nfunction sqrt3mod4(Fp, n) {\n    const p1div4 = (Fp.ORDER + _1n) / _4n;\n    const root = Fp.pow(n, p1div4);\n    // Throw if root^2 != n\n    if (!Fp.eql(Fp.sqr(root), n))\n        throw new Error('Cannot find square root');\n    return root;\n}\nfunction sqrt5mod8(Fp, n) {\n    const p5div8 = (Fp.ORDER - _5n) / _8n;\n    const n2 = Fp.mul(n, _2n);\n    const v = Fp.pow(n2, p5div8);\n    const nv = Fp.mul(n, v);\n    const i = Fp.mul(Fp.mul(nv, _2n), v);\n    const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n    if (!Fp.eql(Fp.sqr(root), n))\n        throw new Error('Cannot find square root');\n    return root;\n}\n// TODO: Commented-out for now. Provide test vectors.\n// Tonelli is too slow for extension fields Fp2.\n// That means we can't use sqrt (c1, c2...) even for initialization constants.\n// if (P % _16n === _9n) return sqrt9mod16;\n// // prettier-ignore\n// function sqrt9mod16<T>(Fp: IField<T>, n: T, p7div16?: bigint) {\n//   if (p7div16 === undefined) p7div16 = (Fp.ORDER + BigInt(7)) / _16n;\n//   const c1 = Fp.sqrt(Fp.neg(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n//   const c2 = Fp.sqrt(c1);             //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n//   const c3 = Fp.sqrt(Fp.neg(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n//   const c4 = p7div16;                 //  4. c4 = (q + 7) / 16        # Integer arithmetic\n//   let tv1 = Fp.pow(n, c4);            //  1. tv1 = x^c4\n//   let tv2 = Fp.mul(c1, tv1);          //  2. tv2 = c1 * tv1\n//   const tv3 = Fp.mul(c2, tv1);        //  3. tv3 = c2 * tv1\n//   let tv4 = Fp.mul(c3, tv1);          //  4. tv4 = c3 * tv1\n//   const e1 = Fp.eql(Fp.sqr(tv2), n);  //  5.  e1 = (tv2^2) == x\n//   const e2 = Fp.eql(Fp.sqr(tv3), n);  //  6.  e2 = (tv3^2) == x\n//   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n//   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n//   const e3 = Fp.eql(Fp.sqr(tv2), n);  //  9.  e3 = (tv2^2) == x\n//   return Fp.cmov(tv1, tv2, e3); // 10.  z = CMOV(tv1, tv2, e3) # Select the sqrt from tv1 and tv2\n// }\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Initialization (precomputation).\n    // Caching initialization could boost perf by 7%.\n    if (P < BigInt(3))\n        throw new Error('sqrt is not defined for small field');\n    // Factor P - 1 = Q * 2^S, where Q is odd\n    let Q = P - _1n;\n    let S = 0;\n    while (Q % _2n === _0n) {\n        Q /= _2n;\n        S++;\n    }\n    // Find the first quadratic non-residue Z >= 2\n    let Z = _2n;\n    const _Fp = Field(P);\n    while (FpLegendre(_Fp, Z) === 1) {\n        // Basic primality test for P. After x iterations, chance of\n        // not finding quadratic non-residue is 2^x, so 2^1000.\n        if (Z++ > 1000)\n            throw new Error('Cannot find square root: probably non-prime P');\n    }\n    // Fast-path; usually done before Z, but we do \"primality test\".\n    if (S === 1)\n        return sqrt3mod4;\n    // Slow-path\n    // TODO: test on Fp2 and others\n    let cc = _Fp.pow(Z, Q); // c = z^Q\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        if (Fp.is0(n))\n            return n;\n        // Check if n is a quadratic residue using Legendre symbol\n        if (FpLegendre(Fp, n) !== 1)\n            throw new Error('Cannot find square root');\n        // Initialize variables for the main loop\n        let M = S;\n        let c = Fp.mul(Fp.ONE, cc); // c = z^Q, move cc from field _Fp into field Fp\n        let t = Fp.pow(n, Q); // t = n^Q, first guess at the fudge factor\n        let R = Fp.pow(n, Q1div2); // R = n^((Q+1)/2), first guess at the square root\n        // Main loop\n        // while t != 1\n        while (!Fp.eql(t, Fp.ONE)) {\n            if (Fp.is0(t))\n                return Fp.ZERO; // if t=0 return R=0\n            let i = 1;\n            // Find the smallest i >= 1 such that t^(2^i) ≡ 1 (mod P)\n            let t_tmp = Fp.sqr(t); // t^(2^1)\n            while (!Fp.eql(t_tmp, Fp.ONE)) {\n                i++;\n                t_tmp = Fp.sqr(t_tmp); // t^(2^2)...\n                if (i === M)\n                    throw new Error('Cannot find square root');\n            }\n            // Calculate the exponent for b: 2^(M - i - 1)\n            const exponent = _1n << BigInt(M - i - 1); // bigint is important\n            const b = Fp.pow(c, exponent); // b = 2^(M - i - 1)\n            // Update variables\n            M = i;\n            c = Fp.sqr(b); // c = b^2\n            t = Fp.mul(t, c); // t = (t * b^2)\n            R = Fp.mul(R, b); // R = R*b\n        }\n        return R;\n    };\n}\n/**\n * Square root for a finite field. Will try optimized versions first:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P) {\n    // P ≡ 3 (mod 4) => √n = n^((P+1)/4)\n    if (P % _4n === _3n)\n        return sqrt3mod4;\n    // P ≡ 5 (mod 8) => Atkin algorithm, page 10 of https://eprint.iacr.org/2012/685.pdf\n    if (P % _8n === _5n)\n        return sqrt5mod8;\n    // P ≡ 9 (mod 16) not implemented, see above\n    // Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'number',\n        BITS: 'number',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    _validateObject(field, opts);\n    // const max = 16384;\n    // if (field.BYTES < 1 || field.BYTES > max) throw new Error('invalid field');\n    // if (field.BITS < 1 || field.BITS > 8 * max) throw new Error('invalid field');\n    return field;\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(Fp, num, power) {\n    if (power < _0n)\n        throw new Error('invalid exponent, negatives unsupported');\n    if (power === _0n)\n        return Fp.ONE;\n    if (power === _1n)\n        return num;\n    let p = Fp.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = Fp.mul(p, d);\n        d = Fp.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * Exception-free. Will return `undefined` for 0 elements.\n * @param passZero map 0 to 0 (instead of undefined)\n */\nexport function FpInvertBatch(Fp, nums, passZero = false) {\n    const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : undefined);\n    // Walk from first to last, multiply them by each other MOD p\n    const multipliedAcc = nums.reduce((acc, num, i) => {\n        if (Fp.is0(num))\n            return acc;\n        inverted[i] = acc;\n        return Fp.mul(acc, num);\n    }, Fp.ONE);\n    // Invert last element\n    const invertedAcc = Fp.inv(multipliedAcc);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (Fp.is0(num))\n            return acc;\n        inverted[i] = Fp.mul(acc, inverted[i]);\n        return Fp.mul(acc, num);\n    }, invertedAcc);\n    return inverted;\n}\n// TODO: remove\nexport function FpDiv(Fp, lhs, rhs) {\n    return Fp.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, Fp.ORDER) : Fp.inv(rhs));\n}\n/**\n * Legendre symbol.\n * Legendre constant is used to calculate Legendre symbol (a | p)\n * which denotes the value of a^((p-1)/2) (mod p).\n *\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nexport function FpLegendre(Fp, n) {\n    // We can use 3rd argument as optional cache of this value\n    // but seems unneeded for now. The operation is very fast.\n    const p1mod2 = (Fp.ORDER - _1n) / _2n;\n    const powered = Fp.pow(n, p1mod2);\n    const yes = Fp.eql(powered, Fp.ONE);\n    const zero = Fp.eql(powered, Fp.ZERO);\n    const no = Fp.eql(powered, Fp.neg(Fp.ONE));\n    if (!yes && !zero && !no)\n        throw new Error('invalid Legendre symbol result');\n    return yes ? 1 : zero ? 0 : -1;\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(Fp, n) {\n    const l = FpLegendre(Fp, n);\n    return l === 1;\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    if (nBitLength !== undefined)\n        anumber(nBitLength);\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Creates a finite field. Major performance optimizations:\n * * 1. Denormalized operations like mulN instead of mul.\n * * 2. Identical object shape: never add or remove keys.\n * * 3. `Object.freeze`.\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n *\n * Note about field properties:\n * * CHARACTERISTIC p = prime number, number of elements in main subgroup.\n * * ORDER q = similar to cofactor in curves, may be composite `q = p^m`.\n *\n * @param ORDER field order, probably prime, or could be composite\n * @param bitLen how many bits the field consumes\n * @param isLE (default: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLenOrOpts, isLE = false, opts = {}) {\n    if (ORDER <= _0n)\n        throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n    let _nbitLength = undefined;\n    let _sqrt = undefined;\n    if (typeof bitLenOrOpts === 'object' && bitLenOrOpts != null) {\n        if (opts.sqrt || isLE)\n            throw new Error('cannot specify opts in two arguments');\n        const _opts = bitLenOrOpts;\n        if (_opts.BITS)\n            _nbitLength = _opts.BITS;\n        if (_opts.sqrt)\n            _sqrt = _opts.sqrt;\n        if (typeof _opts.isLE === 'boolean')\n            isLE = _opts.isLE;\n    }\n    else {\n        if (typeof bitLenOrOpts === 'number')\n            _nbitLength = bitLenOrOpts;\n        if (opts.sqrt)\n            _sqrt = opts.sqrt;\n    }\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, _nbitLength);\n    if (BYTES > 2048)\n        throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n    let sqrtP; // cached sqrtP\n    const f = Object.freeze({\n        ORDER,\n        isLE,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error('invalid field element: expected bigint, got ' + typeof num);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        // is valid and invertible\n        isValidNot0: (num) => !f.is0(num) && f.isValid(num),\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: _sqrt ||\n            ((n) => {\n                if (!sqrtP)\n                    sqrtP = FpSqrt(ORDER);\n                return sqrtP(f, n);\n            }),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n        // TODO: we don't need it here, move out to separate fn\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // We can't move this out because Fp6, Fp12 implement it\n        // and it's unclear what to return in there.\n        cmov: (a, b, c) => (c ? b : a),\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error('hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n    const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map","/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\nimport { Hash, abytes, aexists, aoutput, clean, createView, toBytes } from \"./utils.js\";\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nexport function setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n/** Choice: a ? b : c */\nexport function Chi(a, b, c) {\n    return (a & b) ^ (~a & c);\n}\n/** Majority function, true if any two inputs is true. */\nexport function Maj(a, b, c) {\n    return (a & b) ^ (a & c) ^ (b & c);\n}\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport class HashMD extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        aexists(this);\n        data = toBytes(data);\n        abytes(data);\n        const { view, buffer, blockLen } = this;\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        aoutput(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        clean(this.buffer.subarray(pos));\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.destroyed = destroyed;\n        to.finished = finished;\n        to.length = length;\n        to.pos = pos;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n}\n/**\n * Initial SHA-2 state: fractional parts of square roots of first 16 primes 2..53.\n * Check out `test/misc/sha2-gen-iv.js` for recomputation guide.\n */\n/** Initial SHA256 state. Bits 0..32 of frac part of sqrt of primes 2..19 */\nexport const SHA256_IV = /* @__PURE__ */ Uint32Array.from([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19,\n]);\n/** Initial SHA224 state. Bits 32..64 of frac part of sqrt of primes 23..53 */\nexport const SHA224_IV = /* @__PURE__ */ Uint32Array.from([\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4,\n]);\n/** Initial SHA384 state. Bits 0..64 of frac part of sqrt of primes 23..53 */\nexport const SHA384_IV = /* @__PURE__ */ Uint32Array.from([\n    0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4,\n]);\n/** Initial SHA512 state. Bits 0..64 of frac part of sqrt of primes 2..19 */\nexport const SHA512_IV = /* @__PURE__ */ Uint32Array.from([\n    0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179,\n]);\n//# sourceMappingURL=_md.js.map","/**\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\n * @todo re-check https://issues.chromium.org/issues/42212588\n * @module\n */\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    const len = lst.length;\n    let Ah = new Uint32Array(len);\n    let Al = new Uint32Array(len);\n    for (let i = 0; i < len; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { add, add3H, add3L, add4H, add4L, add5H, add5L, fromBig, rotlBH, rotlBL, rotlSH, rotlSL, rotr32H, rotr32L, rotrBH, rotrBL, rotrSH, rotrSL, shrSH, shrSL, split, toBig };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map","/**\n * SHA2 hash function. A.k.a. sha256, sha384, sha512, sha512_224, sha512_256.\n * SHA256 is the fastest hash implementable in JS, even faster than Blake3.\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nimport { Chi, HashMD, Maj, SHA224_IV, SHA256_IV, SHA384_IV, SHA512_IV } from \"./_md.js\";\nimport * as u64 from \"./_u64.js\";\nimport { clean, createHasher, rotr } from \"./utils.js\";\n/**\n * Round constants:\n * First 32 bits of fractional parts of the cube roots of the first 64 primes 2..311)\n */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ Uint32Array.from([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n/** Reusable temporary buffer. \"W\" comes straight from spec. */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD {\n    constructor(outputLen = 32) {\n        super(64, outputLen, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        clean(SHA256_W);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        clean(this.buffer);\n    }\n}\nexport class SHA224 extends SHA256 {\n    constructor() {\n        super(28);\n        this.A = SHA224_IV[0] | 0;\n        this.B = SHA224_IV[1] | 0;\n        this.C = SHA224_IV[2] | 0;\n        this.D = SHA224_IV[3] | 0;\n        this.E = SHA224_IV[4] | 0;\n        this.F = SHA224_IV[5] | 0;\n        this.G = SHA224_IV[6] | 0;\n        this.H = SHA224_IV[7] | 0;\n    }\n}\n// SHA2-512 is slower than sha256 in js because u64 operations are slow.\n// Round contants\n// First 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409\n// prettier-ignore\nconst K512 = /* @__PURE__ */ (() => u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\nconst SHA512_Kh = /* @__PURE__ */ (() => K512[0])();\nconst SHA512_Kl = /* @__PURE__ */ (() => K512[1])();\n// Reusable temporary buffers\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends HashMD {\n    constructor(outputLen = 64) {\n        super(128, outputLen, 16, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = SHA512_IV[0] | 0;\n        this.Al = SHA512_IV[1] | 0;\n        this.Bh = SHA512_IV[2] | 0;\n        this.Bl = SHA512_IV[3] | 0;\n        this.Ch = SHA512_IV[4] | 0;\n        this.Cl = SHA512_IV[5] | 0;\n        this.Dh = SHA512_IV[6] | 0;\n        this.Dl = SHA512_IV[7] | 0;\n        this.Eh = SHA512_IV[8] | 0;\n        this.El = SHA512_IV[9] | 0;\n        this.Fh = SHA512_IV[10] | 0;\n        this.Fl = SHA512_IV[11] | 0;\n        this.Gh = SHA512_IV[12] | 0;\n        this.Gl = SHA512_IV[13] | 0;\n        this.Hh = SHA512_IV[14] | 0;\n        this.Hl = SHA512_IV[15] | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        clean(SHA512_W_H, SHA512_W_L);\n    }\n    destroy() {\n        clean(this.buffer);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nexport class SHA384 extends SHA512 {\n    constructor() {\n        super(48);\n        this.Ah = SHA384_IV[0] | 0;\n        this.Al = SHA384_IV[1] | 0;\n        this.Bh = SHA384_IV[2] | 0;\n        this.Bl = SHA384_IV[3] | 0;\n        this.Ch = SHA384_IV[4] | 0;\n        this.Cl = SHA384_IV[5] | 0;\n        this.Dh = SHA384_IV[6] | 0;\n        this.Dl = SHA384_IV[7] | 0;\n        this.Eh = SHA384_IV[8] | 0;\n        this.El = SHA384_IV[9] | 0;\n        this.Fh = SHA384_IV[10] | 0;\n        this.Fl = SHA384_IV[11] | 0;\n        this.Gh = SHA384_IV[12] | 0;\n        this.Gl = SHA384_IV[13] | 0;\n        this.Hh = SHA384_IV[14] | 0;\n        this.Hl = SHA384_IV[15] | 0;\n    }\n}\n/**\n * Truncated SHA512/256 and SHA512/224.\n * SHA512_IV is XORed with 0xa5a5a5a5a5a5a5a5, then used as \"intermediary\" IV of SHA512/t.\n * Then t hashes string to produce result IV.\n * See `test/misc/sha2-gen-iv.js`.\n */\n/** SHA512/224 IV */\nconst T224_IV = /* @__PURE__ */ Uint32Array.from([\n    0x8c3d37c8, 0x19544da2, 0x73e19966, 0x89dcd4d6, 0x1dfab7ae, 0x32ff9c82, 0x679dd514, 0x582f9fcf,\n    0x0f6d2b69, 0x7bd44da8, 0x77e36f73, 0x04c48942, 0x3f9d85a8, 0x6a1d36c8, 0x1112e6ad, 0x91d692a1,\n]);\n/** SHA512/256 IV */\nconst T256_IV = /* @__PURE__ */ Uint32Array.from([\n    0x22312194, 0xfc2bf72c, 0x9f555fa3, 0xc84c64c2, 0x2393b86b, 0x6f53b151, 0x96387719, 0x5940eabd,\n    0x96283ee2, 0xa88effe3, 0xbe5e1e25, 0x53863992, 0x2b0199fc, 0x2c85b8aa, 0x0eb72ddc, 0x81c52ca2,\n]);\nexport class SHA512_224 extends SHA512 {\n    constructor() {\n        super(28);\n        this.Ah = T224_IV[0] | 0;\n        this.Al = T224_IV[1] | 0;\n        this.Bh = T224_IV[2] | 0;\n        this.Bl = T224_IV[3] | 0;\n        this.Ch = T224_IV[4] | 0;\n        this.Cl = T224_IV[5] | 0;\n        this.Dh = T224_IV[6] | 0;\n        this.Dl = T224_IV[7] | 0;\n        this.Eh = T224_IV[8] | 0;\n        this.El = T224_IV[9] | 0;\n        this.Fh = T224_IV[10] | 0;\n        this.Fl = T224_IV[11] | 0;\n        this.Gh = T224_IV[12] | 0;\n        this.Gl = T224_IV[13] | 0;\n        this.Hh = T224_IV[14] | 0;\n        this.Hl = T224_IV[15] | 0;\n    }\n}\nexport class SHA512_256 extends SHA512 {\n    constructor() {\n        super(32);\n        this.Ah = T256_IV[0] | 0;\n        this.Al = T256_IV[1] | 0;\n        this.Bh = T256_IV[2] | 0;\n        this.Bl = T256_IV[3] | 0;\n        this.Ch = T256_IV[4] | 0;\n        this.Cl = T256_IV[5] | 0;\n        this.Dh = T256_IV[6] | 0;\n        this.Dl = T256_IV[7] | 0;\n        this.Eh = T256_IV[8] | 0;\n        this.El = T256_IV[9] | 0;\n        this.Fh = T256_IV[10] | 0;\n        this.Fl = T256_IV[11] | 0;\n        this.Gh = T256_IV[12] | 0;\n        this.Gl = T256_IV[13] | 0;\n        this.Hh = T256_IV[14] | 0;\n        this.Hl = T256_IV[15] | 0;\n    }\n}\n/**\n * SHA2-256 hash function from RFC 4634.\n *\n * It is the fastest JS hash, even faster than Blake3.\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n */\nexport const sha256 = /* @__PURE__ */ createHasher(() => new SHA256());\n/** SHA2-224 hash function from RFC 4634 */\nexport const sha224 = /* @__PURE__ */ createHasher(() => new SHA224());\n/** SHA2-512 hash function from RFC 4634. */\nexport const sha512 = /* @__PURE__ */ createHasher(() => new SHA512());\n/** SHA2-384 hash function from RFC 4634. */\nexport const sha384 = /* @__PURE__ */ createHasher(() => new SHA384());\n/**\n * SHA2-512/256 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_256 = /* @__PURE__ */ createHasher(() => new SHA512_256());\n/**\n * SHA2-512/224 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_224 = /* @__PURE__ */ createHasher(() => new SHA512_224());\n//# sourceMappingURL=sha2.js.map","/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash, clean, Hash, toBytes } from \"./utils.js\";\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        ahash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        clean(pad);\n    }\n    update(buf) {\n        aexists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        abytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { bitLen, bitMask, validateObject } from \"../utils.js\";\nimport { Field, FpInvertBatch, nLength, validateField } from \"./modular.js\";\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nexport function negateCt(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\n/**\n * Takes a bunch of Projective Points but executes only one\n * inversion on all of them. Inversion is very slow operation,\n * so this improves performance massively.\n * Optimization: converts a list of projective points to a list of identical points with Z=1.\n */\nexport function normalizeZ(c, property, points) {\n    const getz = property === 'pz' ? (p) => p.pz : (p) => p.ez;\n    const toInv = FpInvertBatch(c.Fp, points.map(getz));\n    // @ts-ignore\n    const affined = points.map((p, i) => p.toAffine(toInv[i]));\n    return affined.map(c.fromAffine);\n}\nfunction validateW(W, bits) {\n    if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n        throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n}\nfunction calcWOpts(W, scalarBits) {\n    validateW(W, scalarBits);\n    const windows = Math.ceil(scalarBits / W) + 1; // W=8 33. Not 32, because we skip zero\n    const windowSize = 2 ** (W - 1); // W=8 128. Not 256, because we skip zero\n    const maxNumber = 2 ** W; // W=8 256\n    const mask = bitMask(W); // W=8 255 == mask 0b11111111\n    const shiftBy = BigInt(W); // W=8 8\n    return { windows, windowSize, mask, maxNumber, shiftBy };\n}\nfunction calcOffsets(n, window, wOpts) {\n    const { windowSize, mask, maxNumber, shiftBy } = wOpts;\n    let wbits = Number(n & mask); // extract W bits.\n    let nextN = n >> shiftBy; // shift number by W bits.\n    // What actually happens here:\n    // const highestBit = Number(mask ^ (mask >> 1n));\n    // let wbits2 = wbits - 1; // skip zero\n    // if (wbits2 & highestBit) { wbits2 ^= Number(mask); // (~);\n    // split if bits > max: +224 => 256-32\n    if (wbits > windowSize) {\n        // we skip zero, which means instead of `>= size-1`, we do `> size`\n        wbits -= maxNumber; // -32, can be maxNumber - wbits, but then we need to set isNeg here.\n        nextN += _1n; // +256 (carry)\n    }\n    const offsetStart = window * windowSize;\n    const offset = offsetStart + Math.abs(wbits) - 1; // -1 because we skip zero\n    const isZero = wbits === 0; // is current window slice a 0?\n    const isNeg = wbits < 0; // is current window slice negative?\n    const isNegF = window % 2 !== 0; // fake random statement for noise\n    const offsetF = offsetStart; // fake offset for noise\n    return { nextN, offset, isZero, isNeg, isNegF, offsetF };\n}\nfunction validateMSMPoints(points, c) {\n    if (!Array.isArray(points))\n        throw new Error('array expected');\n    points.forEach((p, i) => {\n        if (!(p instanceof c))\n            throw new Error('invalid point at index ' + i);\n    });\n}\nfunction validateMSMScalars(scalars, field) {\n    if (!Array.isArray(scalars))\n        throw new Error('array of scalars expected');\n    scalars.forEach((s, i) => {\n        if (!field.isValid(s))\n            throw new Error('invalid scalar at index ' + i);\n    });\n}\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes.\n// Allows to make points frozen / immutable.\nconst pointPrecomputes = new WeakMap();\nconst pointWindowSizes = new WeakMap();\nfunction getW(P) {\n    return pointWindowSizes.get(P) || 1;\n}\nfunction assert0(n) {\n    if (n !== _0n)\n        throw new Error('invalid wNAF');\n}\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */\nexport function wNAF(c, bits) {\n    return {\n        constTimeNegate: negateCt,\n        hasPrecomputes(elm) {\n            return getW(elm) !== 1;\n        },\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n, p = c.ZERO) {\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @param elm Point instance\n         * @param W window size\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = calcWOpts(W, bits);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // i=1, bc we skip 0\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // Smaller version:\n            // https://github.com/paulmillr/noble-secp256k1/blob/47cb1669b6e506ad66b35fe7d76132ae97465da2/index.ts#L502-L541\n            // TODO: check the scalar is less than group order?\n            // wNAF behavior is undefined otherwise. But have to carefully remove\n            // other checks before wNAF. ORDER == bits here.\n            // Accumulators\n            let p = c.ZERO;\n            let f = c.BASE;\n            // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n            // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n            // there is negate now: it is possible that negated element from low value\n            // would be the same as high element, which will create carry into next window.\n            // It's not obvious how this can fail, but still worth investigating later.\n            const wo = calcWOpts(W, bits);\n            for (let window = 0; window < wo.windows; window++) {\n                // (n === _0n) is handled and not early-exited. isEven and offsetF are used for noise\n                const { nextN, offset, isZero, isNeg, isNegF, offsetF } = calcOffsets(n, window, wo);\n                n = nextN;\n                if (isZero) {\n                    // bits are 0: add garbage to fake point\n                    // Important part for const-time getPublicKey: add random \"noise\" point to f.\n                    f = f.add(negateCt(isNegF, precomputes[offsetF]));\n                }\n                else {\n                    // bits are 1: add to result point\n                    p = p.add(negateCt(isNeg, precomputes[offset]));\n                }\n            }\n            assert0(n);\n            // Return both real and fake points: JIT won't eliminate f.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        /**\n         * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @param acc accumulator point to add result of multiplication\n         * @returns point\n         */\n        wNAFUnsafe(W, precomputes, n, acc = c.ZERO) {\n            const wo = calcWOpts(W, bits);\n            for (let window = 0; window < wo.windows; window++) {\n                if (n === _0n)\n                    break; // Early-exit, skip 0 value\n                const { nextN, offset, isZero, isNeg } = calcOffsets(n, window, wo);\n                n = nextN;\n                if (isZero) {\n                    // Window bits are 0: skip processing.\n                    // Move to next window.\n                    continue;\n                }\n                else {\n                    const item = precomputes[offset];\n                    acc = acc.add(isNeg ? item.negate() : item); // Re-using acc allows to save adds in MSM\n                }\n            }\n            assert0(n);\n            return acc;\n        },\n        getPrecomputes(W, P, transform) {\n            // Calculate precomputes on a first run, reuse them after\n            let comp = pointPrecomputes.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    // Doing transform outside of if brings 15% perf hit\n                    if (typeof transform === 'function')\n                        comp = transform(comp);\n                    pointPrecomputes.set(P, comp);\n                }\n            }\n            return comp;\n        },\n        wNAFCached(P, n, transform) {\n            const W = getW(P);\n            return this.wNAF(W, this.getPrecomputes(W, P, transform), n);\n        },\n        wNAFCachedUnsafe(P, n, transform, prev) {\n            const W = getW(P);\n            if (W === 1)\n                return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster\n            return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);\n        },\n        // We calculate precomputes for elliptic curve point multiplication\n        // using windowed method. This specifies window size and\n        // stores precomputed values. Usually only base point would be precomputed.\n        setWindowSize(P, W) {\n            validateW(W, bits);\n            pointWindowSizes.set(P, W);\n            pointPrecomputes.delete(P);\n        },\n    };\n}\n/**\n * Endomorphism-specific multiplication for Koblitz curves.\n * Cost: 128 dbl, 0-256 adds.\n */\nexport function mulEndoUnsafe(c, point, k1, k2) {\n    let acc = point;\n    let p1 = c.ZERO;\n    let p2 = c.ZERO;\n    while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n)\n            p1 = p1.add(acc);\n        if (k2 & _1n)\n            p2 = p2.add(acc);\n        acc = acc.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n    }\n    return { p1, p2 };\n}\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster than precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nexport function pippenger(c, fieldN, points, scalars) {\n    // If we split scalars by some window (let's say 8 bits), every chunk will only\n    // take 256 buckets even if there are 4096 scalars, also re-uses double.\n    // TODO:\n    // - https://eprint.iacr.org/2024/750.pdf\n    // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n    // 0 is accepted in scalars\n    validateMSMPoints(points, c);\n    validateMSMScalars(scalars, fieldN);\n    const plength = points.length;\n    const slength = scalars.length;\n    if (plength !== slength)\n        throw new Error('arrays of points and scalars must have equal length');\n    // if (plength === 0) throw new Error('array must be of length >= 2');\n    const zero = c.ZERO;\n    const wbits = bitLen(BigInt(plength));\n    let windowSize = 1; // bits\n    if (wbits > 12)\n        windowSize = wbits - 3;\n    else if (wbits > 4)\n        windowSize = wbits - 2;\n    else if (wbits > 0)\n        windowSize = 2;\n    const MASK = bitMask(windowSize);\n    const buckets = new Array(Number(MASK) + 1).fill(zero); // +1 for zero array\n    const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n    let sum = zero;\n    for (let i = lastBits; i >= 0; i -= windowSize) {\n        buckets.fill(zero);\n        for (let j = 0; j < slength; j++) {\n            const scalar = scalars[j];\n            const wbits = Number((scalar >> BigInt(i)) & MASK);\n            buckets[wbits] = buckets[wbits].add(points[j]);\n        }\n        let resI = zero; // not using this will do small speed-up, but will lose ct\n        // Skip first bucket, because it is zero\n        for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n            sumI = sumI.add(buckets[j]);\n            resI = resI.add(sumI);\n        }\n        sum = sum.add(resI);\n        if (i !== 0)\n            for (let j = 0; j < windowSize; j++)\n                sum = sum.double();\n    }\n    return sum;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */\nexport function precomputeMSMUnsafe(c, fieldN, points, windowSize) {\n    /**\n     * Performance Analysis of Window-based Precomputation\n     *\n     * Base Case (256-bit scalar, 8-bit window):\n     * - Standard precomputation requires:\n     *   - 31 additions per scalar × 256 scalars = 7,936 ops\n     *   - Plus 255 summary additions = 8,191 total ops\n     *   Note: Summary additions can be optimized via accumulator\n     *\n     * Chunked Precomputation Analysis:\n     * - Using 32 chunks requires:\n     *   - 255 additions per chunk\n     *   - 256 doublings\n     *   - Total: (255 × 32) + 256 = 8,416 ops\n     *\n     * Memory Usage Comparison:\n     * Window Size | Standard Points | Chunked Points\n     * ------------|-----------------|---------------\n     *     4-bit   |     520         |      15\n     *     8-bit   |    4,224        |     255\n     *    10-bit   |   13,824        |   1,023\n     *    16-bit   |  557,056        |  65,535\n     *\n     * Key Advantages:\n     * 1. Enables larger window sizes due to reduced memory overhead\n     * 2. More efficient for smaller scalar counts:\n     *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n     *    - ~2x faster than standard 8,191 ops\n     *\n     * Limitations:\n     * - Not suitable for plain precomputes (requires 256 constant doublings)\n     * - Performance degrades with larger scalar counts:\n     *   - Optimal for ~256 scalars\n     *   - Less efficient for 4096+ scalars (Pippenger preferred)\n     */\n    validateW(windowSize, fieldN.BITS);\n    validateMSMPoints(points, c);\n    const zero = c.ZERO;\n    const tableSize = 2 ** windowSize - 1; // table size (without zero)\n    const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n    const MASK = bitMask(windowSize);\n    const tables = points.map((p) => {\n        const res = [];\n        for (let i = 0, acc = p; i < tableSize; i++) {\n            res.push(acc);\n            acc = acc.add(p);\n        }\n        return res;\n    });\n    return (scalars) => {\n        validateMSMScalars(scalars, fieldN);\n        if (scalars.length > points.length)\n            throw new Error('array of scalars must be smaller than array of points');\n        let res = zero;\n        for (let i = 0; i < chunks; i++) {\n            // No need to double if accumulator is still zero.\n            if (res !== zero)\n                for (let j = 0; j < windowSize; j++)\n                    res = res.double();\n            const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n            for (let j = 0; j < scalars.length; j++) {\n                const n = scalars[j];\n                const curr = Number((n >> shiftBy) & MASK);\n                if (!curr)\n                    continue; // skip zero scalars chunks\n                res = res.add(tables[j][curr - 1]);\n            }\n        }\n        return res;\n    };\n}\n// TODO: remove\n/** @deprecated */\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\nfunction createField(order, field) {\n    if (field) {\n        if (field.ORDER !== order)\n            throw new Error('Field.ORDER must match order: Fp == p, Fn == n');\n        validateField(field);\n        return field;\n    }\n    else {\n        return Field(order);\n    }\n}\n/** Validates CURVE opts and creates fields */\nexport function _createCurveFields(type, CURVE, curveOpts = {}) {\n    if (!CURVE || typeof CURVE !== 'object')\n        throw new Error(`expected valid ${type} CURVE object`);\n    for (const p of ['p', 'n', 'h']) {\n        const val = CURVE[p];\n        if (!(typeof val === 'bigint' && val > _0n))\n            throw new Error(`CURVE.${p} must be positive bigint`);\n    }\n    const Fp = createField(CURVE.p, curveOpts.Fp);\n    const Fn = createField(CURVE.n, curveOpts.Fn);\n    const _b = type === 'weierstrass' ? 'b' : 'd';\n    const params = ['Gx', 'Gy', 'a', _b];\n    for (const p of params) {\n        // @ts-ignore\n        if (!Fp.isValid(CURVE[p]))\n            throw new Error(`CURVE.${p} must be valid field element of CURVE.Fp`);\n    }\n    return { Fp, Fn };\n}\n//# sourceMappingURL=curve.js.map","/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac.js';\nimport { _validateObject, abool, abytes, aInRange, bitMask, bytesToHex, bytesToNumberBE, concatBytes, createHmacDrbg, ensureBytes, hexToBytes, inRange, isBytes, memoized, numberToHexUnpadded, randomBytes, } from \"../utils.js\";\nimport { _createCurveFields, mulEndoUnsafe, negateCt, normalizeZ, pippenger, wNAF, } from \"./curve.js\";\nimport { Field, FpInvertBatch, getMinHashLength, mapHashToField, validateField, } from \"./modular.js\";\nfunction validateSigVerOpts(opts) {\n    if (opts.lowS !== undefined)\n        abool('lowS', opts.lowS);\n    if (opts.prehash !== undefined)\n        abool('prehash', opts.prehash);\n}\nexport class DERErr extends Error {\n    constructor(m = '') {\n        super(m);\n    }\n}\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: DERErr,\n    // Basic building block is TLV (Tag-Length-Value)\n    _tlv: {\n        encode: (tag, data) => {\n            const { Err: E } = DER;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length & 1)\n                throw new E('tlv.encode: unpadded data');\n            const dataLen = data.length / 2;\n            const len = numberToHexUnpadded(dataLen);\n            if ((len.length / 2) & 128)\n                throw new E('tlv.encode: long form length too big');\n            // length of length with long form flag\n            const lenLen = dataLen > 127 ? numberToHexUnpadded((len.length / 2) | 128) : '';\n            const t = numberToHexUnpadded(tag);\n            return t + lenLen + len + data;\n        },\n        // v - value, l - left bytes (unparsed)\n        decode(tag, data) {\n            const { Err: E } = DER;\n            let pos = 0;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length < 2 || data[pos++] !== tag)\n                throw new E('tlv.decode: wrong tlv');\n            const first = data[pos++];\n            const isLong = !!(first & 128); // First bit of first length byte is flag for short/long form\n            let length = 0;\n            if (!isLong)\n                length = first;\n            else {\n                // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n                const lenLen = first & 127;\n                if (!lenLen)\n                    throw new E('tlv.decode(long): indefinite length not supported');\n                if (lenLen > 4)\n                    throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n                const lengthBytes = data.subarray(pos, pos + lenLen);\n                if (lengthBytes.length !== lenLen)\n                    throw new E('tlv.decode: length bytes not complete');\n                if (lengthBytes[0] === 0)\n                    throw new E('tlv.decode(long): zero leftmost byte');\n                for (const b of lengthBytes)\n                    length = (length << 8) | b;\n                pos += lenLen;\n                if (length < 128)\n                    throw new E('tlv.decode(long): not minimal encoding');\n            }\n            const v = data.subarray(pos, pos + length);\n            if (v.length !== length)\n                throw new E('tlv.decode: wrong value length');\n            return { v, l: data.subarray(pos + length) };\n        },\n    },\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    _int: {\n        encode(num) {\n            const { Err: E } = DER;\n            if (num < _0n)\n                throw new E('integer: negative integers are not allowed');\n            let hex = numberToHexUnpadded(num);\n            // Pad with zero byte if negative flag is present\n            if (Number.parseInt(hex[0], 16) & 0b1000)\n                hex = '00' + hex;\n            if (hex.length & 1)\n                throw new E('unexpected DER parsing assertion: unpadded hex');\n            return hex;\n        },\n        decode(data) {\n            const { Err: E } = DER;\n            if (data[0] & 128)\n                throw new E('invalid signature integer: negative');\n            if (data[0] === 0x00 && !(data[1] & 128))\n                throw new E('invalid signature integer: unnecessary leading zero');\n            return bytesToNumberBE(data);\n        },\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E, _int: int, _tlv: tlv } = DER;\n        const data = ensureBytes('signature', hex);\n        const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n        if (seqLeftBytes.length)\n            throw new E('invalid signature: left bytes after parsing');\n        const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n        const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n        if (sLeftBytes.length)\n            throw new E('invalid signature: left bytes after parsing');\n        return { r: int.decode(rBytes), s: int.decode(sBytes) };\n    },\n    hexFromSig(sig) {\n        const { _tlv: tlv, _int: int } = DER;\n        const rs = tlv.encode(0x02, int.encode(sig.r));\n        const ss = tlv.encode(0x02, int.encode(sig.s));\n        const seq = rs + ss;\n        return tlv.encode(0x30, seq);\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n// TODO: remove\nexport function _legacyHelperEquat(Fp, a, b) {\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula. Takes x, returns y².\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x² * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x³ + a * x + b\n    }\n    return weierstrassEquation;\n}\nexport function _legacyHelperNormPriv(Fn, allowedPrivateKeyLengths, wrapPrivateKey) {\n    const { BYTES: expected } = Fn;\n    // Validates if priv key is valid and converts it to bigint.\n    function normPrivateKeyToScalar(key) {\n        let num;\n        if (typeof key === 'bigint') {\n            num = key;\n        }\n        else {\n            let bytes = ensureBytes('private key', key);\n            if (allowedPrivateKeyLengths) {\n                if (!allowedPrivateKeyLengths.includes(bytes.length * 2))\n                    throw new Error('invalid private key');\n                const padded = new Uint8Array(expected);\n                padded.set(bytes, padded.length - bytes.length);\n                bytes = padded;\n            }\n            try {\n                num = Fn.fromBytes(bytes);\n            }\n            catch (error) {\n                throw new Error(`invalid private key: expected ui8a of size ${expected}, got ${typeof key}`);\n            }\n        }\n        if (wrapPrivateKey)\n            num = Fn.create(num); // disabled by default, enabled for BLS\n        if (!Fn.isValidNot0(num))\n            throw new Error('invalid private key: out of range [1..N-1]');\n        return num;\n    }\n    return normPrivateKeyToScalar;\n}\nexport function weierstrassN(CURVE, curveOpts = {}) {\n    const { Fp, Fn } = _createCurveFields('weierstrass', CURVE, curveOpts);\n    const { h: cofactor, n: CURVE_ORDER } = CURVE;\n    _validateObject(curveOpts, {}, {\n        allowInfinityPoint: 'boolean',\n        clearCofactor: 'function',\n        isTorsionFree: 'function',\n        fromBytes: 'function',\n        toBytes: 'function',\n        endo: 'object',\n        wrapPrivateKey: 'boolean',\n    });\n    const { endo } = curveOpts;\n    if (endo) {\n        // validateObject(endo, { beta: 'bigint', splitScalar: 'function' });\n        if (!Fp.is0(CURVE.a) ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('invalid endo: expected \"beta\": bigint and \"splitScalar\": function');\n        }\n    }\n    function assertCompressionIsSupported() {\n        if (!Fp.isOdd)\n            throw new Error('compression is not supported: Field does not have .isOdd()');\n    }\n    // Implements IEEE P1363 point encoding\n    function pointToBytes(_c, point, isCompressed) {\n        const { x, y } = point.toAffine();\n        const bx = Fp.toBytes(x);\n        abool('isCompressed', isCompressed);\n        if (isCompressed) {\n            assertCompressionIsSupported();\n            const hasEvenY = !Fp.isOdd(y);\n            return concatBytes(pprefix(hasEvenY), bx);\n        }\n        else {\n            return concatBytes(Uint8Array.of(0x04), bx, Fp.toBytes(y));\n        }\n    }\n    function pointFromBytes(bytes) {\n        abytes(bytes);\n        const L = Fp.BYTES;\n        const LC = L + 1; // length compressed, e.g. 33 for 32-byte field\n        const LU = 2 * L + 1; // length uncompressed, e.g. 65 for 32-byte field\n        const length = bytes.length;\n        const head = bytes[0];\n        const tail = bytes.subarray(1);\n        // No actual validation is done here: use .assertValidity()\n        if (length === LC && (head === 0x02 || head === 0x03)) {\n            const x = Fp.fromBytes(tail);\n            if (!Fp.isValid(x))\n                throw new Error('bad point: is not on curve, wrong x');\n            const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n            let y;\n            try {\n                y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n            }\n            catch (sqrtError) {\n                const err = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n                throw new Error('bad point: is not on curve, sqrt error' + err);\n            }\n            assertCompressionIsSupported();\n            const isYOdd = Fp.isOdd(y); // (y & _1n) === _1n;\n            const isHeadOdd = (head & 1) === 1; // ECDSA-specific\n            if (isHeadOdd !== isYOdd)\n                y = Fp.neg(y);\n            return { x, y };\n        }\n        else if (length === LU && head === 0x04) {\n            // TODO: more checks\n            const x = Fp.fromBytes(tail.subarray(L * 0, L * 1));\n            const y = Fp.fromBytes(tail.subarray(L * 1, L * 2));\n            if (!isValidXY(x, y))\n                throw new Error('bad point: is not on curve');\n            return { x, y };\n        }\n        else {\n            throw new Error(`bad point: got length ${length}, expected compressed=${LC} or uncompressed=${LU}`);\n        }\n    }\n    const toBytes = curveOpts.toBytes || pointToBytes;\n    const fromBytes = curveOpts.fromBytes || pointFromBytes;\n    const weierstrassEquation = _legacyHelperEquat(Fp, CURVE.a, CURVE.b);\n    // TODO: move top-level\n    /** Checks whether equation holds for given x, y: y² == x³ + ax + b */\n    function isValidXY(x, y) {\n        const left = Fp.sqr(y); // y²\n        const right = weierstrassEquation(x); // x³ + ax + b\n        return Fp.eql(left, right);\n    }\n    // Validate whether the passed curve params are valid.\n    // Test 1: equation y² = x³ + ax + b should work for generator point.\n    if (!isValidXY(CURVE.Gx, CURVE.Gy))\n        throw new Error('bad curve params: generator point');\n    // Test 2: discriminant Δ part should be non-zero: 4a³ + 27b² != 0.\n    // Guarantees curve is genus-1, smooth (non-singular).\n    const _4a3 = Fp.mul(Fp.pow(CURVE.a, _3n), _4n);\n    const _27b2 = Fp.mul(Fp.sqr(CURVE.b), BigInt(27));\n    if (Fp.is0(Fp.add(_4a3, _27b2)))\n        throw new Error('bad curve params: a or b');\n    /** Asserts coordinate is valid: 0 <= n < Fp.ORDER. */\n    function acoord(title, n, banZero = false) {\n        if (!Fp.isValid(n) || (banZero && Fp.is0(n)))\n            throw new Error(`bad point coordinate ${title}`);\n        return n;\n    }\n    function aprjpoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    // Memoized toAffine / validity check. They are heavy. Points are immutable.\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (X, Y, Z) ∋ (x=X/Z, y=Y/Z)\n    const toAffineMemo = memoized((p, iz) => {\n        const { px: x, py: y, pz: z } = p;\n        // Fast-path for normalized points\n        if (Fp.eql(z, Fp.ONE))\n            return { x, y };\n        const is0 = p.is0();\n        // If invZ was 0, we return zero point. However we still want to execute\n        // all operations, so we replace invZ with a random number, 1.\n        if (iz == null)\n            iz = is0 ? Fp.ONE : Fp.inv(z);\n        const ax = Fp.mul(x, iz);\n        const ay = Fp.mul(y, iz);\n        const zz = Fp.mul(z, iz);\n        if (is0)\n            return { x: Fp.ZERO, y: Fp.ZERO };\n        if (!Fp.eql(zz, Fp.ONE))\n            throw new Error('invZ was invalid');\n        return { x: ax, y: ay };\n    });\n    // NOTE: on exception this will crash 'cached' and no value will be set.\n    // Otherwise true will be return\n    const assertValidMemo = memoized((p) => {\n        if (p.is0()) {\n            // (0, 1, 0) aka ZERO is invalid in most contexts.\n            // In BLS, ZERO can be serialized, so we allow it.\n            // (0, 0, 0) is invalid representation of ZERO.\n            if (curveOpts.allowInfinityPoint && !Fp.is0(p.py))\n                return;\n            throw new Error('bad point: ZERO');\n        }\n        // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n        const { x, y } = p.toAffine();\n        if (!Fp.isValid(x) || !Fp.isValid(y))\n            throw new Error('bad point: x or y not field elements');\n        if (!isValidXY(x, y))\n            throw new Error('bad point: equation left != right');\n        if (!p.isTorsionFree())\n            throw new Error('bad point: not in prime-order subgroup');\n        return true;\n    });\n    function finishEndo(endoBeta, k1p, k2p, k1neg, k2neg) {\n        k2p = new Point(Fp.mul(k2p.px, endoBeta), k2p.py, k2p.pz);\n        k1p = negateCt(k1neg, k1p);\n        k2p = negateCt(k2neg, k2p);\n        return k1p.add(k2p);\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates:(X, Y, Z) ∋ (x=X/Z, y=Y/Z).\n     * Default Point works in 2d / affine coordinates: (x, y).\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n        constructor(px, py, pz) {\n            this.px = acoord('x', px);\n            this.py = acoord('y', py, true);\n            this.pz = acoord('z', pz);\n            Object.freeze(this);\n        }\n        /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            // (0, 0) would've produced (0, 0, 1) - instead, we need (0, 1, 0)\n            if (Fp.is0(x) && Fp.is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        static normalizeZ(points) {\n            return normalizeZ(Point, 'pz', points);\n        }\n        static fromBytes(bytes) {\n            abytes(bytes);\n            return Point.fromHex(bytes);\n        }\n        /** Converts hash string or Uint8Array to Point. */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        /** Multiplies generator point by privateKey. */\n        static fromPrivateKey(privateKey) {\n            const normPrivateKeyToScalar = _legacyHelperNormPriv(Fn, curveOpts.allowedPrivateKeyLengths, curveOpts.wrapPrivateKey);\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        /** Multiscalar Multiplication */\n        static msm(points, scalars) {\n            return pippenger(Point, Fn, points, scalars);\n        }\n        /**\n         *\n         * @param windowSize\n         * @param isLazy true will defer table computation until the first multiplication\n         * @returns\n         */\n        precompute(windowSize = 8, isLazy = true) {\n            wnaf.setWindowSize(this, windowSize);\n            if (!isLazy)\n                this.multiply(_3n); // random number\n            return this;\n        }\n        /** \"Private method\", don't use it directly */\n        _setWindowSize(windowSize) {\n            this.precompute(windowSize);\n        }\n        // TODO: return `this`\n        /** A point on curve is valid if it conforms to equation. */\n        assertValidity() {\n            assertValidMemo(this);\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (!Fp.isOdd)\n                throw new Error(\"Field doesn't support isOdd\");\n            return !Fp.isOdd(y);\n        }\n        /** Compare one point to another. */\n        equals(other) {\n            aprjpoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /** Flips point to one corresponding to (x, -y) in Affine coordinates. */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            aprjpoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            const { endo } = curveOpts;\n            if (!Fn.isValidNot0(scalar))\n                throw new Error('invalid scalar: out of range'); // 0 is invalid\n            let point, fake; // Fake point is used to const-time mult\n            const mul = (n) => wnaf.wNAFCached(this, n, Point.normalizeZ);\n            /** See docs for {@link EndomorphismOpts} */\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n                const { p: k1p, f: k1f } = mul(k1);\n                const { p: k2p, f: k2f } = mul(k2);\n                fake = k1f.add(k2f);\n                point = finishEndo(endo.beta, k1p, k2p, k1neg, k2neg);\n            }\n            else {\n                const { p, f } = mul(scalar);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(sc) {\n            const { endo } = curveOpts;\n            const p = this;\n            if (!Fn.isValid(sc))\n                throw new Error('invalid scalar: out of range'); // 0 is valid\n            if (sc === _0n || p.is0())\n                return Point.ZERO;\n            if (sc === _1n)\n                return p; // fast-path\n            if (wnaf.hasPrecomputes(this))\n                return this.multiply(sc);\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n                // `wNAFCachedUnsafe` is 30% slower\n                const { p1, p2 } = mulEndoUnsafe(Point, p, k1, k2);\n                return finishEndo(endo.beta, p1, p2, k1neg, k2neg);\n            }\n            else {\n                return wnaf.wNAFCachedUnsafe(p, sc);\n            }\n        }\n        multiplyAndAddUnsafe(Q, a, b) {\n            const sum = this.multiplyUnsafe(a).add(Q.multiplyUnsafe(b));\n            return sum.is0() ? undefined : sum;\n        }\n        /**\n         * Converts Projective point to affine (x, y) coordinates.\n         * @param invertedZ Z^-1 (inverted zero) - optional, precomputation is useful for invertBatch\n         */\n        toAffine(invertedZ) {\n            return toAffineMemo(this, invertedZ);\n        }\n        /**\n         * Checks whether Point is free of torsion elements (is in prime subgroup).\n         * Always torsion-free for cofactor=1 curves.\n         */\n        isTorsionFree() {\n            const { isTorsionFree } = curveOpts;\n            if (cofactor === _1n)\n                return true;\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            return wnaf.wNAFCachedUnsafe(this, CURVE_ORDER).is0();\n        }\n        clearCofactor() {\n            const { clearCofactor } = curveOpts;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(cofactor);\n        }\n        toBytes(isCompressed = true) {\n            abool('isCompressed', isCompressed);\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        /** @deprecated use `toBytes` */\n        toRawBytes(isCompressed = true) {\n            return this.toBytes(isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return bytesToHex(this.toBytes(isCompressed));\n        }\n        toString() {\n            return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\n        }\n    }\n    // base / generator point\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    // zero / infinity / identity point\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO); // 0, 1, 0\n    // fields\n    Point.Fp = Fp;\n    Point.Fn = Fn;\n    const bits = Fn.BITS;\n    const wnaf = wNAF(Point, curveOpts.endo ? Math.ceil(bits / 2) : bits);\n    return Point;\n}\n// _legacyWeierstrass\n/** @deprecated use `weierstrassN` */\nexport function weierstrassPoints(c) {\n    const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\n    const Point = weierstrassN(CURVE, curveOpts);\n    return _weierstrass_new_output_to_legacy(c, Point);\n}\n// Points start with byte 0x02 when y is even; otherwise 0x03\nfunction pprefix(hasEvenY) {\n    return Uint8Array.of(hasEvenY ? 0x02 : 0x03);\n}\nexport function ecdsa(Point, ecdsaOpts, curveOpts = {}) {\n    _validateObject(ecdsaOpts, { hash: 'function' }, {\n        hmac: 'function',\n        lowS: 'boolean',\n        randomBytes: 'function',\n        bits2int: 'function',\n        bits2int_modN: 'function',\n    });\n    const randomBytes_ = ecdsaOpts.randomBytes || randomBytes;\n    const hmac_ = ecdsaOpts.hmac ||\n        ((key, ...msgs) => hmac(ecdsaOpts.hash, key, concatBytes(...msgs)));\n    const { Fp, Fn } = Point;\n    const { ORDER: CURVE_ORDER, BITS: fnBits } = Fn;\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? Fn.neg(s) : s;\n    }\n    function aValidRS(title, num) {\n        if (!Fn.isValidNot0(num))\n            throw new Error(`invalid signature ${title}: out of range 1..CURVE.n`);\n    }\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            aValidRS('r', r); // r in [1..N-1]\n            aValidRS('s', s); // s in [1..N-1]\n            this.r = r;\n            this.s = s;\n            if (recovery != null)\n                this.recovery = recovery;\n            Object.freeze(this);\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const L = Fn.BYTES;\n            const b = ensureBytes('compactSignature', hex, L * 2);\n            return new Signature(Fn.fromBytes(b.subarray(0, L)), Fn.fromBytes(b.subarray(L, L * 2)));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        /**\n         * @todo remove\n         * @deprecated\n         */\n        assertValidity() { }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        // ProjPointType<bigint>\n        recoverPublicKey(msgHash) {\n            const FIELD_ORDER = Fp.ORDER;\n            const { r, s, recovery: rec } = this;\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            // ECDSA recovery is hard for cofactor > 1 curves.\n            // In sign, `r = q.x mod n`, and here we recover q.x from r.\n            // While recovering q.x >= n, we need to add r+n for cofactor=1 curves.\n            // However, for cofactor>1, r+n may not get q.x:\n            // r+n*i would need to be done instead where i is unknown.\n            // To easily get i, we either need to:\n            // a. increase amount of valid recid values (4, 5...); OR\n            // b. prohibit non-prime-order signatures (recid > 1).\n            const hasCofactor = CURVE_ORDER * _2n < FIELD_ORDER;\n            if (hasCofactor && rec > 1)\n                throw new Error('recovery id is ambiguous for h>1 curve');\n            const radj = rec === 2 || rec === 3 ? r + CURVE_ORDER : r;\n            if (!Fp.isValid(radj))\n                throw new Error('recovery id 2 or 3 invalid');\n            const x = Fp.toBytes(radj);\n            const R = Point.fromHex(concatBytes(pprefix((rec & 1) === 0), x));\n            const ir = Fn.inv(radj); // r^-1\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            const u1 = Fn.create(-h * ir); // -hr^-1\n            const u2 = Fn.create(s * ir); // sr^-1\n            // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1). unsafe is fine: there is no private data.\n            const Q = Point.BASE.multiplyUnsafe(u1).add(R.multiplyUnsafe(u2));\n            if (Q.is0())\n                throw new Error('point at infinify');\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, Fn.neg(this.s), this.recovery) : this;\n        }\n        toBytes(format) {\n            if (format === 'compact')\n                return concatBytes(Fn.toBytes(this.r), Fn.toBytes(this.s));\n            if (format === 'der')\n                return hexToBytes(DER.hexFromSig(this));\n            throw new Error('invalid format');\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return this.toBytes('der');\n        }\n        toDERHex() {\n            return bytesToHex(this.toBytes('der'));\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return this.toBytes('compact');\n        }\n        toCompactHex() {\n            return bytesToHex(this.toBytes('compact'));\n        }\n    }\n    const normPrivateKeyToScalar = _legacyHelperNormPriv(Fn, curveOpts.allowedPrivateKeyLengths, curveOpts.wrapPrivateKey);\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const n = CURVE_ORDER;\n            return mapHashToField(randomBytes_(getMinHashLength(n)), n);\n        },\n        precompute(windowSize = 8, point = Point.BASE) {\n            return point.precompute(windowSize, false);\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        if (typeof item === 'bigint')\n            return false;\n        if (item instanceof Point)\n            return true;\n        const arr = ensureBytes('key', item);\n        const length = arr.length;\n        const L = Fp.BYTES;\n        const LC = L + 1; // e.g. 33 for 32\n        const LU = 2 * L + 1; // e.g. 65 for 32\n        if (curveOpts.allowedPrivateKeyLengths || Fn.BYTES === LC) {\n            return undefined;\n        }\n        else {\n            return length === LC || length === LU;\n        }\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA) === true)\n            throw new Error('first arg must be private key');\n        if (isProbPub(publicB) === false)\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = ecdsaOpts.bits2int ||\n        function (bytes) {\n            // Our custom check \"just in case\", for protection against DoS\n            if (bytes.length > 8192)\n                throw new Error('input is too large');\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - fnBits; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = ecdsaOpts.bits2int_modN ||\n        function (bytes) {\n            return Fn.create(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = bitMask(fnBits);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        // IMPORTANT: the check ensures working for case `Fn.BYTES != Fn.BITS * 8`\n        aInRange('num < 2^' + fnBits, num, _0n, ORDER_MASK);\n        return Fn.toBytes(num);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n    // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash } = ecdsaOpts;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        validateSigVerOpts(opts);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with fnBits % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes_(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n        }\n        const seed = concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n        // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n        // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            // Important: all mod() calls here must be done over N\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!Fn.isValidNot0(k))\n                return; // Valid scalars (including k) must be in 1..N-1\n            const ik = Fn.inv(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = Fn.create(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            const s = Fn.create(ik * Fn.create(m + r * d)); // Not using blinding here, see comment above\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: ecdsaOpts.lowS, prehash: false };\n    const defaultVerOpts = { lowS: ecdsaOpts.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const drbg = createHmacDrbg(ecdsaOpts.hash.outputLen, Fn.BYTES, hmac_);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE.precompute(8);\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        // Verify opts\n        validateSigVerOpts(opts);\n        const { lowS, prehash, format } = opts;\n        // TODO: remove\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        if (format !== undefined && !['compact', 'der', 'js'].includes(format))\n            throw new Error('format must be \"compact\", \"der\" or \"js\"');\n        const isHex = typeof sg === 'string' || isBytes(sg);\n        const isObj = !isHex &&\n            !format &&\n            typeof sg === 'object' &&\n            sg !== null &&\n            typeof sg.r === 'bigint' &&\n            typeof sg.s === 'bigint';\n        if (!isHex && !isObj)\n            throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n        let _sig = undefined;\n        let P;\n        // deduce signature format\n        try {\n            // if (format === 'js') {\n            //   if (sg != null && !isBytes(sg)) _sig = new Signature(sg.r, sg.s);\n            // } else if (format === 'compact') {\n            //   _sig = Signature.fromCompact(sg);\n            // } else if (format === 'der') {\n            //   _sig = Signature.fromDER(sg);\n            // } else {\n            //   throw new Error('invalid format');\n            // }\n            if (isObj) {\n                if (format === undefined || format === 'js') {\n                    _sig = new Signature(sg.r, sg.s);\n                }\n                else {\n                    throw new Error('invalid format');\n                }\n            }\n            if (isHex) {\n                // TODO: remove this malleable check\n                // Signature can be represented in 2 ways: compact (2*Fn.BYTES) & DER (variable-length).\n                // Since DER can also be 2*Fn.BYTES bytes, we check for it first.\n                try {\n                    if (format !== 'compact')\n                        _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                }\n                if (!_sig && format !== 'der')\n                    _sig = Signature.fromCompact(sg);\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            return false;\n        }\n        if (!_sig)\n            return false;\n        if (lowS && _sig.hasHighS())\n            return false;\n        // todo: optional.hash => hash\n        if (prehash)\n            msgHash = ecdsaOpts.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = Fn.inv(s); // s^-1\n        const u1 = Fn.create(h * is); // u1 = hs^-1 mod n\n        const u2 = Fn.create(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyUnsafe(u1).add(P.multiplyUnsafe(u2));\n        if (R.is0())\n            return false;\n        const v = Fn.create(R.x); // v = r.x mod n\n        return v === r;\n    }\n    // TODO: clarify API for cloning .clone({hash: sha512}) ? .createWith({hash: sha512})?\n    // const clone = (hash: CHash): ECDSA => ecdsa(Point, { ...ecdsaOpts, ...getHash(hash) }, curveOpts);\n    return Object.freeze({\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        utils,\n        Point,\n        Signature,\n    });\n}\nfunction _weierstrass_legacy_opts_to_new(c) {\n    const CURVE = {\n        a: c.a,\n        b: c.b,\n        p: c.Fp.ORDER,\n        n: c.n,\n        h: c.h,\n        Gx: c.Gx,\n        Gy: c.Gy,\n    };\n    const Fp = c.Fp;\n    const Fn = Field(CURVE.n, c.nBitLength);\n    const curveOpts = {\n        Fp,\n        Fn,\n        allowedPrivateKeyLengths: c.allowedPrivateKeyLengths,\n        allowInfinityPoint: c.allowInfinityPoint,\n        endo: c.endo,\n        wrapPrivateKey: c.wrapPrivateKey,\n        isTorsionFree: c.isTorsionFree,\n        clearCofactor: c.clearCofactor,\n        fromBytes: c.fromBytes,\n        toBytes: c.toBytes,\n    };\n    return { CURVE, curveOpts };\n}\nfunction _ecdsa_legacy_opts_to_new(c) {\n    const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\n    const ecdsaOpts = {\n        hash: c.hash,\n        hmac: c.hmac,\n        randomBytes: c.randomBytes,\n        lowS: c.lowS,\n        bits2int: c.bits2int,\n        bits2int_modN: c.bits2int_modN,\n    };\n    return { CURVE, curveOpts, ecdsaOpts };\n}\nfunction _weierstrass_new_output_to_legacy(c, Point) {\n    const { Fp, Fn } = Point;\n    // TODO: remove\n    function isWithinCurveOrder(num) {\n        return inRange(num, _1n, Fn.ORDER);\n    }\n    const weierstrassEquation = _legacyHelperEquat(Fp, c.a, c.b);\n    const normPrivateKeyToScalar = _legacyHelperNormPriv(Fn, c.allowedPrivateKeyLengths, c.wrapPrivateKey);\n    return Object.assign({}, {\n        CURVE: c,\n        Point: Point,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    });\n}\nfunction _ecdsa_new_output_to_legacy(c, ecdsa) {\n    return Object.assign({}, ecdsa, {\n        ProjectivePoint: ecdsa.Point,\n        CURVE: c,\n    });\n}\n// _ecdsa_legacy\nexport function weierstrass(c) {\n    const { CURVE, curveOpts, ecdsaOpts } = _ecdsa_legacy_opts_to_new(c);\n    const Point = weierstrassN(CURVE, curveOpts);\n    const signs = ecdsa(Point, ecdsaOpts, curveOpts);\n    return _ecdsa_new_output_to_legacy(c, signs);\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    validateField(Fp);\n    const { A, B, Z } = opts;\n    if (!Fp.isValid(A) || !Fp.isValid(B) || !Fp.isValid(Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, Z);\n    if (!Fp.isOdd)\n        throw new Error('Field does not have .isOdd()');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        const tv4_inv = FpInvertBatch(Fp, [tv4], true)[0];\n        x = Fp.mul(x, tv4_inv); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map","/**\n * Utilities for short weierstrass curves, combined with noble-hashes.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { weierstrass } from \"./abstract/weierstrass.js\";\n/** connects noble-curves to noble-hashes */\nexport function getHash(hash) {\n    return { hash };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, hash: hash });\n    return { ...create(defHash), create };\n}\n//# sourceMappingURL=_shortw_utils.js.map","/**\n * Internal module for NIST P256, P384, P521 curves.\n * Do not use for now.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256, sha384, sha512 } from '@noble/hashes/sha2.js';\nimport { createCurve } from \"./_shortw_utils.js\";\nimport { createHasher } from \"./abstract/hash-to-curve.js\";\nimport { Field } from \"./abstract/modular.js\";\nimport { mapToCurveSimpleSWU } from \"./abstract/weierstrass.js\";\n// p = 2n**224n * (2n**32n-1n) + 2n**192n + 2n**96n - 1n\n// a = Fp256.create(BigInt('-3'));\nconst p256_CURVE = {\n    p: BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'),\n    n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),\n    h: BigInt(1),\n    a: BigInt('0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc'),\n    b: BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b'),\n    Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),\n    Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),\n};\n// p = 2n**384n - 2n**128n - 2n**96n + 2n**32n - 1n\nconst p384_CURVE = {\n    p: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff'),\n    n: BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973'),\n    h: BigInt(1),\n    a: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000fffffffc'),\n    b: BigInt('0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef'),\n    Gx: BigInt('0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7'),\n    Gy: BigInt('0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f'),\n};\n// p = 2n**521n - 1n\nconst p521_CURVE = {\n    p: BigInt('0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'),\n    n: BigInt('0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b8899c47aebb6fb71e91386409'),\n    h: BigInt(1),\n    a: BigInt('0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc'),\n    b: BigInt('0x0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00'),\n    Gx: BigInt('0x00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66'),\n    Gy: BigInt('0x011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650'),\n};\nconst Fp256 = Field(p256_CURVE.p);\nconst Fp384 = Field(p384_CURVE.p);\nconst Fp521 = Field(p521_CURVE.p);\nfunction createSWU(field, opts) {\n    const map = mapToCurveSimpleSWU(field, opts);\n    return (scalars) => map(scalars[0]);\n}\n/** NIST P256 (aka secp256r1, prime256v1) curve, ECDSA and ECDH methods. */\nexport const p256 = createCurve({ ...p256_CURVE, Fp: Fp256, lowS: false }, sha256);\n/** Alias to p256. */\nexport const secp256r1 = p256;\n/** Hashing / encoding to p256 points / field. RFC 9380 methods. */\nexport const p256_hasher = /* @__PURE__ */ (() => {\n    return createHasher(p256.Point, createSWU(Fp256, {\n        A: p256_CURVE.a,\n        B: p256_CURVE.b,\n        Z: Fp256.create(BigInt('-10')),\n    }), {\n        DST: 'P256_XMD:SHA-256_SSWU_RO_',\n        encodeDST: 'P256_XMD:SHA-256_SSWU_NU_',\n        p: p256_CURVE.p,\n        m: 1,\n        k: 128,\n        expand: 'xmd',\n        hash: sha256,\n    });\n})();\n/** NIST P384 (aka secp384r1) curve, ECDSA and ECDH methods. */\nexport const p384 = createCurve({ ...p384_CURVE, Fp: Fp384, lowS: false }, sha384);\n/** Alias to p384. */\nexport const secp384r1 = p384;\n/** Hashing / encoding to p384 points / field. RFC 9380 methods. */\nexport const p384_hasher = /* @__PURE__ */ (() => {\n    return createHasher(p384.Point, createSWU(Fp384, {\n        A: p384_CURVE.a,\n        B: p384_CURVE.b,\n        Z: Fp384.create(BigInt('-12')),\n    }), {\n        DST: 'P384_XMD:SHA-384_SSWU_RO_',\n        encodeDST: 'P384_XMD:SHA-384_SSWU_NU_',\n        p: p384_CURVE.p,\n        m: 1,\n        k: 192,\n        expand: 'xmd',\n        hash: sha384,\n    });\n})();\n/** NIST P521 (aka secp521r1) curve, ECDSA and ECDH methods. */\nexport const p521 = createCurve({ ...p521_CURVE, Fp: Fp521, lowS: false, allowedPrivateKeyLengths: [130, 131, 132] }, sha512);\n/** Alias to p521. */\nexport const secp521r1 = p521;\n/** Hashing / encoding to p521 points / field. RFC 9380 methods. */\nexport const p521_hasher = /* @__PURE__ */ (() => {\n    return createHasher(p521.Point, createSWU(Fp521, {\n        A: p521_CURVE.a,\n        B: p521_CURVE.b,\n        Z: Fp521.create(BigInt('-4')),\n    }), {\n        DST: 'P521_XMD:SHA-512_SSWU_RO_',\n        encodeDST: 'P521_XMD:SHA-512_SSWU_NU_',\n        p: p521_CURVE.p,\n        m: 1,\n        k: 256,\n        expand: 'xmd',\n        hash: sha512,\n    });\n})();\n//# sourceMappingURL=nist.js.map","/**\n * NIST secp256r1 aka p256.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {} from \"./abstract/hash-to-curve.js\";\nimport { p256_hasher, p256 as p256n } from \"./nist.js\";\nexport const p256 = p256n;\nexport const secp256r1 = p256n;\nexport const hashToCurve = /* @__PURE__ */ (() => p256_hasher.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => p256_hasher.encodeToCurve)();\n//# sourceMappingURL=p256.js.map","/**\n * NIST secp384r1 aka p384.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {} from \"./abstract/hash-to-curve.js\";\nimport { p384_hasher, p384 as p384n } from \"./nist.js\";\nexport const p384 = p384n;\nexport const secp384r1 = p384n;\nexport const hashToCurve = /* @__PURE__ */ (() => p384_hasher.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => p384_hasher.encodeToCurve)();\n/** @deprecated Use `import { p384_hasher } from \"@noble/curves/nist\"` module. */\n//# sourceMappingURL=p384.js.map","/**\n * NIST secp521r1 aka p521.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {} from \"./abstract/hash-to-curve.js\";\nimport { p521_hasher, p521 as p521n } from \"./nist.js\";\nexport const p521 = p521n;\nexport const secp521r1 = p521n;\nexport const hashToCurve = /* @__PURE__ */ (() => p521_hasher.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => p521_hasher.encodeToCurve)();\n//# sourceMappingURL=p521.js.map","/**\n * SHA3 (keccak) hash function, based on a new \"Sponge function\" design.\n * Different from older hashes, the internal state is bigger than output size.\n *\n * Check out [FIPS-202](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf),\n * [Website](https://keccak.team/keccak.html),\n * [the differences between SHA-3 and Keccak](https://crypto.stackexchange.com/questions/15727/what-are-the-key-differences-between-the-draft-sha-3-standard-and-the-keccak-sub).\n *\n * Check out `sha3-addons` module for cSHAKE, k12, and others.\n * @module\n */\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from \"./_u64.js\";\n// prettier-ignore\nimport { abytes, aexists, anumber, aoutput, clean, createHasher, createXOFer, Hash, swap32IfBE, toBytes, u32 } from \"./utils.js\";\n// No __PURE__ annotations in sha3 header:\n// EVERYTHING is in fact used on every export.\n// Various per round constants calculations\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nconst SHA3_PI = [];\nconst SHA3_ROTL = [];\nconst _SHA3_IOTA = [];\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst IOTAS = split(_SHA3_IOTA, true);\nconst SHA3_IOTA_H = IOTAS[0];\nconst SHA3_IOTA_L = IOTAS[1];\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h, l, s) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n/** `keccakf1600` internal function, additionally allows to adjust round count. */\nexport function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    clean(B);\n}\n/** Keccak sponge function. */\nexport class Keccak extends Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        this.enableXOF = false;\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        // Can be passed from user as dkLen\n        anumber(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        // 0 < blockLen < 200\n        if (!(0 < blockLen && blockLen < 200))\n            throw new Error('only keccak-f1600 function is supported');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n    clone() {\n        return this._cloneInto();\n    }\n    keccak() {\n        swap32IfBE(this.state32);\n        keccakP(this.state32, this.rounds);\n        swap32IfBE(this.state32);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        aexists(this);\n        data = toBytes(data);\n        abytes(data);\n        const { blockLen, state } = this;\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        aexists(this, false);\n        abytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        anumber(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        aoutput(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        clean(this.state);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => createHasher(() => new Keccak(blockLen, suffix, outputLen));\n/** SHA3-224 hash function. */\nexport const sha3_224 = /* @__PURE__ */ (() => gen(0x06, 144, 224 / 8))();\n/** SHA3-256 hash function. Different from keccak-256. */\nexport const sha3_256 = /* @__PURE__ */ (() => gen(0x06, 136, 256 / 8))();\n/** SHA3-384 hash function. */\nexport const sha3_384 = /* @__PURE__ */ (() => gen(0x06, 104, 384 / 8))();\n/** SHA3-512 hash function. */\nexport const sha3_512 = /* @__PURE__ */ (() => gen(0x06, 72, 512 / 8))();\n/** keccak-224 hash function. */\nexport const keccak_224 = /* @__PURE__ */ (() => gen(0x01, 144, 224 / 8))();\n/** keccak-256 hash function. Different from SHA3-256. */\nexport const keccak_256 = /* @__PURE__ */ (() => gen(0x01, 136, 256 / 8))();\n/** keccak-384 hash function. */\nexport const keccak_384 = /* @__PURE__ */ (() => gen(0x01, 104, 384 / 8))();\n/** keccak-512 hash function. */\nexport const keccak_512 = /* @__PURE__ */ (() => gen(0x01, 72, 512 / 8))();\nconst genShake = (suffix, blockLen, outputLen) => createXOFer((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\n/** SHAKE128 XOF with 128-bit security. */\nexport const shake128 = /* @__PURE__ */ (() => genShake(0x1f, 168, 128 / 8))();\n/** SHAKE256 XOF with 256-bit security. */\nexport const shake256 = /* @__PURE__ */ (() => genShake(0x1f, 136, 256 / 8))();\n//# sourceMappingURL=sha3.js.map","/**\n * Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y².\n * For design rationale of types / exports, see weierstrass module documentation.\n * Untwisted Edwards curves exist, but they aren't used in real-world protocols.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { _validateObject, abool, abytes, aInRange, bytesToHex, bytesToNumberLE, concatBytes, ensureBytes, memoized, numberToBytesLE, randomBytes, } from \"../utils.js\";\nimport { _createCurveFields, normalizeZ, pippenger, wNAF, } from \"./curve.js\";\nimport { Field } from \"./modular.js\";\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\nfunction isEdValidXY(Fp, CURVE, x, y) {\n    const x2 = Fp.sqr(x);\n    const y2 = Fp.sqr(y);\n    const left = Fp.add(Fp.mul(CURVE.a, x2), y2);\n    const right = Fp.add(Fp.ONE, Fp.mul(CURVE.d, Fp.mul(x2, y2)));\n    return Fp.eql(left, right);\n}\nexport function edwards(CURVE, curveOpts = {}) {\n    const { Fp, Fn } = _createCurveFields('edwards', CURVE, curveOpts);\n    const { h: cofactor, n: CURVE_ORDER } = CURVE;\n    _validateObject(curveOpts, {}, { uvRatio: 'function' });\n    // Important:\n    // There are some places where Fp.BYTES is used instead of nByteLength.\n    // So far, everything has been tested with curves of Fp.BYTES == nByteLength.\n    // TODO: test and find curves which behave otherwise.\n    const MASK = _2n << (BigInt(Fn.BYTES * 8) - _1n);\n    const modP = (n) => Fp.create(n); // Function overrides\n    // sqrt(u/v)\n    const uvRatio = curveOpts.uvRatio ||\n        ((u, v) => {\n            try {\n                return { isValid: true, value: Fp.sqrt(Fp.div(u, v)) };\n            }\n            catch (e) {\n                return { isValid: false, value: _0n };\n            }\n        });\n    // Validate whether the passed curve params are valid.\n    // equation ax² + y² = 1 + dx²y² should work for generator point.\n    if (!isEdValidXY(Fp, CURVE, CURVE.Gx, CURVE.Gy))\n        throw new Error('bad curve params: generator point');\n    /**\n     * Asserts coordinate is valid: 0 <= n < MASK.\n     * Coordinates >= Fp.ORDER are allowed for zip215.\n     */\n    function acoord(title, n, banZero = false) {\n        const min = banZero ? _1n : _0n;\n        aInRange('coordinate ' + title, n, min, MASK);\n        return n;\n    }\n    function aextpoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ExtendedPoint expected');\n    }\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    const toAffineMemo = memoized((p, iz) => {\n        const { ex: x, ey: y, ez: z } = p;\n        const is0 = p.is0();\n        if (iz == null)\n            iz = is0 ? _8n : Fp.inv(z); // 8 was chosen arbitrarily\n        const ax = modP(x * iz);\n        const ay = modP(y * iz);\n        const zz = modP(z * iz);\n        if (is0)\n            return { x: _0n, y: _1n };\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return { x: ax, y: ay };\n    });\n    const assertValidMemo = memoized((p) => {\n        const { a, d } = CURVE;\n        if (p.is0())\n            throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n        // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n        // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n        const { ex: X, ey: Y, ez: Z, et: T } = p;\n        const X2 = modP(X * X); // X²\n        const Y2 = modP(Y * Y); // Y²\n        const Z2 = modP(Z * Z); // Z²\n        const Z4 = modP(Z2 * Z2); // Z⁴\n        const aX2 = modP(X2 * a); // aX²\n        const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n        const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n        if (left !== right)\n            throw new Error('bad point: equation left != right (1)');\n        // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n        const XY = modP(X * Y);\n        const ZT = modP(Z * T);\n        if (XY !== ZT)\n            throw new Error('bad point: equation left != right (2)');\n        return true;\n    });\n    // Extended Point works in extended coordinates: (X, Y, Z, T) ∋ (x=X/Z, y=Y/Z, T=xy).\n    // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n    class Point {\n        constructor(ex, ey, ez, et) {\n            this.ex = acoord('x', ex);\n            this.ey = acoord('y', ey);\n            this.ez = acoord('z', ez, true);\n            this.et = acoord('t', et);\n            Object.freeze(this);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        static fromAffine(p) {\n            if (p instanceof Point)\n                throw new Error('extended point not allowed');\n            const { x, y } = p || {};\n            acoord('x', x);\n            acoord('y', y);\n            return new Point(x, y, _1n, modP(x * y));\n        }\n        static normalizeZ(points) {\n            return normalizeZ(Point, 'ez', points);\n        }\n        // Multiscalar Multiplication\n        static msm(points, scalars) {\n            return pippenger(Point, Fn, points, scalars);\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this.precompute(windowSize);\n        }\n        precompute(windowSize = 8, isLazy = true) {\n            wnaf.setWindowSize(this, windowSize);\n            if (!isLazy)\n                this.multiply(_2n); // random number\n            return this;\n        }\n        // Not required for fromHex(), which always creates valid points.\n        // Could be useful for fromAffine().\n        assertValidity() {\n            assertValidMemo(this);\n        }\n        // Compare one point to another.\n        equals(other) {\n            aextpoint(other);\n            const { ex: X1, ey: Y1, ez: Z1 } = this;\n            const { ex: X2, ey: Y2, ez: Z2 } = other;\n            const X1Z2 = modP(X1 * Z2);\n            const X2Z1 = modP(X2 * Z1);\n            const Y1Z2 = modP(Y1 * Z2);\n            const Y2Z1 = modP(Y2 * Z1);\n            return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        negate() {\n            // Flips point sign to a negative one (-x, y in affine coords)\n            return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n        }\n        // Fast algo for doubling Extended Point.\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n        // Cost: 4M + 4S + 1*a + 6add + 1*2.\n        double() {\n            const { a } = CURVE;\n            const { ex: X1, ey: Y1, ez: Z1 } = this;\n            const A = modP(X1 * X1); // A = X12\n            const B = modP(Y1 * Y1); // B = Y12\n            const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n            const D = modP(a * A); // D = a*A\n            const x1y1 = X1 + Y1;\n            const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n            const G = D + B; // G = D+B\n            const F = G - C; // F = G-C\n            const H = D - B; // H = D-B\n            const X3 = modP(E * F); // X3 = E*F\n            const Y3 = modP(G * H); // Y3 = G*H\n            const T3 = modP(E * H); // T3 = E*H\n            const Z3 = modP(F * G); // Z3 = F*G\n            return new Point(X3, Y3, Z3, T3);\n        }\n        // Fast algo for adding 2 Extended Points.\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n        // Cost: 9M + 1*a + 1*d + 7add.\n        add(other) {\n            aextpoint(other);\n            const { a, d } = CURVE;\n            const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n            const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n            const A = modP(X1 * X2); // A = X1*X2\n            const B = modP(Y1 * Y2); // B = Y1*Y2\n            const C = modP(T1 * d * T2); // C = T1*d*T2\n            const D = modP(Z1 * Z2); // D = Z1*Z2\n            const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n            const F = D - C; // F = D-C\n            const G = D + C; // G = D+C\n            const H = modP(B - a * A); // H = B-a*A\n            const X3 = modP(E * F); // X3 = E*F\n            const Y3 = modP(G * H); // Y3 = G*H\n            const T3 = modP(E * H); // T3 = E*H\n            const Z3 = modP(F * G); // Z3 = F*G\n            return new Point(X3, Y3, Z3, T3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        // Constant-time multiplication.\n        multiply(scalar) {\n            const n = scalar;\n            aInRange('scalar', n, _1n, CURVE_ORDER); // 1 <= scalar < L\n            const { p, f } = wnaf.wNAFCached(this, n, Point.normalizeZ);\n            return Point.normalizeZ([p, f])[0];\n        }\n        // Non-constant-time multiplication. Uses double-and-add algorithm.\n        // It's faster, but should only be used when you don't care about\n        // an exposed private key e.g. sig verification.\n        // Does NOT allow scalars higher than CURVE.n.\n        // Accepts optional accumulator to merge with multiply (important for sparse scalars)\n        multiplyUnsafe(scalar, acc = Point.ZERO) {\n            const n = scalar;\n            aInRange('scalar', n, _0n, CURVE_ORDER); // 0 <= scalar < L\n            if (n === _0n)\n                return Point.ZERO;\n            if (this.is0() || n === _1n)\n                return this;\n            return wnaf.wNAFCachedUnsafe(this, n, Point.normalizeZ, acc);\n        }\n        // Checks if point is of small order.\n        // If you add something to small order point, you will have \"dirty\"\n        // point with torsion component.\n        // Multiplies point by cofactor and checks if the result is 0.\n        isSmallOrder() {\n            return this.multiplyUnsafe(cofactor).is0();\n        }\n        // Multiplies point by curve order and checks if the result is 0.\n        // Returns `false` is the point is dirty.\n        isTorsionFree() {\n            return wnaf.wNAFCachedUnsafe(this, CURVE_ORDER).is0();\n        }\n        // Converts Extended point to default (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        toAffine(invertedZ) {\n            return toAffineMemo(this, invertedZ);\n        }\n        clearCofactor() {\n            if (cofactor === _1n)\n                return this;\n            return this.multiplyUnsafe(cofactor);\n        }\n        static fromBytes(bytes, zip215 = false) {\n            abytes(bytes);\n            return this.fromHex(bytes, zip215);\n        }\n        // Converts hash string or Uint8Array to Point.\n        // Uses algo from RFC8032 5.1.3.\n        static fromHex(hex, zip215 = false) {\n            const { d, a } = CURVE;\n            const len = Fp.BYTES;\n            hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n            abool('zip215', zip215);\n            const normed = hex.slice(); // copy again, we'll manipulate it\n            const lastByte = hex[len - 1]; // select last byte\n            normed[len - 1] = lastByte & ~0x80; // clear last bit\n            const y = bytesToNumberLE(normed);\n            // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n            // RFC8032 prohibits >= p, but ZIP215 doesn't\n            // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n            // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n            const max = zip215 ? MASK : Fp.ORDER;\n            aInRange('pointHex.y', y, _0n, max);\n            // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n            // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n            const y2 = modP(y * y); // denominator is always non-0 mod p.\n            const u = modP(y2 - _1n); // u = y² - 1\n            const v = modP(d * y2 - a); // v = d y² + 1.\n            let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n            if (!isValid)\n                throw new Error('Point.fromHex: invalid y coordinate');\n            const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n            const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n            if (!zip215 && x === _0n && isLastByteOdd)\n                // if x=0 and x_0 = 1, fail\n                throw new Error('Point.fromHex: x=0 and x_0=1');\n            if (isLastByteOdd !== isXOdd)\n                x = modP(-x); // if x_0 != x mod 2, set x = p-x\n            return Point.fromAffine({ x, y });\n        }\n        static fromPrivateScalar(scalar) {\n            return Point.BASE.multiply(scalar);\n        }\n        toBytes() {\n            const { x, y } = this.toAffine();\n            const bytes = numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n            bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n            return bytes; // and use the last byte to encode sign of x\n        }\n        /** @deprecated use `toBytes` */\n        toRawBytes() {\n            return this.toBytes();\n        }\n        toHex() {\n            return bytesToHex(this.toBytes());\n        }\n        toString() {\n            return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\n        }\n    }\n    // base / generator point\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    // zero / infinity / identity point\n    Point.ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n    // fields\n    Point.Fp = Fp;\n    Point.Fn = Fn;\n    const wnaf = wNAF(Point, Fn.BYTES * 8); // Fn.BITS?\n    return Point;\n}\n/**\n * Initializes EdDSA signatures over given Edwards curve.\n */\nexport function eddsa(Point, eddsaOpts) {\n    _validateObject(eddsaOpts, {\n        hash: 'function',\n    }, {\n        adjustScalarBytes: 'function',\n        randomBytes: 'function',\n        domain: 'function',\n        prehash: 'function',\n        mapToCurve: 'function',\n    });\n    const { prehash, hash: cHash } = eddsaOpts;\n    const { BASE: G, Fp, Fn } = Point;\n    const CURVE_ORDER = Fn.ORDER;\n    const randomBytes_ = eddsaOpts.randomBytes || randomBytes;\n    const adjustScalarBytes = eddsaOpts.adjustScalarBytes || ((bytes) => bytes); // NOOP\n    const domain = eddsaOpts.domain ||\n        ((data, ctx, phflag) => {\n            abool('phflag', phflag);\n            if (ctx.length || phflag)\n                throw new Error('Contexts/pre-hash are not supported');\n            return data;\n        }); // NOOP\n    function modN(a) {\n        return Fn.create(a);\n    }\n    // Little-endian SHA512 with modulo n\n    function modN_LE(hash) {\n        // Not using Fn.fromBytes: hash can be 2*Fn.BYTES\n        return modN(bytesToNumberLE(hash));\n    }\n    // Get the hashed private scalar per RFC8032 5.1.5\n    function getPrivateScalar(key) {\n        const len = Fp.BYTES;\n        key = ensureBytes('private key', key, len);\n        // Hash private key with curve's hash function to produce uniformingly random input\n        // Check byte lengths: ensure(64, h(ensure(32, key)))\n        const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n        const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n        const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n        const scalar = modN_LE(head); // The actual private scalar\n        return { head, prefix, scalar };\n    }\n    // Convenience method that creates public key from scalar. RFC8032 5.1.5\n    function getExtendedPublicKey(key) {\n        const { head, prefix, scalar } = getPrivateScalar(key);\n        const point = G.multiply(scalar); // Point on Edwards curve aka public key\n        const pointBytes = point.toBytes();\n        return { head, prefix, scalar, point, pointBytes };\n    }\n    // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n    function getPublicKey(privKey) {\n        return getExtendedPublicKey(privKey).pointBytes;\n    }\n    // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n    function hashDomainToScalar(context = Uint8Array.of(), ...msgs) {\n        const msg = concatBytes(...msgs);\n        return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n    }\n    /** Signs message with privateKey. RFC8032 5.1.6 */\n    function sign(msg, privKey, options = {}) {\n        msg = ensureBytes('message', msg);\n        if (prehash)\n            msg = prehash(msg); // for ed25519ph etc.\n        const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n        const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n        const R = G.multiply(r).toBytes(); // R = rG\n        const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n        const s = modN(r + k * scalar); // S = (r + k * s) mod L\n        aInRange('signature.s', s, _0n, CURVE_ORDER); // 0 <= s < l\n        const L = Fp.BYTES;\n        const res = concatBytes(R, numberToBytesLE(s, L));\n        return ensureBytes('result', res, L * 2); // 64-byte signature\n    }\n    const verifyOpts = VERIFY_DEFAULT;\n    /**\n     * Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n     * An extended group equation is checked.\n     */\n    function verify(sig, msg, publicKey, options = verifyOpts) {\n        const { context, zip215 } = options;\n        const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n        sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n        msg = ensureBytes('message', msg);\n        publicKey = ensureBytes('publicKey', publicKey, len);\n        if (zip215 !== undefined)\n            abool('zip215', zip215);\n        if (prehash)\n            msg = prehash(msg); // for ed25519ph, etc\n        const s = bytesToNumberLE(sig.slice(len, 2 * len));\n        let A, R, SB;\n        try {\n            // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n            // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n            // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n            A = Point.fromHex(publicKey, zip215);\n            R = Point.fromHex(sig.slice(0, len), zip215);\n            SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n        }\n        catch (error) {\n            return false;\n        }\n        if (!zip215 && A.isSmallOrder())\n            return false;\n        const k = hashDomainToScalar(context, R.toBytes(), A.toBytes(), msg);\n        const RkA = R.add(A.multiplyUnsafe(k));\n        // Extended group equation\n        // [8][S]B = [8]R + [8][k]A'\n        return RkA.subtract(SB).clearCofactor().is0();\n    }\n    G.precompute(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n    const utils = {\n        getExtendedPublicKey,\n        /** ed25519 priv keys are uniform 32b. No need to check for modulo bias, like in secp256k1. */\n        randomPrivateKey: () => randomBytes_(Fp.BYTES),\n        /**\n         * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n         * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n         * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n         * @param windowSize 2, 4, 8, 16\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            return point.precompute(windowSize, false);\n        },\n    };\n    return { getPublicKey, sign, verify, utils, Point };\n}\nfunction _eddsa_legacy_opts_to_new(c) {\n    const CURVE = {\n        a: c.a,\n        d: c.d,\n        p: c.Fp.ORDER,\n        n: c.n,\n        h: c.h,\n        Gx: c.Gx,\n        Gy: c.Gy,\n    };\n    const Fp = c.Fp;\n    const Fn = Field(CURVE.n, c.nBitLength, true);\n    const curveOpts = { Fp, Fn, uvRatio: c.uvRatio };\n    const eddsaOpts = {\n        hash: c.hash,\n        randomBytes: c.randomBytes,\n        adjustScalarBytes: c.adjustScalarBytes,\n        domain: c.domain,\n        prehash: c.prehash,\n        mapToCurve: c.mapToCurve,\n    };\n    return { CURVE, curveOpts, eddsaOpts };\n}\nfunction _eddsa_new_output_to_legacy(c, eddsa) {\n    const legacy = Object.assign({}, eddsa, { ExtendedPoint: eddsa.Point, CURVE: c });\n    return legacy;\n}\n// TODO: remove. Use eddsa\nexport function twistedEdwards(c) {\n    const { CURVE, curveOpts, eddsaOpts } = _eddsa_legacy_opts_to_new(c);\n    const Point = edwards(CURVE, curveOpts);\n    const EDDSA = eddsa(Point, eddsaOpts);\n    return _eddsa_new_output_to_legacy(c, EDDSA);\n}\n//# sourceMappingURL=edwards.js.map","/**\n * Montgomery curve methods. It's not really whole montgomery curve,\n * just bunch of very specific methods for X25519 / X448 from\n * [RFC 7748](https://www.rfc-editor.org/rfc/rfc7748)\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { _validateObject, aInRange, bytesToNumberLE, ensureBytes, numberToBytesLE, randomBytes, } from \"../utils.js\";\nimport { mod } from \"./modular.js\";\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nfunction validateOpts(curve) {\n    _validateObject(curve, {\n        adjustScalarBytes: 'function',\n        powPminus2: 'function',\n    });\n    return Object.freeze({ ...curve });\n}\nexport function montgomery(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { P, type, adjustScalarBytes, powPminus2, randomBytes: rand } = CURVE;\n    const is25519 = type === 'x25519';\n    if (!is25519 && type !== 'x448')\n        throw new Error('invalid type');\n    const randomBytes_ = rand || randomBytes;\n    const montgomeryBits = is25519 ? 255 : 448;\n    const fieldLen = is25519 ? 32 : 56;\n    const Gu = is25519 ? BigInt(9) : BigInt(5);\n    // RFC 7748 #5:\n    // The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519 and\n    // (156326 - 2) / 4 = 39081 for curve448/X448\n    // const a = is25519 ? 156326n : 486662n;\n    const a24 = is25519 ? BigInt(121665) : BigInt(39081);\n    // RFC: x25519 \"the resulting integer is of the form 2^254 plus\n    // eight times a value between 0 and 2^251 - 1 (inclusive)\"\n    // x448: \"2^447 plus four times a value between 0 and 2^445 - 1 (inclusive)\"\n    const minScalar = is25519 ? _2n ** BigInt(254) : _2n ** BigInt(447);\n    const maxAdded = is25519\n        ? BigInt(8) * _2n ** BigInt(251) - _1n\n        : BigInt(4) * _2n ** BigInt(445) - _1n;\n    const maxScalar = minScalar + maxAdded + _1n; // (inclusive)\n    const modP = (n) => mod(n, P);\n    const GuBytes = encodeU(Gu);\n    function encodeU(u) {\n        return numberToBytesLE(modP(u), fieldLen);\n    }\n    function decodeU(u) {\n        const _u = ensureBytes('u coordinate', u, fieldLen);\n        // RFC: When receiving such an array, implementations of X25519\n        // (but not X448) MUST mask the most significant bit in the final byte.\n        if (is25519)\n            _u[31] &= 127; // 0b0111_1111\n        // RFC: Implementations MUST accept non-canonical values and process them as\n        // if they had been reduced modulo the field prime.  The non-canonical\n        // values are 2^255 - 19 through 2^255 - 1 for X25519 and 2^448 - 2^224\n        // - 1 through 2^448 - 1 for X448.\n        return modP(bytesToNumberLE(_u));\n    }\n    function decodeScalar(scalar) {\n        return bytesToNumberLE(adjustScalarBytes(ensureBytes('scalar', scalar, fieldLen)));\n    }\n    function scalarMult(scalar, u) {\n        const pu = montgomeryLadder(decodeU(u), decodeScalar(scalar));\n        // Some public keys are useless, of low-order. Curve author doesn't think\n        // it needs to be validated, but we do it nonetheless.\n        // https://cr.yp.to/ecdh.html#validate\n        if (pu === _0n)\n            throw new Error('invalid private or public key received');\n        return encodeU(pu);\n    }\n    // Computes public key from private. By doing scalar multiplication of base point.\n    function scalarMultBase(scalar) {\n        return scalarMult(scalar, GuBytes);\n    }\n    // cswap from RFC7748 \"example code\"\n    function cswap(swap, x_2, x_3) {\n        // dummy = mask(swap) AND (x_2 XOR x_3)\n        // Where mask(swap) is the all-1 or all-0 word of the same length as x_2\n        // and x_3, computed, e.g., as mask(swap) = 0 - swap.\n        const dummy = modP(swap * (x_2 - x_3));\n        x_2 = modP(x_2 - dummy); // x_2 = x_2 XOR dummy\n        x_3 = modP(x_3 + dummy); // x_3 = x_3 XOR dummy\n        return { x_2, x_3 };\n    }\n    /**\n     * Montgomery x-only multiplication ladder.\n     * @param pointU u coordinate (x) on Montgomery Curve 25519\n     * @param scalar by which the point would be multiplied\n     * @returns new Point on Montgomery curve\n     */\n    function montgomeryLadder(u, scalar) {\n        aInRange('u', u, _0n, P);\n        aInRange('scalar', scalar, minScalar, maxScalar);\n        const k = scalar;\n        const x_1 = u;\n        let x_2 = _1n;\n        let z_2 = _0n;\n        let x_3 = u;\n        let z_3 = _1n;\n        let swap = _0n;\n        for (let t = BigInt(montgomeryBits - 1); t >= _0n; t--) {\n            const k_t = (k >> t) & _1n;\n            swap ^= k_t;\n            ({ x_2, x_3 } = cswap(swap, x_2, x_3));\n            ({ x_2: z_2, x_3: z_3 } = cswap(swap, z_2, z_3));\n            swap = k_t;\n            const A = x_2 + z_2;\n            const AA = modP(A * A);\n            const B = x_2 - z_2;\n            const BB = modP(B * B);\n            const E = AA - BB;\n            const C = x_3 + z_3;\n            const D = x_3 - z_3;\n            const DA = modP(D * A);\n            const CB = modP(C * B);\n            const dacb = DA + CB;\n            const da_cb = DA - CB;\n            x_3 = modP(dacb * dacb);\n            z_3 = modP(x_1 * modP(da_cb * da_cb));\n            x_2 = modP(AA * BB);\n            z_2 = modP(E * (AA + modP(a24 * E)));\n        }\n        ({ x_2, x_3 } = cswap(swap, x_2, x_3));\n        ({ x_2: z_2, x_3: z_3 } = cswap(swap, z_2, z_3));\n        const z2 = powPminus2(z_2); // `Fp.pow(x, P - _2n)` is much slower equivalent\n        return modP(x_2 * z2); // Return x_2 * (z_2^(p - 2))\n    }\n    return {\n        scalarMult,\n        scalarMultBase,\n        getSharedSecret: (privateKey, publicKey) => scalarMult(privateKey, publicKey),\n        getPublicKey: (privateKey) => scalarMultBase(privateKey),\n        utils: { randomPrivateKey: () => randomBytes_(fieldLen) },\n        GuBytes: GuBytes.slice(),\n    };\n}\n//# sourceMappingURL=montgomery.js.map","/**\n * Edwards448 (not Ed448-Goldilocks) curve with following addons:\n * - X448 ECDH\n * - Decaf cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n * Conforms to RFC 8032 https://www.rfc-editor.org/rfc/rfc8032.html#section-5.2\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { shake256 } from '@noble/hashes/sha3.js';\nimport { abytes, concatBytes, utf8ToBytes, createHasher as wrapConstructor, } from '@noble/hashes/utils.js';\nimport { pippenger } from \"./abstract/curve.js\";\nimport { edwards, twistedEdwards, } from \"./abstract/edwards.js\";\nimport { createHasher, expand_message_xof, } from \"./abstract/hash-to-curve.js\";\nimport { Field, FpInvertBatch, isNegativeLE, mod, pow2 } from \"./abstract/modular.js\";\nimport { montgomery } from \"./abstract/montgomery.js\";\nimport { bytesToHex, bytesToNumberLE, ensureBytes, equalBytes, numberToBytesLE, } from \"./utils.js\";\n// a = 1n\n// d = Fp.neg(39081n)\n// Finite field 2n**448n - 2n**224n - 1n\n// Subgroup order\n// 2n**446n - 13818066809895115352007386748515426880336692474882178609894547503885n\nconst ed448_CURVE = {\n    p: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffff'),\n    n: BigInt('0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffff7cca23e9c44edb49aed63690216cc2728dc58f552378c292ab5844f3'),\n    h: BigInt(4),\n    a: BigInt(1),\n    d: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffffffffffffffffffffffffffffffffffffffffffffffff6756'),\n    Gx: BigInt('0x4f1970c66bed0ded221d15a622bf36da9e146570470f1767ea6de324a3d3a46412ae1af72ab66511433b80e18b00938e2626a82bc70cc05e'),\n    Gy: BigInt('0x693f46716eb6bc248876203756c9c7624bea73736ca3984087789c1e05a0c2d73ad3ff1ce67c39c4fdbd132c4ed7c8ad9808795bf230fa14'),\n};\n// E448 != Edwards448 used in ed448\n// E448 is defined by NIST\n// It's birationally equivalent to edwards448\n// d = 39082/39081\n// Gx = 3/2\nconst E448_CURVE = Object.assign({}, ed448_CURVE, {\n    d: BigInt('0xd78b4bdc7f0daf19f24f38c29373a2ccad46157242a50f37809b1da3412a12e79ccc9c81264cfe9ad080997058fb61c4243cc32dbaa156b9'),\n    Gx: BigInt('0x79a70b2b70400553ae7c9df416c792c61128751ac92969240c25a07d728bdc93e21f7787ed6972249de732f38496cd11698713093e9c04fc'),\n    Gy: BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffff80000000000000000000000000000000000000000000000000000001'),\n});\nexport const E448 = edwards(E448_CURVE);\nconst shake256_114 = /* @__PURE__ */ wrapConstructor(() => shake256.create({ dkLen: 114 }));\nconst shake256_64 = /* @__PURE__ */ wrapConstructor(() => shake256.create({ dkLen: 64 }));\n// prettier-ignore\nconst _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4), _11n = BigInt(11);\n// prettier-ignore\nconst _22n = BigInt(22), _44n = BigInt(44), _88n = BigInt(88), _223n = BigInt(223);\n// powPminus3div4 calculates z = x^k mod p, where k = (p-3)/4.\n// Used for efficient square root calculation.\n// ((P-3)/4).toString(2) would produce bits [223x 1, 0, 222x 1]\nfunction ed448_pow_Pminus3div4(x) {\n    const P = ed448_CURVE.p;\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b222 = (pow2(b220, _2n, P) * b2) % P;\n    const b223 = (pow2(b222, _1n, P) * x) % P;\n    return (pow2(b223, _223n, P) * b222) % P;\n}\nfunction adjustScalarBytes(bytes) {\n    // Section 5: Likewise, for X448, set the two least significant bits of the first byte to 0, and the most\n    // significant bit of the last byte to 1.\n    bytes[0] &= 252; // 0b11111100\n    // and the most significant bit of the last byte to 1.\n    bytes[55] |= 128; // 0b10000000\n    // NOTE: is is NOOP for 56 bytes scalars (X25519/X448)\n    bytes[56] = 0; // Byte outside of group (456 buts vs 448 bits)\n    return bytes;\n}\n// Constant-time ratio of u to v. Allows to combine inversion and square root u/√v.\n// Uses algo from RFC8032 5.1.3.\nfunction uvRatio(u, v) {\n    const P = ed448_CURVE.p;\n    // https://www.rfc-editor.org/rfc/rfc8032#section-5.2.3\n    // To compute the square root of (u/v), the first step is to compute the\n    //   candidate root x = (u/v)^((p+1)/4).  This can be done using the\n    // following trick, to use a single modular powering for both the\n    // inversion of v and the square root:\n    // x = (u/v)^((p+1)/4)   = u³v(u⁵v³)^((p-3)/4)   (mod p)\n    const u2v = mod(u * u * v, P); // u²v\n    const u3v = mod(u2v * u, P); // u³v\n    const u5v3 = mod(u3v * u2v * v, P); // u⁵v³\n    const root = ed448_pow_Pminus3div4(u5v3);\n    const x = mod(u3v * root, P);\n    // Verify that root is exists\n    const x2 = mod(x * x, P); // x²\n    // If vx² = u, the recovered x-coordinate is x.  Otherwise, no\n    // square root exists, and the decoding fails.\n    return { isValid: mod(x2 * v, P) === u, value: x };\n}\n// Finite field 2n**448n - 2n**224n - 1n\nconst Fp = /* @__PURE__ */ (() => Field(ed448_CURVE.p, 456, true))();\n// RFC 7748 has 56-byte keys, RFC 8032 has 57-byte keys\n// SHAKE256(dom4(phflag,context)||x, 114)\nconst ED448_DEF = /* @__PURE__ */ (() => ({\n    ...ed448_CURVE,\n    Fp,\n    nBitLength: 456,\n    hash: shake256_114,\n    adjustScalarBytes,\n    // dom4\n    domain: (data, ctx, phflag) => {\n        if (ctx.length > 255)\n            throw new Error('context must be smaller than 255, got: ' + ctx.length);\n        return concatBytes(utf8ToBytes('SigEd448'), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);\n    },\n    uvRatio,\n}))();\n/**\n * ed448 EdDSA curve and methods.\n * @example\n * import { ed448 } from '@noble/curves/ed448';\n * const priv = ed448.utils.randomPrivateKey();\n * const pub = ed448.getPublicKey(priv);\n * const msg = new TextEncoder().encode('whatsup');\n * const sig = ed448.sign(msg, priv);\n * ed448.verify(sig, msg, pub);\n */\nexport const ed448 = twistedEdwards(ED448_DEF);\n// NOTE: there is no ed448ctx, since ed448 supports ctx by default\nexport const ed448ph = /* @__PURE__ */ (() => twistedEdwards({\n    ...ED448_DEF,\n    prehash: shake256_64,\n}))();\n/**\n * ECDH using curve448 aka x448.\n * x448 has 56-byte keys as per RFC 7748, while\n * ed448 has 57-byte keys as per RFC 8032.\n */\nexport const x448 = /* @__PURE__ */ (() => {\n    const P = ed448_CURVE.p;\n    return montgomery({\n        P,\n        type: 'x448',\n        powPminus2: (x) => {\n            const Pminus3div4 = ed448_pow_Pminus3div4(x);\n            const Pminus3 = pow2(Pminus3div4, _2n, P);\n            return mod(Pminus3 * x, P); // Pminus3 * x = Pminus2\n        },\n        adjustScalarBytes,\n    });\n})();\n/**\n * Converts edwards448 public key to x448 public key. Uses formula:\n * * `(u, v) = ((y-1)/(y+1), sqrt(156324)*u/x)`\n * * `(x, y) = (sqrt(156324)*u/v, (1+u)/(1-u))`\n * @example\n *   const aPub = ed448.getPublicKey(utils.randomPrivateKey());\n *   x448.getSharedSecret(edwardsToMontgomery(aPub), edwardsToMontgomery(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub) {\n    const bpub = ensureBytes('pub', edwardsPub);\n    const { y } = ed448.Point.fromHex(bpub);\n    const _1n = BigInt(1);\n    return Fp.toBytes(Fp.create((y - _1n) * Fp.inv(y + _1n)));\n}\nexport const edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n// TODO: add edwardsToMontgomeryPriv, similar to ed25519 version\n// Hash To Curve Elligator2 Map\nconst ELL2_C1 = /* @__PURE__ */ (() => (Fp.ORDER - BigInt(3)) / BigInt(4))(); // 1. c1 = (q - 3) / 4         # Integer arithmetic\nconst ELL2_J = /* @__PURE__ */ BigInt(156326);\nfunction map_to_curve_elligator2_curve448(u) {\n    let tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    let e1 = Fp.eql(tv1, Fp.ONE); // 2.   e1 = tv1 == 1\n    tv1 = Fp.cmov(tv1, Fp.ZERO, e1); // 3.  tv1 = CMOV(tv1, 0, e1)  # If Z * u^2 == -1, set tv1 = 0\n    let xd = Fp.sub(Fp.ONE, tv1); // 4.   xd = 1 - tv1\n    let x1n = Fp.neg(ELL2_J); // 5.  x1n = -J\n    let tv2 = Fp.sqr(xd); // 6.  tv2 = xd^2\n    let gxd = Fp.mul(tv2, xd); // 7.  gxd = tv2 * xd          # gxd = xd^3\n    let gx1 = Fp.mul(tv1, Fp.neg(ELL2_J)); // 8.  gx1 = -J * tv1          # x1n + J * xd\n    gx1 = Fp.mul(gx1, x1n); // 9.  gx1 = gx1 * x1n         # x1n^2 + J * x1n * xd\n    gx1 = Fp.add(gx1, tv2); // 10. gx1 = gx1 + tv2         # x1n^2 + J * x1n * xd + xd^2\n    gx1 = Fp.mul(gx1, x1n); // 11. gx1 = gx1 * x1n         # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n    let tv3 = Fp.sqr(gxd); // 12. tv3 = gxd^2\n    tv2 = Fp.mul(gx1, gxd); // 13. tv2 = gx1 * gxd         # gx1 * gxd\n    tv3 = Fp.mul(tv3, tv2); // 14. tv3 = tv3 * tv2         # gx1 * gxd^3\n    let y1 = Fp.pow(tv3, ELL2_C1); // 15.  y1 = tv3^c1            # (gx1 * gxd^3)^((p - 3) / 4)\n    y1 = Fp.mul(y1, tv2); // 16.  y1 = y1 * tv2          # gx1 * gxd * (gx1 * gxd^3)^((p - 3) / 4)\n    let x2n = Fp.mul(x1n, Fp.neg(tv1)); // 17. x2n = -tv1 * x1n        # x2 = x2n / xd = -1 * u^2 * x1n / xd\n    let y2 = Fp.mul(y1, u); // 18.  y2 = y1 * u\n    y2 = Fp.cmov(y2, Fp.ZERO, e1); // 19.  y2 = CMOV(y2, 0, e1)\n    tv2 = Fp.sqr(y1); // 20. tv2 = y1^2\n    tv2 = Fp.mul(tv2, gxd); // 21. tv2 = tv2 * gxd\n    let e2 = Fp.eql(tv2, gx1); // 22.  e2 = tv2 == gx1\n    let xn = Fp.cmov(x2n, x1n, e2); // 23.  xn = CMOV(x2n, x1n, e2)  # If e2, x = x1, else x = x2\n    let y = Fp.cmov(y2, y1, e2); // 24.   y = CMOV(y2, y1, e2)    # If e2, y = y1, else y = y2\n    let e3 = Fp.isOdd(y); // 25.  e3 = sgn0(y) == 1        # Fix sign of y\n    y = Fp.cmov(y, Fp.neg(y), e2 !== e3); // 26.   y = CMOV(y, -y, e2 XOR e3)\n    return { xn, xd, yn: y, yd: Fp.ONE }; // 27. return (xn, xd, y, 1)\n}\nfunction map_to_curve_elligator2_edwards448(u) {\n    let { xn, xd, yn, yd } = map_to_curve_elligator2_curve448(u); // 1. (xn, xd, yn, yd) = map_to_curve_elligator2_curve448(u)\n    let xn2 = Fp.sqr(xn); // 2.  xn2 = xn^2\n    let xd2 = Fp.sqr(xd); // 3.  xd2 = xd^2\n    let xd4 = Fp.sqr(xd2); // 4.  xd4 = xd2^2\n    let yn2 = Fp.sqr(yn); // 5.  yn2 = yn^2\n    let yd2 = Fp.sqr(yd); // 6.  yd2 = yd^2\n    let xEn = Fp.sub(xn2, xd2); // 7.  xEn = xn2 - xd2\n    let tv2 = Fp.sub(xEn, xd2); // 8.  tv2 = xEn - xd2\n    xEn = Fp.mul(xEn, xd2); // 9.  xEn = xEn * xd2\n    xEn = Fp.mul(xEn, yd); // 10. xEn = xEn * yd\n    xEn = Fp.mul(xEn, yn); // 11. xEn = xEn * yn\n    xEn = Fp.mul(xEn, _4n); // 12. xEn = xEn * 4\n    tv2 = Fp.mul(tv2, xn2); // 13. tv2 = tv2 * xn2\n    tv2 = Fp.mul(tv2, yd2); // 14. tv2 = tv2 * yd2\n    let tv3 = Fp.mul(yn2, _4n); // 15. tv3 = 4 * yn2\n    let tv1 = Fp.add(tv3, yd2); // 16. tv1 = tv3 + yd2\n    tv1 = Fp.mul(tv1, xd4); // 17. tv1 = tv1 * xd4\n    let xEd = Fp.add(tv1, tv2); // 18. xEd = tv1 + tv2\n    tv2 = Fp.mul(tv2, xn); // 19. tv2 = tv2 * xn\n    let tv4 = Fp.mul(xn, xd4); // 20. tv4 = xn * xd4\n    let yEn = Fp.sub(tv3, yd2); // 21. yEn = tv3 - yd2\n    yEn = Fp.mul(yEn, tv4); // 22. yEn = yEn * tv4\n    yEn = Fp.sub(yEn, tv2); // 23. yEn = yEn - tv2\n    tv1 = Fp.add(xn2, xd2); // 24. tv1 = xn2 + xd2\n    tv1 = Fp.mul(tv1, xd2); // 25. tv1 = tv1 * xd2\n    tv1 = Fp.mul(tv1, xd); // 26. tv1 = tv1 * xd\n    tv1 = Fp.mul(tv1, yn2); // 27. tv1 = tv1 * yn2\n    tv1 = Fp.mul(tv1, BigInt(-2)); // 28. tv1 = -2 * tv1\n    let yEd = Fp.add(tv2, tv1); // 29. yEd = tv2 + tv1\n    tv4 = Fp.mul(tv4, yd2); // 30. tv4 = tv4 * yd2\n    yEd = Fp.add(yEd, tv4); // 31. yEd = yEd + tv4\n    tv1 = Fp.mul(xEd, yEd); // 32. tv1 = xEd * yEd\n    let e = Fp.eql(tv1, Fp.ZERO); // 33.   e = tv1 == 0\n    xEn = Fp.cmov(xEn, Fp.ZERO, e); // 34. xEn = CMOV(xEn, 0, e)\n    xEd = Fp.cmov(xEd, Fp.ONE, e); // 35. xEd = CMOV(xEd, 1, e)\n    yEn = Fp.cmov(yEn, Fp.ONE, e); // 36. yEn = CMOV(yEn, 1, e)\n    yEd = Fp.cmov(yEd, Fp.ONE, e); // 37. yEd = CMOV(yEd, 1, e)\n    const inv = FpInvertBatch(Fp, [xEd, yEd], true); // batch division\n    return { x: Fp.mul(xEn, inv[0]), y: Fp.mul(yEn, inv[1]) }; // 38. return (xEn, xEd, yEn, yEd)\n}\nexport const ed448_hasher = /* @__PURE__ */ (() => createHasher(ed448.Point, (scalars) => map_to_curve_elligator2_edwards448(scalars[0]), {\n    DST: 'edwards448_XOF:SHAKE256_ELL2_RO_',\n    encodeDST: 'edwards448_XOF:SHAKE256_ELL2_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 224,\n    expand: 'xof',\n    hash: shake256,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => ed448_hasher.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => ed448_hasher.encodeToCurve)();\nfunction adecafp(other) {\n    if (!(other instanceof DcfPoint))\n        throw new Error('DecafPoint expected');\n}\n// 1-d\nconst ONE_MINUS_D = /* @__PURE__ */ BigInt('39082');\n// 1-2d\nconst ONE_MINUS_TWO_D = /* @__PURE__ */ BigInt('78163');\n// √(-d)\nconst SQRT_MINUS_D = /* @__PURE__ */ BigInt('98944233647732219769177004876929019128417576295529901074099889598043702116001257856802131563896515373927712232092845883226922417596214');\n// 1 / √(-d)\nconst INVSQRT_MINUS_D = /* @__PURE__ */ BigInt('315019913931389607337177038330951043522456072897266928557328499619017160722351061360252776265186336876723201881398623946864393857820716');\n// Calculates 1/√(number)\nconst invertSqrt = (number) => uvRatio(_1n, number);\nconst MAX_448B = /* @__PURE__ */ BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nconst bytes448ToNumberLE = (bytes) => Fp.create(bytesToNumberLE(bytes) & MAX_448B);\n/**\n * Elligator map for hash-to-curve of decaf448.\n * Described in [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#appendix-C)\n * and [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-element-derivation-2).\n */\nfunction calcElligatorDecafMap(r0) {\n    const { d } = ed448.CURVE;\n    const P = Fp.ORDER;\n    const mod = Fp.create;\n    const r = mod(-(r0 * r0)); // 1\n    const u0 = mod(d * (r - _1n)); // 2\n    const u1 = mod((u0 + _1n) * (u0 - r)); // 3\n    const { isValid: was_square, value: v } = uvRatio(ONE_MINUS_TWO_D, mod((r + _1n) * u1)); // 4\n    let v_prime = v; // 5\n    if (!was_square)\n        v_prime = mod(r0 * v);\n    let sgn = _1n; // 6\n    if (!was_square)\n        sgn = mod(-_1n);\n    const s = mod(v_prime * (r + _1n)); // 7\n    let s_abs = s;\n    if (isNegativeLE(s, P))\n        s_abs = mod(-s);\n    const s2 = s * s;\n    const W0 = mod(s_abs * _2n); // 8\n    const W1 = mod(s2 + _1n); // 9\n    const W2 = mod(s2 - _1n); // 10\n    const W3 = mod(v_prime * s * (r - _1n) * ONE_MINUS_TWO_D + sgn); // 11\n    return new ed448.Point(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n/**\n * Each ed448/ExtendedPoint has 4 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Decaf was created to solve this.\n * Decaf point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * See [RFC9496](https://www.rfc-editor.org/rfc/rfc9496).\n */\nclass DcfPoint {\n    // Private property to discourage combining ExtendedPoint + DecafPoint\n    // Always use Decaf encoding/decoding instead.\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static fromAffine(ap) {\n        return new DcfPoint(ed448.Point.fromAffine(ap));\n    }\n    /**\n     * Takes uniform output of 112-byte hash function like shake256 and converts it to `DecafPoint`.\n     * The hash-to-group operation applies Elligator twice and adds the results.\n     * **Note:** this is one-way map, there is no conversion from point to hash.\n     * Described in [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#appendix-C)\n     * and [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-element-derivation-2).\n     * @param hex 112-byte output of a hash function\n     */\n    static hashToCurve(hex) {\n        hex = ensureBytes('decafHash', hex, 112);\n        const r1 = bytes448ToNumberLE(hex.slice(0, 56));\n        const R1 = calcElligatorDecafMap(r1);\n        const r2 = bytes448ToNumberLE(hex.slice(56, 112));\n        const R2 = calcElligatorDecafMap(r2);\n        return new DcfPoint(R1.add(R2));\n    }\n    static fromBytes(bytes) {\n        abytes(bytes);\n        return this.fromHex(bytes);\n    }\n    /**\n     * Converts decaf-encoded string to decaf point.\n     * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-decode-2).\n     * @param hex Decaf-encoded 56 bytes. Not every 56-byte string is valid decaf encoding\n     */\n    static fromHex(hex) {\n        hex = ensureBytes('decafHex', hex, 56);\n        const { d } = ed448.CURVE;\n        const P = Fp.ORDER;\n        const mod = Fp.create;\n        const emsg = 'DecafPoint.fromHex: the hex is not valid encoding of DecafPoint';\n        const s = bytes448ToNumberLE(hex);\n        // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n        // 2. Check that s is non-negative, or else abort\n        if (!equalBytes(numberToBytesLE(s, 56), hex) || isNegativeLE(s, P))\n            throw new Error(emsg);\n        const s2 = mod(s * s); // 1\n        const u1 = mod(_1n + s2); // 2\n        const u1sq = mod(u1 * u1);\n        const u2 = mod(u1sq - _4n * d * s2); // 3\n        const { isValid, value: invsqrt } = invertSqrt(mod(u2 * u1sq)); // 4\n        let u3 = mod((s + s) * invsqrt * u1 * SQRT_MINUS_D); // 5\n        if (isNegativeLE(u3, P))\n            u3 = mod(-u3);\n        const x = mod(u3 * invsqrt * u2 * INVSQRT_MINUS_D); // 6\n        const y = mod((_1n - s2) * invsqrt * u1); // 7\n        const t = mod(x * y); // 8\n        if (!isValid)\n            throw new Error(emsg);\n        return new DcfPoint(new ed448.Point(x, y, _1n, t));\n    }\n    static msm(points, scalars) {\n        const Fn = Field(ed448.CURVE.n, ed448.CURVE.nBitLength);\n        return pippenger(DcfPoint, Fn, points, scalars);\n    }\n    /**\n     * Encodes decaf point to Uint8Array.\n     * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-encode-2).\n     */\n    toBytes() {\n        let { ex: x, ey: _y, ez: z, et: t } = this.ep;\n        const P = Fp.ORDER;\n        const mod = Fp.create;\n        const u1 = mod(mod(x + t) * mod(x - t)); // 1\n        const x2 = mod(x * x);\n        const { value: invsqrt } = invertSqrt(mod(u1 * ONE_MINUS_D * x2)); // 2\n        let ratio = mod(invsqrt * u1 * SQRT_MINUS_D); // 3\n        if (isNegativeLE(ratio, P))\n            ratio = mod(-ratio);\n        const u2 = mod(INVSQRT_MINUS_D * ratio * z - t); // 4\n        let s = mod(ONE_MINUS_D * invsqrt * x * u2); // 5\n        if (isNegativeLE(s, P))\n            s = mod(-s);\n        return numberToBytesLE(s, 56);\n    }\n    /** @deprecated use `toBytes` */\n    toRawBytes() {\n        return this.toBytes();\n    }\n    toHex() {\n        return bytesToHex(this.toBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    /**\n     * Compare one point to another.\n     * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-equals-2).\n     */\n    equals(other) {\n        adecafp(other);\n        const { ex: X1, ey: Y1 } = this.ep;\n        const { ex: X2, ey: Y2 } = other.ep;\n        const mod = Fp.create;\n        // (x1 * y2 == y1 * x2)\n        return mod(X1 * Y2) === mod(Y1 * X2);\n    }\n    add(other) {\n        adecafp(other);\n        return new DcfPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        adecafp(other);\n        return new DcfPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new DcfPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new DcfPoint(this.ep.multiplyUnsafe(scalar));\n    }\n    double() {\n        return new DcfPoint(this.ep.double());\n    }\n    negate() {\n        return new DcfPoint(this.ep.negate());\n    }\n}\n/**\n * Wrapper over Edwards Point for decaf448 from\n * [RFC9496](https://www.rfc-editor.org/rfc/rfc9496).\n */\nexport const DecafPoint = /* @__PURE__ */ (() => {\n    // decaf448 base point is ed448 base x 2\n    // https://github.com/dalek-cryptography/curve25519-dalek/blob/59837c6ecff02b77b9d5ff84dbc239d0cf33ef90/vendor/ristretto.sage#L699\n    if (!DcfPoint.BASE)\n        DcfPoint.BASE = new DcfPoint(ed448.Point.BASE).multiply(_2n);\n    if (!DcfPoint.ZERO)\n        DcfPoint.ZERO = new DcfPoint(ed448.Point.ZERO);\n    return DcfPoint;\n})();\n/**\n * hash-to-curve for decaf448.\n * Described in [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#appendix-C).\n */\nexport const hashToDecaf448 = (msg, options) => {\n    const d = options.DST;\n    const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n    const uniform_bytes = expand_message_xof(msg, DST, 112, 224, shake256);\n    const P = DcfPoint.hashToCurve(uniform_bytes);\n    return P;\n};\nexport const hash_to_decaf448 = hashToDecaf448; // legacy\n//# sourceMappingURL=ed448.js.map","/**\n * SECG secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Belongs to Koblitz curves: it has efficiently-computable GLV endomorphism ψ,\n * check out {@link EndomorphismOpts}. Seems to be rigid (not backdoored).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha2.js';\nimport { randomBytes } from '@noble/hashes/utils.js';\nimport { createCurve } from \"./_shortw_utils.js\";\nimport { createHasher, isogenyMap, } from \"./abstract/hash-to-curve.js\";\nimport { Field, mod, pow2 } from \"./abstract/modular.js\";\nimport { mapToCurveSimpleSWU, } from \"./abstract/weierstrass.js\";\nimport { aInRange, bytesToNumberBE, concatBytes, ensureBytes, inRange, numberToBytesBE, } from \"./utils.js\";\n// Seems like generator was produced from some seed:\n// `Point.BASE.multiply(Point.Fn.inv(2n, N)).toAffine().x`\n// // gives short x 0x3b78ce563f89a0ed9414f5aa28ad0d96d6795f9c63n\nconst secp256k1_CURVE = {\n    p: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: BigInt(1),\n    a: BigInt(0),\n    b: BigInt(7),\n    Gx: BigInt('0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),\n    Gy: BigInt('0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8'),\n};\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1_CURVE.p;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fpk1.eql(Fpk1.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fpk1 = Field(secp256k1_CURVE.p, undefined, undefined, { sqrt: sqrtMod });\n/**\n * secp256k1 curve, ECDSA and ECDH methods.\n *\n * Field: `2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n`\n *\n * @example\n * ```js\n * import { secp256k1 } from '@noble/curves/secp256k1';\n * const priv = secp256k1.utils.randomPrivateKey();\n * const pub = secp256k1.getPublicKey(priv);\n * const msg = new Uint8Array(32).fill(1); // message hash (not message) in ecdsa\n * const sig = secp256k1.sign(msg, priv); // `{prehash: true}` option is available\n * const isValid = secp256k1.verify(sig, msg, pub) === true;\n * ```\n */\nexport const secp256k1 = createCurve({\n    ...secp256k1_CURVE,\n    Fp: Fpk1,\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    endo: {\n        // Endomorphism, see above\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1_CURVE.n;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1_CURVE.p);\nconst modN = (x) => mod(x, secp256k1_CURVE.n);\nconst Point = /* @__PURE__ */ (() => secp256k1.Point)();\nconst hasEven = (y) => y % _2n === _0n;\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = hasEven(p.y) ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    aInRange('x', x, _1n, secp256k1_CURVE.p); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (!hasEven(y))\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = Point.fromAffine({ x, y }); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!inRange(r, _1n, secp256k1_CURVE.p))\n            return false;\n        const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!inRange(s, _1n, secp256k1_CURVE.n))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        // R = s⋅G - e⋅P, where -eP == (n-e)P\n        const R = Point.BASE.multiplyUnsafe(s).add(P.multiplyUnsafe(modN(-e)));\n        const { x, y } = R.toAffine();\n        // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n        if (R.is0() || !hasEven(y) || x !== r)\n            return false;\n        return true;\n    }\n    catch (error) {\n        return false;\n    }\n}\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * ```js\n * import { schnorr } from '@noble/curves/secp256k1';\n * const priv = schnorr.utils.randomPrivateKey();\n * const pub = schnorr.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, priv);\n * const isValid = schnorr.verify(sig, msg, pub);\n * ```\n */\nexport const schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fpk1, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11')),\n}))();\n/** Hashing / encoding to secp256k1 points / field. RFC 9380 methods. */\nexport const secp256k1_hasher = /* @__PURE__ */ (() => createHasher(secp256k1.Point, (scalars) => {\n    const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fpk1.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => secp256k1_hasher.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => secp256k1_hasher.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map","/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n * @deprecated\n */\nimport { SHA224 as SHA224n, sha224 as sha224n, SHA256 as SHA256n, sha256 as sha256n, } from \"./sha2.js\";\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA256 = SHA256n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha256 = sha256n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA224 = SHA224n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha224 = sha224n;\n//# sourceMappingURL=sha256.js.map","import { createCurve } from '@noble/curves/_shortw_utils';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { Field } from '@noble/curves/abstract/modular';\n\n// brainpoolP256r1: https://datatracker.ietf.org/doc/html/rfc5639#section-3.4\n\n// eslint-disable-next-line new-cap\nconst Fp = Field(BigInt('0xa9fb57dba1eea9bc3e660a909d838d726e3bf623d52620282013481d1f6e5377'));\nconst CURVE_A = Fp.create(BigInt('0x7d5a0975fc2c3057eef67530417affe7fb8055c126dc5c6ce94a4b44f330b5d9'));\nconst CURVE_B = BigInt('0x26dc5c6ce94a4b44f330b5d9bbd77cbf958416295cf7e1ce6bccdc18ff8c07b6');\n\n// prettier-ignore\nexport const brainpoolP256r1 = createCurve({\n  a: CURVE_A, // Equation params: a, b\n  b: CURVE_B,\n  Fp,\n  // Curve order (q), total count of valid points in the field\n  n: BigInt('0xa9fb57dba1eea9bc3e660a909d838d718c397aa3b561a6f7901e0e82974856a7'),\n  // Base (generator) point (x, y)\n  Gx: BigInt('0x8bd2aeb9cb7e57cb2c4b482ffc81b7afb9de27e1e3bd23c23a4453bd9ace3262'),\n  Gy: BigInt('0x547ef835c3dac4fd97f8461a14611dc9c27745132ded8e545c1d54c72f046997'),\n  h: BigInt(1),\n  lowS: false\n} as const, sha256);\n","/**\n * SHA2-512 a.k.a. sha512 and sha384. It is slower than sha256 in js because u64 operations are slow.\n *\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [the paper on truncated SHA512/256](https://eprint.iacr.org/2010/548.pdf).\n * @module\n * @deprecated\n */\nimport { SHA384 as SHA384n, sha384 as sha384n, sha512_224 as sha512_224n, SHA512_224 as SHA512_224n, sha512_256 as sha512_256n, SHA512_256 as SHA512_256n, SHA512 as SHA512n, sha512 as sha512n, } from \"./sha2.js\";\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA512 = SHA512n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha512 = sha512n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA384 = SHA384n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha384 = sha384n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA512_224 = SHA512_224n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha512_224 = sha512_224n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA512_256 = SHA512_256n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha512_256 = sha512_256n;\n//# sourceMappingURL=sha512.js.map","import { createCurve } from '@noble/curves/_shortw_utils';\nimport { sha384 } from '@noble/hashes/sha512';\nimport { Field } from '@noble/curves/abstract/modular';\n\n// brainpoolP384 r1: https://datatracker.ietf.org/doc/html/rfc5639#section-3.6\n\n// eslint-disable-next-line new-cap\nconst Fp = Field(BigInt('0x8cb91e82a3386d280f5d6f7e50e641df152f7109ed5456b412b1da197fb71123acd3a729901d1a71874700133107ec53'));\nconst CURVE_A = Fp.create(BigInt('0x7bc382c63d8c150c3c72080ace05afa0c2bea28e4fb22787139165efba91f90f8aa5814a503ad4eb04a8c7dd22ce2826'));\nconst CURVE_B = BigInt('0x04a8c7dd22ce28268b39b55416f0447c2fb77de107dcd2a62e880ea53eeb62d57cb4390295dbc9943ab78696fa504c11');\n\n// prettier-ignore\nexport const brainpoolP384r1 = createCurve({\n  a: CURVE_A, // Equation params: a, b\n  b: CURVE_B,\n  Fp,\n  // Curve order (q), total count of valid points in the field\n  n: BigInt('0x8cb91e82a3386d280f5d6f7e50e641df152f7109ed5456b31f166e6cac0425a7cf3ab6af6b7fc3103b883202e9046565'),\n  // Base (generator) point (x, y)\n  Gx: BigInt('0x1d1c64f068cf45ffa2a63a81b7c13f6b8847a3e77ef14fe3db7fcafe0cbd10e8e826e03436d646aaef87b2e247d4af1e'),\n  Gy: BigInt('0x8abe1d7520f9c2a45cb1eb8e95cfd55262b70b29feec5864e19c054ff99129280e4646217791811142820341263c5315'),\n  h: BigInt(1),\n  lowS: false\n} as const, sha384);\n","import { createCurve } from '@noble/curves/_shortw_utils';\nimport { sha512 } from '@noble/hashes/sha512';\nimport { Field } from '@noble/curves/abstract/modular';\n\n// brainpoolP512r1: https://datatracker.ietf.org/doc/html/rfc5639#section-3.7\n\n// eslint-disable-next-line new-cap\nconst Fp = Field(BigInt('0xaadd9db8dbe9c48b3fd4e6ae33c9fc07cb308db3b3c9d20ed6639cca703308717d4d9b009bc66842aecda12ae6a380e62881ff2f2d82c68528aa6056583a48f3'));\nconst CURVE_A = Fp.create(BigInt('0x7830a3318b603b89e2327145ac234cc594cbdd8d3df91610a83441caea9863bc2ded5d5aa8253aa10a2ef1c98b9ac8b57f1117a72bf2c7b9e7c1ac4d77fc94ca'));\nconst CURVE_B = BigInt('0x3df91610a83441caea9863bc2ded5d5aa8253aa10a2ef1c98b9ac8b57f1117a72bf2c7b9e7c1ac4d77fc94cadc083e67984050b75ebae5dd2809bd638016f723');\n\n// prettier-ignore\nexport const brainpoolP512r1 = createCurve({\n  a: CURVE_A, // Equation params: a, b\n  b: CURVE_B,\n  Fp,\n  // Curve order (q), total count of valid points in the field\n  n: BigInt('0xaadd9db8dbe9c48b3fd4e6ae33c9fc07cb308db3b3c9d20ed6639cca70330870553e5c414ca92619418661197fac10471db1d381085ddaddb58796829ca90069'),\n  // Base (generator) point (x, y)\n  Gx: BigInt('0x81aee4bdd82ed9645a21322e9c4c6a9385ed9f70b5d916c1b43b62eef4d0098eff3b1f78e2d0d48d50d1687b93b97d5f7c6d5047406a5e688b352209bcb9f822'),\n  Gy: BigInt('0x7dde385d566332ecc0eabfa9cf7822fdf209f70024a57b1aa000c55b881f8111b2dcde494a5f485e5bca4bd88a2763aed1ca2b2fa8f0540678cd1e0f3ad80892'),\n  h: BigInt(1),\n  lowS: false\n} as const, sha512);\n","/**\n * This file is needed to dynamic import the noble-curves.\n * Separate dynamic imports are not convenient as they result in too many chunks,\n * which share a lot of code anyway.\n */\n\nimport { p256 as nistP256 } from '@noble/curves/p256';\nimport { p384 as nistP384 } from '@noble/curves/p384';\nimport { p521 as nistP521 } from '@noble/curves/p521';\nimport { x448, ed448 } from '@noble/curves/ed448';\nimport { secp256k1 } from '@noble/curves/secp256k1';\nimport { brainpoolP256r1 } from './brainpool/brainpoolP256r1';\nimport { brainpoolP384r1 } from './brainpool/brainpoolP384r1';\nimport { brainpoolP512r1 } from './brainpool/brainpoolP512r1';\n\nexport const nobleCurves = new Map(Object.entries({\n  nistP256,\n  nistP384,\n  nistP521,\n  brainpoolP256r1,\n  brainpoolP384r1,\n  brainpoolP512r1,\n  secp256k1,\n  x448,\n  ed448\n}));\n\n","/**\n\nSHA1 (RFC 3174), MD5 (RFC 1321) and RIPEMD160 (RFC 2286) legacy, weak hash functions.\nDon't use them in a new protocol. What \"weak\" means:\n\n- Collisions can be made with 2^18 effort in MD5, 2^60 in SHA1, 2^80 in RIPEMD160.\n- No practical pre-image attacks (only theoretical, 2^123.4)\n- HMAC seems kinda ok: https://datatracker.ietf.org/doc/html/rfc6151\n * @module\n */\nimport { Chi, HashMD, Maj } from \"./_md.js\";\nimport { clean, createHasher, rotl } from \"./utils.js\";\n/** Initial SHA1 state */\nconst SHA1_IV = /* @__PURE__ */ Uint32Array.from([\n    0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0,\n]);\n// Reusable temporary buffer\nconst SHA1_W = /* @__PURE__ */ new Uint32Array(80);\n/** SHA1 legacy hash class. */\nexport class SHA1 extends HashMD {\n    constructor() {\n        super(64, 20, 8, false);\n        this.A = SHA1_IV[0] | 0;\n        this.B = SHA1_IV[1] | 0;\n        this.C = SHA1_IV[2] | 0;\n        this.D = SHA1_IV[3] | 0;\n        this.E = SHA1_IV[4] | 0;\n    }\n    get() {\n        const { A, B, C, D, E } = this;\n        return [A, B, C, D, E];\n    }\n    set(A, B, C, D, E) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA1_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 80; i++)\n            SHA1_W[i] = rotl(SHA1_W[i - 3] ^ SHA1_W[i - 8] ^ SHA1_W[i - 14] ^ SHA1_W[i - 16], 1);\n        // Compression function main loop, 80 rounds\n        let { A, B, C, D, E } = this;\n        for (let i = 0; i < 80; i++) {\n            let F, K;\n            if (i < 20) {\n                F = Chi(B, C, D);\n                K = 0x5a827999;\n            }\n            else if (i < 40) {\n                F = B ^ C ^ D;\n                K = 0x6ed9eba1;\n            }\n            else if (i < 60) {\n                F = Maj(B, C, D);\n                K = 0x8f1bbcdc;\n            }\n            else {\n                F = B ^ C ^ D;\n                K = 0xca62c1d6;\n            }\n            const T = (rotl(A, 5) + F + E + K + SHA1_W[i]) | 0;\n            E = D;\n            D = C;\n            C = rotl(B, 30);\n            B = A;\n            A = T;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        this.set(A, B, C, D, E);\n    }\n    roundClean() {\n        clean(SHA1_W);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0);\n        clean(this.buffer);\n    }\n}\n/** SHA1 (RFC 3174) legacy hash function. It was cryptographically broken. */\nexport const sha1 = /* @__PURE__ */ createHasher(() => new SHA1());\n/** Per-round constants */\nconst p32 = /* @__PURE__ */ Math.pow(2, 32);\nconst K = /* @__PURE__ */ Array.from({ length: 64 }, (_, i) => Math.floor(p32 * Math.abs(Math.sin(i + 1))));\n/** md5 initial state: same as sha1, but 4 u32 instead of 5. */\nconst MD5_IV = /* @__PURE__ */ SHA1_IV.slice(0, 4);\n// Reusable temporary buffer\nconst MD5_W = /* @__PURE__ */ new Uint32Array(16);\n/** MD5 legacy hash class. */\nexport class MD5 extends HashMD {\n    constructor() {\n        super(64, 16, 8, true);\n        this.A = MD5_IV[0] | 0;\n        this.B = MD5_IV[1] | 0;\n        this.C = MD5_IV[2] | 0;\n        this.D = MD5_IV[3] | 0;\n    }\n    get() {\n        const { A, B, C, D } = this;\n        return [A, B, C, D];\n    }\n    set(A, B, C, D) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            MD5_W[i] = view.getUint32(offset, true);\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D } = this;\n        for (let i = 0; i < 64; i++) {\n            let F, g, s;\n            if (i < 16) {\n                F = Chi(B, C, D);\n                g = i;\n                s = [7, 12, 17, 22];\n            }\n            else if (i < 32) {\n                F = Chi(D, B, C);\n                g = (5 * i + 1) % 16;\n                s = [5, 9, 14, 20];\n            }\n            else if (i < 48) {\n                F = B ^ C ^ D;\n                g = (3 * i + 5) % 16;\n                s = [4, 11, 16, 23];\n            }\n            else {\n                F = C ^ (B | ~D);\n                g = (7 * i) % 16;\n                s = [6, 10, 15, 21];\n            }\n            F = F + A + K[i] + MD5_W[g];\n            A = D;\n            D = C;\n            C = B;\n            B = B + rotl(F, s[i % 4]);\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        this.set(A, B, C, D);\n    }\n    roundClean() {\n        clean(MD5_W);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0);\n        clean(this.buffer);\n    }\n}\n/**\n * MD5 (RFC 1321) legacy hash function. It was cryptographically broken.\n * MD5 architecture is similar to SHA1, with some differences:\n * - Reduced output length: 16 bytes (128 bit) instead of 20\n * - 64 rounds, instead of 80\n * - Little-endian: could be faster, but will require more code\n * - Non-linear index selection: huge speed-up for unroll\n * - Per round constants: more memory accesses, additional speed-up for unroll\n */\nexport const md5 = /* @__PURE__ */ createHasher(() => new MD5());\n// RIPEMD-160\nconst Rho160 = /* @__PURE__ */ Uint8Array.from([\n    7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n]);\nconst Id160 = /* @__PURE__ */ (() => Uint8Array.from(new Array(16).fill(0).map((_, i) => i)))();\nconst Pi160 = /* @__PURE__ */ (() => Id160.map((i) => (9 * i + 5) % 16))();\nconst idxLR = /* @__PURE__ */ (() => {\n    const L = [Id160];\n    const R = [Pi160];\n    const res = [L, R];\n    for (let i = 0; i < 4; i++)\n        for (let j of res)\n            j.push(j[i].map((k) => Rho160[k]));\n    return res;\n})();\nconst idxL = /* @__PURE__ */ (() => idxLR[0])();\nconst idxR = /* @__PURE__ */ (() => idxLR[1])();\n// const [idxL, idxR] = idxLR;\nconst shifts160 = /* @__PURE__ */ [\n    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => Uint8Array.from(i));\nconst shiftsL160 = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts160[i][j]));\nconst shiftsR160 = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts160[i][j]));\nconst Kl160 = /* @__PURE__ */ Uint32Array.from([\n    0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,\n]);\nconst Kr160 = /* @__PURE__ */ Uint32Array.from([\n    0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,\n]);\n// It's called f() in spec.\nfunction ripemd_f(group, x, y, z) {\n    if (group === 0)\n        return x ^ y ^ z;\n    if (group === 1)\n        return (x & y) | (~x & z);\n    if (group === 2)\n        return (x | ~y) ^ z;\n    if (group === 3)\n        return (x & z) | (y & ~z);\n    return x ^ (y | ~z);\n}\n// Reusable temporary buffer\nconst BUF_160 = /* @__PURE__ */ new Uint32Array(16);\nexport class RIPEMD160 extends HashMD {\n    constructor() {\n        super(64, 20, 8, true);\n        this.h0 = 0x67452301 | 0;\n        this.h1 = 0xefcdab89 | 0;\n        this.h2 = 0x98badcfe | 0;\n        this.h3 = 0x10325476 | 0;\n        this.h4 = 0xc3d2e1f0 | 0;\n    }\n    get() {\n        const { h0, h1, h2, h3, h4 } = this;\n        return [h0, h1, h2, h3, h4];\n    }\n    set(h0, h1, h2, h3, h4) {\n        this.h0 = h0 | 0;\n        this.h1 = h1 | 0;\n        this.h2 = h2 | 0;\n        this.h3 = h3 | 0;\n        this.h4 = h4 | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            BUF_160[i] = view.getUint32(offset, true);\n        // prettier-ignore\n        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;\n        // Instead of iterating 0 to 80, we split it into 5 groups\n        // And use the groups in constants, functions, etc. Much simpler\n        for (let group = 0; group < 5; group++) {\n            const rGroup = 4 - group;\n            const hbl = Kl160[group], hbr = Kr160[group]; // prettier-ignore\n            const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n            const sl = shiftsL160[group], sr = shiftsR160[group]; // prettier-ignore\n            for (let i = 0; i < 16; i++) {\n                const tl = (rotl(al + ripemd_f(group, bl, cl, dl) + BUF_160[rl[i]] + hbl, sl[i]) + el) | 0;\n                al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n            }\n            // 2 loops are 10% faster\n            for (let i = 0; i < 16; i++) {\n                const tr = (rotl(ar + ripemd_f(rGroup, br, cr, dr) + BUF_160[rr[i]] + hbr, sr[i]) + er) | 0;\n                ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n            }\n        }\n        // Add the compressed chunk to the current hash value\n        this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);\n    }\n    roundClean() {\n        clean(BUF_160);\n    }\n    destroy() {\n        this.destroyed = true;\n        clean(this.buffer);\n        this.set(0, 0, 0, 0, 0);\n    }\n}\n/**\n * RIPEMD-160 - a legacy hash function from 1990s.\n * * https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n * * https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\n */\nexport const ripemd160 = /* @__PURE__ */ createHasher(() => new RIPEMD160());\n//# sourceMappingURL=legacy.js.map","/**\n * SHA1 (RFC 3174) legacy hash function.\n * @module\n * @deprecated\n */\nimport { SHA1 as SHA1n, sha1 as sha1n } from \"./legacy.js\";\n/** @deprecated Use import from `noble/hashes/legacy` module */\nexport const SHA1 = SHA1n;\n/** @deprecated Use import from `noble/hashes/legacy` module */\nexport const sha1 = sha1n;\n//# sourceMappingURL=sha1.js.map","/**\n * RIPEMD-160 legacy hash function.\n * https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n * https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\n * @module\n * @deprecated\n */\nimport { RIPEMD160 as RIPEMD160n, ripemd160 as ripemd160n } from \"./legacy.js\";\n/** @deprecated Use import from `noble/hashes/legacy` module */\nexport const RIPEMD160 = RIPEMD160n;\n/** @deprecated Use import from `noble/hashes/legacy` module */\nexport const ripemd160 = ripemd160n;\n//# sourceMappingURL=ripemd160.js.map","// Copied from https://github.com/paulmillr/noble-hashes/blob/main/test/misc/md5.ts\n\nimport { HashMD } from '@noble/hashes/_md';\nimport { rotl, wrapConstructor } from '@noble/hashes/utils';\n\n// Per-round constants\nconst K = Array.from({ length: 64 }, (_, i) => Math.floor(2 ** 32 * Math.abs(Math.sin(i + 1))));\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Initial state (same as sha1, but 4 u32 instead of 5)\nconst IV = /* @__PURE__ */ new Uint32Array([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476]);\n// Temporary buffer, not used to store anything between runs\n// Named this way for SHA1 compat\nconst MD5_W = /* @__PURE__ */ new Uint32Array(16);\nclass MD5 extends HashMD<MD5> {\n  private A = IV[0] | 0;\n  private B = IV[1] | 0;\n  private C = IV[2] | 0;\n  private D = IV[3] | 0;\n  constructor() {\n    super(64, 16, 8, true);\n  }\n  protected get(): [number, number, number, number] {\n    const { A, B, C, D } = this;\n    return [A, B, C, D];\n  }\n  protected set(A: number, B: number, C: number, D: number) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    for (let i = 0; i < 16; i++, offset += 4) MD5_W[i] = view.getUint32(offset, true);\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D } = this;\n    for (let i = 0; i < 64; i++) {\n      // eslint-disable-next-line one-var, one-var-declaration-per-line\n      let F, g, s;\n      if (i < 16) {\n        // eslint-disable-next-line new-cap\n        F = Chi(B, C, D);\n        g = i;\n        s = [7, 12, 17, 22];\n      } else if (i < 32) {\n        // eslint-disable-next-line new-cap\n        F = Chi(D, B, C);\n        g = (5 * i + 1) % 16;\n        s = [5, 9, 14, 20];\n      } else if (i < 48) {\n        F = B ^ C ^ D;\n        g = (3 * i + 5) % 16;\n        s = [4, 11, 16, 23];\n      } else {\n        F = C ^ (B | ~D);\n        g = (7 * i) % 16;\n        s = [6, 10, 15, 21];\n      }\n      F = F + A + K[i] + MD5_W[g];\n      A = D;\n      D = C;\n      C = B;\n      B = B + rotl(F, s[i % 4]);\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    this.set(A, B, C, D);\n  }\n  protected roundClean() {\n    MD5_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\nexport const md5 = /* @__PURE__ */ wrapConstructor(() => new MD5());\n","/**\n * This file is needed to dynamic import the noble-hashes.\n * Separate dynamic imports are not convenient as they result in too many chunks,\n * which share a lot of code anyway.\n */\n\nimport { sha1 } from '@noble/hashes/sha1';\nimport { sha224, sha256 } from '@noble/hashes/sha256';\nimport { sha384, sha512 } from '@noble/hashes/sha512';\nimport { sha3_256, sha3_512 } from '@noble/hashes/sha3';\nimport { ripemd160 } from '@noble/hashes/ripemd160';\nimport { md5 } from './md5';\n\nexport const nobleHashes = new Map(Object.entries({\n  md5,\n  sha1,\n  sha224,\n  sha256,\n  sha384,\n  sha512,\n  sha3_256,\n  sha3_512,\n  ripemd160\n}));\n","//Paul Tero, July 2001\n//http://www.tero.co.uk/des/\n//\n//Optimised for performance with large blocks by Michael Hayworth, November 2001\n//http://www.netdealing.com\n//\n// Modified by Recurity Labs GmbH\n\n//THIS SOFTWARE IS PROVIDED \"AS IS\" AND\n//ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n//IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n//ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\n//FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n//DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n//OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n//HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n//LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n//OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n//SUCH DAMAGE.\n\n//des\n//this takes the key, the message, and whether to encrypt or decrypt\n\nfunction des(keys, message, encrypt, mode, iv, padding) {\n  //declaring this locally speeds things up a bit\n  const spfunction1 = [\n    0x1010400, 0, 0x10000, 0x1010404, 0x1010004, 0x10404, 0x4, 0x10000, 0x400, 0x1010400,\n    0x1010404, 0x400, 0x1000404, 0x1010004, 0x1000000, 0x4, 0x404, 0x1000400, 0x1000400, 0x10400, 0x10400, 0x1010000,\n    0x1010000, 0x1000404, 0x10004, 0x1000004, 0x1000004, 0x10004, 0, 0x404, 0x10404, 0x1000000, 0x10000, 0x1010404, 0x4,\n    0x1010000, 0x1010400, 0x1000000, 0x1000000, 0x400, 0x1010004, 0x10000, 0x10400, 0x1000004, 0x400, 0x4, 0x1000404,\n    0x10404, 0x1010404, 0x10004, 0x1010000, 0x1000404, 0x1000004, 0x404, 0x10404, 0x1010400, 0x404, 0x1000400,\n    0x1000400, 0, 0x10004, 0x10400, 0, 0x1010004\n  ];\n  const spfunction2 = [\n    -0x7fef7fe0, -0x7fff8000, 0x8000, 0x108020, 0x100000, 0x20, -0x7fefffe0, -0x7fff7fe0,\n    -0x7fffffe0, -0x7fef7fe0, -0x7fef8000, -0x80000000, -0x7fff8000, 0x100000, 0x20, -0x7fefffe0, 0x108000, 0x100020,\n    -0x7fff7fe0, 0, -0x80000000, 0x8000, 0x108020, -0x7ff00000, 0x100020, -0x7fffffe0, 0, 0x108000, 0x8020, -0x7fef8000,\n    -0x7ff00000, 0x8020, 0, 0x108020, -0x7fefffe0, 0x100000, -0x7fff7fe0, -0x7ff00000, -0x7fef8000, 0x8000, -0x7ff00000,\n    -0x7fff8000, 0x20, -0x7fef7fe0, 0x108020, 0x20, 0x8000, -0x80000000, 0x8020, -0x7fef8000, 0x100000, -0x7fffffe0,\n    0x100020, -0x7fff7fe0, -0x7fffffe0, 0x100020, 0x108000, 0, -0x7fff8000, 0x8020, -0x80000000, -0x7fefffe0,\n    -0x7fef7fe0, 0x108000\n  ];\n  const spfunction3 = [\n    0x208, 0x8020200, 0, 0x8020008, 0x8000200, 0, 0x20208, 0x8000200, 0x20008, 0x8000008,\n    0x8000008, 0x20000, 0x8020208, 0x20008, 0x8020000, 0x208, 0x8000000, 0x8, 0x8020200, 0x200, 0x20200, 0x8020000,\n    0x8020008, 0x20208, 0x8000208, 0x20200, 0x20000, 0x8000208, 0x8, 0x8020208, 0x200, 0x8000000, 0x8020200, 0x8000000,\n    0x20008, 0x208, 0x20000, 0x8020200, 0x8000200, 0, 0x200, 0x20008, 0x8020208, 0x8000200, 0x8000008, 0x200, 0,\n    0x8020008, 0x8000208, 0x20000, 0x8000000, 0x8020208, 0x8, 0x20208, 0x20200, 0x8000008, 0x8020000, 0x8000208, 0x208,\n    0x8020000, 0x20208, 0x8, 0x8020008, 0x20200\n  ];\n  const spfunction4 = [\n    0x802001, 0x2081, 0x2081, 0x80, 0x802080, 0x800081, 0x800001, 0x2001, 0, 0x802000,\n    0x802000, 0x802081, 0x81, 0, 0x800080, 0x800001, 0x1, 0x2000, 0x800000, 0x802001, 0x80, 0x800000, 0x2001, 0x2080,\n    0x800081, 0x1, 0x2080, 0x800080, 0x2000, 0x802080, 0x802081, 0x81, 0x800080, 0x800001, 0x802000, 0x802081, 0x81, 0,\n    0, 0x802000, 0x2080, 0x800080, 0x800081, 0x1, 0x802001, 0x2081, 0x2081, 0x80, 0x802081, 0x81, 0x1, 0x2000, 0x800001,\n    0x2001, 0x802080, 0x800081, 0x2001, 0x2080, 0x800000, 0x802001, 0x80, 0x800000, 0x2000, 0x802080\n  ];\n  const spfunction5 = [\n    0x100, 0x2080100, 0x2080000, 0x42000100, 0x80000, 0x100, 0x40000000, 0x2080000,\n    0x40080100, 0x80000, 0x2000100, 0x40080100, 0x42000100, 0x42080000, 0x80100, 0x40000000, 0x2000000, 0x40080000,\n    0x40080000, 0, 0x40000100, 0x42080100, 0x42080100, 0x2000100, 0x42080000, 0x40000100, 0, 0x42000000, 0x2080100,\n    0x2000000, 0x42000000, 0x80100, 0x80000, 0x42000100, 0x100, 0x2000000, 0x40000000, 0x2080000, 0x42000100,\n    0x40080100, 0x2000100, 0x40000000, 0x42080000, 0x2080100, 0x40080100, 0x100, 0x2000000, 0x42080000, 0x42080100,\n    0x80100, 0x42000000, 0x42080100, 0x2080000, 0, 0x40080000, 0x42000000, 0x80100, 0x2000100, 0x40000100, 0x80000, 0,\n    0x40080000, 0x2080100, 0x40000100\n  ];\n  const spfunction6 = [\n    0x20000010, 0x20400000, 0x4000, 0x20404010, 0x20400000, 0x10, 0x20404010, 0x400000,\n    0x20004000, 0x404010, 0x400000, 0x20000010, 0x400010, 0x20004000, 0x20000000, 0x4010, 0, 0x400010, 0x20004010,\n    0x4000, 0x404000, 0x20004010, 0x10, 0x20400010, 0x20400010, 0, 0x404010, 0x20404000, 0x4010, 0x404000, 0x20404000,\n    0x20000000, 0x20004000, 0x10, 0x20400010, 0x404000, 0x20404010, 0x400000, 0x4010, 0x20000010, 0x400000, 0x20004000,\n    0x20000000, 0x4010, 0x20000010, 0x20404010, 0x404000, 0x20400000, 0x404010, 0x20404000, 0, 0x20400010, 0x10, 0x4000,\n    0x20400000, 0x404010, 0x4000, 0x400010, 0x20004010, 0, 0x20404000, 0x20000000, 0x400010, 0x20004010\n  ];\n  const spfunction7 = [\n    0x200000, 0x4200002, 0x4000802, 0, 0x800, 0x4000802, 0x200802, 0x4200800, 0x4200802,\n    0x200000, 0, 0x4000002, 0x2, 0x4000000, 0x4200002, 0x802, 0x4000800, 0x200802, 0x200002, 0x4000800, 0x4000002,\n    0x4200000, 0x4200800, 0x200002, 0x4200000, 0x800, 0x802, 0x4200802, 0x200800, 0x2, 0x4000000, 0x200800, 0x4000000,\n    0x200800, 0x200000, 0x4000802, 0x4000802, 0x4200002, 0x4200002, 0x2, 0x200002, 0x4000000, 0x4000800, 0x200000,\n    0x4200800, 0x802, 0x200802, 0x4200800, 0x802, 0x4000002, 0x4200802, 0x4200000, 0x200800, 0, 0x2, 0x4200802, 0,\n    0x200802, 0x4200000, 0x800, 0x4000002, 0x4000800, 0x800, 0x200002\n  ];\n  const spfunction8 = [\n    0x10001040, 0x1000, 0x40000, 0x10041040, 0x10000000, 0x10001040, 0x40, 0x10000000,\n    0x40040, 0x10040000, 0x10041040, 0x41000, 0x10041000, 0x41040, 0x1000, 0x40, 0x10040000, 0x10000040, 0x10001000,\n    0x1040, 0x41000, 0x40040, 0x10040040, 0x10041000, 0x1040, 0, 0, 0x10040040, 0x10000040, 0x10001000, 0x41040,\n    0x40000, 0x41040, 0x40000, 0x10041000, 0x1000, 0x40, 0x10040040, 0x1000, 0x41040, 0x10001000, 0x40, 0x10000040,\n    0x10040000, 0x10040040, 0x10000000, 0x40000, 0x10001040, 0, 0x10041040, 0x40040, 0x10000040, 0x10040000, 0x10001000,\n    0x10001040, 0, 0x10041040, 0x41000, 0x41000, 0x1040, 0x1040, 0x40040, 0x10000000, 0x10041000\n  ];\n\n  //create the 16 or 48 subkeys we will need\n  let m = 0;\n  let i;\n  let j;\n  let temp;\n  let right1;\n  let right2;\n  let left;\n  let right;\n  let looping;\n  let cbcleft;\n  let cbcleft2;\n  let cbcright;\n  let cbcright2;\n  let endloop;\n  let loopinc;\n  let len = message.length;\n\n  //set up the loops for single and triple des\n  const iterations = keys.length === 32 ? 3 : 9; //single or triple des\n  if (iterations === 3) {\n    looping = encrypt ? [0, 32, 2] : [30, -2, -2];\n  } else {\n    looping = encrypt ? [0, 32, 2, 62, 30, -2, 64, 96, 2] : [94, 62, -2, 32, 64, 2, 30, -2, -2];\n  }\n\n  //pad the message depending on the padding parameter\n  //only add padding if encrypting - note that you need to use the same padding option for both encrypt and decrypt\n  if (encrypt) {\n    message = desAddPadding(message, padding);\n    len = message.length;\n  }\n\n  //store the result here\n  let result = new Uint8Array(len);\n  let k = 0;\n\n  if (mode === 1) { //CBC mode\n    cbcleft = (iv[m++] << 24) | (iv[m++] << 16) | (iv[m++] << 8) | iv[m++];\n    cbcright = (iv[m++] << 24) | (iv[m++] << 16) | (iv[m++] << 8) | iv[m++];\n    m = 0;\n  }\n\n  //loop through each 64 bit chunk of the message\n  while (m < len) {\n    left = (message[m++] << 24) | (message[m++] << 16) | (message[m++] << 8) | message[m++];\n    right = (message[m++] << 24) | (message[m++] << 16) | (message[m++] << 8) | message[m++];\n\n    //for Cipher Block Chaining mode, xor the message with the previous result\n    if (mode === 1) {\n      if (encrypt) {\n        left ^= cbcleft;\n        right ^= cbcright;\n      } else {\n        cbcleft2 = cbcleft;\n        cbcright2 = cbcright;\n        cbcleft = left;\n        cbcright = right;\n      }\n    }\n\n    //first each 64 but chunk of the message must be permuted according to IP\n    temp = ((left >>> 4) ^ right) & 0x0f0f0f0f;\n    right ^= temp;\n    left ^= (temp << 4);\n    temp = ((left >>> 16) ^ right) & 0x0000ffff;\n    right ^= temp;\n    left ^= (temp << 16);\n    temp = ((right >>> 2) ^ left) & 0x33333333;\n    left ^= temp;\n    right ^= (temp << 2);\n    temp = ((right >>> 8) ^ left) & 0x00ff00ff;\n    left ^= temp;\n    right ^= (temp << 8);\n    temp = ((left >>> 1) ^ right) & 0x55555555;\n    right ^= temp;\n    left ^= (temp << 1);\n\n    left = ((left << 1) | (left >>> 31));\n    right = ((right << 1) | (right >>> 31));\n\n    //do this either 1 or 3 times for each chunk of the message\n    for (j = 0; j < iterations; j += 3) {\n      endloop = looping[j + 1];\n      loopinc = looping[j + 2];\n      //now go through and perform the encryption or decryption\n      for (i = looping[j]; i !== endloop; i += loopinc) { //for efficiency\n        right1 = right ^ keys[i];\n        right2 = ((right >>> 4) | (right << 28)) ^ keys[i + 1];\n        //the result is attained by passing these bytes through the S selection functions\n        temp = left;\n        left = right;\n        right = temp ^ (spfunction2[(right1 >>> 24) & 0x3f] | spfunction4[(right1 >>> 16) & 0x3f] | spfunction6[(right1 >>>\n          8) & 0x3f] | spfunction8[right1 & 0x3f] | spfunction1[(right2 >>> 24) & 0x3f] | spfunction3[(right2 >>> 16) &\n          0x3f] | spfunction5[(right2 >>> 8) & 0x3f] | spfunction7[right2 & 0x3f]);\n      }\n      temp = left;\n      left = right;\n      right = temp; //unreverse left and right\n    } //for either 1 or 3 iterations\n\n    //move then each one bit to the right\n    left = ((left >>> 1) | (left << 31));\n    right = ((right >>> 1) | (right << 31));\n\n    //now perform IP-1, which is IP in the opposite direction\n    temp = ((left >>> 1) ^ right) & 0x55555555;\n    right ^= temp;\n    left ^= (temp << 1);\n    temp = ((right >>> 8) ^ left) & 0x00ff00ff;\n    left ^= temp;\n    right ^= (temp << 8);\n    temp = ((right >>> 2) ^ left) & 0x33333333;\n    left ^= temp;\n    right ^= (temp << 2);\n    temp = ((left >>> 16) ^ right) & 0x0000ffff;\n    right ^= temp;\n    left ^= (temp << 16);\n    temp = ((left >>> 4) ^ right) & 0x0f0f0f0f;\n    right ^= temp;\n    left ^= (temp << 4);\n\n    //for Cipher Block Chaining mode, xor the message with the previous result\n    if (mode === 1) {\n      if (encrypt) {\n        cbcleft = left;\n        cbcright = right;\n      } else {\n        left ^= cbcleft2;\n        right ^= cbcright2;\n      }\n    }\n\n    result[k++] = (left >>> 24);\n    result[k++] = ((left >>> 16) & 0xff);\n    result[k++] = ((left >>> 8) & 0xff);\n    result[k++] = (left & 0xff);\n    result[k++] = (right >>> 24);\n    result[k++] = ((right >>> 16) & 0xff);\n    result[k++] = ((right >>> 8) & 0xff);\n    result[k++] = (right & 0xff);\n  } //for every 8 characters, or 64 bits in the message\n\n  //only remove padding if decrypting - note that you need to use the same padding option for both encrypt and decrypt\n  if (!encrypt) {\n    result = desRemovePadding(result, padding);\n  }\n\n  return result;\n} //end of des\n\n\n//desCreateKeys\n//this takes as input a 64 bit key (even though only 56 bits are used)\n//as an array of 2 integers, and returns 16 48 bit keys\n\nfunction desCreateKeys(key) {\n  //declaring this locally speeds things up a bit\n  const pc2bytes0 = [\n    0, 0x4, 0x20000000, 0x20000004, 0x10000, 0x10004, 0x20010000, 0x20010004, 0x200, 0x204,\n    0x20000200, 0x20000204, 0x10200, 0x10204, 0x20010200, 0x20010204\n  ];\n  const pc2bytes1 = [\n    0, 0x1, 0x100000, 0x100001, 0x4000000, 0x4000001, 0x4100000, 0x4100001, 0x100, 0x101, 0x100100,\n    0x100101, 0x4000100, 0x4000101, 0x4100100, 0x4100101\n  ];\n  const pc2bytes2 = [\n    0, 0x8, 0x800, 0x808, 0x1000000, 0x1000008, 0x1000800, 0x1000808, 0, 0x8, 0x800, 0x808,\n    0x1000000, 0x1000008, 0x1000800, 0x1000808\n  ];\n  const pc2bytes3 = [\n    0, 0x200000, 0x8000000, 0x8200000, 0x2000, 0x202000, 0x8002000, 0x8202000, 0x20000, 0x220000,\n    0x8020000, 0x8220000, 0x22000, 0x222000, 0x8022000, 0x8222000\n  ];\n  const pc2bytes4 = [\n    0, 0x40000, 0x10, 0x40010, 0, 0x40000, 0x10, 0x40010, 0x1000, 0x41000, 0x1010, 0x41010, 0x1000,\n    0x41000, 0x1010, 0x41010\n  ];\n  const pc2bytes5 = [\n    0, 0x400, 0x20, 0x420, 0, 0x400, 0x20, 0x420, 0x2000000, 0x2000400, 0x2000020, 0x2000420,\n    0x2000000, 0x2000400, 0x2000020, 0x2000420\n  ];\n  const pc2bytes6 = [\n    0, 0x10000000, 0x80000, 0x10080000, 0x2, 0x10000002, 0x80002, 0x10080002, 0, 0x10000000,\n    0x80000, 0x10080000, 0x2, 0x10000002, 0x80002, 0x10080002\n  ];\n  const pc2bytes7 = [\n    0, 0x10000, 0x800, 0x10800, 0x20000000, 0x20010000, 0x20000800, 0x20010800, 0x20000, 0x30000,\n    0x20800, 0x30800, 0x20020000, 0x20030000, 0x20020800, 0x20030800\n  ];\n  const pc2bytes8 = [\n    0, 0x40000, 0, 0x40000, 0x2, 0x40002, 0x2, 0x40002, 0x2000000, 0x2040000, 0x2000000, 0x2040000,\n    0x2000002, 0x2040002, 0x2000002, 0x2040002\n  ];\n  const pc2bytes9 = [\n    0, 0x10000000, 0x8, 0x10000008, 0, 0x10000000, 0x8, 0x10000008, 0x400, 0x10000400, 0x408,\n    0x10000408, 0x400, 0x10000400, 0x408, 0x10000408\n  ];\n  const pc2bytes10 = [\n    0, 0x20, 0, 0x20, 0x100000, 0x100020, 0x100000, 0x100020, 0x2000, 0x2020, 0x2000, 0x2020,\n    0x102000, 0x102020, 0x102000, 0x102020\n  ];\n  const pc2bytes11 = [\n    0, 0x1000000, 0x200, 0x1000200, 0x200000, 0x1200000, 0x200200, 0x1200200, 0x4000000, 0x5000000,\n    0x4000200, 0x5000200, 0x4200000, 0x5200000, 0x4200200, 0x5200200\n  ];\n  const pc2bytes12 = [\n    0, 0x1000, 0x8000000, 0x8001000, 0x80000, 0x81000, 0x8080000, 0x8081000, 0x10, 0x1010,\n    0x8000010, 0x8001010, 0x80010, 0x81010, 0x8080010, 0x8081010\n  ];\n  const pc2bytes13 = [0, 0x4, 0x100, 0x104, 0, 0x4, 0x100, 0x104, 0x1, 0x5, 0x101, 0x105, 0x1, 0x5, 0x101, 0x105];\n\n  //how many iterations (1 for des, 3 for triple des)\n  const iterations = key.length > 8 ? 3 : 1; //changed by Paul 16/6/2007 to use Triple DES for 9+ byte keys\n  //stores the return keys\n  const keys = new Array(32 * iterations);\n  //now define the left shifts which need to be done\n  const shifts = [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0];\n  //other variables\n  let lefttemp;\n  let righttemp;\n  let m = 0;\n  let n = 0;\n  let temp;\n\n  for (let j = 0; j < iterations; j++) { //either 1 or 3 iterations\n    let left = (key[m++] << 24) | (key[m++] << 16) | (key[m++] << 8) | key[m++];\n    let right = (key[m++] << 24) | (key[m++] << 16) | (key[m++] << 8) | key[m++];\n\n    temp = ((left >>> 4) ^ right) & 0x0f0f0f0f;\n    right ^= temp;\n    left ^= (temp << 4);\n    temp = ((right >>> -16) ^ left) & 0x0000ffff;\n    left ^= temp;\n    right ^= (temp << -16);\n    temp = ((left >>> 2) ^ right) & 0x33333333;\n    right ^= temp;\n    left ^= (temp << 2);\n    temp = ((right >>> -16) ^ left) & 0x0000ffff;\n    left ^= temp;\n    right ^= (temp << -16);\n    temp = ((left >>> 1) ^ right) & 0x55555555;\n    right ^= temp;\n    left ^= (temp << 1);\n    temp = ((right >>> 8) ^ left) & 0x00ff00ff;\n    left ^= temp;\n    right ^= (temp << 8);\n    temp = ((left >>> 1) ^ right) & 0x55555555;\n    right ^= temp;\n    left ^= (temp << 1);\n\n    //the right side needs to be shifted and to get the last four bits of the left side\n    temp = (left << 8) | ((right >>> 20) & 0x000000f0);\n    //left needs to be put upside down\n    left = (right << 24) | ((right << 8) & 0xff0000) | ((right >>> 8) & 0xff00) | ((right >>> 24) & 0xf0);\n    right = temp;\n\n    //now go through and perform these shifts on the left and right keys\n    for (let i = 0; i < shifts.length; i++) {\n      //shift the keys either one or two bits to the left\n      if (shifts[i]) {\n        left = (left << 2) | (left >>> 26);\n        right = (right << 2) | (right >>> 26);\n      } else {\n        left = (left << 1) | (left >>> 27);\n        right = (right << 1) | (right >>> 27);\n      }\n      left &= -0xf;\n      right &= -0xf;\n\n      //now apply PC-2, in such a way that E is easier when encrypting or decrypting\n      //this conversion will look like PC-2 except only the last 6 bits of each byte are used\n      //rather than 48 consecutive bits and the order of lines will be according to\n      //how the S selection functions will be applied: S2, S4, S6, S8, S1, S3, S5, S7\n      lefttemp = pc2bytes0[left >>> 28] | pc2bytes1[(left >>> 24) & 0xf] | pc2bytes2[(left >>> 20) & 0xf] | pc2bytes3[(\n        left >>> 16) & 0xf] | pc2bytes4[(left >>> 12) & 0xf] | pc2bytes5[(left >>> 8) & 0xf] | pc2bytes6[(left >>> 4) &\n        0xf];\n      righttemp = pc2bytes7[right >>> 28] | pc2bytes8[(right >>> 24) & 0xf] | pc2bytes9[(right >>> 20) & 0xf] |\n        pc2bytes10[(right >>> 16) & 0xf] | pc2bytes11[(right >>> 12) & 0xf] | pc2bytes12[(right >>> 8) & 0xf] |\n        pc2bytes13[(right >>> 4) & 0xf];\n      temp = ((righttemp >>> 16) ^ lefttemp) & 0x0000ffff;\n      keys[n++] = lefttemp ^ temp;\n      keys[n++] = righttemp ^ (temp << 16);\n    }\n  } //for each iterations\n  //return the keys we've created\n  return keys;\n} //end of desCreateKeys\n\n\nfunction desAddPadding(message, padding) {\n  const padLength = 8 - (message.length % 8);\n\n  let pad;\n  if (padding === 2 && (padLength < 8)) { //pad the message with spaces\n    pad = ' '.charCodeAt(0);\n  } else if (padding === 1) { //PKCS7 padding\n    pad = padLength;\n  } else if (!padding && (padLength < 8)) { //pad the message out with null bytes\n    pad = 0;\n  } else if (padLength === 8) {\n    return message;\n  } else {\n    throw new Error('des: invalid padding');\n  }\n\n  const paddedMessage = new Uint8Array(message.length + padLength);\n  for (let i = 0; i < message.length; i++) {\n    paddedMessage[i] = message[i];\n  }\n  for (let j = 0; j < padLength; j++) {\n    paddedMessage[message.length + j] = pad;\n  }\n\n  return paddedMessage;\n}\n\nfunction desRemovePadding(message, padding) {\n  let padLength = null;\n  let pad;\n  if (padding === 2) { // space padded\n    pad = ' '.charCodeAt(0);\n  } else if (padding === 1) { // PKCS7\n    padLength = message[message.length - 1];\n  } else if (!padding) { // null padding\n    pad = 0;\n  } else {\n    throw new Error('des: invalid padding');\n  }\n\n  if (!padLength) {\n    padLength = 1;\n    while (message[message.length - padLength] === pad) {\n      padLength++;\n    }\n    padLength--;\n  }\n\n  return message.subarray(0, message.length - padLength);\n}\n\n// added by Recurity Labs\n\nexport function TripleDES(key) {\n  this.key = [];\n\n  for (let i = 0; i < 3; i++) {\n    this.key.push(new Uint8Array(key.subarray(i * 8, (i * 8) + 8)));\n  }\n\n  this.encrypt = function(block) {\n    return des(\n      desCreateKeys(this.key[2]),\n      des(\n        desCreateKeys(this.key[1]),\n        des(\n          desCreateKeys(this.key[0]),\n          block, true, 0, null, null\n        ),\n        false, 0, null, null\n      ), true, 0, null, null\n    );\n  };\n}\n\nTripleDES.keySize = TripleDES.prototype.keySize = 24;\nTripleDES.blockSize = TripleDES.prototype.blockSize = 8;\n\n// This is \"original\" DES\n\nexport function DES(key) {\n  this.key = key;\n\n  this.encrypt = function(block, padding) {\n    const keys = desCreateKeys(this.key);\n    return des(keys, block, true, 0, null, padding);\n  };\n\n  this.decrypt = function(block, padding) {\n    const keys = desCreateKeys(this.key);\n    return des(keys, block, false, 0, null, padding);\n  };\n}\n","// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Copyright 2010 pjacobs@xeekr.com . All rights reserved.\n\n// Modified by Recurity Labs GmbH\n\n// fixed/modified by Herbert Hanewinkel, www.haneWIN.de\n// check www.haneWIN.de for the latest version\n\n// cast5.js is a Javascript implementation of CAST-128, as defined in RFC 2144.\n// CAST-128 is a common OpenPGP cipher.\n\n\n// CAST5 constructor\n\nfunction OpenPGPSymEncCAST5() {\n  this.BlockSize = 8;\n  this.KeySize = 16;\n\n  this.setKey = function(key) {\n    this.masking = new Array(16);\n    this.rotate = new Array(16);\n\n    this.reset();\n\n    if (key.length === this.KeySize) {\n      this.keySchedule(key);\n    } else {\n      throw new Error('CAST-128: keys must be 16 bytes');\n    }\n    return true;\n  };\n\n  this.reset = function() {\n    for (let i = 0; i < 16; i++) {\n      this.masking[i] = 0;\n      this.rotate[i] = 0;\n    }\n  };\n\n  this.getBlockSize = function() {\n    return this.BlockSize;\n  };\n\n  this.encrypt = function(src) {\n    const dst = new Array(src.length);\n\n    for (let i = 0; i < src.length; i += 8) {\n      let l = (src[i] << 24) | (src[i + 1] << 16) | (src[i + 2] << 8) | src[i + 3];\n      let r = (src[i + 4] << 24) | (src[i + 5] << 16) | (src[i + 6] << 8) | src[i + 7];\n      let t;\n\n      t = r;\n      r = l ^ f1(r, this.masking[0], this.rotate[0]);\n      l = t;\n      t = r;\n      r = l ^ f2(r, this.masking[1], this.rotate[1]);\n      l = t;\n      t = r;\n      r = l ^ f3(r, this.masking[2], this.rotate[2]);\n      l = t;\n      t = r;\n      r = l ^ f1(r, this.masking[3], this.rotate[3]);\n      l = t;\n\n      t = r;\n      r = l ^ f2(r, this.masking[4], this.rotate[4]);\n      l = t;\n      t = r;\n      r = l ^ f3(r, this.masking[5], this.rotate[5]);\n      l = t;\n      t = r;\n      r = l ^ f1(r, this.masking[6], this.rotate[6]);\n      l = t;\n      t = r;\n      r = l ^ f2(r, this.masking[7], this.rotate[7]);\n      l = t;\n\n      t = r;\n      r = l ^ f3(r, this.masking[8], this.rotate[8]);\n      l = t;\n      t = r;\n      r = l ^ f1(r, this.masking[9], this.rotate[9]);\n      l = t;\n      t = r;\n      r = l ^ f2(r, this.masking[10], this.rotate[10]);\n      l = t;\n      t = r;\n      r = l ^ f3(r, this.masking[11], this.rotate[11]);\n      l = t;\n\n      t = r;\n      r = l ^ f1(r, this.masking[12], this.rotate[12]);\n      l = t;\n      t = r;\n      r = l ^ f2(r, this.masking[13], this.rotate[13]);\n      l = t;\n      t = r;\n      r = l ^ f3(r, this.masking[14], this.rotate[14]);\n      l = t;\n      t = r;\n      r = l ^ f1(r, this.masking[15], this.rotate[15]);\n      l = t;\n\n      dst[i] = (r >>> 24) & 255;\n      dst[i + 1] = (r >>> 16) & 255;\n      dst[i + 2] = (r >>> 8) & 255;\n      dst[i + 3] = r & 255;\n      dst[i + 4] = (l >>> 24) & 255;\n      dst[i + 5] = (l >>> 16) & 255;\n      dst[i + 6] = (l >>> 8) & 255;\n      dst[i + 7] = l & 255;\n    }\n\n    return dst;\n  };\n\n  this.decrypt = function(src) {\n    const dst = new Array(src.length);\n\n    for (let i = 0; i < src.length; i += 8) {\n      let l = (src[i] << 24) | (src[i + 1] << 16) | (src[i + 2] << 8) | src[i + 3];\n      let r = (src[i + 4] << 24) | (src[i + 5] << 16) | (src[i + 6] << 8) | src[i + 7];\n      let t;\n\n      t = r;\n      r = l ^ f1(r, this.masking[15], this.rotate[15]);\n      l = t;\n      t = r;\n      r = l ^ f3(r, this.masking[14], this.rotate[14]);\n      l = t;\n      t = r;\n      r = l ^ f2(r, this.masking[13], this.rotate[13]);\n      l = t;\n      t = r;\n      r = l ^ f1(r, this.masking[12], this.rotate[12]);\n      l = t;\n\n      t = r;\n      r = l ^ f3(r, this.masking[11], this.rotate[11]);\n      l = t;\n      t = r;\n      r = l ^ f2(r, this.masking[10], this.rotate[10]);\n      l = t;\n      t = r;\n      r = l ^ f1(r, this.masking[9], this.rotate[9]);\n      l = t;\n      t = r;\n      r = l ^ f3(r, this.masking[8], this.rotate[8]);\n      l = t;\n\n      t = r;\n      r = l ^ f2(r, this.masking[7], this.rotate[7]);\n      l = t;\n      t = r;\n      r = l ^ f1(r, this.masking[6], this.rotate[6]);\n      l = t;\n      t = r;\n      r = l ^ f3(r, this.masking[5], this.rotate[5]);\n      l = t;\n      t = r;\n      r = l ^ f2(r, this.masking[4], this.rotate[4]);\n      l = t;\n\n      t = r;\n      r = l ^ f1(r, this.masking[3], this.rotate[3]);\n      l = t;\n      t = r;\n      r = l ^ f3(r, this.masking[2], this.rotate[2]);\n      l = t;\n      t = r;\n      r = l ^ f2(r, this.masking[1], this.rotate[1]);\n      l = t;\n      t = r;\n      r = l ^ f1(r, this.masking[0], this.rotate[0]);\n      l = t;\n\n      dst[i] = (r >>> 24) & 255;\n      dst[i + 1] = (r >>> 16) & 255;\n      dst[i + 2] = (r >>> 8) & 255;\n      dst[i + 3] = r & 255;\n      dst[i + 4] = (l >>> 24) & 255;\n      dst[i + 5] = (l >> 16) & 255;\n      dst[i + 6] = (l >> 8) & 255;\n      dst[i + 7] = l & 255;\n    }\n\n    return dst;\n  };\n  const scheduleA = new Array(4);\n\n  scheduleA[0] = new Array(4);\n  scheduleA[0][0] = [4, 0, 0xd, 0xf, 0xc, 0xe, 0x8];\n  scheduleA[0][1] = [5, 2, 16 + 0, 16 + 2, 16 + 1, 16 + 3, 0xa];\n  scheduleA[0][2] = [6, 3, 16 + 7, 16 + 6, 16 + 5, 16 + 4, 9];\n  scheduleA[0][3] = [7, 1, 16 + 0xa, 16 + 9, 16 + 0xb, 16 + 8, 0xb];\n\n  scheduleA[1] = new Array(4);\n  scheduleA[1][0] = [0, 6, 16 + 5, 16 + 7, 16 + 4, 16 + 6, 16 + 0];\n  scheduleA[1][1] = [1, 4, 0, 2, 1, 3, 16 + 2];\n  scheduleA[1][2] = [2, 5, 7, 6, 5, 4, 16 + 1];\n  scheduleA[1][3] = [3, 7, 0xa, 9, 0xb, 8, 16 + 3];\n\n  scheduleA[2] = new Array(4);\n  scheduleA[2][0] = [4, 0, 0xd, 0xf, 0xc, 0xe, 8];\n  scheduleA[2][1] = [5, 2, 16 + 0, 16 + 2, 16 + 1, 16 + 3, 0xa];\n  scheduleA[2][2] = [6, 3, 16 + 7, 16 + 6, 16 + 5, 16 + 4, 9];\n  scheduleA[2][3] = [7, 1, 16 + 0xa, 16 + 9, 16 + 0xb, 16 + 8, 0xb];\n\n\n  scheduleA[3] = new Array(4);\n  scheduleA[3][0] = [0, 6, 16 + 5, 16 + 7, 16 + 4, 16 + 6, 16 + 0];\n  scheduleA[3][1] = [1, 4, 0, 2, 1, 3, 16 + 2];\n  scheduleA[3][2] = [2, 5, 7, 6, 5, 4, 16 + 1];\n  scheduleA[3][3] = [3, 7, 0xa, 9, 0xb, 8, 16 + 3];\n\n  const scheduleB = new Array(4);\n\n  scheduleB[0] = new Array(4);\n  scheduleB[0][0] = [16 + 8, 16 + 9, 16 + 7, 16 + 6, 16 + 2];\n  scheduleB[0][1] = [16 + 0xa, 16 + 0xb, 16 + 5, 16 + 4, 16 + 6];\n  scheduleB[0][2] = [16 + 0xc, 16 + 0xd, 16 + 3, 16 + 2, 16 + 9];\n  scheduleB[0][3] = [16 + 0xe, 16 + 0xf, 16 + 1, 16 + 0, 16 + 0xc];\n\n  scheduleB[1] = new Array(4);\n  scheduleB[1][0] = [3, 2, 0xc, 0xd, 8];\n  scheduleB[1][1] = [1, 0, 0xe, 0xf, 0xd];\n  scheduleB[1][2] = [7, 6, 8, 9, 3];\n  scheduleB[1][3] = [5, 4, 0xa, 0xb, 7];\n\n\n  scheduleB[2] = new Array(4);\n  scheduleB[2][0] = [16 + 3, 16 + 2, 16 + 0xc, 16 + 0xd, 16 + 9];\n  scheduleB[2][1] = [16 + 1, 16 + 0, 16 + 0xe, 16 + 0xf, 16 + 0xc];\n  scheduleB[2][2] = [16 + 7, 16 + 6, 16 + 8, 16 + 9, 16 + 2];\n  scheduleB[2][3] = [16 + 5, 16 + 4, 16 + 0xa, 16 + 0xb, 16 + 6];\n\n\n  scheduleB[3] = new Array(4);\n  scheduleB[3][0] = [8, 9, 7, 6, 3];\n  scheduleB[3][1] = [0xa, 0xb, 5, 4, 7];\n  scheduleB[3][2] = [0xc, 0xd, 3, 2, 8];\n  scheduleB[3][3] = [0xe, 0xf, 1, 0, 0xd];\n\n  // changed 'in' to 'inn' (in javascript 'in' is a reserved word)\n  this.keySchedule = function(inn) {\n    const t = new Array(8);\n    const k = new Array(32);\n\n    let j;\n\n    for (let i = 0; i < 4; i++) {\n      j = i * 4;\n      t[i] = (inn[j] << 24) | (inn[j + 1] << 16) | (inn[j + 2] << 8) | inn[j + 3];\n    }\n\n    const x = [6, 7, 4, 5];\n    let ki = 0;\n    let w;\n\n    for (let half = 0; half < 2; half++) {\n      for (let round = 0; round < 4; round++) {\n        for (j = 0; j < 4; j++) {\n          const a = scheduleA[round][j];\n          w = t[a[1]];\n\n          w ^= sBox[4][(t[a[2] >>> 2] >>> (24 - 8 * (a[2] & 3))) & 0xff];\n          w ^= sBox[5][(t[a[3] >>> 2] >>> (24 - 8 * (a[3] & 3))) & 0xff];\n          w ^= sBox[6][(t[a[4] >>> 2] >>> (24 - 8 * (a[4] & 3))) & 0xff];\n          w ^= sBox[7][(t[a[5] >>> 2] >>> (24 - 8 * (a[5] & 3))) & 0xff];\n          w ^= sBox[x[j]][(t[a[6] >>> 2] >>> (24 - 8 * (a[6] & 3))) & 0xff];\n          t[a[0]] = w;\n        }\n\n        for (j = 0; j < 4; j++) {\n          const b = scheduleB[round][j];\n          w = sBox[4][(t[b[0] >>> 2] >>> (24 - 8 * (b[0] & 3))) & 0xff];\n\n          w ^= sBox[5][(t[b[1] >>> 2] >>> (24 - 8 * (b[1] & 3))) & 0xff];\n          w ^= sBox[6][(t[b[2] >>> 2] >>> (24 - 8 * (b[2] & 3))) & 0xff];\n          w ^= sBox[7][(t[b[3] >>> 2] >>> (24 - 8 * (b[3] & 3))) & 0xff];\n          w ^= sBox[4 + j][(t[b[4] >>> 2] >>> (24 - 8 * (b[4] & 3))) & 0xff];\n          k[ki] = w;\n          ki++;\n        }\n      }\n    }\n\n    for (let i = 0; i < 16; i++) {\n      this.masking[i] = k[i];\n      this.rotate[i] = k[16 + i] & 0x1f;\n    }\n  };\n\n  // These are the three 'f' functions. See RFC 2144, section 2.2.\n\n  function f1(d, m, r) {\n    const t = m + d;\n    const I = (t << r) | (t >>> (32 - r));\n    return ((sBox[0][I >>> 24] ^ sBox[1][(I >>> 16) & 255]) - sBox[2][(I >>> 8) & 255]) + sBox[3][I & 255];\n  }\n\n  function f2(d, m, r) {\n    const t = m ^ d;\n    const I = (t << r) | (t >>> (32 - r));\n    return ((sBox[0][I >>> 24] - sBox[1][(I >>> 16) & 255]) + sBox[2][(I >>> 8) & 255]) ^ sBox[3][I & 255];\n  }\n\n  function f3(d, m, r) {\n    const t = m - d;\n    const I = (t << r) | (t >>> (32 - r));\n    return ((sBox[0][I >>> 24] + sBox[1][(I >>> 16) & 255]) ^ sBox[2][(I >>> 8) & 255]) - sBox[3][I & 255];\n  }\n\n  const sBox = new Array(8);\n  sBox[0] = [\n    0x30fb40d4, 0x9fa0ff0b, 0x6beccd2f, 0x3f258c7a, 0x1e213f2f, 0x9c004dd3, 0x6003e540, 0xcf9fc949,\n    0xbfd4af27, 0x88bbbdb5, 0xe2034090, 0x98d09675, 0x6e63a0e0, 0x15c361d2, 0xc2e7661d, 0x22d4ff8e,\n    0x28683b6f, 0xc07fd059, 0xff2379c8, 0x775f50e2, 0x43c340d3, 0xdf2f8656, 0x887ca41a, 0xa2d2bd2d,\n    0xa1c9e0d6, 0x346c4819, 0x61b76d87, 0x22540f2f, 0x2abe32e1, 0xaa54166b, 0x22568e3a, 0xa2d341d0,\n    0x66db40c8, 0xa784392f, 0x004dff2f, 0x2db9d2de, 0x97943fac, 0x4a97c1d8, 0x527644b7, 0xb5f437a7,\n    0xb82cbaef, 0xd751d159, 0x6ff7f0ed, 0x5a097a1f, 0x827b68d0, 0x90ecf52e, 0x22b0c054, 0xbc8e5935,\n    0x4b6d2f7f, 0x50bb64a2, 0xd2664910, 0xbee5812d, 0xb7332290, 0xe93b159f, 0xb48ee411, 0x4bff345d,\n    0xfd45c240, 0xad31973f, 0xc4f6d02e, 0x55fc8165, 0xd5b1caad, 0xa1ac2dae, 0xa2d4b76d, 0xc19b0c50,\n    0x882240f2, 0x0c6e4f38, 0xa4e4bfd7, 0x4f5ba272, 0x564c1d2f, 0xc59c5319, 0xb949e354, 0xb04669fe,\n    0xb1b6ab8a, 0xc71358dd, 0x6385c545, 0x110f935d, 0x57538ad5, 0x6a390493, 0xe63d37e0, 0x2a54f6b3,\n    0x3a787d5f, 0x6276a0b5, 0x19a6fcdf, 0x7a42206a, 0x29f9d4d5, 0xf61b1891, 0xbb72275e, 0xaa508167,\n    0x38901091, 0xc6b505eb, 0x84c7cb8c, 0x2ad75a0f, 0x874a1427, 0xa2d1936b, 0x2ad286af, 0xaa56d291,\n    0xd7894360, 0x425c750d, 0x93b39e26, 0x187184c9, 0x6c00b32d, 0x73e2bb14, 0xa0bebc3c, 0x54623779,\n    0x64459eab, 0x3f328b82, 0x7718cf82, 0x59a2cea6, 0x04ee002e, 0x89fe78e6, 0x3fab0950, 0x325ff6c2,\n    0x81383f05, 0x6963c5c8, 0x76cb5ad6, 0xd49974c9, 0xca180dcf, 0x380782d5, 0xc7fa5cf6, 0x8ac31511,\n    0x35e79e13, 0x47da91d0, 0xf40f9086, 0xa7e2419e, 0x31366241, 0x051ef495, 0xaa573b04, 0x4a805d8d,\n    0x548300d0, 0x00322a3c, 0xbf64cddf, 0xba57a68e, 0x75c6372b, 0x50afd341, 0xa7c13275, 0x915a0bf5,\n    0x6b54bfab, 0x2b0b1426, 0xab4cc9d7, 0x449ccd82, 0xf7fbf265, 0xab85c5f3, 0x1b55db94, 0xaad4e324,\n    0xcfa4bd3f, 0x2deaa3e2, 0x9e204d02, 0xc8bd25ac, 0xeadf55b3, 0xd5bd9e98, 0xe31231b2, 0x2ad5ad6c,\n    0x954329de, 0xadbe4528, 0xd8710f69, 0xaa51c90f, 0xaa786bf6, 0x22513f1e, 0xaa51a79b, 0x2ad344cc,\n    0x7b5a41f0, 0xd37cfbad, 0x1b069505, 0x41ece491, 0xb4c332e6, 0x032268d4, 0xc9600acc, 0xce387e6d,\n    0xbf6bb16c, 0x6a70fb78, 0x0d03d9c9, 0xd4df39de, 0xe01063da, 0x4736f464, 0x5ad328d8, 0xb347cc96,\n    0x75bb0fc3, 0x98511bfb, 0x4ffbcc35, 0xb58bcf6a, 0xe11f0abc, 0xbfc5fe4a, 0xa70aec10, 0xac39570a,\n    0x3f04442f, 0x6188b153, 0xe0397a2e, 0x5727cb79, 0x9ceb418f, 0x1cacd68d, 0x2ad37c96, 0x0175cb9d,\n    0xc69dff09, 0xc75b65f0, 0xd9db40d8, 0xec0e7779, 0x4744ead4, 0xb11c3274, 0xdd24cb9e, 0x7e1c54bd,\n    0xf01144f9, 0xd2240eb1, 0x9675b3fd, 0xa3ac3755, 0xd47c27af, 0x51c85f4d, 0x56907596, 0xa5bb15e6,\n    0x580304f0, 0xca042cf1, 0x011a37ea, 0x8dbfaadb, 0x35ba3e4a, 0x3526ffa0, 0xc37b4d09, 0xbc306ed9,\n    0x98a52666, 0x5648f725, 0xff5e569d, 0x0ced63d0, 0x7c63b2cf, 0x700b45e1, 0xd5ea50f1, 0x85a92872,\n    0xaf1fbda7, 0xd4234870, 0xa7870bf3, 0x2d3b4d79, 0x42e04198, 0x0cd0ede7, 0x26470db8, 0xf881814c,\n    0x474d6ad7, 0x7c0c5e5c, 0xd1231959, 0x381b7298, 0xf5d2f4db, 0xab838653, 0x6e2f1e23, 0x83719c9e,\n    0xbd91e046, 0x9a56456e, 0xdc39200c, 0x20c8c571, 0x962bda1c, 0xe1e696ff, 0xb141ab08, 0x7cca89b9,\n    0x1a69e783, 0x02cc4843, 0xa2f7c579, 0x429ef47d, 0x427b169c, 0x5ac9f049, 0xdd8f0f00, 0x5c8165bf\n  ];\n\n  sBox[1] = [\n    0x1f201094, 0xef0ba75b, 0x69e3cf7e, 0x393f4380, 0xfe61cf7a, 0xeec5207a, 0x55889c94, 0x72fc0651,\n    0xada7ef79, 0x4e1d7235, 0xd55a63ce, 0xde0436ba, 0x99c430ef, 0x5f0c0794, 0x18dcdb7d, 0xa1d6eff3,\n    0xa0b52f7b, 0x59e83605, 0xee15b094, 0xe9ffd909, 0xdc440086, 0xef944459, 0xba83ccb3, 0xe0c3cdfb,\n    0xd1da4181, 0x3b092ab1, 0xf997f1c1, 0xa5e6cf7b, 0x01420ddb, 0xe4e7ef5b, 0x25a1ff41, 0xe180f806,\n    0x1fc41080, 0x179bee7a, 0xd37ac6a9, 0xfe5830a4, 0x98de8b7f, 0x77e83f4e, 0x79929269, 0x24fa9f7b,\n    0xe113c85b, 0xacc40083, 0xd7503525, 0xf7ea615f, 0x62143154, 0x0d554b63, 0x5d681121, 0xc866c359,\n    0x3d63cf73, 0xcee234c0, 0xd4d87e87, 0x5c672b21, 0x071f6181, 0x39f7627f, 0x361e3084, 0xe4eb573b,\n    0x602f64a4, 0xd63acd9c, 0x1bbc4635, 0x9e81032d, 0x2701f50c, 0x99847ab4, 0xa0e3df79, 0xba6cf38c,\n    0x10843094, 0x2537a95e, 0xf46f6ffe, 0xa1ff3b1f, 0x208cfb6a, 0x8f458c74, 0xd9e0a227, 0x4ec73a34,\n    0xfc884f69, 0x3e4de8df, 0xef0e0088, 0x3559648d, 0x8a45388c, 0x1d804366, 0x721d9bfd, 0xa58684bb,\n    0xe8256333, 0x844e8212, 0x128d8098, 0xfed33fb4, 0xce280ae1, 0x27e19ba5, 0xd5a6c252, 0xe49754bd,\n    0xc5d655dd, 0xeb667064, 0x77840b4d, 0xa1b6a801, 0x84db26a9, 0xe0b56714, 0x21f043b7, 0xe5d05860,\n    0x54f03084, 0x066ff472, 0xa31aa153, 0xdadc4755, 0xb5625dbf, 0x68561be6, 0x83ca6b94, 0x2d6ed23b,\n    0xeccf01db, 0xa6d3d0ba, 0xb6803d5c, 0xaf77a709, 0x33b4a34c, 0x397bc8d6, 0x5ee22b95, 0x5f0e5304,\n    0x81ed6f61, 0x20e74364, 0xb45e1378, 0xde18639b, 0x881ca122, 0xb96726d1, 0x8049a7e8, 0x22b7da7b,\n    0x5e552d25, 0x5272d237, 0x79d2951c, 0xc60d894c, 0x488cb402, 0x1ba4fe5b, 0xa4b09f6b, 0x1ca815cf,\n    0xa20c3005, 0x8871df63, 0xb9de2fcb, 0x0cc6c9e9, 0x0beeff53, 0xe3214517, 0xb4542835, 0x9f63293c,\n    0xee41e729, 0x6e1d2d7c, 0x50045286, 0x1e6685f3, 0xf33401c6, 0x30a22c95, 0x31a70850, 0x60930f13,\n    0x73f98417, 0xa1269859, 0xec645c44, 0x52c877a9, 0xcdff33a6, 0xa02b1741, 0x7cbad9a2, 0x2180036f,\n    0x50d99c08, 0xcb3f4861, 0xc26bd765, 0x64a3f6ab, 0x80342676, 0x25a75e7b, 0xe4e6d1fc, 0x20c710e6,\n    0xcdf0b680, 0x17844d3b, 0x31eef84d, 0x7e0824e4, 0x2ccb49eb, 0x846a3bae, 0x8ff77888, 0xee5d60f6,\n    0x7af75673, 0x2fdd5cdb, 0xa11631c1, 0x30f66f43, 0xb3faec54, 0x157fd7fa, 0xef8579cc, 0xd152de58,\n    0xdb2ffd5e, 0x8f32ce19, 0x306af97a, 0x02f03ef8, 0x99319ad5, 0xc242fa0f, 0xa7e3ebb0, 0xc68e4906,\n    0xb8da230c, 0x80823028, 0xdcdef3c8, 0xd35fb171, 0x088a1bc8, 0xbec0c560, 0x61a3c9e8, 0xbca8f54d,\n    0xc72feffa, 0x22822e99, 0x82c570b4, 0xd8d94e89, 0x8b1c34bc, 0x301e16e6, 0x273be979, 0xb0ffeaa6,\n    0x61d9b8c6, 0x00b24869, 0xb7ffce3f, 0x08dc283b, 0x43daf65a, 0xf7e19798, 0x7619b72f, 0x8f1c9ba4,\n    0xdc8637a0, 0x16a7d3b1, 0x9fc393b7, 0xa7136eeb, 0xc6bcc63e, 0x1a513742, 0xef6828bc, 0x520365d6,\n    0x2d6a77ab, 0x3527ed4b, 0x821fd216, 0x095c6e2e, 0xdb92f2fb, 0x5eea29cb, 0x145892f5, 0x91584f7f,\n    0x5483697b, 0x2667a8cc, 0x85196048, 0x8c4bacea, 0x833860d4, 0x0d23e0f9, 0x6c387e8a, 0x0ae6d249,\n    0xb284600c, 0xd835731d, 0xdcb1c647, 0xac4c56ea, 0x3ebd81b3, 0x230eabb0, 0x6438bc87, 0xf0b5b1fa,\n    0x8f5ea2b3, 0xfc184642, 0x0a036b7a, 0x4fb089bd, 0x649da589, 0xa345415e, 0x5c038323, 0x3e5d3bb9,\n    0x43d79572, 0x7e6dd07c, 0x06dfdf1e, 0x6c6cc4ef, 0x7160a539, 0x73bfbe70, 0x83877605, 0x4523ecf1\n  ];\n\n  sBox[2] = [\n    0x8defc240, 0x25fa5d9f, 0xeb903dbf, 0xe810c907, 0x47607fff, 0x369fe44b, 0x8c1fc644, 0xaececa90,\n    0xbeb1f9bf, 0xeefbcaea, 0xe8cf1950, 0x51df07ae, 0x920e8806, 0xf0ad0548, 0xe13c8d83, 0x927010d5,\n    0x11107d9f, 0x07647db9, 0xb2e3e4d4, 0x3d4f285e, 0xb9afa820, 0xfade82e0, 0xa067268b, 0x8272792e,\n    0x553fb2c0, 0x489ae22b, 0xd4ef9794, 0x125e3fbc, 0x21fffcee, 0x825b1bfd, 0x9255c5ed, 0x1257a240,\n    0x4e1a8302, 0xbae07fff, 0x528246e7, 0x8e57140e, 0x3373f7bf, 0x8c9f8188, 0xa6fc4ee8, 0xc982b5a5,\n    0xa8c01db7, 0x579fc264, 0x67094f31, 0xf2bd3f5f, 0x40fff7c1, 0x1fb78dfc, 0x8e6bd2c1, 0x437be59b,\n    0x99b03dbf, 0xb5dbc64b, 0x638dc0e6, 0x55819d99, 0xa197c81c, 0x4a012d6e, 0xc5884a28, 0xccc36f71,\n    0xb843c213, 0x6c0743f1, 0x8309893c, 0x0feddd5f, 0x2f7fe850, 0xd7c07f7e, 0x02507fbf, 0x5afb9a04,\n    0xa747d2d0, 0x1651192e, 0xaf70bf3e, 0x58c31380, 0x5f98302e, 0x727cc3c4, 0x0a0fb402, 0x0f7fef82,\n    0x8c96fdad, 0x5d2c2aae, 0x8ee99a49, 0x50da88b8, 0x8427f4a0, 0x1eac5790, 0x796fb449, 0x8252dc15,\n    0xefbd7d9b, 0xa672597d, 0xada840d8, 0x45f54504, 0xfa5d7403, 0xe83ec305, 0x4f91751a, 0x925669c2,\n    0x23efe941, 0xa903f12e, 0x60270df2, 0x0276e4b6, 0x94fd6574, 0x927985b2, 0x8276dbcb, 0x02778176,\n    0xf8af918d, 0x4e48f79e, 0x8f616ddf, 0xe29d840e, 0x842f7d83, 0x340ce5c8, 0x96bbb682, 0x93b4b148,\n    0xef303cab, 0x984faf28, 0x779faf9b, 0x92dc560d, 0x224d1e20, 0x8437aa88, 0x7d29dc96, 0x2756d3dc,\n    0x8b907cee, 0xb51fd240, 0xe7c07ce3, 0xe566b4a1, 0xc3e9615e, 0x3cf8209d, 0x6094d1e3, 0xcd9ca341,\n    0x5c76460e, 0x00ea983b, 0xd4d67881, 0xfd47572c, 0xf76cedd9, 0xbda8229c, 0x127dadaa, 0x438a074e,\n    0x1f97c090, 0x081bdb8a, 0x93a07ebe, 0xb938ca15, 0x97b03cff, 0x3dc2c0f8, 0x8d1ab2ec, 0x64380e51,\n    0x68cc7bfb, 0xd90f2788, 0x12490181, 0x5de5ffd4, 0xdd7ef86a, 0x76a2e214, 0xb9a40368, 0x925d958f,\n    0x4b39fffa, 0xba39aee9, 0xa4ffd30b, 0xfaf7933b, 0x6d498623, 0x193cbcfa, 0x27627545, 0x825cf47a,\n    0x61bd8ba0, 0xd11e42d1, 0xcead04f4, 0x127ea392, 0x10428db7, 0x8272a972, 0x9270c4a8, 0x127de50b,\n    0x285ba1c8, 0x3c62f44f, 0x35c0eaa5, 0xe805d231, 0x428929fb, 0xb4fcdf82, 0x4fb66a53, 0x0e7dc15b,\n    0x1f081fab, 0x108618ae, 0xfcfd086d, 0xf9ff2889, 0x694bcc11, 0x236a5cae, 0x12deca4d, 0x2c3f8cc5,\n    0xd2d02dfe, 0xf8ef5896, 0xe4cf52da, 0x95155b67, 0x494a488c, 0xb9b6a80c, 0x5c8f82bc, 0x89d36b45,\n    0x3a609437, 0xec00c9a9, 0x44715253, 0x0a874b49, 0xd773bc40, 0x7c34671c, 0x02717ef6, 0x4feb5536,\n    0xa2d02fff, 0xd2bf60c4, 0xd43f03c0, 0x50b4ef6d, 0x07478cd1, 0x006e1888, 0xa2e53f55, 0xb9e6d4bc,\n    0xa2048016, 0x97573833, 0xd7207d67, 0xde0f8f3d, 0x72f87b33, 0xabcc4f33, 0x7688c55d, 0x7b00a6b0,\n    0x947b0001, 0x570075d2, 0xf9bb88f8, 0x8942019e, 0x4264a5ff, 0x856302e0, 0x72dbd92b, 0xee971b69,\n    0x6ea22fde, 0x5f08ae2b, 0xaf7a616d, 0xe5c98767, 0xcf1febd2, 0x61efc8c2, 0xf1ac2571, 0xcc8239c2,\n    0x67214cb8, 0xb1e583d1, 0xb7dc3e62, 0x7f10bdce, 0xf90a5c38, 0x0ff0443d, 0x606e6dc6, 0x60543a49,\n    0x5727c148, 0x2be98a1d, 0x8ab41738, 0x20e1be24, 0xaf96da0f, 0x68458425, 0x99833be5, 0x600d457d,\n    0x282f9350, 0x8334b362, 0xd91d1120, 0x2b6d8da0, 0x642b1e31, 0x9c305a00, 0x52bce688, 0x1b03588a,\n    0xf7baefd5, 0x4142ed9c, 0xa4315c11, 0x83323ec5, 0xdfef4636, 0xa133c501, 0xe9d3531c, 0xee353783\n  ];\n\n  sBox[3] = [\n    0x9db30420, 0x1fb6e9de, 0xa7be7bef, 0xd273a298, 0x4a4f7bdb, 0x64ad8c57, 0x85510443, 0xfa020ed1,\n    0x7e287aff, 0xe60fb663, 0x095f35a1, 0x79ebf120, 0xfd059d43, 0x6497b7b1, 0xf3641f63, 0x241e4adf,\n    0x28147f5f, 0x4fa2b8cd, 0xc9430040, 0x0cc32220, 0xfdd30b30, 0xc0a5374f, 0x1d2d00d9, 0x24147b15,\n    0xee4d111a, 0x0fca5167, 0x71ff904c, 0x2d195ffe, 0x1a05645f, 0x0c13fefe, 0x081b08ca, 0x05170121,\n    0x80530100, 0xe83e5efe, 0xac9af4f8, 0x7fe72701, 0xd2b8ee5f, 0x06df4261, 0xbb9e9b8a, 0x7293ea25,\n    0xce84ffdf, 0xf5718801, 0x3dd64b04, 0xa26f263b, 0x7ed48400, 0x547eebe6, 0x446d4ca0, 0x6cf3d6f5,\n    0x2649abdf, 0xaea0c7f5, 0x36338cc1, 0x503f7e93, 0xd3772061, 0x11b638e1, 0x72500e03, 0xf80eb2bb,\n    0xabe0502e, 0xec8d77de, 0x57971e81, 0xe14f6746, 0xc9335400, 0x6920318f, 0x081dbb99, 0xffc304a5,\n    0x4d351805, 0x7f3d5ce3, 0xa6c866c6, 0x5d5bcca9, 0xdaec6fea, 0x9f926f91, 0x9f46222f, 0x3991467d,\n    0xa5bf6d8e, 0x1143c44f, 0x43958302, 0xd0214eeb, 0x022083b8, 0x3fb6180c, 0x18f8931e, 0x281658e6,\n    0x26486e3e, 0x8bd78a70, 0x7477e4c1, 0xb506e07c, 0xf32d0a25, 0x79098b02, 0xe4eabb81, 0x28123b23,\n    0x69dead38, 0x1574ca16, 0xdf871b62, 0x211c40b7, 0xa51a9ef9, 0x0014377b, 0x041e8ac8, 0x09114003,\n    0xbd59e4d2, 0xe3d156d5, 0x4fe876d5, 0x2f91a340, 0x557be8de, 0x00eae4a7, 0x0ce5c2ec, 0x4db4bba6,\n    0xe756bdff, 0xdd3369ac, 0xec17b035, 0x06572327, 0x99afc8b0, 0x56c8c391, 0x6b65811c, 0x5e146119,\n    0x6e85cb75, 0xbe07c002, 0xc2325577, 0x893ff4ec, 0x5bbfc92d, 0xd0ec3b25, 0xb7801ab7, 0x8d6d3b24,\n    0x20c763ef, 0xc366a5fc, 0x9c382880, 0x0ace3205, 0xaac9548a, 0xeca1d7c7, 0x041afa32, 0x1d16625a,\n    0x6701902c, 0x9b757a54, 0x31d477f7, 0x9126b031, 0x36cc6fdb, 0xc70b8b46, 0xd9e66a48, 0x56e55a79,\n    0x026a4ceb, 0x52437eff, 0x2f8f76b4, 0x0df980a5, 0x8674cde3, 0xedda04eb, 0x17a9be04, 0x2c18f4df,\n    0xb7747f9d, 0xab2af7b4, 0xefc34d20, 0x2e096b7c, 0x1741a254, 0xe5b6a035, 0x213d42f6, 0x2c1c7c26,\n    0x61c2f50f, 0x6552daf9, 0xd2c231f8, 0x25130f69, 0xd8167fa2, 0x0418f2c8, 0x001a96a6, 0x0d1526ab,\n    0x63315c21, 0x5e0a72ec, 0x49bafefd, 0x187908d9, 0x8d0dbd86, 0x311170a7, 0x3e9b640c, 0xcc3e10d7,\n    0xd5cad3b6, 0x0caec388, 0xf73001e1, 0x6c728aff, 0x71eae2a1, 0x1f9af36e, 0xcfcbd12f, 0xc1de8417,\n    0xac07be6b, 0xcb44a1d8, 0x8b9b0f56, 0x013988c3, 0xb1c52fca, 0xb4be31cd, 0xd8782806, 0x12a3a4e2,\n    0x6f7de532, 0x58fd7eb6, 0xd01ee900, 0x24adffc2, 0xf4990fc5, 0x9711aac5, 0x001d7b95, 0x82e5e7d2,\n    0x109873f6, 0x00613096, 0xc32d9521, 0xada121ff, 0x29908415, 0x7fbb977f, 0xaf9eb3db, 0x29c9ed2a,\n    0x5ce2a465, 0xa730f32c, 0xd0aa3fe8, 0x8a5cc091, 0xd49e2ce7, 0x0ce454a9, 0xd60acd86, 0x015f1919,\n    0x77079103, 0xdea03af6, 0x78a8565e, 0xdee356df, 0x21f05cbe, 0x8b75e387, 0xb3c50651, 0xb8a5c3ef,\n    0xd8eeb6d2, 0xe523be77, 0xc2154529, 0x2f69efdf, 0xafe67afb, 0xf470c4b2, 0xf3e0eb5b, 0xd6cc9876,\n    0x39e4460c, 0x1fda8538, 0x1987832f, 0xca007367, 0xa99144f8, 0x296b299e, 0x492fc295, 0x9266beab,\n    0xb5676e69, 0x9bd3ddda, 0xdf7e052f, 0xdb25701c, 0x1b5e51ee, 0xf65324e6, 0x6afce36c, 0x0316cc04,\n    0x8644213e, 0xb7dc59d0, 0x7965291f, 0xccd6fd43, 0x41823979, 0x932bcdf6, 0xb657c34d, 0x4edfd282,\n    0x7ae5290c, 0x3cb9536b, 0x851e20fe, 0x9833557e, 0x13ecf0b0, 0xd3ffb372, 0x3f85c5c1, 0x0aef7ed2\n  ];\n\n  sBox[4] = [\n    0x7ec90c04, 0x2c6e74b9, 0x9b0e66df, 0xa6337911, 0xb86a7fff, 0x1dd358f5, 0x44dd9d44, 0x1731167f,\n    0x08fbf1fa, 0xe7f511cc, 0xd2051b00, 0x735aba00, 0x2ab722d8, 0x386381cb, 0xacf6243a, 0x69befd7a,\n    0xe6a2e77f, 0xf0c720cd, 0xc4494816, 0xccf5c180, 0x38851640, 0x15b0a848, 0xe68b18cb, 0x4caadeff,\n    0x5f480a01, 0x0412b2aa, 0x259814fc, 0x41d0efe2, 0x4e40b48d, 0x248eb6fb, 0x8dba1cfe, 0x41a99b02,\n    0x1a550a04, 0xba8f65cb, 0x7251f4e7, 0x95a51725, 0xc106ecd7, 0x97a5980a, 0xc539b9aa, 0x4d79fe6a,\n    0xf2f3f763, 0x68af8040, 0xed0c9e56, 0x11b4958b, 0xe1eb5a88, 0x8709e6b0, 0xd7e07156, 0x4e29fea7,\n    0x6366e52d, 0x02d1c000, 0xc4ac8e05, 0x9377f571, 0x0c05372a, 0x578535f2, 0x2261be02, 0xd642a0c9,\n    0xdf13a280, 0x74b55bd2, 0x682199c0, 0xd421e5ec, 0x53fb3ce8, 0xc8adedb3, 0x28a87fc9, 0x3d959981,\n    0x5c1ff900, 0xfe38d399, 0x0c4eff0b, 0x062407ea, 0xaa2f4fb1, 0x4fb96976, 0x90c79505, 0xb0a8a774,\n    0xef55a1ff, 0xe59ca2c2, 0xa6b62d27, 0xe66a4263, 0xdf65001f, 0x0ec50966, 0xdfdd55bc, 0x29de0655,\n    0x911e739a, 0x17af8975, 0x32c7911c, 0x89f89468, 0x0d01e980, 0x524755f4, 0x03b63cc9, 0x0cc844b2,\n    0xbcf3f0aa, 0x87ac36e9, 0xe53a7426, 0x01b3d82b, 0x1a9e7449, 0x64ee2d7e, 0xcddbb1da, 0x01c94910,\n    0xb868bf80, 0x0d26f3fd, 0x9342ede7, 0x04a5c284, 0x636737b6, 0x50f5b616, 0xf24766e3, 0x8eca36c1,\n    0x136e05db, 0xfef18391, 0xfb887a37, 0xd6e7f7d4, 0xc7fb7dc9, 0x3063fcdf, 0xb6f589de, 0xec2941da,\n    0x26e46695, 0xb7566419, 0xf654efc5, 0xd08d58b7, 0x48925401, 0xc1bacb7f, 0xe5ff550f, 0xb6083049,\n    0x5bb5d0e8, 0x87d72e5a, 0xab6a6ee1, 0x223a66ce, 0xc62bf3cd, 0x9e0885f9, 0x68cb3e47, 0x086c010f,\n    0xa21de820, 0xd18b69de, 0xf3f65777, 0xfa02c3f6, 0x407edac3, 0xcbb3d550, 0x1793084d, 0xb0d70eba,\n    0x0ab378d5, 0xd951fb0c, 0xded7da56, 0x4124bbe4, 0x94ca0b56, 0x0f5755d1, 0xe0e1e56e, 0x6184b5be,\n    0x580a249f, 0x94f74bc0, 0xe327888e, 0x9f7b5561, 0xc3dc0280, 0x05687715, 0x646c6bd7, 0x44904db3,\n    0x66b4f0a3, 0xc0f1648a, 0x697ed5af, 0x49e92ff6, 0x309e374f, 0x2cb6356a, 0x85808573, 0x4991f840,\n    0x76f0ae02, 0x083be84d, 0x28421c9a, 0x44489406, 0x736e4cb8, 0xc1092910, 0x8bc95fc6, 0x7d869cf4,\n    0x134f616f, 0x2e77118d, 0xb31b2be1, 0xaa90b472, 0x3ca5d717, 0x7d161bba, 0x9cad9010, 0xaf462ba2,\n    0x9fe459d2, 0x45d34559, 0xd9f2da13, 0xdbc65487, 0xf3e4f94e, 0x176d486f, 0x097c13ea, 0x631da5c7,\n    0x445f7382, 0x175683f4, 0xcdc66a97, 0x70be0288, 0xb3cdcf72, 0x6e5dd2f3, 0x20936079, 0x459b80a5,\n    0xbe60e2db, 0xa9c23101, 0xeba5315c, 0x224e42f2, 0x1c5c1572, 0xf6721b2c, 0x1ad2fff3, 0x8c25404e,\n    0x324ed72f, 0x4067b7fd, 0x0523138e, 0x5ca3bc78, 0xdc0fd66e, 0x75922283, 0x784d6b17, 0x58ebb16e,\n    0x44094f85, 0x3f481d87, 0xfcfeae7b, 0x77b5ff76, 0x8c2302bf, 0xaaf47556, 0x5f46b02a, 0x2b092801,\n    0x3d38f5f7, 0x0ca81f36, 0x52af4a8a, 0x66d5e7c0, 0xdf3b0874, 0x95055110, 0x1b5ad7a8, 0xf61ed5ad,\n    0x6cf6e479, 0x20758184, 0xd0cefa65, 0x88f7be58, 0x4a046826, 0x0ff6f8f3, 0xa09c7f70, 0x5346aba0,\n    0x5ce96c28, 0xe176eda3, 0x6bac307f, 0x376829d2, 0x85360fa9, 0x17e3fe2a, 0x24b79767, 0xf5a96b20,\n    0xd6cd2595, 0x68ff1ebf, 0x7555442c, 0xf19f06be, 0xf9e0659a, 0xeeb9491d, 0x34010718, 0xbb30cab8,\n    0xe822fe15, 0x88570983, 0x750e6249, 0xda627e55, 0x5e76ffa8, 0xb1534546, 0x6d47de08, 0xefe9e7d4\n  ];\n\n  sBox[5] = [\n    0xf6fa8f9d, 0x2cac6ce1, 0x4ca34867, 0xe2337f7c, 0x95db08e7, 0x016843b4, 0xeced5cbc, 0x325553ac,\n    0xbf9f0960, 0xdfa1e2ed, 0x83f0579d, 0x63ed86b9, 0x1ab6a6b8, 0xde5ebe39, 0xf38ff732, 0x8989b138,\n    0x33f14961, 0xc01937bd, 0xf506c6da, 0xe4625e7e, 0xa308ea99, 0x4e23e33c, 0x79cbd7cc, 0x48a14367,\n    0xa3149619, 0xfec94bd5, 0xa114174a, 0xeaa01866, 0xa084db2d, 0x09a8486f, 0xa888614a, 0x2900af98,\n    0x01665991, 0xe1992863, 0xc8f30c60, 0x2e78ef3c, 0xd0d51932, 0xcf0fec14, 0xf7ca07d2, 0xd0a82072,\n    0xfd41197e, 0x9305a6b0, 0xe86be3da, 0x74bed3cd, 0x372da53c, 0x4c7f4448, 0xdab5d440, 0x6dba0ec3,\n    0x083919a7, 0x9fbaeed9, 0x49dbcfb0, 0x4e670c53, 0x5c3d9c01, 0x64bdb941, 0x2c0e636a, 0xba7dd9cd,\n    0xea6f7388, 0xe70bc762, 0x35f29adb, 0x5c4cdd8d, 0xf0d48d8c, 0xb88153e2, 0x08a19866, 0x1ae2eac8,\n    0x284caf89, 0xaa928223, 0x9334be53, 0x3b3a21bf, 0x16434be3, 0x9aea3906, 0xefe8c36e, 0xf890cdd9,\n    0x80226dae, 0xc340a4a3, 0xdf7e9c09, 0xa694a807, 0x5b7c5ecc, 0x221db3a6, 0x9a69a02f, 0x68818a54,\n    0xceb2296f, 0x53c0843a, 0xfe893655, 0x25bfe68a, 0xb4628abc, 0xcf222ebf, 0x25ac6f48, 0xa9a99387,\n    0x53bddb65, 0xe76ffbe7, 0xe967fd78, 0x0ba93563, 0x8e342bc1, 0xe8a11be9, 0x4980740d, 0xc8087dfc,\n    0x8de4bf99, 0xa11101a0, 0x7fd37975, 0xda5a26c0, 0xe81f994f, 0x9528cd89, 0xfd339fed, 0xb87834bf,\n    0x5f04456d, 0x22258698, 0xc9c4c83b, 0x2dc156be, 0x4f628daa, 0x57f55ec5, 0xe2220abe, 0xd2916ebf,\n    0x4ec75b95, 0x24f2c3c0, 0x42d15d99, 0xcd0d7fa0, 0x7b6e27ff, 0xa8dc8af0, 0x7345c106, 0xf41e232f,\n    0x35162386, 0xe6ea8926, 0x3333b094, 0x157ec6f2, 0x372b74af, 0x692573e4, 0xe9a9d848, 0xf3160289,\n    0x3a62ef1d, 0xa787e238, 0xf3a5f676, 0x74364853, 0x20951063, 0x4576698d, 0xb6fad407, 0x592af950,\n    0x36f73523, 0x4cfb6e87, 0x7da4cec0, 0x6c152daa, 0xcb0396a8, 0xc50dfe5d, 0xfcd707ab, 0x0921c42f,\n    0x89dff0bb, 0x5fe2be78, 0x448f4f33, 0x754613c9, 0x2b05d08d, 0x48b9d585, 0xdc049441, 0xc8098f9b,\n    0x7dede786, 0xc39a3373, 0x42410005, 0x6a091751, 0x0ef3c8a6, 0x890072d6, 0x28207682, 0xa9a9f7be,\n    0xbf32679d, 0xd45b5b75, 0xb353fd00, 0xcbb0e358, 0x830f220a, 0x1f8fb214, 0xd372cf08, 0xcc3c4a13,\n    0x8cf63166, 0x061c87be, 0x88c98f88, 0x6062e397, 0x47cf8e7a, 0xb6c85283, 0x3cc2acfb, 0x3fc06976,\n    0x4e8f0252, 0x64d8314d, 0xda3870e3, 0x1e665459, 0xc10908f0, 0x513021a5, 0x6c5b68b7, 0x822f8aa0,\n    0x3007cd3e, 0x74719eef, 0xdc872681, 0x073340d4, 0x7e432fd9, 0x0c5ec241, 0x8809286c, 0xf592d891,\n    0x08a930f6, 0x957ef305, 0xb7fbffbd, 0xc266e96f, 0x6fe4ac98, 0xb173ecc0, 0xbc60b42a, 0x953498da,\n    0xfba1ae12, 0x2d4bd736, 0x0f25faab, 0xa4f3fceb, 0xe2969123, 0x257f0c3d, 0x9348af49, 0x361400bc,\n    0xe8816f4a, 0x3814f200, 0xa3f94043, 0x9c7a54c2, 0xbc704f57, 0xda41e7f9, 0xc25ad33a, 0x54f4a084,\n    0xb17f5505, 0x59357cbe, 0xedbd15c8, 0x7f97c5ab, 0xba5ac7b5, 0xb6f6deaf, 0x3a479c3a, 0x5302da25,\n    0x653d7e6a, 0x54268d49, 0x51a477ea, 0x5017d55b, 0xd7d25d88, 0x44136c76, 0x0404a8c8, 0xb8e5a121,\n    0xb81a928a, 0x60ed5869, 0x97c55b96, 0xeaec991b, 0x29935913, 0x01fdb7f1, 0x088e8dfa, 0x9ab6f6f5,\n    0x3b4cbf9f, 0x4a5de3ab, 0xe6051d35, 0xa0e1d855, 0xd36b4cf1, 0xf544edeb, 0xb0e93524, 0xbebb8fbd,\n    0xa2d762cf, 0x49c92f54, 0x38b5f331, 0x7128a454, 0x48392905, 0xa65b1db8, 0x851c97bd, 0xd675cf2f\n  ];\n\n  sBox[6] = [\n    0x85e04019, 0x332bf567, 0x662dbfff, 0xcfc65693, 0x2a8d7f6f, 0xab9bc912, 0xde6008a1, 0x2028da1f,\n    0x0227bce7, 0x4d642916, 0x18fac300, 0x50f18b82, 0x2cb2cb11, 0xb232e75c, 0x4b3695f2, 0xb28707de,\n    0xa05fbcf6, 0xcd4181e9, 0xe150210c, 0xe24ef1bd, 0xb168c381, 0xfde4e789, 0x5c79b0d8, 0x1e8bfd43,\n    0x4d495001, 0x38be4341, 0x913cee1d, 0x92a79c3f, 0x089766be, 0xbaeeadf4, 0x1286becf, 0xb6eacb19,\n    0x2660c200, 0x7565bde4, 0x64241f7a, 0x8248dca9, 0xc3b3ad66, 0x28136086, 0x0bd8dfa8, 0x356d1cf2,\n    0x107789be, 0xb3b2e9ce, 0x0502aa8f, 0x0bc0351e, 0x166bf52a, 0xeb12ff82, 0xe3486911, 0xd34d7516,\n    0x4e7b3aff, 0x5f43671b, 0x9cf6e037, 0x4981ac83, 0x334266ce, 0x8c9341b7, 0xd0d854c0, 0xcb3a6c88,\n    0x47bc2829, 0x4725ba37, 0xa66ad22b, 0x7ad61f1e, 0x0c5cbafa, 0x4437f107, 0xb6e79962, 0x42d2d816,\n    0x0a961288, 0xe1a5c06e, 0x13749e67, 0x72fc081a, 0xb1d139f7, 0xf9583745, 0xcf19df58, 0xbec3f756,\n    0xc06eba30, 0x07211b24, 0x45c28829, 0xc95e317f, 0xbc8ec511, 0x38bc46e9, 0xc6e6fa14, 0xbae8584a,\n    0xad4ebc46, 0x468f508b, 0x7829435f, 0xf124183b, 0x821dba9f, 0xaff60ff4, 0xea2c4e6d, 0x16e39264,\n    0x92544a8b, 0x009b4fc3, 0xaba68ced, 0x9ac96f78, 0x06a5b79a, 0xb2856e6e, 0x1aec3ca9, 0xbe838688,\n    0x0e0804e9, 0x55f1be56, 0xe7e5363b, 0xb3a1f25d, 0xf7debb85, 0x61fe033c, 0x16746233, 0x3c034c28,\n    0xda6d0c74, 0x79aac56c, 0x3ce4e1ad, 0x51f0c802, 0x98f8f35a, 0x1626a49f, 0xeed82b29, 0x1d382fe3,\n    0x0c4fb99a, 0xbb325778, 0x3ec6d97b, 0x6e77a6a9, 0xcb658b5c, 0xd45230c7, 0x2bd1408b, 0x60c03eb7,\n    0xb9068d78, 0xa33754f4, 0xf430c87d, 0xc8a71302, 0xb96d8c32, 0xebd4e7be, 0xbe8b9d2d, 0x7979fb06,\n    0xe7225308, 0x8b75cf77, 0x11ef8da4, 0xe083c858, 0x8d6b786f, 0x5a6317a6, 0xfa5cf7a0, 0x5dda0033,\n    0xf28ebfb0, 0xf5b9c310, 0xa0eac280, 0x08b9767a, 0xa3d9d2b0, 0x79d34217, 0x021a718d, 0x9ac6336a,\n    0x2711fd60, 0x438050e3, 0x069908a8, 0x3d7fedc4, 0x826d2bef, 0x4eeb8476, 0x488dcf25, 0x36c9d566,\n    0x28e74e41, 0xc2610aca, 0x3d49a9cf, 0xbae3b9df, 0xb65f8de6, 0x92aeaf64, 0x3ac7d5e6, 0x9ea80509,\n    0xf22b017d, 0xa4173f70, 0xdd1e16c3, 0x15e0d7f9, 0x50b1b887, 0x2b9f4fd5, 0x625aba82, 0x6a017962,\n    0x2ec01b9c, 0x15488aa9, 0xd716e740, 0x40055a2c, 0x93d29a22, 0xe32dbf9a, 0x058745b9, 0x3453dc1e,\n    0xd699296e, 0x496cff6f, 0x1c9f4986, 0xdfe2ed07, 0xb87242d1, 0x19de7eae, 0x053e561a, 0x15ad6f8c,\n    0x66626c1c, 0x7154c24c, 0xea082b2a, 0x93eb2939, 0x17dcb0f0, 0x58d4f2ae, 0x9ea294fb, 0x52cf564c,\n    0x9883fe66, 0x2ec40581, 0x763953c3, 0x01d6692e, 0xd3a0c108, 0xa1e7160e, 0xe4f2dfa6, 0x693ed285,\n    0x74904698, 0x4c2b0edd, 0x4f757656, 0x5d393378, 0xa132234f, 0x3d321c5d, 0xc3f5e194, 0x4b269301,\n    0xc79f022f, 0x3c997e7e, 0x5e4f9504, 0x3ffafbbd, 0x76f7ad0e, 0x296693f4, 0x3d1fce6f, 0xc61e45be,\n    0xd3b5ab34, 0xf72bf9b7, 0x1b0434c0, 0x4e72b567, 0x5592a33d, 0xb5229301, 0xcfd2a87f, 0x60aeb767,\n    0x1814386b, 0x30bcc33d, 0x38a0c07d, 0xfd1606f2, 0xc363519b, 0x589dd390, 0x5479f8e6, 0x1cb8d647,\n    0x97fd61a9, 0xea7759f4, 0x2d57539d, 0x569a58cf, 0xe84e63ad, 0x462e1b78, 0x6580f87e, 0xf3817914,\n    0x91da55f4, 0x40a230f3, 0xd1988f35, 0xb6e318d2, 0x3ffa50bc, 0x3d40f021, 0xc3c0bdae, 0x4958c24c,\n    0x518f36b2, 0x84b1d370, 0x0fedce83, 0x878ddada, 0xf2a279c7, 0x94e01be8, 0x90716f4b, 0x954b8aa3\n  ];\n\n  sBox[7] = [\n    0xe216300d, 0xbbddfffc, 0xa7ebdabd, 0x35648095, 0x7789f8b7, 0xe6c1121b, 0x0e241600, 0x052ce8b5,\n    0x11a9cfb0, 0xe5952f11, 0xece7990a, 0x9386d174, 0x2a42931c, 0x76e38111, 0xb12def3a, 0x37ddddfc,\n    0xde9adeb1, 0x0a0cc32c, 0xbe197029, 0x84a00940, 0xbb243a0f, 0xb4d137cf, 0xb44e79f0, 0x049eedfd,\n    0x0b15a15d, 0x480d3168, 0x8bbbde5a, 0x669ded42, 0xc7ece831, 0x3f8f95e7, 0x72df191b, 0x7580330d,\n    0x94074251, 0x5c7dcdfa, 0xabbe6d63, 0xaa402164, 0xb301d40a, 0x02e7d1ca, 0x53571dae, 0x7a3182a2,\n    0x12a8ddec, 0xfdaa335d, 0x176f43e8, 0x71fb46d4, 0x38129022, 0xce949ad4, 0xb84769ad, 0x965bd862,\n    0x82f3d055, 0x66fb9767, 0x15b80b4e, 0x1d5b47a0, 0x4cfde06f, 0xc28ec4b8, 0x57e8726e, 0x647a78fc,\n    0x99865d44, 0x608bd593, 0x6c200e03, 0x39dc5ff6, 0x5d0b00a3, 0xae63aff2, 0x7e8bd632, 0x70108c0c,\n    0xbbd35049, 0x2998df04, 0x980cf42a, 0x9b6df491, 0x9e7edd53, 0x06918548, 0x58cb7e07, 0x3b74ef2e,\n    0x522fffb1, 0xd24708cc, 0x1c7e27cd, 0xa4eb215b, 0x3cf1d2e2, 0x19b47a38, 0x424f7618, 0x35856039,\n    0x9d17dee7, 0x27eb35e6, 0xc9aff67b, 0x36baf5b8, 0x09c467cd, 0xc18910b1, 0xe11dbf7b, 0x06cd1af8,\n    0x7170c608, 0x2d5e3354, 0xd4de495a, 0x64c6d006, 0xbcc0c62c, 0x3dd00db3, 0x708f8f34, 0x77d51b42,\n    0x264f620f, 0x24b8d2bf, 0x15c1b79e, 0x46a52564, 0xf8d7e54e, 0x3e378160, 0x7895cda5, 0x859c15a5,\n    0xe6459788, 0xc37bc75f, 0xdb07ba0c, 0x0676a3ab, 0x7f229b1e, 0x31842e7b, 0x24259fd7, 0xf8bef472,\n    0x835ffcb8, 0x6df4c1f2, 0x96f5b195, 0xfd0af0fc, 0xb0fe134c, 0xe2506d3d, 0x4f9b12ea, 0xf215f225,\n    0xa223736f, 0x9fb4c428, 0x25d04979, 0x34c713f8, 0xc4618187, 0xea7a6e98, 0x7cd16efc, 0x1436876c,\n    0xf1544107, 0xbedeee14, 0x56e9af27, 0xa04aa441, 0x3cf7c899, 0x92ecbae6, 0xdd67016d, 0x151682eb,\n    0xa842eedf, 0xfdba60b4, 0xf1907b75, 0x20e3030f, 0x24d8c29e, 0xe139673b, 0xefa63fb8, 0x71873054,\n    0xb6f2cf3b, 0x9f326442, 0xcb15a4cc, 0xb01a4504, 0xf1e47d8d, 0x844a1be5, 0xbae7dfdc, 0x42cbda70,\n    0xcd7dae0a, 0x57e85b7a, 0xd53f5af6, 0x20cf4d8c, 0xcea4d428, 0x79d130a4, 0x3486ebfb, 0x33d3cddc,\n    0x77853b53, 0x37effcb5, 0xc5068778, 0xe580b3e6, 0x4e68b8f4, 0xc5c8b37e, 0x0d809ea2, 0x398feb7c,\n    0x132a4f94, 0x43b7950e, 0x2fee7d1c, 0x223613bd, 0xdd06caa2, 0x37df932b, 0xc4248289, 0xacf3ebc3,\n    0x5715f6b7, 0xef3478dd, 0xf267616f, 0xc148cbe4, 0x9052815e, 0x5e410fab, 0xb48a2465, 0x2eda7fa4,\n    0xe87b40e4, 0xe98ea084, 0x5889e9e1, 0xefd390fc, 0xdd07d35b, 0xdb485694, 0x38d7e5b2, 0x57720101,\n    0x730edebc, 0x5b643113, 0x94917e4f, 0x503c2fba, 0x646f1282, 0x7523d24a, 0xe0779695, 0xf9c17a8f,\n    0x7a5b2121, 0xd187b896, 0x29263a4d, 0xba510cdf, 0x81f47c9f, 0xad1163ed, 0xea7b5965, 0x1a00726e,\n    0x11403092, 0x00da6d77, 0x4a0cdd61, 0xad1f4603, 0x605bdfb0, 0x9eedc364, 0x22ebe6a8, 0xcee7d28a,\n    0xa0e736a0, 0x5564a6b9, 0x10853209, 0xc7eb8f37, 0x2de705ca, 0x8951570f, 0xdf09822b, 0xbd691a6c,\n    0xaa12e4f2, 0x87451c0f, 0xe0f6a27a, 0x3ada4819, 0x4cf1764f, 0x0d771c2b, 0x67cdb156, 0x350d8384,\n    0x5938fa0f, 0x42399ef3, 0x36997b07, 0x0e84093d, 0x4aa93e61, 0x8360d87b, 0x1fa98b0c, 0x1149382c,\n    0xe97625a5, 0x0614d1b7, 0x0e25244b, 0x0c768347, 0x589e8d82, 0x0d2059d1, 0xa466bb1e, 0xf8da0a82,\n    0x04f19130, 0xba6e4ec0, 0x99265164, 0x1ee7230d, 0x50b2ad80, 0xeaee6801, 0x8db2a283, 0xea8bf59e\n  ];\n}\n\nfunction CAST5(key) {\n  this.cast5 = new OpenPGPSymEncCAST5();\n  this.cast5.setKey(key);\n\n  this.encrypt = function(block) {\n    return this.cast5.encrypt(block);\n  };\n}\n\nCAST5.blockSize = CAST5.prototype.blockSize = 8;\nCAST5.keySize = CAST5.prototype.keySize = 16;\n\nexport default CAST5;\n","/* eslint-disable no-mixed-operators, no-fallthrough */\n\n\n/* Modified by Recurity Labs GmbH\n *\n * Cipher.js\n * A block-cipher algorithm implementation on JavaScript\n * See Cipher.readme.txt for further information.\n *\n * Copyright(c) 2009 Atsushi Oka [ http://oka.nu/ ]\n * This script file is distributed under the LGPL\n *\n * ACKNOWLEDGMENT\n *\n *     The main subroutines are written by Michiel van Everdingen.\n *\n *     Michiel van Everdingen\n *     http://home.versatel.nl/MAvanEverdingen/index.html\n *\n *     All rights for these routines are reserved to Michiel van Everdingen.\n *\n */\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//Math\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst MAXINT = 0xFFFFFFFF;\n\nfunction rotw(w, n) {\n  return (w << n | w >>> (32 - n)) & MAXINT;\n}\n\nfunction getW(a, i) {\n  return a[i] | a[i + 1] << 8 | a[i + 2] << 16 | a[i + 3] << 24;\n}\n\nfunction setW(a, i, w) {\n  a.splice(i, 4, w & 0xFF, (w >>> 8) & 0xFF, (w >>> 16) & 0xFF, (w >>> 24) & 0xFF);\n}\n\nfunction getB(x, n) {\n  return (x >>> (n * 8)) & 0xFF;\n}\n\n// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Twofish\n// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nfunction createTwofish() {\n  //\n  let keyBytes = null;\n  let dataBytes = null;\n  let dataOffset = -1;\n  // var dataLength = -1;\n  // var idx2 = -1;\n  //\n\n  let tfsKey = [];\n  let tfsM = [\n    [],\n    [],\n    [],\n    []\n  ];\n\n  function tfsInit(key) {\n    keyBytes = key;\n    let i;\n    let a;\n    let b;\n    let c;\n    let d;\n    const meKey = [];\n    const moKey = [];\n    const inKey = [];\n    let kLen;\n    const sKey = [];\n    let f01;\n    let f5b;\n    let fef;\n\n    const q0 = [\n      [8, 1, 7, 13, 6, 15, 3, 2, 0, 11, 5, 9, 14, 12, 10, 4],\n      [2, 8, 11, 13, 15, 7, 6, 14, 3, 1, 9, 4, 0, 10, 12, 5]\n    ];\n    const q1 = [\n      [14, 12, 11, 8, 1, 2, 3, 5, 15, 4, 10, 6, 7, 0, 9, 13],\n      [1, 14, 2, 11, 4, 12, 3, 7, 6, 13, 10, 5, 15, 9, 0, 8]\n    ];\n    const q2 = [\n      [11, 10, 5, 14, 6, 13, 9, 0, 12, 8, 15, 3, 2, 4, 7, 1],\n      [4, 12, 7, 5, 1, 6, 9, 10, 0, 14, 13, 8, 2, 11, 3, 15]\n    ];\n    const q3 = [\n      [13, 7, 15, 4, 1, 2, 6, 14, 9, 11, 3, 0, 8, 5, 12, 10],\n      [11, 9, 5, 1, 12, 3, 13, 14, 6, 4, 7, 15, 2, 0, 8, 10]\n    ];\n    const ror4 = [0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15];\n    const ashx = [0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 5, 14, 7];\n    const q = [\n      [],\n      []\n    ];\n    const m = [\n      [],\n      [],\n      [],\n      []\n    ];\n\n    function ffm5b(x) {\n      return x ^ (x >> 2) ^ [0, 90, 180, 238][x & 3];\n    }\n\n    function ffmEf(x) {\n      return x ^ (x >> 1) ^ (x >> 2) ^ [0, 238, 180, 90][x & 3];\n    }\n\n    function mdsRem(p, q) {\n      let i;\n      let t;\n      let u;\n      for (i = 0; i < 8; i++) {\n        t = q >>> 24;\n        q = ((q << 8) & MAXINT) | p >>> 24;\n        p = (p << 8) & MAXINT;\n        u = t << 1;\n        if (t & 128) {\n          u ^= 333;\n        }\n        q ^= t ^ (u << 16);\n        u ^= t >>> 1;\n        if (t & 1) {\n          u ^= 166;\n        }\n        q ^= u << 24 | u << 8;\n      }\n      return q;\n    }\n\n    function qp(n, x) {\n      const a = x >> 4;\n      const b = x & 15;\n      const c = q0[n][a ^ b];\n      const d = q1[n][ror4[b] ^ ashx[a]];\n      return q3[n][ror4[d] ^ ashx[c]] << 4 | q2[n][c ^ d];\n    }\n\n    function hFun(x, key) {\n      let a = getB(x, 0);\n      let b = getB(x, 1);\n      let c = getB(x, 2);\n      let d = getB(x, 3);\n      switch (kLen) {\n        case 4:\n          a = q[1][a] ^ getB(key[3], 0);\n          b = q[0][b] ^ getB(key[3], 1);\n          c = q[0][c] ^ getB(key[3], 2);\n          d = q[1][d] ^ getB(key[3], 3);\n        case 3:\n          a = q[1][a] ^ getB(key[2], 0);\n          b = q[1][b] ^ getB(key[2], 1);\n          c = q[0][c] ^ getB(key[2], 2);\n          d = q[0][d] ^ getB(key[2], 3);\n        case 2:\n          a = q[0][q[0][a] ^ getB(key[1], 0)] ^ getB(key[0], 0);\n          b = q[0][q[1][b] ^ getB(key[1], 1)] ^ getB(key[0], 1);\n          c = q[1][q[0][c] ^ getB(key[1], 2)] ^ getB(key[0], 2);\n          d = q[1][q[1][d] ^ getB(key[1], 3)] ^ getB(key[0], 3);\n      }\n      return m[0][a] ^ m[1][b] ^ m[2][c] ^ m[3][d];\n    }\n\n    keyBytes = keyBytes.slice(0, 32);\n    i = keyBytes.length;\n    while (i !== 16 && i !== 24 && i !== 32) {\n      keyBytes[i++] = 0;\n    }\n\n    for (i = 0; i < keyBytes.length; i += 4) {\n      inKey[i >> 2] = getW(keyBytes, i);\n    }\n    for (i = 0; i < 256; i++) {\n      q[0][i] = qp(0, i);\n      q[1][i] = qp(1, i);\n    }\n    for (i = 0; i < 256; i++) {\n      f01 = q[1][i];\n      f5b = ffm5b(f01);\n      fef = ffmEf(f01);\n      m[0][i] = f01 + (f5b << 8) + (fef << 16) + (fef << 24);\n      m[2][i] = f5b + (fef << 8) + (f01 << 16) + (fef << 24);\n      f01 = q[0][i];\n      f5b = ffm5b(f01);\n      fef = ffmEf(f01);\n      m[1][i] = fef + (fef << 8) + (f5b << 16) + (f01 << 24);\n      m[3][i] = f5b + (f01 << 8) + (fef << 16) + (f5b << 24);\n    }\n\n    kLen = inKey.length / 2;\n    for (i = 0; i < kLen; i++) {\n      a = inKey[i + i];\n      meKey[i] = a;\n      b = inKey[i + i + 1];\n      moKey[i] = b;\n      sKey[kLen - i - 1] = mdsRem(a, b);\n    }\n    for (i = 0; i < 40; i += 2) {\n      a = 0x1010101 * i;\n      b = a + 0x1010101;\n      a = hFun(a, meKey);\n      b = rotw(hFun(b, moKey), 8);\n      tfsKey[i] = (a + b) & MAXINT;\n      tfsKey[i + 1] = rotw(a + 2 * b, 9);\n    }\n    for (i = 0; i < 256; i++) {\n      a = b = c = d = i;\n      switch (kLen) {\n        case 4:\n          a = q[1][a] ^ getB(sKey[3], 0);\n          b = q[0][b] ^ getB(sKey[3], 1);\n          c = q[0][c] ^ getB(sKey[3], 2);\n          d = q[1][d] ^ getB(sKey[3], 3);\n        case 3:\n          a = q[1][a] ^ getB(sKey[2], 0);\n          b = q[1][b] ^ getB(sKey[2], 1);\n          c = q[0][c] ^ getB(sKey[2], 2);\n          d = q[0][d] ^ getB(sKey[2], 3);\n        case 2:\n          tfsM[0][i] = m[0][q[0][q[0][a] ^ getB(sKey[1], 0)] ^ getB(sKey[0], 0)];\n          tfsM[1][i] = m[1][q[0][q[1][b] ^ getB(sKey[1], 1)] ^ getB(sKey[0], 1)];\n          tfsM[2][i] = m[2][q[1][q[0][c] ^ getB(sKey[1], 2)] ^ getB(sKey[0], 2)];\n          tfsM[3][i] = m[3][q[1][q[1][d] ^ getB(sKey[1], 3)] ^ getB(sKey[0], 3)];\n      }\n    }\n  }\n\n  function tfsG0(x) {\n    return tfsM[0][getB(x, 0)] ^ tfsM[1][getB(x, 1)] ^ tfsM[2][getB(x, 2)] ^ tfsM[3][getB(x, 3)];\n  }\n\n  function tfsG1(x) {\n    return tfsM[0][getB(x, 3)] ^ tfsM[1][getB(x, 0)] ^ tfsM[2][getB(x, 1)] ^ tfsM[3][getB(x, 2)];\n  }\n\n  function tfsFrnd(r, blk) {\n    let a = tfsG0(blk[0]);\n    let b = tfsG1(blk[1]);\n    blk[2] = rotw(blk[2] ^ (a + b + tfsKey[4 * r + 8]) & MAXINT, 31);\n    blk[3] = rotw(blk[3], 1) ^ (a + 2 * b + tfsKey[4 * r + 9]) & MAXINT;\n    a = tfsG0(blk[2]);\n    b = tfsG1(blk[3]);\n    blk[0] = rotw(blk[0] ^ (a + b + tfsKey[4 * r + 10]) & MAXINT, 31);\n    blk[1] = rotw(blk[1], 1) ^ (a + 2 * b + tfsKey[4 * r + 11]) & MAXINT;\n  }\n\n  function tfsIrnd(i, blk) {\n    let a = tfsG0(blk[0]);\n    let b = tfsG1(blk[1]);\n    blk[2] = rotw(blk[2], 1) ^ (a + b + tfsKey[4 * i + 10]) & MAXINT;\n    blk[3] = rotw(blk[3] ^ (a + 2 * b + tfsKey[4 * i + 11]) & MAXINT, 31);\n    a = tfsG0(blk[2]);\n    b = tfsG1(blk[3]);\n    blk[0] = rotw(blk[0], 1) ^ (a + b + tfsKey[4 * i + 8]) & MAXINT;\n    blk[1] = rotw(blk[1] ^ (a + 2 * b + tfsKey[4 * i + 9]) & MAXINT, 31);\n  }\n\n  function tfsClose() {\n    tfsKey = [];\n    tfsM = [\n      [],\n      [],\n      [],\n      []\n    ];\n  }\n\n  function tfsEncrypt(data, offset) {\n    dataBytes = data;\n    dataOffset = offset;\n    const blk = [getW(dataBytes, dataOffset) ^ tfsKey[0],\n      getW(dataBytes, dataOffset + 4) ^ tfsKey[1],\n      getW(dataBytes, dataOffset + 8) ^ tfsKey[2],\n      getW(dataBytes, dataOffset + 12) ^ tfsKey[3]];\n    for (let j = 0; j < 8; j++) {\n      tfsFrnd(j, blk);\n    }\n    setW(dataBytes, dataOffset, blk[2] ^ tfsKey[4]);\n    setW(dataBytes, dataOffset + 4, blk[3] ^ tfsKey[5]);\n    setW(dataBytes, dataOffset + 8, blk[0] ^ tfsKey[6]);\n    setW(dataBytes, dataOffset + 12, blk[1] ^ tfsKey[7]);\n    dataOffset += 16;\n    return dataBytes;\n  }\n\n  function tfsDecrypt(data, offset) {\n    dataBytes = data;\n    dataOffset = offset;\n    const blk = [getW(dataBytes, dataOffset) ^ tfsKey[4],\n      getW(dataBytes, dataOffset + 4) ^ tfsKey[5],\n      getW(dataBytes, dataOffset + 8) ^ tfsKey[6],\n      getW(dataBytes, dataOffset + 12) ^ tfsKey[7]];\n    for (let j = 7; j >= 0; j--) {\n      tfsIrnd(j, blk);\n    }\n    setW(dataBytes, dataOffset, blk[2] ^ tfsKey[0]);\n    setW(dataBytes, dataOffset + 4, blk[3] ^ tfsKey[1]);\n    setW(dataBytes, dataOffset + 8, blk[0] ^ tfsKey[2]);\n    setW(dataBytes, dataOffset + 12, blk[1] ^ tfsKey[3]);\n    dataOffset += 16;\n  }\n\n  // added by Recurity Labs\n\n  function tfsFinal() {\n    return dataBytes;\n  }\n\n  return {\n    name: 'twofish',\n    blocksize: 128 / 8,\n    open: tfsInit,\n    close: tfsClose,\n    encrypt: tfsEncrypt,\n    decrypt: tfsDecrypt,\n    // added by Recurity Labs\n    finalize: tfsFinal\n  };\n}\n\n// added by Recurity Labs\n\nfunction TF(key) {\n  this.tf = createTwofish();\n  this.tf.open(Array.from(key), 0);\n\n  this.encrypt = function(block) {\n    return this.tf.encrypt(Array.from(block), 0);\n  };\n}\n\nTF.keySize = TF.prototype.keySize = 32;\nTF.blockSize = TF.prototype.blockSize = 16;\n\nexport default TF;\n","/* Modified by Recurity Labs GmbH\n *\n * Originally written by nklein software (nklein.com)\n */\n\n/*\n * Javascript implementation based on Bruce Schneier's reference implementation.\n *\n *\n * The constructor doesn't do much of anything.  It's just here\n * so we can start defining properties and methods and such.\n */\nfunction Blowfish() {}\n\n/*\n * Declare the block size so that protocols know what size\n * Initialization Vector (IV) they will need.\n */\nBlowfish.prototype.BLOCKSIZE = 8;\n\n/*\n * These are the default SBOXES.\n */\nBlowfish.prototype.SBOXES = [\n  [\n    0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96,\n    0xba7c9045, 0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16,\n    0x636920d8, 0x71574e69, 0xa458fea3, 0xf4933d7e, 0x0d95748f, 0x728eb658,\n    0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013,\n    0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e,\n    0x6c9e0e8b, 0xb01e8a3e, 0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60,\n    0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55ca396a, 0x2aab10b6,\n    0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a,\n    0x2ba9c55d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c,\n    0x7a325381, 0x28958677, 0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193,\n    0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe98575b1,\n    0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239,\n    0x2e0b4482, 0xa4842004, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a,\n    0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3,\n    0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176,\n    0x66ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe,\n    0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706,\n    0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, 0x49f1c09b,\n    0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b,\n    0x976ce0bd, 0x04c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463,\n    0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f, 0x6dfc511f, 0x9b30952c,\n    0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3,\n    0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb, 0x5579c0bd, 0x1a60320a,\n    0xd6a100c6, 0x402c7279, 0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8,\n    0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5fa, 0xfd238760,\n    0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db,\n    0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573, 0x695b27b0, 0xbbca58c8,\n    0xe1ffa35d, 0xb8f011a0, 0x10fa3d98, 0xfd2183b8, 0x4afcb56c, 0x2dd1d35b,\n    0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e33,\n    0x62fb1341, 0xcee4c6e8, 0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4,\n    0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0, 0xd08ed1d0, 0xafc725e0,\n    0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64, 0x8888b812, 0x900df01c,\n    0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad, 0x2f2f2218, 0xbe0e1777,\n    0xea752dfe, 0x8b021fa1, 0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299,\n    0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9, 0x165fa266, 0x80957705,\n    0x93cc7314, 0x211a1477, 0xe6ad2065, 0x77b5fa86, 0xc75442f5, 0xfb9d35cf,\n    0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49, 0x00250e2d, 0x2071b35e,\n    0x226800bb, 0x57b8e0af, 0x2464369b, 0xf009b91e, 0x5563911d, 0x59dfa6aa,\n    0x78c14389, 0xd95a537f, 0x207d5ba2, 0x02e5b9c5, 0x83260376, 0x6295cfa9,\n    0x11c81968, 0x4e734a41, 0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915,\n    0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400, 0x08ba6fb5, 0x571be91f,\n    0xf296ec6b, 0x2a0dd915, 0xb6636521, 0xe7b9f9b6, 0xff34052e, 0xc5855664,\n    0x53b02d5d, 0xa99f8fa1, 0x08ba4799, 0x6e85076a\n  ],\n  [\n    0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623, 0xad6ea6b0, 0x49a7df7d,\n    0x9cee60b8, 0x8fedb266, 0xecaa8c71, 0x699a17ff, 0x5664526c, 0xc2b19ee1,\n    0x193602a5, 0x75094c29, 0xa0591340, 0xe4183a3e, 0x3f54989a, 0x5b429d65,\n    0x6b8fe4d6, 0x99f73fd6, 0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1,\n    0x4cdd2086, 0x8470eb26, 0x6382e9c6, 0x021ecc5e, 0x09686b3f, 0x3ebaefc9,\n    0x3c971814, 0x6b6a70a1, 0x687f3584, 0x52a0e286, 0xb79c5305, 0xaa500737,\n    0x3e07841c, 0x7fdeae5c, 0x8e7d44ec, 0x5716f2b8, 0xb03ada37, 0xf0500c0d,\n    0xf01c1f04, 0x0200b3ff, 0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd,\n    0xd19113f9, 0x7ca92ff6, 0x94324773, 0x22f54701, 0x3ae5e581, 0x37c2dadc,\n    0xc8b57634, 0x9af3dda7, 0xa9446146, 0x0fd0030e, 0xecc8c73e, 0xa4751e41,\n    0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331, 0x4e548b38, 0x4f6db908,\n    0x6f420d03, 0xf60a04bf, 0x2cb81290, 0x24977c79, 0x5679b072, 0xbcaf89af,\n    0xde9a771f, 0xd9930810, 0xb38bae12, 0xdccf3f2e, 0x5512721f, 0x2e6b7124,\n    0x501adde6, 0x9f84cd87, 0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c,\n    0xec7aec3a, 0xdb851dfa, 0x63094366, 0xc464c3d2, 0xef1c1847, 0x3215d908,\n    0xdd433b37, 0x24c2ba16, 0x12a14d43, 0x2a65c451, 0x50940002, 0x133ae4dd,\n    0x71dff89e, 0x10314e55, 0x81ac77d6, 0x5f11199b, 0x043556f1, 0xd7a3c76b,\n    0x3c11183b, 0x5924a509, 0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e,\n    0x86e34570, 0xeae96fb1, 0x860e5e0a, 0x5a3e2ab3, 0x771fe71c, 0x4e3d06fa,\n    0x2965dcb9, 0x99e71d0f, 0x803e89d6, 0x5266c825, 0x2e4cc978, 0x9c10b36a,\n    0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2df4, 0xf2f74ea7, 0x361d2b3d,\n    0x1939260f, 0x19c27960, 0x5223a708, 0xf71312b6, 0xebadfe6e, 0xeac31f66,\n    0xe3bc4595, 0xa67bc883, 0xb17f37d1, 0x018cff28, 0xc332ddef, 0xbe6c5aa5,\n    0x65582185, 0x68ab9802, 0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84,\n    0x1521b628, 0x29076170, 0xecdd4775, 0x619f1510, 0x13cca830, 0xeb61bd96,\n    0x0334fe1e, 0xaa0363cf, 0xb5735c90, 0x4c70a239, 0xd59e9e0b, 0xcbaade14,\n    0xeecc86bc, 0x60622ca7, 0x9cab5cab, 0xb2f3846e, 0x648b1eaf, 0x19bdf0ca,\n    0xa02369b9, 0x655abb50, 0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7,\n    0x9b540b19, 0x875fa099, 0x95f7997e, 0x623d7da8, 0xf837889a, 0x97e32d77,\n    0x11ed935f, 0x16681281, 0x0e358829, 0xc7e61fd6, 0x96dedfa1, 0x7858ba99,\n    0x57f584a5, 0x1b227263, 0x9b83c3ff, 0x1ac24696, 0xcdb30aeb, 0x532e3054,\n    0x8fd948e4, 0x6dbc3128, 0x58ebf2ef, 0x34c6ffea, 0xfe28ed61, 0xee7c3c73,\n    0x5d4a14d9, 0xe864b7e3, 0x42105d14, 0x203e13e0, 0x45eee2b6, 0xa3aaabea,\n    0xdb6c4f15, 0xfacb4fd0, 0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105,\n    0xd81e799e, 0x86854dc7, 0xe44b476a, 0x3d816250, 0xcf62a1f2, 0x5b8d2646,\n    0xfc8883a0, 0xc1c7b6a3, 0x7f1524c3, 0x69cb7492, 0x47848a0b, 0x5692b285,\n    0x095bbf00, 0xad19489d, 0x1462b174, 0x23820e00, 0x58428d2a, 0x0c55f5ea,\n    0x1dadf43e, 0x233f7061, 0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb,\n    0x7cde3759, 0xcbee7460, 0x4085f2a7, 0xce77326e, 0xa6078084, 0x19f8509e,\n    0xe8efd855, 0x61d99735, 0xa969a7aa, 0xc50c06c2, 0x5a04abfc, 0x800bcadc,\n    0x9e447a2e, 0xc3453484, 0xfdd56705, 0x0e1e9ec9, 0xdb73dbd3, 0x105588cd,\n    0x675fda79, 0xe3674340, 0xc5c43465, 0x713e38d8, 0x3d28f89e, 0xf16dff20,\n    0x153e21e7, 0x8fb03d4a, 0xe6e39f2b, 0xdb83adf7\n  ],\n  [\n    0xe93d5a68, 0x948140f7, 0xf64c261c, 0x94692934, 0x411520f7, 0x7602d4f7,\n    0xbcf46b2e, 0xd4a20068, 0xd4082471, 0x3320f46a, 0x43b7d4b7, 0x500061af,\n    0x1e39f62e, 0x97244546, 0x14214f74, 0xbf8b8840, 0x4d95fc1d, 0x96b591af,\n    0x70f4ddd3, 0x66a02f45, 0xbfbc09ec, 0x03bd9785, 0x7fac6dd0, 0x31cb8504,\n    0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a, 0x28507825, 0x530429f4,\n    0x0a2c86da, 0xe9b66dfb, 0x68dc1462, 0xd7486900, 0x680ec0a4, 0x27a18dee,\n    0x4f3ffea2, 0xe887ad8c, 0xb58ce006, 0x7af4d6b6, 0xaace1e7c, 0xd3375fec,\n    0xce78a399, 0x406b2a42, 0x20fe9e35, 0xd9f385b9, 0xee39d7ab, 0x3b124e8b,\n    0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2, 0x3a6efa74, 0xdd5b4332,\n    0x6841e7f7, 0xca7820fb, 0xfb0af54e, 0xd8feb397, 0x454056ac, 0xba489527,\n    0x55533a3a, 0x20838d87, 0xfe6ba9b7, 0xd096954b, 0x55a867bc, 0xa1159a58,\n    0xcca92963, 0x99e1db33, 0xa62a4a56, 0x3f3125f9, 0x5ef47e1c, 0x9029317c,\n    0xfdf8e802, 0x04272f70, 0x80bb155c, 0x05282ce3, 0x95c11548, 0xe4c66d22,\n    0x48c1133f, 0xc70f86dc, 0x07f9c9ee, 0x41041f0f, 0x404779a4, 0x5d886e17,\n    0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564, 0x257b7834, 0x602a9c60,\n    0xdff8e8a3, 0x1f636c1b, 0x0e12b4c2, 0x02e1329e, 0xaf664fd1, 0xcad18115,\n    0x6b2395e0, 0x333e92e1, 0x3b240b62, 0xeebeb922, 0x85b2a20e, 0xe6ba0d99,\n    0xde720c8c, 0x2da2f728, 0xd0127845, 0x95b794fd, 0x647d0862, 0xe7ccf5f0,\n    0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e, 0x0a476341, 0x992eff74,\n    0x3a6f6eab, 0xf4f8fd37, 0xa812dc60, 0xa1ebddf8, 0x991be14c, 0xdb6e6b0d,\n    0xc67b5510, 0x6d672c37, 0x2765d43b, 0xdcd0e804, 0xf1290dc7, 0xcc00ffa3,\n    0xb5390f92, 0x690fed0b, 0x667b9ffb, 0xcedb7d9c, 0xa091cf0b, 0xd9155ea3,\n    0xbb132f88, 0x515bad24, 0x7b9479bf, 0x763bd6eb, 0x37392eb3, 0xcc115979,\n    0x8026e297, 0xf42e312d, 0x6842ada7, 0xc66a2b3b, 0x12754ccc, 0x782ef11c,\n    0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350, 0x1a6b1018, 0x11caedfa,\n    0x3d25bdd8, 0xe2e1c3c9, 0x44421659, 0x0a121386, 0xd90cec6e, 0xd5abea2a,\n    0x64af674e, 0xda86a85f, 0xbebfe988, 0x64e4c3fe, 0x9dbc8057, 0xf0f7c086,\n    0x60787bf8, 0x6003604d, 0xd1fd8346, 0xf6381fb0, 0x7745ae04, 0xd736fccc,\n    0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f, 0x77a057be, 0xbde8ae24,\n    0x55464299, 0xbf582e61, 0x4e58f48f, 0xf2ddfda2, 0xf474ef38, 0x8789bdc2,\n    0x5366f9c3, 0xc8b38e74, 0xb475f255, 0x46fcd9b9, 0x7aeb2661, 0x8b1ddf84,\n    0x846a0e79, 0x915f95e2, 0x466e598e, 0x20b45770, 0x8cd55591, 0xc902de4c,\n    0xb90bace1, 0xbb8205d0, 0x11a86248, 0x7574a99e, 0xb77f19b6, 0xe0a9dc09,\n    0x662d09a1, 0xc4324633, 0xe85a1f02, 0x09f0be8c, 0x4a99a025, 0x1d6efe10,\n    0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169, 0xdcb7da83, 0x573906fe,\n    0xa1e2ce9b, 0x4fcd7f52, 0x50115e01, 0xa70683fa, 0xa002b5c4, 0x0de6d027,\n    0x9af88c27, 0x773f8641, 0xc3604c06, 0x61a806b5, 0xf0177a28, 0xc0f586e0,\n    0x006058aa, 0x30dc7d62, 0x11e69ed7, 0x2338ea63, 0x53c2dd94, 0xc2c21634,\n    0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76, 0x6f05e409, 0x4b7c0188,\n    0x39720a3d, 0x7c927c24, 0x86e3725f, 0x724d9db9, 0x1ac15bb4, 0xd39eb8fc,\n    0xed545578, 0x08fca5b5, 0xd83d7cd3, 0x4dad0fc4, 0x1e50ef5e, 0xb161e6f8,\n    0xa28514d9, 0x6c51133c, 0x6fd5c7e7, 0x56e14ec4, 0x362abfce, 0xddc6c837,\n    0xd79a3234, 0x92638212, 0x670efa8e, 0x406000e0\n  ],\n  [\n    0x3a39ce37, 0xd3faf5cf, 0xabc27737, 0x5ac52d1b, 0x5cb0679e, 0x4fa33742,\n    0xd3822740, 0x99bc9bbe, 0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b,\n    0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4, 0x5748ab2f, 0xbc946e79,\n    0xc6a376d2, 0x6549c2c8, 0x530ff8ee, 0x468dde7d, 0xd5730a1d, 0x4cd04dc6,\n    0x2939bbdb, 0xa9ba4650, 0xac9526e8, 0xbe5ee304, 0xa1fad5f0, 0x6a2d519a,\n    0x63ef8ce2, 0x9a86ee22, 0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4,\n    0x83c061ba, 0x9be96a4d, 0x8fe51550, 0xba645bd6, 0x2826a2f9, 0xa73a3ae1,\n    0x4ba99586, 0xef5562e9, 0xc72fefd3, 0xf752f7da, 0x3f046f69, 0x77fa0a59,\n    0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593, 0xe990fd5a, 0x9e34d797,\n    0x2cf0b7d9, 0x022b8b51, 0x96d5ac3a, 0x017da67d, 0xd1cf3ed6, 0x7c7d2d28,\n    0x1f9f25cf, 0xadf2b89b, 0x5ad6b472, 0x5a88f54c, 0xe029ac71, 0xe019a5e6,\n    0x47b0acfd, 0xed93fa9b, 0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28,\n    0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c, 0x15056dd4, 0x88f46dba,\n    0x03a16125, 0x0564f0bd, 0xc3eb9e15, 0x3c9057a2, 0x97271aec, 0xa93a072a,\n    0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb, 0x26dcf319, 0x7533d928, 0xb155fdf5,\n    0x03563482, 0x8aba3cbb, 0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f,\n    0x4de81751, 0x3830dc8e, 0x379d5862, 0x9320f991, 0xea7a90c2, 0xfb3e7bce,\n    0x5121ce64, 0x774fbe32, 0xa8b6e37e, 0xc3293d46, 0x48de5369, 0x6413e680,\n    0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166, 0xb39a460a, 0x6445c0dd,\n    0x586cdecf, 0x1c20c8ae, 0x5bbef7dd, 0x1b588d40, 0xccd2017f, 0x6bb4e3bb,\n    0xdda26a7e, 0x3a59ff45, 0x3e350a44, 0xbcb4cdd5, 0x72eacea8, 0xfa6484bb,\n    0x8d6612ae, 0xbf3c6f47, 0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370,\n    0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d, 0x4040cb08, 0x4eb4e2cc,\n    0x34d2466a, 0x0115af84, 0xe1b00428, 0x95983a1d, 0x06b89fb4, 0xce6ea048,\n    0x6f3f3b82, 0x3520ab82, 0x011a1d4b, 0x277227f8, 0x611560b1, 0xe7933fdc,\n    0xbb3a792b, 0x344525bd, 0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9,\n    0xe01cc87e, 0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7, 0x1a908749, 0xd44fbd9a,\n    0xd0dadecb, 0xd50ada38, 0x0339c32a, 0xc6913667, 0x8df9317c, 0xe0b12b4f,\n    0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c, 0xbf97222c, 0x15e6fc2a,\n    0x0f91fc71, 0x9b941525, 0xfae59361, 0xceb69ceb, 0xc2a86459, 0x12baa8d1,\n    0xb6c1075e, 0xe3056a0c, 0x10d25065, 0xcb03a442, 0xe0ec6e0e, 0x1698db3b,\n    0x4c98a0be, 0x3278e964, 0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e,\n    0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8, 0xdf359f8d, 0x9b992f2e,\n    0xe60b6f47, 0x0fe3f11d, 0xe54cda54, 0x1edad891, 0xce6279cf, 0xcd3e7e6f,\n    0x1618b166, 0xfd2c1d05, 0x848fd2c5, 0xf6fb2299, 0xf523f357, 0xa6327623,\n    0x93a83531, 0x56cccd02, 0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc,\n    0xde966292, 0x81b949d0, 0x4c50901b, 0x71c65614, 0xe6c6c7bd, 0x327a140a,\n    0x45e1d006, 0xc3f27b9a, 0xc9aa53fd, 0x62a80f00, 0xbb25bfe2, 0x35bdd2f6,\n    0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b, 0x53113ec0, 0x1640e3d3,\n    0x38abbd60, 0x2547adf0, 0xba38209c, 0xf746ce76, 0x77afa1c5, 0x20756060,\n    0x85cbfe4e, 0x8ae88dd8, 0x7aaaf9b0, 0x4cf9aa7e, 0x1948c25c, 0x02fb8a8c,\n    0x01c36ae4, 0xd6ebe1f9, 0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f,\n    0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6\n  ]\n];\n\n//*\n//* This is the default PARRAY\n//*\nBlowfish.prototype.PARRAY = [\n  0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0,\n  0x082efa98, 0xec4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c,\n  0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917, 0x9216d5d9, 0x8979fb1b\n];\n\n//*\n//* This is the number of rounds the cipher will go\n//*\nBlowfish.prototype.NN = 16;\n\n//*\n//* This function is needed to get rid of problems\n//* with the high-bit getting set.  If we don't do\n//* this, then sometimes ( aa & 0x00FFFFFFFF ) is not\n//* equal to ( bb & 0x00FFFFFFFF ) even when they\n//* agree bit-for-bit for the first 32 bits.\n//*\nBlowfish.prototype._clean = function(xx) {\n  if (xx < 0) {\n    const yy = xx & 0x7FFFFFFF;\n    xx = yy + 0x80000000;\n  }\n  return xx;\n};\n\n//*\n//* This is the mixing function that uses the sboxes\n//*\nBlowfish.prototype._F = function(xx) {\n  let yy;\n\n  const dd = xx & 0x00FF;\n  xx >>>= 8;\n  const cc = xx & 0x00FF;\n  xx >>>= 8;\n  const bb = xx & 0x00FF;\n  xx >>>= 8;\n  const aa = xx & 0x00FF;\n\n  yy = this.sboxes[0][aa] + this.sboxes[1][bb];\n  yy ^= this.sboxes[2][cc];\n  yy += this.sboxes[3][dd];\n\n  return yy;\n};\n\n//*\n//* This method takes an array with two values, left and right\n//* and does NN rounds of Blowfish on them.\n//*\nBlowfish.prototype._encryptBlock = function(vals) {\n  let dataL = vals[0];\n  let dataR = vals[1];\n\n  let ii;\n\n  for (ii = 0; ii < this.NN; ++ii) {\n    dataL ^= this.parray[ii];\n    dataR = this._F(dataL) ^ dataR;\n\n    const tmp = dataL;\n    dataL = dataR;\n    dataR = tmp;\n  }\n\n  dataL ^= this.parray[this.NN + 0];\n  dataR ^= this.parray[this.NN + 1];\n\n  vals[0] = this._clean(dataR);\n  vals[1] = this._clean(dataL);\n};\n\n//*\n//* This method takes a vector of numbers and turns them\n//* into long words so that they can be processed by the\n//* real algorithm.\n//*\n//* Maybe I should make the real algorithm above take a vector\n//* instead.  That will involve more looping, but it won't require\n//* the F() method to deconstruct the vector.\n//*\nBlowfish.prototype.encryptBlock = function(vector) {\n  let ii;\n  const vals = [0, 0];\n  const off = this.BLOCKSIZE / 2;\n  for (ii = 0; ii < this.BLOCKSIZE / 2; ++ii) {\n    vals[0] = (vals[0] << 8) | (vector[ii + 0] & 0x00FF);\n    vals[1] = (vals[1] << 8) | (vector[ii + off] & 0x00FF);\n  }\n\n  this._encryptBlock(vals);\n\n  const ret = [];\n  for (ii = 0; ii < this.BLOCKSIZE / 2; ++ii) {\n    ret[ii + 0] = ((vals[0] >>> (24 - 8 * (ii))) & 0x00FF);\n    ret[ii + off] = ((vals[1] >>> (24 - 8 * (ii))) & 0x00FF);\n    // vals[ 0 ] = ( vals[ 0 ] >>> 8 );\n    // vals[ 1 ] = ( vals[ 1 ] >>> 8 );\n  }\n\n  return ret;\n};\n\n//*\n//* This method takes an array with two values, left and right\n//* and undoes NN rounds of Blowfish on them.\n//*\nBlowfish.prototype._decryptBlock = function(vals) {\n  let dataL = vals[0];\n  let dataR = vals[1];\n\n  let ii;\n\n  for (ii = this.NN + 1; ii > 1; --ii) {\n    dataL ^= this.parray[ii];\n    dataR = this._F(dataL) ^ dataR;\n\n    const tmp = dataL;\n    dataL = dataR;\n    dataR = tmp;\n  }\n\n  dataL ^= this.parray[1];\n  dataR ^= this.parray[0];\n\n  vals[0] = this._clean(dataR);\n  vals[1] = this._clean(dataL);\n};\n\n//*\n//* This method takes a key array and initializes the\n//* sboxes and parray for this encryption.\n//*\nBlowfish.prototype.init = function(key) {\n  let ii;\n  let jj = 0;\n\n  this.parray = [];\n  for (ii = 0; ii < this.NN + 2; ++ii) {\n    let data = 0x00000000;\n    for (let kk = 0; kk < 4; ++kk) {\n      data = (data << 8) | (key[jj] & 0x00FF);\n      if (++jj >= key.length) {\n        jj = 0;\n      }\n    }\n    this.parray[ii] = this.PARRAY[ii] ^ data;\n  }\n\n  this.sboxes = [];\n  for (ii = 0; ii < 4; ++ii) {\n    this.sboxes[ii] = [];\n    for (jj = 0; jj < 256; ++jj) {\n      this.sboxes[ii][jj] = this.SBOXES[ii][jj];\n    }\n  }\n\n  const vals = [0x00000000, 0x00000000];\n\n  for (ii = 0; ii < this.NN + 2; ii += 2) {\n    this._encryptBlock(vals);\n    this.parray[ii + 0] = vals[0];\n    this.parray[ii + 1] = vals[1];\n  }\n\n  for (ii = 0; ii < 4; ++ii) {\n    for (jj = 0; jj < 256; jj += 2) {\n      this._encryptBlock(vals);\n      this.sboxes[ii][jj + 0] = vals[0];\n      this.sboxes[ii][jj + 1] = vals[1];\n    }\n  }\n};\n\n// added by Recurity Labs\nfunction BF(key) {\n  this.bf = new Blowfish();\n  this.bf.init(key);\n\n  this.encrypt = function(block) {\n    return this.bf.encryptBlock(block);\n  };\n}\n\nBF.keySize = BF.prototype.keySize = 16;\nBF.blockSize = BF.prototype.blockSize = 8;\n\nexport default BF;\n","/**\n * This file is needed to dynamic import the legacy ciphers.\n * Separate dynamic imports are not convenient as they result in multiple chunks.\n */\n\nimport { TripleDES as tripledes } from './des';\nimport cast5 from './cast5';\nimport twofish from './twofish';\nimport blowfish from './blowfish';\n\n// We avoid importing 'enums' as this module is lazy loaded, and doing so could mess up\n// chunking for the lightweight build\nexport const legacyCiphers = new Map(Object.entries({\n  tripledes,\n  cast5,\n  twofish,\n  blowfish\n}));\n","// Adapted from the reference implementation in RFC7693\n// Initial port to Javascript by https://github.com/dcposch and https://github.com/emilbayes\n\n// Uint64 values are represented using two Uint32s, stored as little endian\n// NB: Uint32Arrays endianness depends on the underlying system, so for interoperability, conversions between Uint8Array and Uint32Arrays\n// need to be manually handled\n\n// 64-bit unsigned addition (little endian, in place)\n// Sets a[i,i+1] += b[j,j+1]\n// `a` and `b` must be Uint32Array(2)\nfunction ADD64 (a, i, b, j) {\n  a[i] += b[j];\n  a[i+1] += b[j+1] + (a[i] < b[j]); // add carry\n}\n\n// Increment 64-bit little-endian unsigned value by `c` (in place)\n// `a` must be Uint32Array(2)\nfunction INC64 (a, c) {\n  a[0] += c;\n  a[1] += (a[0] < c);\n}\n\n// G Mixing function\n// The ROTRs are inlined for speed\nfunction G (v, m, a, b, c, d, ix, iy) {\n  ADD64(v, a, v, b) // v[a,a+1] += v[b,b+1]\n  ADD64(v, a, m, ix) // v[a, a+1] += x ... x0\n\n  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits\n  let xor0 = v[d] ^ v[a]\n  let xor1 = v[d + 1] ^ v[a + 1]\n  v[d] = xor1\n  v[d + 1] = xor0\n\n  ADD64(v, c, v, d)\n\n  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits\n  xor0 = v[b] ^ v[c]\n  xor1 = v[b + 1] ^ v[c + 1]\n  v[b] = (xor0 >>> 24) ^ (xor1 << 8)\n  v[b + 1] = (xor1 >>> 24) ^ (xor0 << 8)\n\n  ADD64(v, a, v, b)\n  ADD64(v, a, m, iy)\n\n  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits\n  xor0 = v[d] ^ v[a]\n  xor1 = v[d + 1] ^ v[a + 1]\n  v[d] = (xor0 >>> 16) ^ (xor1 << 16)\n  v[d + 1] = (xor1 >>> 16) ^ (xor0 << 16)\n\n  ADD64(v, c, v, d)\n\n  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits\n  xor0 = v[b] ^ v[c]\n  xor1 = v[b + 1] ^ v[c + 1]\n  v[b] = (xor1 >>> 31) ^ (xor0 << 1)\n  v[b + 1] = (xor0 >>> 31) ^ (xor1 << 1)\n}\n\n// Initialization Vector\nconst BLAKE2B_IV32 = new Uint32Array([\n  0xF3BCC908, 0x6A09E667, 0x84CAA73B, 0xBB67AE85,\n  0xFE94F82B, 0x3C6EF372, 0x5F1D36F1, 0xA54FF53A,\n  0xADE682D1, 0x510E527F, 0x2B3E6C1F, 0x9B05688C,\n  0xFB41BD6B, 0x1F83D9AB, 0x137E2179, 0x5BE0CD19\n])\n\n// These are offsets into a Uint64 buffer.\n// Multiply them all by 2 to make them offsets into a Uint32 buffer\nconst SIGMA = new Uint8Array([\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,\n  11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,\n  7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,\n  9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,\n  2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,\n  12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,\n  13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,\n  6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,\n  10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0,\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3\n].map(x => x * 2))\n\n// Compression function. 'last' flag indicates last block.\n// Note: we're representing 16 uint64s as 32 uint32s\nfunction compress(S, last) {\n  const v = new Uint32Array(32)\n  const m = new Uint32Array(S.b.buffer, S.b.byteOffset, 32)\n\n  // init work variables\n  for (let i = 0; i < 16; i++) {\n    v[i] = S.h[i]\n    v[i + 16] = BLAKE2B_IV32[i]\n  }\n\n  // low 64 bits of offset\n  v[24] ^= S.t0[0]\n  v[25] ^= S.t0[1]\n  // high 64 bits not supported (`t1`), offset may not be higher than 2**53-1\n\n  // if last block\n  const f0 = last ? 0xFFFFFFFF : 0;\n  v[28] ^= f0;\n  v[29] ^= f0;\n\n  // twelve rounds of mixing\n  for (let i = 0; i < 12; i++) {\n    // ROUND(r)\n    const i16 = i << 4;\n    G(v, m, 0, 8, 16, 24,  SIGMA[i16 + 0], SIGMA[i16 + 1])\n    G(v, m, 2, 10, 18, 26, SIGMA[i16 + 2], SIGMA[i16 + 3])\n    G(v, m, 4, 12, 20, 28, SIGMA[i16 + 4], SIGMA[i16 + 5])\n    G(v, m, 6, 14, 22, 30, SIGMA[i16 + 6], SIGMA[i16 + 7])\n    G(v, m, 0, 10, 20, 30, SIGMA[i16 + 8], SIGMA[i16 + 9])\n    G(v, m, 2, 12, 22, 24, SIGMA[i16 + 10], SIGMA[i16 + 11])\n    G(v, m, 4, 14, 16, 26, SIGMA[i16 + 12], SIGMA[i16 + 13])\n    G(v, m, 6, 8, 18, 28,  SIGMA[i16 + 14], SIGMA[i16 + 15])\n  }\n\n  for (let i = 0; i < 16; i++) {\n    S.h[i] ^= v[i] ^ v[i + 16]\n  }\n}\n\n// Creates a BLAKE2b hashing context\n// Requires an output length between 1 and 64 bytes\n// Takes an optional Uint8Array key\nclass Blake2b {\n  constructor(outlen, key, salt, personal) {\n    const params = new Uint8Array(64)\n    //  0: outlen, keylen, fanout, depth\n    //  4: leaf length, sequential mode\n    //  8: node offset\n    // 12: node offset\n    // 16: node depth, inner length, rfu\n    // 20: rfu\n    // 24: rfu\n    // 28: rfu\n    // 32: salt\n    // 36: salt\n    // 40: salt\n    // 44: salt\n    // 48: personal\n    // 52: personal\n    // 56: personal\n    // 60: personal\n\n    // init internal state\n    this.S = {\n      b: new Uint8Array(BLOCKBYTES),\n      h: new Uint32Array(OUTBYTES_MAX / 4),\n      t0: new Uint32Array(2), // input counter `t`, lower 64-bits only\n      c: 0, // `fill`, pointer within buffer, up to `BLOCKBYTES`\n      outlen // output length in bytes\n    }\n\n    // init parameter block\n    params[0] = outlen\n    if (key) params[1] = key.length\n    params[2] = 1 // fanout\n    params[3] = 1 // depth\n    if (salt) params.set(salt, 32)\n    if (personal) params.set(personal, 48)\n    const params32 = new Uint32Array(params.buffer, params.byteOffset, params.length / Uint32Array.BYTES_PER_ELEMENT);\n\n    // initialize hash state\n    for (let i = 0; i < 16; i++) {\n      this.S.h[i] = BLAKE2B_IV32[i] ^ params32[i];\n    }\n\n    // key the hash, if applicable\n    if (key) {\n      const block = new Uint8Array(BLOCKBYTES)\n      block.set(key)\n      this.update(block)\n    }\n  }\n\n  // Updates a BLAKE2b streaming hash\n  // Requires Uint8Array (byte array)\n  update(input) {\n    if (!(input instanceof Uint8Array)) throw new Error('Input must be Uint8Array or Buffer')\n    // for (let i = 0; i < input.length; i++) {\n    //   if (this.S.c === BLOCKBYTES) { // buffer full\n    //     INC64(this.S.t0, this.S.c) // add counters\n    //     compress(this.S, false)\n    //     this.S.c = 0 // empty buffer\n    //   }\n    //   this.S.b[this.S.c++] = input[i]\n    // }\n    let i = 0\n    while(i < input.length) {\n      if (this.S.c === BLOCKBYTES) { // buffer full\n        INC64(this.S.t0, this.S.c) // add counters\n        compress(this.S, false)\n        this.S.c = 0 // empty buffer\n      }\n      let left = BLOCKBYTES - this.S.c\n      this.S.b.set(input.subarray(i, i + left), this.S.c) // end index can be out of bounds\n      const fill = Math.min(left, input.length - i)\n      this.S.c += fill\n      i += fill\n    }\n    return this\n  }\n\n  /**\n   * Return a BLAKE2b hash, either filling the given Uint8Array or allocating a new one\n   * @param {Uint8Array} [prealloc] - optional preallocated buffer\n   * @returns {ArrayBuffer} message digest\n   */\n  digest(prealloc) {\n    INC64(this.S.t0, this.S.c) // mark last block offset\n\n    // final block, padded\n    this.S.b.fill(0, this.S.c);\n    this.S.c = BLOCKBYTES;\n    compress(this.S, true)\n\n    const out = prealloc || new Uint8Array(this.S.outlen);\n    for (let i = 0; i < this.S.outlen; i++) {\n      // must be loaded individually since default Uint32 endianness is platform dependant\n      out[i] = this.S.h[i >> 2] >> (8 * (i & 3))\n    }\n    this.S.h = null; // prevent calling `update` after `digest`\n    return out.buffer;\n  }\n}\n\n\nexport default function createHash(outlen, key, salt, personal) {\n  if (outlen > OUTBYTES_MAX) throw new Error(`outlen must be at most ${OUTBYTES_MAX} (given: ${outlen})`)\n  if (key) {\n    if (!(key instanceof Uint8Array)) throw new Error('key must be Uint8Array or Buffer')\n    if (key.length > KEYBYTES_MAX) throw new Error(`key size must be at most ${KEYBYTES_MAX} (given: ${key.length})`)\n  }\n  if (salt) {\n    if (!(salt instanceof Uint8Array)) throw new Error('salt must be Uint8Array or Buffer')\n    if (salt.length !== SALTBYTES) throw new Error(`salt must be exactly ${SALTBYTES} (given: ${salt.length}`)\n  }\n  if (personal) {\n    if (!(personal instanceof Uint8Array)) throw new Error('personal must be Uint8Array or Buffer')\n    if (personal.length !== PERSONALBYTES) throw new Error(`salt must be exactly ${PERSONALBYTES} (given: ${personal.length}`)\n  }\n\n  return new Blake2b(outlen, key, salt, personal)\n}\n\nconst OUTBYTES_MAX = 64;\nconst KEYBYTES_MAX = 64;\nconst SALTBYTES = 16;\nconst PERSONALBYTES = 16;\nconst BLOCKBYTES = 128;\n\n","import blake2b from \"./blake2b.js\"\nconst TYPE = 2;  // Argon2id\nconst VERSION = 0x13;\nconst TAGBYTES_MAX = 0xFFFFFFFF; // Math.pow(2, 32) - 1;\nconst TAGBYTES_MIN = 4; // Math.pow(2, 32) - 1;\nconst SALTBYTES_MAX = 0xFFFFFFFF; // Math.pow(2, 32) - 1;\nconst SALTBYTES_MIN = 8;\nconst passwordBYTES_MAX = 0xFFFFFFFF;// Math.pow(2, 32) - 1;\nconst passwordBYTES_MIN = 8;\nconst MEMBYTES_MAX = 0xFFFFFFFF;// Math.pow(2, 32) - 1;\nconst ADBYTES_MAX = 0xFFFFFFFF; // Math.pow(2, 32) - 1; // associated data (optional)\nconst SECRETBYTES_MAX = 32; // key (optional)\n\nconst ARGON2_BLOCK_SIZE = 1024;\nconst ARGON2_PREHASH_DIGEST_LENGTH = 64;\n\nconst isLittleEndian = new Uint8Array(new Uint16Array([0xabcd]).buffer)[0] === 0xcd;\n\n// store n as a little-endian 32-bit Uint8Array inside buf (at buf[i:i+3])\nfunction LE32(buf, n, i) {\n  buf[i+0] = n;\n  buf[i+1] = n >>  8;\n  buf[i+2] = n >> 16;\n  buf[i+3] = n >> 24;\n  return buf;\n}\n\n/**\n * Store n as a 64-bit LE number in the given buffer (from buf[i] to buf[i+7])\n * @param {Uint8Array} buf\n * @param {Number} n\n * @param {Number} i\n */\nfunction LE64(buf, n, i) {\n  if (n > Number.MAX_SAFE_INTEGER) throw new Error(\"LE64: large numbers unsupported\");\n  // ECMAScript standard has engines convert numbers to 32-bit integers for bitwise operations\n  // shifting by 32 or more bits is not supported (https://stackoverflow.com/questions/6729122/javascript-bit-shift-number-wraps)\n  // so we manually extract each byte\n  let remainder = n;\n  for (let offset = i; offset < i+7; offset++) { // last byte can be ignored as it would overflow MAX_SAFE_INTEGER\n    buf[offset] = remainder; // implicit & 0xff\n    remainder = (remainder - buf[offset]) / 256;\n  }\n  return buf;\n}\n\n/**\n * Variable-Length Hash Function H'\n * @param {Number} outlen - T\n * @param {Uint8Array} X - value to hash\n * @param {Uint8Array} res - output buffer, of length `outlength` or larger\n */\nfunction H_(outlen, X, res) {\n  const V = new Uint8Array(64); // no need to keep around all V_i\n\n  const V1_in = new Uint8Array(4 + X.length);\n  LE32(V1_in, outlen, 0);\n  V1_in.set(X, 4);\n  if (outlen <= 64) {\n    // H'^T(A) = H^T(LE32(T)||A)\n    blake2b(outlen).update(V1_in).digest(res);\n    return res\n  }\n\n  const r = Math.ceil(outlen / 32) - 2;\n\n  // Let V_i be a 64-byte block and W_i be its first 32 bytes.\n  // V_1 = H^(64)(LE32(T)||A)\n  // V_2 = H^(64)(V_1)\n  // ...\n  // V_r = H^(64)(V_{r-1})\n  // V_{r+1} = H^(T-32*r)(V_{r})\n  // H'^T(X) = W_1 || W_2 || ... || W_r || V_{r+1}\n  for (let i = 0; i < r; i++) {\n    blake2b(64).update(i === 0 ? V1_in : V).digest(V);\n    // store W_i in result buffer already\n    res.set(V.subarray(0, 32), i*32)\n  }\n  // V_{r+1}\n  const V_r1 = new Uint8Array(blake2b(outlen - 32*r).update(V).digest());\n  res.set(V_r1, r*32);\n\n  return res;\n}\n\n// compute buf = xs ^ ys\nfunction XOR(wasmContext, buf, xs, ys) {\n  wasmContext.fn.XOR(\n    buf.byteOffset,\n    xs.byteOffset,\n    ys.byteOffset,\n  );\n  return buf\n}\n\n/**\n * @param {Uint8Array} X (read-only)\n * @param {Uint8Array} Y (read-only)\n * @param {Uint8Array} R - output buffer\n * @returns\n */\nfunction G(wasmContext, X, Y, R) {\n  wasmContext.fn.G(\n    X.byteOffset,\n    Y.byteOffset,\n    R.byteOffset,\n    wasmContext.refs.gZ.byteOffset\n  );\n  return R;\n}\n\nfunction G2(wasmContext, X, Y, R) {\n  wasmContext.fn.G2(\n    X.byteOffset,\n    Y.byteOffset,\n    R.byteOffset,\n    wasmContext.refs.gZ.byteOffset\n  );\n  return R;\n}\n\n// Generator for data-independent J1, J2. Each `next()` invocation returns a new pair of values.\nfunction* makePRNG(wasmContext, pass, lane, slice, m_, totalPasses, segmentLength, segmentOffset) {\n  // For each segment, we do the following. First, we compute the value Z as:\n  // Z= ( LE64(r) || LE64(l) || LE64(sl) || LE64(m') || LE64(t) || LE64(y) )\n  wasmContext.refs.prngTmp.fill(0);\n  const Z = wasmContext.refs.prngTmp.subarray(0, 6 * 8);\n  LE64(Z, pass, 0);\n  LE64(Z, lane, 8);\n  LE64(Z, slice, 16);\n  LE64(Z, m_, 24);\n  LE64(Z, totalPasses, 32);\n  LE64(Z, TYPE, 40);\n\n  // Then we compute q/(128*SL) 1024-byte values\n  // G( ZERO(1024),\n  //    G( ZERO(1024), Z || LE64(1) || ZERO(968) ) ),\n  // ...,\n  // G( ZERO(1024),\n  //    G( ZERO(1024), Z || LE64(q/(128*SL)) || ZERO(968) )),\n  for(let i = 1; i <= segmentLength; i++) {\n    // tmp.set(Z); // no need to re-copy\n    LE64(wasmContext.refs.prngTmp, i, Z.length); // tmp.set(ZER0968) not necessary, memory already zeroed\n    const g2 = G2(wasmContext, wasmContext.refs.ZERO1024, wasmContext.refs.prngTmp, wasmContext.refs.prngR );\n\n    // each invocation of G^2 outputs 1024 bytes that are to be partitioned into 8-bytes values, take as X1 || X2\n    // NB: the first generated pair must be used for the first block of the segment, and so on.\n    // Hence, if some blocks are skipped (e.g. during the first pass), the corresponding J1J2 are discarded based on the given segmentOffset.\n    for(let k = i === 1 ? segmentOffset*8 : 0; k < g2.length; k += 8) {\n       yield g2.subarray(k, k+8);\n    }\n  }\n  return [];\n}\n\nfunction validateParams({ type, version, tagLength, password, salt, ad, secret, parallelism, memorySize, passes }) {\n  const assertLength = (name, value, min, max) => {\n    if (value < min || value > max) { throw new Error(`${name} size should be between ${min} and ${max} bytes`); }\n  }\n\n  if (type !== TYPE || version !== VERSION) throw new Error('Unsupported type or version');\n  assertLength('password', password, passwordBYTES_MIN, passwordBYTES_MAX);\n  assertLength('salt', salt, SALTBYTES_MIN, SALTBYTES_MAX);\n  assertLength('tag', tagLength, TAGBYTES_MIN, TAGBYTES_MAX);\n  assertLength('memory', memorySize, 8*parallelism, MEMBYTES_MAX);\n  // optional fields\n  ad && assertLength('associated data', ad, 0, ADBYTES_MAX);\n  secret && assertLength('secret', secret, 0, SECRETBYTES_MAX);\n\n  return { type, version, tagLength, password, salt, ad, secret, lanes: parallelism, memorySize, passes };\n}\n\nconst KB = 1024;\nconst WASM_PAGE_SIZE = 64 * KB;\n\nexport default function argon2id(params, { memory, instance: wasmInstance }) {\n  if (!isLittleEndian) throw new Error('BigEndian system not supported'); // optmisations assume LE system\n\n  const ctx = validateParams({ type: TYPE, version: VERSION, ...params });\n\n  const { G:wasmG, G2:wasmG2, xor:wasmXOR, getLZ:wasmLZ } = wasmInstance.exports;\n  const wasmRefs = {};\n  const wasmFn = {};\n  wasmFn.G = wasmG;\n  wasmFn.G2 = wasmG2;\n  wasmFn.XOR = wasmXOR;\n\n  // The actual number of blocks is m', which is m rounded down to the nearest multiple of 4*p.\n  const m_ = 4 * ctx.lanes * Math.floor(ctx.memorySize / (4 * ctx.lanes));\n  const requiredMemory = m_ * ARGON2_BLOCK_SIZE + 10 * KB; // Additional KBs for utility references\n  if (memory.buffer.byteLength < requiredMemory) {\n    const missing = Math.ceil((requiredMemory - memory.buffer.byteLength) / WASM_PAGE_SIZE)\n    // If enough memory is available, the `memory.buffer` is internally detached and the reference updated.\n    // Otherwise, the operation fails, and the original memory can still be used.\n    memory.grow(missing)\n  }\n\n  let offset = 0;\n  // Init wasm memory needed in other functions\n  wasmRefs.gZ = new Uint8Array(memory.buffer, offset, ARGON2_BLOCK_SIZE); offset+= wasmRefs.gZ.length;\n  wasmRefs.prngR = new Uint8Array(memory.buffer, offset, ARGON2_BLOCK_SIZE); offset+=wasmRefs.prngR.length;\n  wasmRefs.prngTmp = new Uint8Array(memory.buffer, offset, ARGON2_BLOCK_SIZE); offset+=wasmRefs.prngTmp.length;\n  wasmRefs.ZERO1024 = new Uint8Array(memory.buffer, offset, 1024); offset+=wasmRefs.ZERO1024.length;\n  // Init wasm memory needed locally\n  const lz = new Uint32Array(memory.buffer, offset, 2); offset+=lz.length * Uint32Array.BYTES_PER_ELEMENT;\n  const wasmContext = { fn: wasmFn, refs: wasmRefs };\n  const newBlock = new Uint8Array(memory.buffer, offset, ARGON2_BLOCK_SIZE); offset+=newBlock.length;\n  const blockMemory = new Uint8Array(memory.buffer, offset, ctx.memorySize * ARGON2_BLOCK_SIZE);\n  const allocatedMemory = new Uint8Array(memory.buffer, 0, offset);\n\n  // 1. Establish H_0\n  const H0 = getH0(ctx);\n\n  // 2. Allocate the memory as m' 1024-byte blocks\n  // For p lanes, the memory is organized in a matrix B[i][j] of blocks with p rows (lanes) and q = m' / p columns.\n  const q = m_ / ctx.lanes;\n  const B = new Array(ctx.lanes).fill(null).map(() => new Array(q));\n  const initBlock = (i, j) => {\n    B[i][j] = blockMemory.subarray(i*q*1024 + j*1024, (i*q*1024 + j*1024) + ARGON2_BLOCK_SIZE);\n    return B[i][j];\n  }\n\n  for (let i = 0; i < ctx.lanes; i++) {\n    // const LEi = LE0; //  since p = 1 for us\n    const tmp = new Uint8Array(H0.length + 8);\n    // 3. Compute B[i][0] for all i ranging from (and including) 0 to (not including) p\n    // B[i][0] = H'^(1024)(H_0 || LE32(0) || LE32(i))\n    tmp.set(H0); LE32(tmp, 0, H0.length); LE32(tmp, i, H0.length + 4);\n    H_(ARGON2_BLOCK_SIZE, tmp, initBlock(i, 0));\n    // 4. Compute B[i][1] for all i ranging from (and including) 0 to (not including) p\n    // B[i][1] = H'^(1024)(H_0 || LE32(1) || LE32(i))\n    LE32(tmp, 1, H0.length);\n    H_(ARGON2_BLOCK_SIZE, tmp, initBlock(i, 1));\n  }\n\n    // 5. Compute B[i][j] for all i ranging from (and including) 0 to (not including) p and for all j ranging from (and including) 2\n    // to (not including) q. The computation MUST proceed slicewise (Section 3.4) : first, blocks from slice 0 are computed for all lanes\n    // (in an arbitrary order of lanes), then blocks from slice 1 are computed, etc.\n  const SL = 4; // vertical slices\n  const segmentLength = q / SL;\n  for (let pass = 0; pass < ctx.passes; pass++) {\n      // The intersection of a slice and a lane is called a segment, which has a length of q/SL. Segments of the same slice can be computed in parallel\n    for (let sl = 0; sl < SL; sl++) {\n      const isDataIndependent = pass === 0 && sl <= 1;\n      for (let i = 0; i < ctx.lanes; i++) { // lane\n        // On the first slice of the first pass, blocks 0 and 1 are already filled\n        let segmentOffset = sl === 0 && pass === 0 ? 2 : 0;\n        // no need to generate all J1J2s, use iterator/generator that creates the value on the fly (to save memory)\n        const PRNG = isDataIndependent ? makePRNG(wasmContext, pass, i, sl, m_, ctx.passes, segmentLength, segmentOffset) : null;\n        for (segmentOffset; segmentOffset < segmentLength; segmentOffset++) {\n          const j = sl * segmentLength + segmentOffset;\n          const prevBlock = j > 0 ? B[i][j-1] : B[i][q-1]; // B[i][(j-1) mod q]\n\n          // we can assume the PRNG is never done\n          const J1J2 = isDataIndependent ? PRNG.next().value : prevBlock; // .subarray(0, 8) not required since we only pass the byteOffset to wasm\n          // The block indices l and z are determined for each i, j differently for Argon2d, Argon2i, and Argon2id.\n          wasmLZ(lz.byteOffset, J1J2.byteOffset, i, ctx.lanes, pass, sl, segmentOffset, SL, segmentLength)\n          const l = lz[0]; const z = lz[1];\n          // for (let i = 0; i < p; i++ )\n          // B[i][j] = G(B[i][j-1], B[l][z])\n          // The block indices l and z are determined for each i, j differently for Argon2d, Argon2i, and Argon2id.\n          if (pass === 0) initBlock(i, j);\n          G(wasmContext, prevBlock, B[l][z], pass > 0 ? newBlock : B[i][j]);\n\n          // 6. If the number of passes t is larger than 1, we repeat step 5. However, blocks are computed differently as the old value is XORed with the new one\n          if (pass > 0) XOR(wasmContext, B[i][j], newBlock, B[i][j])\n        }\n      }\n    }\n  }\n\n  // 7. After t steps have been iterated, the final block C is computed as the XOR of the last column:\n  // C = B[0][q-1] XOR B[1][q-1] XOR ... XOR B[p-1][q-1]\n  const C = B[0][q-1];\n  for(let i = 1; i < ctx.lanes; i++) {\n    XOR(wasmContext, C, C, B[i][q-1])\n  }\n\n  const tag = H_(ctx.tagLength, C, new Uint8Array(ctx.tagLength));\n  // clear memory since the module might be cached\n  allocatedMemory.fill(0) // clear sensitive contents\n  memory.grow(0) // allow deallocation\n  // 8. The output tag is computed as H'^T(C).\n  return tag;\n\n}\n\nfunction getH0(ctx) {\n  const H = blake2b(ARGON2_PREHASH_DIGEST_LENGTH);\n  const ZERO32 = new Uint8Array(4);\n  const params = new Uint8Array(24);\n  LE32(params, ctx.lanes, 0);\n  LE32(params, ctx.tagLength, 4);\n  LE32(params, ctx.memorySize, 8);\n  LE32(params, ctx.passes, 12);\n  LE32(params, ctx.version, 16);\n  LE32(params, ctx.type, 20);\n\n  const toHash = [params];\n  if (ctx.password) {\n    toHash.push(LE32(new Uint8Array(4), ctx.password.length, 0))\n    toHash.push(ctx.password)\n  } else {\n    toHash.push(ZERO32) // context.password.length\n  }\n\n  if (ctx.salt) {\n    toHash.push(LE32(new Uint8Array(4), ctx.salt.length, 0))\n    toHash.push(ctx.salt)\n  } else {\n    toHash.push(ZERO32) // context.salt.length\n  }\n\n  if (ctx.secret) {\n    toHash.push(LE32(new Uint8Array(4), ctx.secret.length, 0))\n    toHash.push(ctx.secret)\n    // todo clear secret?\n  } else {\n    toHash.push(ZERO32) // context.secret.length\n  }\n\n  if (ctx.ad) {\n    toHash.push(LE32(new Uint8Array(4), ctx.ad.length, 0))\n    toHash.push(ctx.ad)\n  } else {\n    toHash.push(ZERO32) // context.ad.length\n  }\n  H.update(concatArrays(toHash))\n\n  const outputBuffer = H.digest();\n  return new Uint8Array(outputBuffer);\n}\n\nfunction concatArrays(arrays) {\n  if (arrays.length === 1) return arrays[0];\n\n  let totalLength = 0;\n  for (let i = 0; i < arrays.length; i++) {\n      if (!(arrays[i] instanceof Uint8Array)) {\n          throw new Error('concatArrays: Data must be in the form of a Uint8Array');\n      }\n\n      totalLength += arrays[i].length;\n  }\n\n  const result = new Uint8Array(totalLength);\n  let pos = 0;\n  arrays.forEach((element) => {\n      result.set(element, pos);\n      pos += element.length;\n  });\n\n  return result;\n}\n","import argon2id from \"./argon2id.js\";\n\nlet isSIMDSupported;\nasync function wasmLoader(memory, getSIMD, getNonSIMD) {\n  const importObject = { env: { memory } };\n  if (isSIMDSupported === undefined) {\n    try {\n      const loaded = await getSIMD(importObject);\n      isSIMDSupported = true;\n      return loaded;\n    } catch(e) {\n      isSIMDSupported = false;\n    }\n  }\n\n  const loader = isSIMDSupported ? getSIMD : getNonSIMD;\n  return loader(importObject);\n}\n\nexport default async function setupWasm(getSIMD, getNonSIMD) {\n  const memory = new WebAssembly.Memory({\n    // in pages of 64KiB each\n    // these values need to be compatible with those declared when building in `build-wasm`\n    initial: 1040,  // 65MB\n    maximum: 65536, // 4GB\n  });\n  const wasmModule = await wasmLoader(memory, getSIMD, getNonSIMD);\n\n  /**\n   * Argon2id hash function\n   * @callback computeHash\n   * @param {Object} params\n   * @param {Uint8Array} params.password - password\n   * @param {Uint8Array} params.salt - salt\n   * @param {Integer} params.parallelism\n   * @param {Integer} params.passes\n   * @param {Integer} params.memorySize - in kibibytes\n   * @param {Integer} params.tagLength - output tag length\n   * @param {Uint8Array} [params.ad] - associated data (optional)\n   * @param {Uint8Array} [params.secret] - secret data (optional)\n   * @return {Uint8Array} argon2id hash\n   */\n  const computeHash = (params) => argon2id(params, { instance: wasmModule.instance, memory });\n\n  return computeHash;\n}\n","import setupWasm from './lib/setup.js';\nimport wasmSIMD from './dist/simd.wasm';\nimport wasmNonSIMD from './dist/no-simd.wasm';\n\nconst loadWasm = async () => setupWasm(\n  (instanceObject) => wasmSIMD(instanceObject),\n  (instanceObject) => wasmNonSIMD(instanceObject),\n);\n\nexport default loadWasm;\n","/*\nnode-bzip - a pure-javascript Node.JS module for decoding bzip2 data\n\nCopyright (C) 2012 Eli Skeggs\n\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, see\nhttp://www.gnu.org/licenses/lgpl-2.1.html\n\nAdapted from bzip2.js, copyright 2011 antimatter15 (antimatter15@gmail.com).\n\nBased on micro-bunzip by Rob Landley (rob@landley.net).\n\nBased on bzip2 decompression code by Julian R Seward (jseward@acm.org),\nwhich also acknowledges contributions by Mike Burrows, David Wheeler,\nPeter Fenwick, Alistair Moffat, Radford Neal, Ian H. Witten,\nRobert Sedgewick, and Jon L. Bentley.\n*/\n\nvar BITMASK = [0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF];\n\n// offset in bytes\nvar BitReader = function(stream) {\n  this.stream = stream;\n  this.bitOffset = 0;\n  this.curByte = 0;\n  this.hasByte = false;\n};\n\nBitReader.prototype._ensureByte = function() {\n  if (!this.hasByte) {\n    this.curByte = this.stream.readByte();\n    this.hasByte = true;\n  }\n};\n\n// reads bits from the buffer\nBitReader.prototype.read = function(bits) {\n  var result = 0;\n  while (bits > 0) {\n    this._ensureByte();\n    var remaining = 8 - this.bitOffset;\n    // if we're in a byte\n    if (bits >= remaining) {\n      result <<= remaining;\n      result |= BITMASK[remaining] & this.curByte;\n      this.hasByte = false;\n      this.bitOffset = 0;\n      bits -= remaining;\n    } else {\n      result <<= bits;\n      var shift = remaining - bits;\n      result |= (this.curByte & (BITMASK[bits] << shift)) >> shift;\n      this.bitOffset += bits;\n      bits = 0;\n    }\n  }\n  return result;\n};\n\n// seek to an arbitrary point in the buffer (expressed in bits)\nBitReader.prototype.seek = function(pos) {\n  var n_bit = pos % 8;\n  var n_byte = (pos - n_bit) / 8;\n  this.bitOffset = n_bit;\n  this.stream.seek(n_byte);\n  this.hasByte = false;\n};\n\n// reads 6 bytes worth of data using the read method\nBitReader.prototype.pi = function() {\n  var buf = new Uint8Array(6), i;\n  for (i = 0; i < buf.length; i++) {\n    buf[i] = this.read(8);\n  }\n  return bufToHex(buf);\n};\n\nfunction bufToHex(buf) {\n  return Array.prototype.map.call(buf, x => ('00' + x.toString(16)).slice(-2)).join('');\n}\n\nmodule.exports = BitReader;\n","/*\nseek-bzip - a pure-javascript module for seeking within bzip2 data\n\nCopyright (C) 2013 C. Scott Ananian\nCopyright (C) 2012 Eli Skeggs\nCopyright (C) 2011 Kevin Kwok\n\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, see\nhttp://www.gnu.org/licenses/lgpl-2.1.html\n\nAdapted from node-bzip, copyright 2012 Eli Skeggs.\nAdapted from bzip2.js, copyright 2011 Kevin Kwok (antimatter15@gmail.com).\n\nBased on micro-bunzip by Rob Landley (rob@landley.net).\n\nBased on bzip2 decompression code by Julian R Seward (jseward@acm.org),\nwhich also acknowledges contributions by Mike Burrows, David Wheeler,\nPeter Fenwick, Alistair Moffat, Radford Neal, Ian H. Witten,\nRobert Sedgewick, and Jon L. Bentley.\n*/\n\nvar BitReader = require('./bitreader');\nvar Stream = require('./stream');\nvar CRC32 = require('./crc32');\n\nvar MAX_HUFCODE_BITS = 20;\nvar MAX_SYMBOLS = 258;\nvar SYMBOL_RUNA = 0;\nvar SYMBOL_RUNB = 1;\nvar MIN_GROUPS = 2;\nvar MAX_GROUPS = 6;\nvar GROUP_SIZE = 50;\n\nvar WHOLEPI = \"314159265359\";\nvar SQRTPI = \"177245385090\";\n\nvar mtf = function(array, index) {\n  var src = array[index], i;\n  for (i = index; i > 0; i--) {\n    array[i] = array[i-1];\n  }\n  array[0] = src;\n  return src;\n};\n\nvar Err = {\n  OK: 0,\n  LAST_BLOCK: -1,\n  NOT_BZIP_DATA: -2,\n  UNEXPECTED_INPUT_EOF: -3,\n  UNEXPECTED_OUTPUT_EOF: -4,\n  DATA_ERROR: -5,\n  OUT_OF_MEMORY: -6,\n  OBSOLETE_INPUT: -7,\n  END_OF_BLOCK: -8\n};\nvar ErrorMessages = {};\nErrorMessages[Err.LAST_BLOCK] =            \"Bad file checksum\";\nErrorMessages[Err.NOT_BZIP_DATA] =         \"Not bzip data\";\nErrorMessages[Err.UNEXPECTED_INPUT_EOF] =  \"Unexpected input EOF\";\nErrorMessages[Err.UNEXPECTED_OUTPUT_EOF] = \"Unexpected output EOF\";\nErrorMessages[Err.DATA_ERROR] =            \"Data error\";\nErrorMessages[Err.OUT_OF_MEMORY] =         \"Out of memory\";\nErrorMessages[Err.OBSOLETE_INPUT] = \"Obsolete (pre 0.9.5) bzip format not supported.\";\n\nvar _throw = function(status, optDetail) {\n  var msg = ErrorMessages[status] || 'unknown error';\n  if (optDetail) { msg += ': '+optDetail; }\n  var e = new TypeError(msg);\n  e.errorCode = status;\n  throw e;\n};\n\nvar Bunzip = function(inputStream, outputStream) {\n  this.writePos = this.writeCurrent = this.writeCount = 0;\n\n  this._start_bunzip(inputStream, outputStream);\n};\nBunzip.prototype._init_block = function() {\n  var moreBlocks = this._get_next_block();\n  if ( !moreBlocks ) {\n    this.writeCount = -1;\n    return false; /* no more blocks */\n  }\n  this.blockCRC = new CRC32();\n  return true;\n};\n/* XXX micro-bunzip uses (inputStream, inputBuffer, len) as arguments */\nBunzip.prototype._start_bunzip = function(inputStream, outputStream) {\n  /* Ensure that file starts with \"BZh['1'-'9'].\" */\n  var buf = new Uint8Array(4);\n  if (inputStream.read(buf, 0, 4) !== 4 ||\n      String.fromCharCode(buf[0], buf[1], buf[2]) !== 'BZh')\n    _throw(Err.NOT_BZIP_DATA, 'bad magic');\n\n  var level = buf[3] - 0x30;\n  if (level < 1 || level > 9)\n    _throw(Err.NOT_BZIP_DATA, 'level out of range');\n\n  this.reader = new BitReader(inputStream);\n\n  /* Fourth byte (ascii '1'-'9'), indicates block size in units of 100k of\n     uncompressed data.  Allocate intermediate buffer for block. */\n  this.dbufSize = 100000 * level;\n  this.nextoutput = 0;\n  this.outputStream = outputStream;\n  this.streamCRC = 0;\n};\nBunzip.prototype._get_next_block = function() {\n  var i, j, k;\n  var reader = this.reader;\n  // this is get_next_block() function from micro-bunzip:\n  /* Read in header signature and CRC, then validate signature.\n     (last block signature means CRC is for whole file, return now) */\n  var h = reader.pi();\n  if (h === SQRTPI) { // last block\n    return false; /* no more blocks */\n  }\n  if (h !== WHOLEPI)\n    _throw(Err.NOT_BZIP_DATA);\n  this.targetBlockCRC = reader.read(32) >>> 0; // (convert to unsigned)\n  this.streamCRC = (this.targetBlockCRC ^\n                    ((this.streamCRC << 1) | (this.streamCRC>>>31))) >>> 0;\n  /* We can add support for blockRandomised if anybody complains.  There was\n     some code for this in busybox 1.0.0-pre3, but nobody ever noticed that\n     it didn't actually work. */\n  if (reader.read(1))\n    _throw(Err.OBSOLETE_INPUT);\n  var origPointer = reader.read(24);\n  if (origPointer > this.dbufSize)\n    _throw(Err.DATA_ERROR, 'initial position out of bounds');\n  /* mapping table: if some byte values are never used (encoding things\n     like ascii text), the compression code removes the gaps to have fewer\n     symbols to deal with, and writes a sparse bitfield indicating which\n     values were present.  We make a translation table to convert the symbols\n     back to the corresponding bytes. */\n  var t = reader.read(16);\n  var symToByte = new Uint8Array(256), symTotal = 0;\n  for (i = 0; i < 16; i++) {\n    if (t & (1 << (0xF - i))) {\n      var o = i * 16;\n      k = reader.read(16);\n      for (j = 0; j < 16; j++)\n        if (k & (1 << (0xF - j)))\n          symToByte[symTotal++] = o + j;\n    }\n  }\n\n  /* How many different huffman coding groups does this block use? */\n  var groupCount = reader.read(3);\n  if (groupCount < MIN_GROUPS || groupCount > MAX_GROUPS)\n    _throw(Err.DATA_ERROR);\n  /* nSelectors: Every GROUP_SIZE many symbols we select a new huffman coding\n     group.  Read in the group selector list, which is stored as MTF encoded\n     bit runs.  (MTF=Move To Front, as each value is used it's moved to the\n     start of the list.) */\n  var nSelectors = reader.read(15);\n  if (nSelectors === 0)\n    _throw(Err.DATA_ERROR);\n\n  var mtfSymbol = new Uint8Array(256);\n  for (i = 0; i < groupCount; i++)\n    mtfSymbol[i] = i;\n\n  var selectors = new Uint8Array(nSelectors); // was 32768...\n\n  for (i = 0; i < nSelectors; i++) {\n    /* Get next value */\n    for (j = 0; reader.read(1); j++)\n      if (j >= groupCount) _throw(Err.DATA_ERROR);\n    /* Decode MTF to get the next selector */\n    selectors[i] = mtf(mtfSymbol, j);\n  }\n\n  /* Read the huffman coding tables for each group, which code for symTotal\n     literal symbols, plus two run symbols (RUNA, RUNB) */\n  var symCount = symTotal + 2;\n  var groups = [], hufGroup;\n  for (j = 0; j < groupCount; j++) {\n    var length = new Uint8Array(symCount), temp = new Uint16Array(MAX_HUFCODE_BITS + 1);\n    /* Read huffman code lengths for each symbol.  They're stored in\n       a way similar to mtf; record a starting value for the first symbol,\n       and an offset from the previous value for everys symbol after that. */\n    t = reader.read(5); // lengths\n    for (i = 0; i < symCount; i++) {\n      for (;;) {\n        if (t < 1 || t > MAX_HUFCODE_BITS) _throw(Err.DATA_ERROR);\n        /* If first bit is 0, stop.  Else second bit indicates whether\n           to increment or decrement the value. */\n        if(!reader.read(1))\n          break;\n        if(!reader.read(1))\n          t++;\n        else\n          t--;\n      }\n      length[i] = t;\n    }\n\n    /* Find largest and smallest lengths in this group */\n    var minLen,  maxLen;\n    minLen = maxLen = length[0];\n    for (i = 1; i < symCount; i++) {\n      if (length[i] > maxLen)\n        maxLen = length[i];\n      else if (length[i] < minLen)\n        minLen = length[i];\n    }\n\n    /* Calculate permute[], base[], and limit[] tables from length[].\n     *\n     * permute[] is the lookup table for converting huffman coded symbols\n     * into decoded symbols.  base[] is the amount to subtract from the\n     * value of a huffman symbol of a given length when using permute[].\n     *\n     * limit[] indicates the largest numerical value a symbol with a given\n     * number of bits can have.  This is how the huffman codes can vary in\n     * length: each code with a value>limit[length] needs another bit.\n     */\n    hufGroup = {};\n    groups.push(hufGroup);\n    hufGroup.permute = new Uint16Array(MAX_SYMBOLS);\n    hufGroup.limit = new Uint32Array(MAX_HUFCODE_BITS + 2);\n    hufGroup.base = new Uint32Array(MAX_HUFCODE_BITS + 1);\n    hufGroup.minLen = minLen;\n    hufGroup.maxLen = maxLen;\n    /* Calculate permute[].  Concurently, initialize temp[] and limit[]. */\n    var pp = 0;\n    for (i = minLen; i <= maxLen; i++) {\n      temp[i] = hufGroup.limit[i] = 0;\n      for (t = 0; t < symCount; t++)\n        if (length[t] === i)\n          hufGroup.permute[pp++] = t;\n    }\n    /* Count symbols coded for at each bit length */\n    for (i = 0; i < symCount; i++)\n      temp[length[i]]++;\n    /* Calculate limit[] (the largest symbol-coding value at each bit\n     * length, which is (previous limit<<1)+symbols at this level), and\n     * base[] (number of symbols to ignore at each bit length, which is\n     * limit minus the cumulative count of symbols coded for already). */\n    pp = t = 0;\n    for (i = minLen; i < maxLen; i++) {\n      pp += temp[i];\n      /* We read the largest possible symbol size and then unget bits\n         after determining how many we need, and those extra bits could\n         be set to anything.  (They're noise from future symbols.)  At\n         each level we're really only interested in the first few bits,\n         so here we set all the trailing to-be-ignored bits to 1 so they\n         don't affect the value>limit[length] comparison. */\n      hufGroup.limit[i] = pp - 1;\n      pp <<= 1;\n      t += temp[i];\n      hufGroup.base[i + 1] = pp - t;\n    }\n    hufGroup.limit[maxLen + 1] = Number.MAX_VALUE; /* Sentinal value for reading next sym. */\n    hufGroup.limit[maxLen] = pp + temp[maxLen] - 1;\n    hufGroup.base[minLen] = 0;\n  }\n  /* We've finished reading and digesting the block header.  Now read this\n     block's huffman coded symbols from the file and undo the huffman coding\n     and run length encoding, saving the result into dbuf[dbufCount++]=uc */\n\n  /* Initialize symbol occurrence counters and symbol Move To Front table */\n  var byteCount = new Uint32Array(256);\n  for (i = 0; i < 256; i++)\n    mtfSymbol[i] = i;\n  /* Loop through compressed symbols. */\n  var runPos = 0, dbufCount = 0, selector = 0, uc;\n  var dbuf = this.dbuf = new Uint32Array(this.dbufSize);\n  symCount = 0;\n  for (;;) {\n    /* Determine which huffman coding group to use. */\n    if (!(symCount--)) {\n      symCount = GROUP_SIZE - 1;\n      if (selector >= nSelectors) { _throw(Err.DATA_ERROR); }\n      hufGroup = groups[selectors[selector++]];\n    }\n    /* Read next huffman-coded symbol. */\n    i = hufGroup.minLen;\n    j = reader.read(i);\n    for (;;i++) {\n      if (i > hufGroup.maxLen) { _throw(Err.DATA_ERROR); }\n      if (j <= hufGroup.limit[i])\n        break;\n      j = (j << 1) | reader.read(1);\n    }\n    /* Huffman decode value to get nextSym (with bounds checking) */\n    j -= hufGroup.base[i];\n    if (j < 0 || j >= MAX_SYMBOLS) { _throw(Err.DATA_ERROR); }\n    var nextSym = hufGroup.permute[j];\n    /* We have now decoded the symbol, which indicates either a new literal\n       byte, or a repeated run of the most recent literal byte.  First,\n       check if nextSym indicates a repeated run, and if so loop collecting\n       how many times to repeat the last literal. */\n    if (nextSym === SYMBOL_RUNA || nextSym === SYMBOL_RUNB) {\n      /* If this is the start of a new run, zero out counter */\n      if (!runPos){\n        runPos = 1;\n        t = 0;\n      }\n      /* Neat trick that saves 1 symbol: instead of or-ing 0 or 1 at\n         each bit position, add 1 or 2 instead.  For example,\n         1011 is 1<<0 + 1<<1 + 2<<2.  1010 is 2<<0 + 2<<1 + 1<<2.\n         You can make any bit pattern that way using 1 less symbol than\n         the basic or 0/1 method (except all bits 0, which would use no\n         symbols, but a run of length 0 doesn't mean anything in this\n         context).  Thus space is saved. */\n      if (nextSym === SYMBOL_RUNA)\n        t += runPos;\n      else\n        t += 2 * runPos;\n      runPos <<= 1;\n      continue;\n    }\n    /* When we hit the first non-run symbol after a run, we now know\n       how many times to repeat the last literal, so append that many\n       copies to our buffer of decoded symbols (dbuf) now.  (The last\n       literal used is the one at the head of the mtfSymbol array.) */\n    if (runPos){\n      runPos = 0;\n      if (dbufCount + t > this.dbufSize) { _throw(Err.DATA_ERROR); }\n      uc = symToByte[mtfSymbol[0]];\n      byteCount[uc] += t;\n      while (t--)\n        dbuf[dbufCount++] = uc;\n    }\n    /* Is this the terminating symbol? */\n    if (nextSym > symTotal)\n      break;\n    /* At this point, nextSym indicates a new literal character.  Subtract\n       one to get the position in the MTF array at which this literal is\n       currently to be found.  (Note that the result can't be -1 or 0,\n       because 0 and 1 are RUNA and RUNB.  But another instance of the\n       first symbol in the mtf array, position 0, would have been handled\n       as part of a run above.  Therefore 1 unused mtf position minus\n       2 non-literal nextSym values equals -1.) */\n    if (dbufCount >= this.dbufSize) { _throw(Err.DATA_ERROR); }\n    i = nextSym - 1;\n    uc = mtf(mtfSymbol, i);\n    uc = symToByte[uc];\n    /* We have our literal byte.  Save it into dbuf. */\n    byteCount[uc]++;\n    dbuf[dbufCount++] = uc;\n  }\n  /* At this point, we've read all the huffman-coded symbols (and repeated\n     runs) for this block from the input stream, and decoded them into the\n     intermediate buffer.  There are dbufCount many decoded bytes in dbuf[].\n     Now undo the Burrows-Wheeler transform on dbuf.\n     See http://dogma.net/markn/articles/bwt/bwt.htm\n  */\n  if (origPointer < 0 || origPointer >= dbufCount) { _throw(Err.DATA_ERROR); }\n  /* Turn byteCount into cumulative occurrence counts of 0 to n-1. */\n  j = 0;\n  for (i = 0; i < 256; i++) {\n    k = j + byteCount[i];\n    byteCount[i] = j;\n    j = k;\n  }\n  /* Figure out what order dbuf would be in if we sorted it. */\n  for (i = 0; i < dbufCount; i++) {\n    uc = dbuf[i] & 0xff;\n    dbuf[byteCount[uc]] |= (i << 8);\n    byteCount[uc]++;\n  }\n  /* Decode first byte by hand to initialize \"previous\" byte.  Note that it\n     doesn't get output, and if the first three characters are identical\n     it doesn't qualify as a run (hence writeRunCountdown=5). */\n  var pos = 0, current = 0, run = 0;\n  if (dbufCount) {\n    pos = dbuf[origPointer];\n    current = (pos & 0xff);\n    pos >>= 8;\n    run = -1;\n  }\n  this.writePos = pos;\n  this.writeCurrent = current;\n  this.writeCount = dbufCount;\n  this.writeRun = run;\n\n  return true; /* more blocks to come */\n};\n/* Undo burrows-wheeler transform on intermediate buffer to produce output.\n   If start_bunzip was initialized with out_fd=-1, then up to len bytes of\n   data are written to outbuf.  Return value is number of bytes written or\n   error (all errors are negative numbers).  If out_fd!=-1, outbuf and len\n   are ignored, data is written to out_fd and return is RETVAL_OK or error.\n*/\nBunzip.prototype._read_bunzip = function(outputBuffer, len) {\n    var copies, previous, outbyte;\n    /* james@jamestaylor.org: writeCount goes to -1 when the buffer is fully\n       decoded, which results in this returning RETVAL_LAST_BLOCK, also\n       equal to -1... Confusing, I'm returning 0 here to indicate no\n       bytes written into the buffer */\n  if (this.writeCount < 0) { return 0; }\n\n  var gotcount = 0;\n  var dbuf = this.dbuf, pos = this.writePos, current = this.writeCurrent;\n  var dbufCount = this.writeCount, outputsize = this.outputsize;\n  var run = this.writeRun;\n\n  while (dbufCount) {\n    dbufCount--;\n    previous = current;\n    pos = dbuf[pos];\n    current = pos & 0xff;\n    pos >>= 8;\n    if (run++ === 3){\n      copies = current;\n      outbyte = previous;\n      current = -1;\n    } else {\n      copies = 1;\n      outbyte = current;\n    }\n    this.blockCRC.updateCRCRun(outbyte, copies);\n    while (copies--) {\n      this.outputStream.writeByte(outbyte);\n      this.nextoutput++;\n    }\n    if (current != previous)\n      run = 0;\n  }\n  this.writeCount = dbufCount;\n  // check CRC\n  if (this.blockCRC.getCRC() !== this.targetBlockCRC) {\n    _throw(Err.DATA_ERROR, \"Bad block CRC \"+\n           \"(got \"+this.blockCRC.getCRC().toString(16)+\n           \" expected \"+this.targetBlockCRC.toString(16)+\")\");\n  }\n  return this.nextoutput;\n};\n\nvar coerceInputStream = function(input) {\n  if ('readByte' in input) { return input; }\n  var inputStream = new Stream();\n  inputStream.pos = 0;\n  inputStream.readByte = function() { return input[this.pos++]; };\n  inputStream.seek = function(pos) { this.pos = pos; };\n  inputStream.eof = function() { return this.pos >= input.length; };\n  return inputStream;\n};\nvar coerceOutputStream = function(output) {\n  var outputStream = new Stream();\n  var resizeOk = true;\n  if (output) {\n    if (typeof(output)==='number') {\n      outputStream.buffer = new Uint8Array(output);\n      resizeOk = false;\n    } else if ('writeByte' in output) {\n      return output;\n    } else {\n      outputStream.buffer = output;\n      resizeOk = false;\n    }\n  } else {\n    outputStream.buffer = new Uint8Array(16384);\n  }\n  outputStream.pos = 0;\n  outputStream.writeByte = function(_byte) {\n    if (resizeOk && this.pos >= this.buffer.length) {\n      var newBuffer = new Uint8Array(this.buffer.length*2);\n      newBuffer.set(this.buffer);\n      this.buffer = newBuffer;\n    }\n    this.buffer[this.pos++] = _byte;\n  };\n  outputStream.getBuffer = function() {\n    // trim buffer\n    if (this.pos !== this.buffer.length) {\n      if (!resizeOk)\n        throw new TypeError('outputsize does not match decoded input');\n      var newBuffer = new Uint8Array(this.pos);\n      newBuffer.set(this.buffer.subarray(0, this.pos));\n      this.buffer = newBuffer;\n    }\n    return this.buffer;\n  };\n  outputStream._coerced = true;\n  return outputStream;\n};\n\n/* Static helper functions */\n// 'input' can be a stream or a buffer\n// 'output' can be a stream or a buffer or a number (buffer size)\nconst decode = function(input, output, multistream) {\n  // make a stream from a buffer, if necessary\n  var inputStream = coerceInputStream(input);\n  var outputStream = coerceOutputStream(output);\n\n  var bz = new Bunzip(inputStream, outputStream);\n  while (true) {\n    if ('eof' in inputStream && inputStream.eof()) break;\n    if (bz._init_block()) {\n      bz._read_bunzip();\n    } else {\n      var targetStreamCRC = bz.reader.read(32) >>> 0; // (convert to unsigned)\n      if (targetStreamCRC !== bz.streamCRC) {\n        _throw(Err.DATA_ERROR, \"Bad stream CRC \"+\n               \"(got \"+bz.streamCRC.toString(16)+\n               \" expected \"+targetStreamCRC.toString(16)+\")\");\n      }\n      if (multistream &&\n          'eof' in inputStream &&\n          !inputStream.eof()) {\n        // note that start_bunzip will also resync the bit reader to next byte\n        bz._start_bunzip(inputStream, outputStream);\n      } else break;\n    }\n  }\n  if ('getBuffer' in outputStream)\n    return outputStream.getBuffer();\n};\nconst decodeBlock = function(input, pos, output) {\n  // make a stream from a buffer, if necessary\n  var inputStream = coerceInputStream(input);\n  var outputStream = coerceOutputStream(output);\n  var bz = new Bunzip(inputStream, outputStream);\n  bz.reader.seek(pos);\n  /* Fill the decode buffer for the block */\n  var moreBlocks = bz._get_next_block();\n  if (moreBlocks) {\n    /* Init the CRC for writing */\n    bz.blockCRC = new CRC32();\n\n    /* Zero this so the current byte from before the seek is not written */\n    bz.writeCopies = 0;\n\n    /* Decompress the block and write to stdout */\n    bz._read_bunzip();\n    // XXX keep writing?\n  }\n  if ('getBuffer' in outputStream)\n    return outputStream.getBuffer();\n};\n/* Reads bzip2 file from stream or buffer `input`, and invoke\n * `callback(position, size)` once for each bzip2 block,\n * where position gives the starting position (in *bits*)\n * and size gives uncompressed size of the block (in *bytes*). */\nconst table = function(input, callback, multistream) {\n  // make a stream from a buffer, if necessary\n  var inputStream = new Stream();\n  inputStream.delegate = coerceInputStream(input);\n  inputStream.pos = 0;\n  inputStream.readByte = function() {\n    this.pos++;\n    return this.delegate.readByte();\n  };\n  if (inputStream.delegate.eof) {\n    inputStream.eof = inputStream.delegate.eof.bind(inputStream.delegate);\n  }\n  var outputStream = new Stream();\n  outputStream.pos = 0;\n  outputStream.writeByte = function() { this.pos++; };\n\n  var bz = new Bunzip(inputStream, outputStream);\n  var blockSize = bz.dbufSize;\n  while (true) {\n    if ('eof' in inputStream && inputStream.eof()) break;\n\n    var position = inputStream.pos*8 + bz.reader.bitOffset;\n    if (bz.reader.hasByte) { position -= 8; }\n\n    if (bz._init_block()) {\n      var start = outputStream.pos;\n      bz._read_bunzip();\n      callback(position, outputStream.pos - start);\n    } else {\n      var crc = bz.reader.read(32); // (but we ignore the crc)\n      if (multistream &&\n          'eof' in inputStream &&\n          !inputStream.eof()) {\n        // note that start_bunzip will also resync the bit reader to next byte\n        bz._start_bunzip(inputStream, outputStream);\n        console.assert(bz.dbufSize === blockSize,\n                       \"shouldn't change block size within multistream file\");\n      } else break;\n    }\n  }\n};\n\nmodule.exports = {\n  Bunzip,\n  Stream,\n  Err,\n  decode,\n  decodeBlock,\n  table\n};\n","/* CRC32, used in Bzip2 implementation.\n * This is a port of CRC32.java from the jbzip2 implementation at\n *   https://code.google.com/p/jbzip2\n * which is:\n *   Copyright (c) 2011 Matthew Francis\n *\n *   Permission is hereby granted, free of charge, to any person\n *   obtaining a copy of this software and associated documentation\n *   files (the \"Software\"), to deal in the Software without\n *   restriction, including without limitation the rights to use,\n *   copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the\n *   Software is furnished to do so, subject to the following\n *   conditions:\n *\n *   The above copyright notice and this permission notice shall be\n *   included in all copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n *   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n *   OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n *   NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n *   HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n *   WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n *   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n *   OTHER DEALINGS IN THE SOFTWARE.\n * This JavaScript implementation is:\n *   Copyright (c) 2013 C. Scott Ananian\n * with the same licensing terms as Matthew Francis' original implementation.\n */\nmodule.exports = (function() {\n\n  /**\n   * A static CRC lookup table\n   */\n  var crc32Lookup = new Uint32Array([\n    0x00000000, 0x04c11db7, 0x09823b6e, 0x0d4326d9, 0x130476dc, 0x17c56b6b, 0x1a864db2, 0x1e475005,\n    0x2608edb8, 0x22c9f00f, 0x2f8ad6d6, 0x2b4bcb61, 0x350c9b64, 0x31cd86d3, 0x3c8ea00a, 0x384fbdbd,\n    0x4c11db70, 0x48d0c6c7, 0x4593e01e, 0x4152fda9, 0x5f15adac, 0x5bd4b01b, 0x569796c2, 0x52568b75,\n    0x6a1936c8, 0x6ed82b7f, 0x639b0da6, 0x675a1011, 0x791d4014, 0x7ddc5da3, 0x709f7b7a, 0x745e66cd,\n    0x9823b6e0, 0x9ce2ab57, 0x91a18d8e, 0x95609039, 0x8b27c03c, 0x8fe6dd8b, 0x82a5fb52, 0x8664e6e5,\n    0xbe2b5b58, 0xbaea46ef, 0xb7a96036, 0xb3687d81, 0xad2f2d84, 0xa9ee3033, 0xa4ad16ea, 0xa06c0b5d,\n    0xd4326d90, 0xd0f37027, 0xddb056fe, 0xd9714b49, 0xc7361b4c, 0xc3f706fb, 0xceb42022, 0xca753d95,\n    0xf23a8028, 0xf6fb9d9f, 0xfbb8bb46, 0xff79a6f1, 0xe13ef6f4, 0xe5ffeb43, 0xe8bccd9a, 0xec7dd02d,\n    0x34867077, 0x30476dc0, 0x3d044b19, 0x39c556ae, 0x278206ab, 0x23431b1c, 0x2e003dc5, 0x2ac12072,\n    0x128e9dcf, 0x164f8078, 0x1b0ca6a1, 0x1fcdbb16, 0x018aeb13, 0x054bf6a4, 0x0808d07d, 0x0cc9cdca,\n    0x7897ab07, 0x7c56b6b0, 0x71159069, 0x75d48dde, 0x6b93dddb, 0x6f52c06c, 0x6211e6b5, 0x66d0fb02,\n    0x5e9f46bf, 0x5a5e5b08, 0x571d7dd1, 0x53dc6066, 0x4d9b3063, 0x495a2dd4, 0x44190b0d, 0x40d816ba,\n    0xaca5c697, 0xa864db20, 0xa527fdf9, 0xa1e6e04e, 0xbfa1b04b, 0xbb60adfc, 0xb6238b25, 0xb2e29692,\n    0x8aad2b2f, 0x8e6c3698, 0x832f1041, 0x87ee0df6, 0x99a95df3, 0x9d684044, 0x902b669d, 0x94ea7b2a,\n    0xe0b41de7, 0xe4750050, 0xe9362689, 0xedf73b3e, 0xf3b06b3b, 0xf771768c, 0xfa325055, 0xfef34de2,\n    0xc6bcf05f, 0xc27dede8, 0xcf3ecb31, 0xcbffd686, 0xd5b88683, 0xd1799b34, 0xdc3abded, 0xd8fba05a,\n    0x690ce0ee, 0x6dcdfd59, 0x608edb80, 0x644fc637, 0x7a089632, 0x7ec98b85, 0x738aad5c, 0x774bb0eb,\n    0x4f040d56, 0x4bc510e1, 0x46863638, 0x42472b8f, 0x5c007b8a, 0x58c1663d, 0x558240e4, 0x51435d53,\n    0x251d3b9e, 0x21dc2629, 0x2c9f00f0, 0x285e1d47, 0x36194d42, 0x32d850f5, 0x3f9b762c, 0x3b5a6b9b,\n    0x0315d626, 0x07d4cb91, 0x0a97ed48, 0x0e56f0ff, 0x1011a0fa, 0x14d0bd4d, 0x19939b94, 0x1d528623,\n    0xf12f560e, 0xf5ee4bb9, 0xf8ad6d60, 0xfc6c70d7, 0xe22b20d2, 0xe6ea3d65, 0xeba91bbc, 0xef68060b,\n    0xd727bbb6, 0xd3e6a601, 0xdea580d8, 0xda649d6f, 0xc423cd6a, 0xc0e2d0dd, 0xcda1f604, 0xc960ebb3,\n    0xbd3e8d7e, 0xb9ff90c9, 0xb4bcb610, 0xb07daba7, 0xae3afba2, 0xaafbe615, 0xa7b8c0cc, 0xa379dd7b,\n    0x9b3660c6, 0x9ff77d71, 0x92b45ba8, 0x9675461f, 0x8832161a, 0x8cf30bad, 0x81b02d74, 0x857130c3,\n    0x5d8a9099, 0x594b8d2e, 0x5408abf7, 0x50c9b640, 0x4e8ee645, 0x4a4ffbf2, 0x470cdd2b, 0x43cdc09c,\n    0x7b827d21, 0x7f436096, 0x7200464f, 0x76c15bf8, 0x68860bfd, 0x6c47164a, 0x61043093, 0x65c52d24,\n    0x119b4be9, 0x155a565e, 0x18197087, 0x1cd86d30, 0x029f3d35, 0x065e2082, 0x0b1d065b, 0x0fdc1bec,\n    0x3793a651, 0x3352bbe6, 0x3e119d3f, 0x3ad08088, 0x2497d08d, 0x2056cd3a, 0x2d15ebe3, 0x29d4f654,\n    0xc5a92679, 0xc1683bce, 0xcc2b1d17, 0xc8ea00a0, 0xd6ad50a5, 0xd26c4d12, 0xdf2f6bcb, 0xdbee767c,\n    0xe3a1cbc1, 0xe760d676, 0xea23f0af, 0xeee2ed18, 0xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4,\n    0x89b8fd09, 0x8d79e0be, 0x803ac667, 0x84fbdbd0, 0x9abc8bd5, 0x9e7d9662, 0x933eb0bb, 0x97ffad0c,\n    0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668, 0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4\n  ]);\n\n  var CRC32 = function() {\n    /**\n     * The current CRC\n     */\n    var crc = 0xffffffff;\n\n    /**\n     * @return The current CRC\n     */\n    this.getCRC = function() {\n      return (~crc) >>> 0; // return an unsigned value\n    };\n\n    /**\n     * Update the CRC with a single byte\n     * @param value The value to update the CRC with\n     */\n    this.updateCRC = function(value) {\n      crc = (crc << 8) ^ crc32Lookup[((crc >>> 24) ^ value) & 0xff];\n    };\n\n    /**\n     * Update the CRC with a sequence of identical bytes\n     * @param value The value to update the CRC with\n     * @param count The number of bytes\n     */\n    this.updateCRCRun = function(value, count) {\n      while (count-- > 0) {\n        crc = (crc << 8) ^ crc32Lookup[((crc >>> 24) ^ value) & 0xff];\n      }\n    };\n  };\n  return CRC32;\n})();\n","/* very simple input/output stream interface */\nvar Stream = function() {\n};\n\n// input streams //////////////\n/** Returns the next byte, or -1 for EOF. */\nStream.prototype.readByte = function() {\n  throw new Error(\"abstract method readByte() not implemented\");\n};\n/** Attempts to fill the buffer; returns number of bytes read, or\n *  -1 for EOF. */\nStream.prototype.read = function(buffer, bufOffset, length) {\n  var bytesRead = 0;\n  while (bytesRead < length) {\n    var c = this.readByte();\n    if (c < 0) { // EOF\n      return (bytesRead===0) ? -1 : bytesRead;\n    }\n    buffer[bufOffset++] = c;\n    bytesRead++;\n  }\n  return bytesRead;\n};\nStream.prototype.seek = function(new_pos) {\n  throw new Error(\"abstract method seek() not implemented\");\n};\n\n// output streams ///////////\nStream.prototype.writeByte = function(_byte) {\n  throw new Error(\"abstract method readByte() not implemented\");\n};\nStream.prototype.write = function(buffer, bufOffset, length) {\n  var i;\n  for (i=0; i<length; i++) {\n    this.writeByte(buffer[bufOffset++]);\n  }\n  return length;\n};\nStream.prototype.flush = function() {\n};\n\nmodule.exports = Stream;\n"],"names":["doneWritingPromise","Symbol","doneWritingResolve","doneWritingReject","readingIndex","ArrayStream","Array","constructor","super","Object","setPrototypeOf","this","prototype","Promise","resolve","reject","catch","isArrayStream","input","getReader","isArray","Writer","writer","getWriter","releaseLock","closed","call","stream","isStream","globalThis","ReadableStream","isPrototypeOf","_read","_readableState","Error","isUint8Array","Uint8Array","concatUint8Array","arrays","length","totalLength","i","result","pos","forEach","element","set","undefined","read","async","value","done","readToEnd","join","slice","clone","then","push","write","chunk","close","abort","reason","process","versions","doneReadingSet","WeakSet","externalBuffer","Reader","reader","bind","_releaseLock","_cancel","cancel","doneReading","has","add","e","toStream","start","controller","enqueue","toArrayStream","concat","list","some","map","transform","transformWithCancel","all","transforms","prev","transformPair","readable","writable","pipe","preventClose","concatStream","concatArrayStream","target","preventAbort","preventCancel","ready","pipeTo","transformRaw","options","transformStream","TransformStream","customCancel","backpressureChangePromiseResolve","backpressureChangePromiseReject","outputController","pulled","cancelled","pull","highWaterMark","WritableStream","error","finish","output","data","result1","result2","flush","fn","incomingTransformController","incoming","pipeDonePromise","outgoing","setTimeout","parse","returnValue","transformed","remainder","teed","tee","overwrite","passiveClone","entries","getOwnPropertyDescriptors","name","descriptor","get","defineProperty","begin","end","Infinity","bytesRead","Math","max","terminate","lastBytes","console","warn","fromAsync","subarray","destroy","arrayStream","shift","readLine","returnVal","buffer","streams.concat","lineEndIndex","indexOf","substr","unshift","readByte","byte","streams.slice","readBytes","bufferLength","bufferConcat","peekBytes","bytes","values","byteOffset","byteLength","filter","byValue","enums","curve","nistP256","p256","nistP384","p384","nistP521","p521","secp256k1","ed25519Legacy","ed25519","curve25519Legacy","curve25519","brainpoolP256r1","brainpoolP384r1","brainpoolP512r1","s2k","simple","salted","iterated","argon2","gnu","publicKey","rsaEncryptSign","rsaEncrypt","rsaSign","elgamal","dsa","ecdh","ecdsa","eddsaLegacy","aedh","aedsa","x25519","x448","ed448","symmetric","idea","tripledes","cast5","blowfish","aes128","aes192","aes256","twofish","compression","uncompressed","zip","zlib","bzip2","hash","md5","sha1","ripemd","sha256","sha384","sha512","sha224","sha3_256","sha3_512","webHash","aead","eax","ocb","gcm","experimentalGCM","packet","publicKeyEncryptedSessionKey","signature","symEncryptedSessionKey","onePassSignature","secretKey","secretSubkey","compressedData","symmetricallyEncryptedData","marker","literalData","trust","userID","publicSubkey","userAttribute","symEncryptedIntegrityProtectedData","modificationDetectionCode","aeadEncryptedData","padding","literal","binary","text","utf8","mime","standalone","certGeneric","certPersona","certCasual","certPositive","certRevocation","subkeyBinding","keyBinding","key","keyRevocation","subkeyRevocation","timestamp","thirdParty","signatureSubpacket","signatureCreationTime","signatureExpirationTime","exportableCertification","trustSignature","regularExpression","revocable","keyExpirationTime","placeholderBackwardsCompatibility","preferredSymmetricAlgorithms","revocationKey","issuerKeyID","notationData","preferredHashAlgorithms","preferredCompressionAlgorithms","keyServerPreferences","preferredKeyServer","primaryUserID","policyURI","keyFlags","signersUserID","reasonForRevocation","features","signatureTarget","embeddedSignature","issuerFingerprint","preferredAEADAlgorithms","preferredCipherSuites","certifyKeys","signData","encryptCommunication","encryptStorage","splitPrivateKey","authentication","sharedPrivateKey","armor","multipartSection","multipartLast","signed","message","privateKey","noReason","keySuperseded","keyCompromised","keyRetired","userIDInvalid","modificationDetection","v5Keys","seipdv2","type","config","preferredHashAlgorithm","preferredSymmetricAlgorithm","preferredCompressionAlgorithm","aeadProtect","parseAEADEncryptedV4KeysAsLegacy","preferredAEADAlgorithm","aeadChunkSizeByte","v6Keys","enableParsingV5Entities","s2kType","s2kIterationCountByte","s2kArgon2Params","passes","parallelism","memoryExponent","allowUnauthenticatedMessages","allowUnauthenticatedStream","minRSABits","passwordCollisionCheck","allowInsecureDecryptionWithSigningKeys","allowInsecureVerificationWithReformattedKeys","allowMissingKeyFlags","constantTimePKCS1Decryption","constantTimePKCS1DecryptionSupportedSymmetricAlgorithms","Set","ignoreUnsupportedPackets","ignoreMalformedPackets","enforceGrammar","additionalAllowedPackets","showVersion","showComment","versionString","commentString","maxUserIDLength","knownNotations","nonDeterministicSignaturesViaNotation","useEllipticFallback","rejectHashAlgorithms","rejectMessageHashAlgorithms","rejectPublicKeyAlgorithms","rejectCurves","debugMode","env","NODE_ENV","util","isString","String","nodeRequire","createRequire","url","getNobleCurve","publicKeyAlgo","curveName","defaultConfig","nobleCurves","noble_curves","readNumber","n","writeNumber","b","readDate","Date","writeDate","time","numeric","floor","getTime","normalizeDate","now","readMPI","bytelen","readExactSubarray","leftPad","padded","offset","uint8ArrayToMPI","bin","bitSize","uint8ArrayBitLength","stripped","ceil","prefix","nbits","hexToUint8Array","hex","k","parseInt","uint8ArrayToHex","hexAlphabet","s","v","stringToUint8Array","str","streamTransform","charCodeAt","uint8ArrayToString","bs","j","fromCharCode","apply","encodeUTF8","encoder","TextEncoder","lastChunk","encode","decodeUTF8","decoder","TextDecoder","decode","streamConcat","equalsUint8Array","array1","array2","findLastIndex","arr","findFn","writeChecksum","printDebug","log","printDebugError","x","r","t","double","doubleVar","last","shiftRight","array","bits","getWebCrypto","webCrypto","crypto","subtle","getNodeCrypto","webcrypto","getNodeZlib","getNodeBuffer","Buffer","getHardwareConcurrency","navigator","hardwareConcurrency","cpus","isEmailAddress","test","canonicalizeEOL","carryOverCR","index","indices","normalized","sub","nativeEOL","copyWithin","removeTrailingSpaces","split","line","wrapError","cause","constructAllowedPackets","allowedClasses","PacketClass","tag","anyPromise","promises","exception","promise","selectUint8Array","cond","a","selectUint8","isAES","cipherAlgo","encodeChunk","decodeChunk","buf","lines","encoded","spaces","spacechars","spacechar","includes","decoded","b64ToUint8Array","base64","replace","uint8ArrayToB64","getType","header","match","addheader","customComment","getCheckSum","crc","len32","isLittleEndian","arr32","Uint32Array","crc_table","createcrc24","encodeBase64","from","toString","btoa","atob","ArrayBuffer","DataView","setInt16","Int16Array","verifyHeaders","headers","removeChecksum","body","lastEquals","lastIndexOf","unarmor","reSplit","reEmptyLine","headersDone","textDone","lastHeaders","decodeBase64","streamTransformPair","streamGetReader","streamGetWriter","parts","streamReadToEnd","messageType","partIndex","partTotal","emitChecksum","maybeBodyClone","streamPassiveClone","_0n","BigInt","_1n","uint8ArrayToBigInt","mod","m","reduced","modExp","exp","lsb","abs","modInv","gcd","aInput","bInput","y","xPrev","yPrev","aNegated","bNegated","q","tmp","_egcd","bigIntToNumber","number","Number","MAX_SAFE_INTEGER","getBit","bitLength","bitlen","_8n","len","bigIntToUint8Array","endian","rawLength","reverse","nodeCrypto","getRandomBytes","getRandomValues","getRandomBigInteger","min","modulus","randomProbablePrime","_30n","adds","isProbablePrime","smallPrimes","every","divisionTest","fermat","n1","d","millerRabin","nodeCryptoHashes","getHashes","nodeHash","shasum","createHash","update","digest","nobleHash","nobleHashName","webCryptoHashName","getNobleHash","nobleHashes","noble_hashes","hashInstance","create","computeDigest","algo","getHashByteLength","hash_headers","emeEncode","keyLength","mLength","PS","count","randomBytes","getPKCS1Padding","emeDecode","randomPayload","separatorNotFound","psLen","payload","isValidPadding","emsaEncode","hashed","emLen","hashPrefix","tLen","fill","EM","sign","hashAlgo","p","u","hashName","jwk","privateToJWK","importKey","webSign","err","createSign","format","nodeSign","bnSign","verify","publicToJWK","webVerify","createVerify","nodeVerify","EM1","EM2","bnVerify","encrypt","constants","RSA_PKCS1_PADDING","publicEncrypt","nodeEncrypt","bnEncrypt","decrypt","privateDecrypt","nodeDecrypt","dq","dp","unblinder","blinder","mp","mq","h","bnDecrypt","pNum","qNum","dNum","kty","qi","ext","jwkToPrivate","nc","nacl","gf","init","Float64Array","randombytes","_9","gf0","gf1","_121665","D","D2","X","Y","I","ts64","l","crypto_verify_32","xi","yi","vn","set25519","car25519","o","c","sel25519","pack25519","neq25519","par25519","unpack25519","A","Z","M","t0","t1","t2","t3","t4","t5","t6","t7","t8","t9","t10","t11","t12","t13","t14","t15","t16","t17","t18","t19","t20","t21","t22","t23","t24","t25","t26","t27","t28","t29","t30","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","b10","b11","b12","b13","b14","b15","S","inv25519","crypto_scalarmult","z","f","x32","x16","crypto_scalarmult_base","K","crypto_hashblocks_hl","hh","hl","bh0","bh1","bh2","bh3","bh4","bh5","bh6","bh7","bl0","bl1","bl2","bl3","bl4","bl5","bl6","bl7","th","tl","wh","Int32Array","wl","ah0","ah1","ah2","ah3","ah4","ah5","ah6","ah7","al0","al1","al2","al3","al4","al5","al6","al7","crypto_hash","out","g","cswap","pack","tx","ty","zi","scalarmult","scalarbase","crypto_sign_keypair","pk","sk","seeded","L","modL","carry","reduce","unpackneg","chk","num","den","den2","den4","den6","pow2523","crypto_sign_BYTES","checkArrayTypes","arguments","TypeError","scalarMult","box","keyPair","crypto_box_keypair","fromSecretKey","msg","signedMsg","sm","smlen","crypto_sign","detached","sig","crypto_sign_open","fromSeed","seed","setPRNG","cleanup","knownOIDs","OID","oid","toHex","getName","readSimpleLength","writeSimpleLength","writePartialLength","power","writeTag","tag_type","writeHeader","supportsStreaming","readPacket","useStreamType","callback","callbackReturned","peekedBytes","headerByte","packetLength","packetLengthType","packetSupportsStreaming","wasPartialLength","lengthByte","UnsupportedError","params","captureStackTrace","UnknownPacketError","MalformedPacketError","UnparseablePacket","rawContent","generate","webCryptoKey","generateKey","newErr","exportKey","getPayloadSize","utils","randomPrivateKey","getPublicKey","getPreferredHashAlgo","privateKeyToJWK","RS","publicKeyToJWK","validateParams","crv","isBytes","isView","abytes","lengths","aexists","instance","checkFinished","destroyed","finished","aoutput","outputLen","u8","u32","clean","createView","isLE","toBytes","utf8ToBytes","copyBytes","overlapBytes","complexOverlapBytes","equalBytes","diff","wrapCipher","wrappedCipher","args","nonceLength","nonce","varSizeNonce","tagl","tagLength","cipher","checkOutput","fnLength","called","assign","getOutput","expectedLength","onlyAligned","isAligned32","setBigUint64","view","_32n","_u32_max","setUint32","BLOCK_SIZE","ZEROS16","ZEROS32","swapLE","GHASH","blockLen","s0","s1","s2","s3","kView","k0","getUint32","k1","k2","k3","doubles","W","windows","windowSize","items","w","d0","d1","d2","d3","_updateBlock","o0","o1","o2","o3","mask","bytePos","bitPos","bit","e0","e1","e2","e3","b32","blocks","left","elm","digestInto","o32","res","Polyval","ghKey","hiBit","_toGHASHKey","wrapConstructorWithKey","hashCons","hashC","ghash","EMPTY_BLOCK","mul2","mul","sbox","invSbox","_","rotl32_8","byteSwap","word","genTtable","T0","T1","T2","T3","T01","T23","sbox2","Uint16Array","idx","tableEncoding","tableDecoding","xPowers","expandKeyLE","toClean","k32","Nk","subByte","applySbox","xk","expandKeyDecLE","encKey","apply0123","rounds","ctrCounter","src","dst","srcLen","ctr","c32","src32","dst32","ctr32","ctrPos","ctrNum","blockSize","processCtr","plaintext","ciphertext","cbc","iv","opts","pcks5","disablePadding","_out","outLen","remaining","validateBlockEncrypt","_iv","n32","tmp32","paddingByte","padPCKS","validateBlockDecrypt","ps0","ps1","ps2","ps3","lastByte","validatePCKS","cfb","processCfb","isEncrypt","next32","computeTag","AAD","aadLength","dataLength","u64Lengths","_computeTag","authKey","tagMask","deriveKeys","counter","nonceLen","passedTag","isBytes32","encryptBlock","block","decryptBlock","AESW","kek","a0","a1","chunks","AESKW_IV","aeskw","sum","pad","concatBytes","unsafe","getLegacyCipher","legacyCiphers","legacy_ciphers","algoName","getCipherBlockSize","getCipherKeySize","getCipherParams","keySize","wrap","dataToWrap","wrappingKey","keyToWrap","wrapped","wrapKey","nobleAesKW","unwrap","wrappedData","unwrapped","unwrapKey","computeHKDF","inputKey","salt","info","importedKey","deriveBits","HKDF_INFO","recipientA","ephemeralPublicKey","sharedSecret","generateEphemeralEncryptionMaterial","hkdfInput","encryptionKey","wrappedKey","aesKW.wrap","recomputeSharedSecret","aesKW.unwrap","ephemeralKeyPair","ephemeralPublicKeyJwt","recipientPublicKey","sharedSecretBuffer","public","ephemeralSecretKey","assertNonZeroArray","getSharedSecret","privateKeyJWK","ephemeralPublicKeyJWK","ephemeralPublicKeyReference","acc","webCurves","knownCurves","getCurves","nodeCurves","curves","keyType","node","web","payloadSize","sharedSize","wireFormatLeadingByte","CurveWithOID","oidOrName","genKeyPair","namedCurve","jwkToRawPublic","webGenKeyPair","jsGenKeyPair","createECDH","generateKeys","getPrivateKey","nodeGenKeyPair","ecdhXGenerate","eddsaGenerate","Q","secret","validateStandardParams","supportedCurves","dG","checkPublicPointEnconding","V","pointSize","nobleCurve","bufX","bufY","rawPublicToJWK","ecKeyUtils","nodeBuffer","derPrivateKey","generateDer","dsaEncoding","lowS","tryFallbackVerificationForOldBug","jsVerify","verified","derPublicKey","eddsaSign","eddsaVerify","provided","computed","buildEcdhParam","public_algo","kdfParams","fingerprint","kdf","param","stripLeading","stripTrailing","genPublicEphemeralKey","sharedKey","ecdhXGenerateEphemeralEncryptionMaterial","recipient","webPublicEphemeralKey","jsPublicEphemeralKey","sender","computeSecret","nodePublicEphemeralKey","pkcs5.encode","genPrivateEphemeralKey","ecdhXRecomputeSharedSecret","webPrivateEphemeralKey","jsPrivateEphemeralKey","setPrivateKey","nodePrivateEphemeralKey","C","pkcs5.decode","ECDHSymmetricKey","KDFParams","ECDHXSymmetricKey","fromObject","algorithm","followLength","publicKeyEncrypt","keyAlgo","symmetricAlgo","publicParams","rsa.encrypt","c1","c2","elgamal.encrypt","elliptic.ecdh.encrypt","ECDHSymkey","elliptic.ecdhX.encrypt","publicKeyDecrypt","publicKeyParams","privateKeyParams","sessionKeyParams","rsa.decrypt","elgamal.decrypt","elliptic.ecdh.decrypt","elliptic.ecdhX.decrypt","parsePrivateKeyParams","privateParams","getCurvePayloadSize","serializeParams","algosWithNativeRepresentation","orderedParams","keys","generateParams","keyGenOpt","modulusLength","publicExponent","publicKeyEncoding","privateKeyEncoding","generateKeyPair","jwkPrivateKey","phi","rsa.generate","elliptic.generate","elliptic.eddsa.generate","elliptic.ecdhX.generate","_2n","rde","rsa.validateParams","qSize","dsa.validateParams","pSize","threshold","elgamal.validateParams","algoModule","elliptic","elliptic.eddsaLegacy.validateParams","elliptic.eddsa.validateParams","elliptic.ecdhX.validateParams","generateSessionKey","checkSupportedCurve","elliptic.CurveWithOID","elliptic.eddsa.getPayloadSize","elliptic.ecdhX.getPayloadSize","knownAlgos","getCiphers","nodeAlgos","getPrefixRandom","prefixrandom","repeat","pt","cipherObj","createCipheriv","WebCryptoEncryptor","isSupported","encryptChunk","NobleStreamProcessor","processChunk","nobleAesCfb","aesEncrypt","cipherfn","block_size","blockc","encblock","ct","decipherObj","createDecipheriv","aesDecrypt","blockp","decblock","prevBlock","nextBlock","zeroBlock","_runCBC","nonZeroIV","mode","keyRef","missing","added","leftover","toEncrypt","encryptedBlocks","xorMut","encryptedBlock","curBlock","clearSensitiveData","forEncryption","nobleAesHelpers","getUint32Array","_runCFB","toProcess","processedBlocks","processedBlock","aLength","blockLength","rightXORMut","CMAC","CBC","padding2","nobleAesCbc","zero","one","two","OMAC","cmac","CTR","en","final","nobleAesCtr","EAX","omac","adata","omacNonce","omacAdata","ciphered","ctTag","omacCiphered","getNonce","chunkIndex","ivLength","ntz","T","xor","OCB","maxNtz","encipher","decipher","crypt","newMaxNtz","extendKeyVariables","paddedNonce","bottom","kTop","stretched","checksum","xorInput","$","cipherInput","mask_x","mask_$","constructKeyVariables","crypted","ALGO","GCM","setAAD","getAuthTag","de","setAuthTag","_key","webcryptoEmptyMessagesUnsupported","userAgent","nobleAesGcm","additionalData","getAEADMode","acceptExperimentalGCM","rsa.verify","u1","u2","dsa.verify","curveSize","elliptic.ecdsa.verify","elliptic.eddsaLegacy.verify","elliptic.eddsa.verify","rsa.sign","xr","dsa.sign","elliptic.ecdsa.sign","elliptic.eddsaLegacy.sign","elliptic.eddsa.sign","Argon2OutOfMemoryError","loadArgonWasmModule","argon2Promise","Argon2S2K","encodedM","generateSalt","produceKey","passphrase","decodedM","index$1","default","version","password","memorySize","GenericS2K","getCount","numBytes","rlength","prefixlen","toHash","datalen","allowedS2KTypesForEncryption","newS2KFromType","newS2KFromConfig","require","Worker","u16","i32","fleb","fdeb","clim","freb","eb","_a","fl","revfl","_b","fd","revfd","rev","hMap","cd","mb","co","le","rvb","sv","r_1","flt","fdt","flm","flrm","fdm","fdrm","bits16","shft","slc","ec","ind","nt","code","wbits","wbits16","hTree","et","sort","i0","i1","i2","maxSym","tr","mbt","ln","dt","lft","cst","i2_1","i2_2","i2_3","lc","cl","cli","cln","cls","clen","cf","wfblk","dat","wblk","syms","lf","df","li","bl","dlt","mlb","ddt","mdb","_c","lclt","nlc","_d","lcdt","ndc","lcfreq","_e","lct","mlcb","nlcc","lm","ll","dm","dl","flen","ftlen","dtlen","llm","lcts","it","clct","sym","deo","adler","dopt","opt","pre","post","st","dictionary","dict","newDat","lvl","plvl","lst","msk_1","head","bs1_1","bs2_1","hsh","lc_1","wi","hv","imod","pimod","rem","ch_1","dif","maxn","maxd","ml","nl","mmd","md","ti","lin","din","dflt","level","mem","wbytes","Deflate","cb","ondata","endLen","newBuf","Inflate","bts","sl","noBuf","resize","noSt","cbuf","nbuf","bt","lbt","dbt","tbts","hLit","hcLen","ldt","clt","clb","clbmsk","clm","lt","lms","dms","lpos","dsym","dend","inflt","Zlib","raw","lv","zlh","Unzlib","td","LiteralDataPacket","date","filename","setText","getText","getBytes","setBytes","setFilename","getFilename","streamParse","filename_len","filename_length","KeyID","equals","keyID","matchWildcard","isWildcard","isNull","mapToHex","fromID","wildcard","SALT_NOTATION_NAME","allowedUnhashedSubpackets","SignaturePacket","signatureType","hashAlgorithm","publicKeyAlgorithm","signatureData","unhashedSubpackets","unknownSubpackets","signedHashValue","created","signatureNeverExpires","exportable","trustLevel","trustAmount","keyNeverExpires","revocationKeyClass","revocationKeyAlgorithm","revocationKeyFingerprint","rawNotations","notations","isPrimaryUserID","reasonForRevocationFlag","reasonForRevocationString","signatureTargetPublicKeyAlgorithm","signatureTargetHashAlgorithm","signatureTargetHash","issuerKeyVersion","revoked","readSubPackets","saltLength","signatureMaterial","signatureParams","rsSize","signature.parseSignatureParams","writeParams","streamFromAsync","writeUnhashedSubPackets","getFingerprintBytes","getKeyID","saltLengthForHash","saltValue","humanReadable","critical","writeHashedSubPackets","streamSlice","streamClone","signature.sign","writeSubPacket","encodedName","readSubPacket","mypos","seconds","trusted","subpacketLengthBytes","subpacketLength","toSign","writeForHash","calculateTrailer","isMessageSignature","signature.verify","normDate","getExpirationTime","toUpperCase","isExpired","OnePassSignaturePacket","fromSignaturePacket","signaturePacket","isLast","onePassSig","flags","correspondingSig","newPacketFromTag","allowedPackets","packetType","PacketList","fromBinary","grammarValidator","delayErrors","packets","unauthenticatedError","wasStream","parsed","recordPacket","fromStream","throwUnknownPacketError","throwUnsupportedError","throwMalformedPacketError","throwDataPacketError","unparsedPacket","nextPacket","recordEnd","packetbytes","minLength","powerOf2","LN2","chunkSize","filterByTag","tags","filtered","handle","findPacket","find","indexOfTag","tagIndex","that","GrammarError","MessageType","MessageGrammarValidator","state","EmptyMessage","leadingOnePassSignatureCounter","StandaloneAdditionalAllowedData","PlaintextOrEncryptedData","EncryptedSessionKeys","CompressedDataPacket","compressed","decompress","compress","compressionName","decompressionFn","decompress_fns","compressionFn","compress_fns","compressionStreamInstantiator","ZlibStreamedConstructor","inputData","zlibStream","processedData","compressorOrDecompressor","pipeThrough","inputReader","bzip2Decompress","bunzipDecode","getCompressionStreamInstantiators","compressionFormat","compressor","CompressionStream","decompressor","DecompressionStream","SymEncryptedIntegrityProtectedDataPacket","aeadAlgorithm","seip","cipherAlgorithm","chunkSizeByte","encrypted","sessionKeyAlgorithm","runAEAD","cipherMode.cfb.getPrefixRandom","mdc","tohash","cipherMode.cfb.encrypt","decrypted","cipherMode.cfb.decrypt","realHash","verifyHash","isSEIPDv2","isAEADP","cipherMode.getAEADMode","tagLengthIfDecrypting","tagLengthIfEncrypting","chunkIndexSizeIfAEADEP","adataBuffer","adataArray","adataTagArray","adataView","chunkIndexArray","ivView","latestPromise","cryptedBytes","queuedBytes","derived","modeInstance","size","streamPipe","finalChunk","cryptedPromise","setInt32","desiredSize","AEADEncryptedDataPacket","PublicKeyEncryptedSessionKeyPacket","publicKeyID","publicKeyVersion","publicKeyFingerprint","sessionKey","encryptionKeyPacket","anonymousRecipient","pkesk","versionAndFingerprintLength","fingerprintLength","parseEncSessionKeyParams","encodeSessionKey","randomSessionKey","decryptedData","computedChecksum","isValidChecksum","decryptedSessionKey","isValidPayload","decodeSessionKey","hasEncryptedAlgo","sessionKeyData","SymEncryptedSessionKeyPacket","sessionKeyEncryptionAlgorithm","s2kLen","fieldsLen","PublicKeyPacket","expirationTimeV3","fromSecretKeyPacket","secretKeyPacket","keyPacket","parsePublicKeyParams","computeFingerprintAndKeyID","writePublicKey","versionOctet","lengthOctets","isDecrypted","getCreationTime","computeFingerprint","getFingerprint","hasSameFingerprintAs","other","getAlgorithmInfo","modulo","readPublicKey","SymmetricallyEncryptedDataPacket","FRE","MarkerPacket","PublicSubkeyPacket","fromSecretSubkeyPacket","secretSubkeyPacket","UserAttributePacket","attributes","usrAttr","attr","SecretKeyPacket","keyMaterial","isEncrypted","s2kUsage","isLegacyAEAD","usedModernAEAD","startOfSecretKeyData","unparseableKeyMaterial","cleartext","serializedPublicKey","optionalFieldsArr","isDummy","isMissingSecretKeyMaterial","makeDummy","clearPrivateParams","serializedPacketTag","produceEncryptionKey","associateData","cleartextWithHash","validate","validParams","keyVersion","aeadMode","derivedKey","UserIDPacket","email","comment","components","isValidEmail","firstBracket","lastBracket","potentialEmail","substring","beforeEmail","trim","firstParen","lastParen","otherUserID","SecretSubkeyPacket","TrustPacket","PaddingPacket","createPadding","Signature","packetlist","getSigningKeyIDs","readSignature","armoredSignature","binarySignature","rest","unknownOptions","generateSecretSubkey","rsaBits","generateSecretKey","getLatestValidSignature","signatures","dataToVerify","latestValid","$1","$2","toLowerCase","isDataExpired","expirationTime","getKeyExpirationTime","createBindingSignature","subkey","primaryKey","dataToSign","signatureProperties","createSignaturePacket","targetKeys","signingKeyPacket","targetUserIDs","defaultAlgo","preferredSenderAlgo","supportedAlgosPerTarget","getPrimarySelfSignature","supportedAlgosMap","Map","supportedAlgos","supportedAlgo","isSupportedHashAlgo","getStrongestSupportedHashAlgo","strongestHashAlgo","algoA","algoB","preferredCurveAlgo","elliptic.getPreferredHashAlgo","elliptic.eddsa.getPreferredHashAlgo","getPreferredCurveHashAlgo","preferredSenderAlgoIsSupported","preferredSenderAlgoStrongerThanCurveAlgo","strongestSupportedAlgo","recipientKeys","recipientUserIDs","mergeSignatures","source","dest","checkFn","sourceSig","destSig","isDataRevoked","revocations","revocationKeyIDs","revocationSignature","isHardRevocation","sanitizeKeyOptions","subkeyDefaults","validateSigningKeyPacket","validateEncryptionKeyPacket","validateDecryptionKeyPacket","checkKeyRequirements","algoInfo","User","userPacket","mainKey","selfCertifications","otherCertifications","revocationSignatures","toPacketList","user","certify","signingKeys","isPrivate","signingKey","getSigningKey","isRevoked","certificate","verifyCertificate","verificationKeys","issuerKeys","getKeys","verifyAllCertifications","certifications","certification","valid","selfCertification","sourceUser","srcSelfSig","srcRevSig","revoke","flag","string","Subkey","subkeyPacket","bindingSignatures","helper.isDataRevoked","bindingSignature","helper.getLatestValidSignature","helper.isDataExpired","keyExpiry","helper.getKeyExpirationTime","sigExpiry","helper.mergeSignatures","srcBindSig","helper.createSignaturePacket","allowedRevocationPackets","mainKeyPacketTags","keyPacketTags","privateSubkey","Key","packetListToStructure","disallowedPackets","primaryKeyID","ignoreUntil","users","subkeys","directSignatures","clonePrivateParams","getPrototypeOf","getSubkeys","getKeyIDs","getUserIDs","verifyPrimaryKey","helper.checkKeyRequirements","helper.validateSigningKeyPacket","getEncryptionKey","helper.validateEncryptionKeyPacket","directSignature","primaryKeyExpiry","selfSigKeyExpiry","selfSigExpiry","directSigKeyExpiry","getPrimaryUser","primaryUser","B","pop","cert","sourceKey","destSubkey","srcSubkey","updatedKey","usersToUpdate","dstUser","srcUser","userToUpdate","newUser","subkeysToUpdate","dstSubkey","subkeyToUpdate","newSubkey","getRevocationCertificate","applyRevocationCertificate","revocationCertificate","signPrimaryUser","privateKeys","userSign","signAllUsers","verifyPrimaryUser","verifyAllUsers","results","PublicKey","toPublic","PrivateKey","keyPackets","pubKeyPacket","pubSubkeyPacket","getDecryptionKeys","helper.validateDecryptionKeyPacket","Boolean","addSubkey","defaultOptions","getDefaultSubkeyType","helper.sanitizeKeyOptions","helper.generateSecretSubkey","helper.createBindingSignature","packetList","allowedKeyPackets","createKey","wrapKeyObject","secretSubkeyPackets","subkeyPassphrase","createPreferredAlgos","algos","preferredAlgo","getKeySignatureProperties","symmetricAlgorithms","aeadAlgorithms","flatMap","symmetricAlgorithm","userIDs","userIDPacket","subkeyOptions","subkeySignaturePacket","readKey","armoredKey","binaryKey","keyIndex","readPrivateKey","firstPrivateKeyList","readKeys","armoredKeys","binaryKeys","newKey","readPrivateKeys","oneKeyList","allowedMessagePackets","allowedSymSessionKeyPackets","allowedDetachedSignaturePackets","Message","getEncryptionKeyIDs","keyIDs","unwrapCompressed","onePassSigList","decryptionKeys","passwords","sessionKeys","symEncryptedPacketlist","symEncryptedPacket","expectedSymmetricAlgorithm","sessionKeyObjects","decryptSessionKeys","decryptedPromise","algorithmName","streamCancel","resultMsg","decryptedSessionKeyPackets","skeskPackets","skeskPacket","pkeskPackets","pkeskPacket","decryptionKey","decryptionKeyPackets","decryptionKeyPacket","serialisedPKESK","pkeskPacketCopy","seen","item","getLiteralData","encryptionKeys","aeadAlgo","selfSigs","selfSig","defaultCipherSuite","desiredCipherSuites","desiredCipherSuite","cipherSuite","defaultSymAlgo","desiredSymAlgo","getPreferredCipherSuite","symmetricAlgoName","aeadAlgoName","maybeKey","encryptionKeyIDs","aeadAlgorithmName","encryptSessionKey","pkESKeyPacket","testDecrypt","accumulator","currentValue","encryptPassword","symEncryptedSessionKeyPacket","pwd","signingKeyIDs","signingUserIDs","literalDataPacket","signaturePackets","createSignaturePackets","onePassSignaturePackets","signDetached","recipientKeyIDs","literalDataList","signatureList","correspondingSigResolve","correspondingSigReject","createVerificationObjects","verifyDetached","appendSignature","detachedSignature","trailingPacket","signingUserID","existingSigPacketlist","unverifiedSigningKey","signaturePacketPromise","verifiedSig","createVerificationObject","readMessage","armoredMessage","binaryMessage","streamType","createMessage","literalDataPacketlist","CleartextMessage","newSignature","emitHeaderAndChecksum","readCleartextMessage","cleartextMessage","checkHashAlgos","hashAlgos","check","hashHeader","parsedHashIDs","createCleartextMessage","checkConfig","toArray","helper.generateSecretKey","formatObject","reformatKey","reformattedKey","sanitize","reformat","revokeKey","revokedKey","decryptKey","clonedPrivateKey","passphrases","encryptKey","encryptionUserIDs","signatureNotations","checkMessage","checkOutputMessageFormat","publicKeys","senderAlgoSupport","recipientPrefs","getPreferredCompressionAlgo","convertStream","expectSigned","linkStreams","checkCleartextOrMessage","checkBinary","checkString","defaultConfigPropsCount","inputConfigProps","inputProp","inputMessage","intermediateMessages","intermediate","object","anumber","isSafeInteger","rotr","rotl","swap32IfBE","hasHexBuiltin","fromHex","hexes","padStart","bytesToHex","asciis","asciiToBase16","ch","hexToBytes","al","ai","hi","n2","char","Hash","createHasher","wrapConstructor","bytesLength","abool","title","numberToHexUnpadded","hexToNumber","bytesToNumberBE","bytesToHex_","bytesToNumberLE","abytes_","numberToBytesBE","hexToBytes_","numberToBytesLE","ensureBytes","isBytes_","isPosBig","aInRange","inRange","bitMask","_validateObject","fields","optFields","checkField","fieldName","expectedType","isOpt","val","current","memoized","WeakMap","arg","_3n","_4n","_5n","pow2","invert","sqrt3mod4","Fp","p1div4","ORDER","root","pow","eql","sqr","sqrt5mod8","p5div8","nv","ONE","FpSqrt","P","_Fp","Field","FpLegendre","cc","Q1div2","is0","R","ZERO","t_tmp","exponent","tonelliShanks","FIELD_FIELDS","FpInvertBatch","nums","passZero","inverted","multipliedAcc","invertedAcc","inv","reduceRight","p1mod2","powered","yes","no","neg","bitLenOrOpts","_nbitLength","_sqrt","sqrt","_opts","BITS","nBitLength","nByteLength","BYTES","_nBitLength","nLength","sqrtP","freeze","MASK","isValid","isValidNot0","isOdd","lhs","rhs","FpPow","div","sqrN","addN","subN","mulN","fromBytes","invertBatch","cmov","getFieldBytesLength","fieldOrder","getMinHashLength","Chi","Maj","HashMD","padOffset","take","dataView","roundClean","oview","_cloneInto","to","SHA256_IV","SHA224_IV","SHA384_IV","SHA512_IV","U32_MASK64","fromBig","Ah","Al","shrSH","_l","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5L","El","add5H","Eh","SHA256_K","SHA256_W","SHA256","E","F","G","H","W15","W2","SHA224","K512","u64.split","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","W15h","W15l","s0h","u64.rotrSH","u64.shrSH","s0l","u64.rotrSL","u64.shrSL","W2h","W2l","s1h","u64.rotrBH","s1l","u64.rotrBL","SUMl","u64.add4L","SUMh","u64.add4H","sigma1h","sigma1l","CHIh","T1ll","u64.add5L","T1h","u64.add5H","T1l","sigma0h","sigma0l","MAJh","MAJl","u64.add","All","u64.add3L","u64.add3H","SHA384","HMAC","ahash","iHash","oHash","hmac","negateCt","condition","negate","normalizeZ","property","points","getz","pz","ez","toInv","affined","toAffine","fromAffine","validateW","calcWOpts","scalarBits","maxNumber","shiftBy","calcOffsets","window","wOpts","nextN","offsetStart","isZero","isNeg","isNegF","offsetF","pointPrecomputes","pointWindowSizes","getW","assert0","wNAF","constTimeNegate","hasPrecomputes","unsafeLadder","precomputeWindow","base","precomputes","BASE","wo","wNAFUnsafe","getPrecomputes","comp","wNAFCached","wNAFCachedUnsafe","setWindowSize","delete","pippenger","fieldN","scalars","validateMSMPoints","field","validateMSMScalars","plength","slength","bitLen","buckets","scalar","resI","sumI","createField","order","validateField","_createCurveFields","CURVE","curveOpts","Fn","validateSigVerOpts","prehash","DER","Err","_tlv","dataLen","lenLen","first","lengthBytes","_int","toSig","int","tlv","seqBytes","seqLeftBytes","rBytes","rLeftBytes","sBytes","sLeftBytes","hexFromSig","seq","_legacyHelperNormPriv","allowedPrivateKeyLengths","wrapPrivateKey","expected","weierstrassN","cofactor","CURVE_ORDER","allowInfinityPoint","clearCofactor","isTorsionFree","endo","beta","splitScalar","assertCompressionIsSupported","point","isCompressed","bx","pprefix","of","LC","LU","tail","isValidXY","y2","weierstrassEquation","sqrtError","x2","x3","_legacyHelperEquat","right","Gx","Gy","_4a3","_27b2","acoord","banZero","aprjpoint","Point","toAffineMemo","iz","px","py","ax","ay","zz","assertValidMemo","finishEndo","endoBeta","k1p","k2p","k1neg","k2neg","assertValidity","fromPrivateKey","normPrivateKeyToScalar","multiply","msm","precompute","isLazy","wnaf","_setWindowSize","hasEvenY","X1","Y1","Z1","X2","Y2","Z2","U1","U2","X3","Y3","Z3","subtract","fake","k1f","k2f","multiplyUnsafe","sc","p1","p2","mulEndoUnsafe","multiplyAndAddUnsafe","invertedZ","toRawBytes","ecdsaOpts","bits2int","bits2int_modN","randomBytes_","hmac_","msgs","fnBits","isBiggerThanHalfOrder","aValidRS","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","FIELD_ORDER","rec","radj","ir","hasHighS","normalizeS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","isValidPrivateKey","fieldLen","minLen","mapHashToField","isProbPub","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","extraEntropy","ent","h1int","seedArgs","k2sig","kBytes","ik","normS","defaultVerOpts","privateA","publicB","privKey","drbg","hashLen","qByteLen","hmacFn","u8n","u8of","reset","reseed","gen","concatBytes_","pred","createHmacDrbg","sg","isHex","isObj","_sig","derError","is","_ecdsa_legacy_opts_to_new","_weierstrass_legacy_opts_to_new","weierstrass","ProjectivePoint","_ecdsa_new_output_to_legacy","createCurve","curveDef","defHash","p256_CURVE","p384_CURVE","p521_CURVE","Fp256","Fp384","Fp521","_7n","_256n","_0x71n","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","round","IOTAS","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlBH","rotlSH","rotlL","rotlBL","rotlSL","Keccak","suffix","enableXOF","posOut","state32","keccak","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","keccakP","writeInto","bufferOut","xofInto","xof","genShake","createXOFer","dkLen","shake256","VERIFY_DEFAULT","zip215","edwards","uvRatio","modP","isEdValidXY","aextpoint","ex","ey","Z4","aX2","X1Z2","X2Z1","Y1Z2","Y2Z1","x1y1","isSmallOrder","normed","isXOdd","isLastByteOdd","fromPrivateScalar","eddsa","eddsaOpts","adjustScalarBytes","domain","mapToCurve","cHash","ctx","phflag","modN","modN_LE","getExtendedPublicKey","getPrivateScalar","pointBytes","hashDomainToScalar","context","verifyOpts","SB","montgomery","powPminus2","rand","is25519","montgomeryBits","Gu","a24","minScalar","maxAdded","maxScalar","GuBytes","encodeU","pu","x_1","x_2","z_2","x_3","z_3","swap","k_t","AA","BB","DA","CB","dacb","da_cb","z2","montgomeryLadder","_u","decodeU","decodeScalar","scalarMultBase","dummy","ed448_CURVE","shake256_114","_11n","_22n","_44n","_88n","_223n","ed448_pow_Pminus3div4","b22","b44","b88","b176","b220","b222","b223","u2v","u3v","u5v3","_eddsa_legacy_opts_to_new","ExtendedPoint","_eddsa_new_output_to_legacy","twistedEdwards","secp256k1_CURVE","divNearest","Fpk1","_6n","_23n","a2","POW_2_128","sha256n","sha224n","sha512n","sha384n","SHA1_IV","SHA1_W","SHA1","Rho160","Id160","Pi160","idxLR","idxL","idxR","shifts160","shiftsL160","shiftsR160","Kl160","Kr160","ripemd_f","group","BUF_160","RIPEMD160","h0","h1","h2","h3","h4","ar","br","cr","dr","el","er","rGroup","hbl","hbr","rl","rr","sr","sha1n","ripemd160","sin","IV","MD5_W","MD5","des","spfunction1","spfunction2","spfunction3","spfunction4","spfunction5","spfunction6","spfunction7","spfunction8","temp","right1","right2","looping","endloop","loopinc","iterations","padLength","paddedMessage","desAddPadding","desRemovePadding","desCreateKeys","pc2bytes0","pc2bytes1","pc2bytes2","pc2bytes3","pc2bytes4","pc2bytes5","pc2bytes6","pc2bytes7","pc2bytes8","pc2bytes9","pc2bytes10","pc2bytes11","pc2bytes12","pc2bytes13","shifts","lefttemp","righttemp","TripleDES","OpenPGPSymEncCAST5","BlockSize","KeySize","setKey","masking","rotate","keySchedule","getBlockSize","f1","f2","f3","scheduleA","scheduleB","sBox","inn","ki","half","CAST5","MAXINT","rotw","setW","splice","getB","TF","tf","keyBytes","dataBytes","dataOffset","tfsKey","tfsM","tfsG0","tfsG1","tfsFrnd","blk","tfsIrnd","blocksize","open","meKey","moKey","inKey","kLen","sKey","f01","f5b","fef","q0","q1","q2","q3","ror4","ashx","ffm5b","ffmEf","mdsRem","qp","hFun","finalize","createTwofish","Blowfish","BF","bf","BLOCKSIZE","SBOXES","PARRAY","NN","_clean","xx","_F","yy","dd","bb","aa","sboxes","_encryptBlock","vals","ii","dataL","dataR","parray","vector","off","ret","_decryptBlock","jj","kk","ADD64","INC64","ix","iy","xor0","xor1","BLAKE2B_IV32","SIGMA","f0","i16","Blake2b","outlen","personal","BLOCKBYTES","OUTBYTES_MAX","params32","BYTES_PER_ELEMENT","prealloc","ARGON2_BLOCK_SIZE","LE32","LE64","H_","V1_in","blake2b","V_r1","XOR","wasmContext","xs","ys","refs","gZ","G2","makePRNG","pass","lane","m_","totalPasses","segmentLength","segmentOffset","prngTmp","g2","ZERO1024","prngR","argon2id","memory","wasmInstance","ad","assertLength","lanes","wasmG","wasmG2","wasmXOR","getLZ","wasmLZ","exports","wasmRefs","wasmFn","requiredMemory","grow","lz","newBlock","blockMemory","allocatedMemory","H0","ZERO32","concatArrays","outputBuffer","getH0","initBlock","isDataIndependent","PRNG","J1J2","next","isSIMDSupported","setupWasm","getSIMD","getNonSIMD","WebAssembly","Memory","initial","maximum","wasmModule","importObject","loaded","wasmLoader","instanceObject","BITMASK","BitReader","bitOffset","curByte","hasByte","_ensureByte","seek","n_bit","n_byte","pi","bufToHex","bitreader","crc32Lookup","require$$0","Stream","bufOffset","new_pos","writeByte","_byte","require$$1","CRC32","crc32","getCRC","updateCRC","updateCRCRun","mtf","OK","LAST_BLOCK","NOT_BZIP_DATA","UNEXPECTED_INPUT_EOF","UNEXPECTED_OUTPUT_EOF","DATA_ERROR","OUT_OF_MEMORY","OBSOLETE_INPUT","END_OF_BLOCK","ErrorMessages","_throw","status","optDetail","errorCode","Bunzip","inputStream","outputStream","writePos","writeCurrent","writeCount","_start_bunzip","_init_block","_get_next_block","blockCRC","dbufSize","nextoutput","streamCRC","targetBlockCRC","origPointer","symToByte","symTotal","groupCount","nSelectors","mtfSymbol","selectors","hufGroup","symCount","groups","maxLen","MAX_HUFCODE_BITS","permute","limit","pp","MAX_VALUE","byteCount","uc","runPos","dbufCount","selector","dbuf","GROUP_SIZE","nextSym","run","writeRun","_read_bunzip","copies","previous","outbyte","outputsize","coerceInputStream","eof","coerceOutputStream","resizeOk","newBuffer","getBuffer","_coerced","lib","multistream","bz","targetStreamCRC","decodeBlock","writeCopies","table","delegate","position","assert"],"mappings":"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Y,WAAY,WAAY,WACpF,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WACpF,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,UACpF,UAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WACpF,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WACpF,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WACpF,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WACpF,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WACpF,WAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WACpF,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WACpF,UAAY,WAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WACpF,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WACpF,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UACpF,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WACpF,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WACpF,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WACpF,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WACpF,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WACpF,UAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WAAY,WACpF,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WACpF,WAAY,UAAY,UAAY,WAAY,WAAY,UAAY,WAAY,UACpF,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WACpF,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WACpF,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,SAAY,WACpF,WAAY,WAAY,WAAY,WAAY,UAAY,SAAY,UAAY,WACpF,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WACpF,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,YAGtFA,EAAK,GAAK,CACR,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UACpF,SAAY,WAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WACpF,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UACpF,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WACpF,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,UACpF,UAAY,WAAY,SAAY,UAAY,UAAY,WAAY,WAAY,WACpF,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WACpF,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WACpF,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WACpF,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WACpF,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UACpF,WAAY,SAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WACpF,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WACpF,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UACpF,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WACpF,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WACpF,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WACpF,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,SAAY,WACpF,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UACpF,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WACpF,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WAAY,WACpF,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,SAAY,UACpF,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,SAAY,UACpF,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WACpF,WAAY,UAAY,WAAY,SAAY,WAAY,WAAY,WAAY,WACpF,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WACpF,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WACpF,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WACpF,UAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UACpF,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WACpF,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WACpF,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY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Y,UAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,UAC5D,UAAY,WAAY,UAAY,WAAY,WAAY,WAC5D,UAAY,WAAY,UAAY,WAAY,WAAY,WAC5D,WAAY,SAAY,WAAY,WAAY,WAAY,UAC5D,WAAY,WAAY,UAAY,UAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,UAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,UAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,UAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,UAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,UAAY,WAAY,WAAY,UAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,UAAY,WAAY,UAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,UAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,QAAY,UAC5D,UAAY,WAAY,UAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,UAAY,SAAY,WAAY,WAC5D,UAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,UAAY,WAAY,UAAY,WAC5D,WAAY,UAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,UAAY,YAEtC,CACE,WAAY,WAAY,WAAY,WAAY,SAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,UAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,SAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,SAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,UAAY,UAAY,UAC5D,WAAY,WAAY,WAAY,UAAY,WAAY,WAC5D,WAAY,WAAY,UAAY,UAAY,WAAY,WAC5D,WAAY,WAAY,UAAY,UAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,UAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,UAC5D,WAAY,UAAY,UAAY,UAAY,WAAY,UAC5D,WAAY,UAAY,WAAY,WAAY,SAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,UAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,UAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,UAAY,WAAY,UAC5D,UAAY,UAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,SAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,UAAY,UAAY,WAAY,WAAY,UAAY,WAC5D,SAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,UAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,UAAY,UAAY,UAAY,WAAY,WAAY,WAC5D,WAAY,UAAY,WAAY,UAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,UAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,UAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,UAAY,WAAY,UAAY,UAAY,WAAY,UAC5D,UAAY,UAAY,UAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,UAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,UAAY,WAAY,UAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,UAAY,WAAY,WAAY,YAEtC,CACE,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,UAAY,WAAY,WAC5D,UAAY,WAAY,UAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,SAAY,WAAY,UAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,UAAY,WAAY,WAAY,WAAY,WAAY,UAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,UAAY,WAAY,WAAY,UAC5D,UAAY,WAAY,UAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,UAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,SAAY,WAAY,SAAY,WAAY,WAC5D,WAAY,WAAY,UAAY,WAAY,WAAY,WAC5D,UAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,UAAY,UAAY,SAAY,WAAY,WAC5D,WAAY,UAAY,UAAY,WAAY,WAAY,WAC5D,WAAY,UAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,UAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,UAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,UAAY,WAAY,UAAY,UAC5D,WAAY,WAAY,WAAY,UAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,UAAY,WAAY,WAC5D,WAAY,WAAY,UAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,UAAY,WAAY,UAC5D,UAAY,UAAY,WAAY,UAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,UAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,QAAY,UAAY,UAAY,UAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,UAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,UAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,YAEtC,CACE,UAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,UAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,UAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,UAAY,WAAY,WAC5D,UAAY,SAAY,WAAY,SAAY,WAAY,WAC5D,UAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,UAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,SAAY,SAAY,WAAY,WAAY,WAAY,WAC5D,UAAY,UAAY,WAAY,UAAY,WAAY,WAC5D,SAAY,WAAY,UAAY,WAAY,WAAY,WAC5D,WAAY,UAAY,UAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,UAAY,WAAY,WAC5D,WAAY,UAAY,WAAY,UAAY,WAAY,WAC5D,WAAY,UAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,UAAY,SAAY,UAAY,WAAY,UAAY,WAC5D,WAAY,UAAY,SAAY,UAAY,WAAY,WAC5D,WAAY,UAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,SAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,UAAY,WAAY,UAC5D,UAAY,WAAY,WAAY,WAAY,WAAY,UAC5D,WAAY,WAAY,UAAY,WAAY,WAAY,UAC5D,WAAY,UAAY,WAAY,WAAY,WAAY,WAC5D,UAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,UAAY,WAAY,UAAY,WAAY,WAC5D,UAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,UAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,UAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,UAC5D,UAAY,UAAY,WAAY,WAAY,WAAY,UAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,SAC5D,SAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WA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","x_google_ignoreList":[0,1,2,3,16,17,21,22,23,48,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,109,117,118,119,120,121,122,123,124]}