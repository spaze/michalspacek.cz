{"version":3,"file":"noble_curves.min.mjs","sources":["../../node_modules/@noble/curves/esm/utils.js","../../node_modules/@noble/curves/esm/abstract/modular.js","../../node_modules/@noble/hashes/esm/hmac.js","../../node_modules/@noble/curves/esm/abstract/curve.js","../../node_modules/@noble/curves/esm/abstract/weierstrass.js","../../node_modules/@noble/curves/esm/_shortw_utils.js","../../node_modules/@noble/curves/esm/nist.js","../../node_modules/@noble/curves/esm/p256.js","../../node_modules/@noble/curves/esm/p384.js","../../node_modules/@noble/curves/esm/p521.js","../../node_modules/@noble/curves/esm/abstract/edwards.js","../../node_modules/@noble/curves/esm/abstract/montgomery.js","../../node_modules/@noble/curves/esm/ed448.js","../../node_modules/@noble/curves/esm/secp256k1.js","../../../../src/crypto/public_key/elliptic/brainpool/brainpoolP256r1.ts","../../../../src/crypto/public_key/elliptic/brainpool/brainpoolP384r1.ts","../../../../src/crypto/public_key/elliptic/brainpool/brainpoolP512r1.ts","../../src/crypto/public_key/elliptic/noble_curves.js"],"sourcesContent":["/**\n * Hex, bytes and number utilities.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { abytes as abytes_, bytesToHex as bytesToHex_, concatBytes as concatBytes_, hexToBytes as hexToBytes_, isBytes as isBytes_, } from '@noble/hashes/utils.js';\nexport { abytes, anumber, bytesToHex, bytesToUtf8, concatBytes, hexToBytes, isBytes, randomBytes, utf8ToBytes, } from '@noble/hashes/utils.js';\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nexport function abool(title, value) {\n    if (typeof value !== 'boolean')\n        throw new Error(title + ' boolean expected, got ' + value);\n}\n// Used in weierstrass, der\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? '0' + hex : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex_(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    abytes_(bytes);\n    return hexToNumber(bytesToHex_(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes_(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes_(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes_(hex);\n        }\n        catch (e) {\n            throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n        }\n    }\n    else if (isBytes_(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(title + ' must be hex string or Uint8Array');\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\n// export const utf8ToBytes: typeof utf8ToBytes_ = utf8ToBytes_;\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\n// export const bytesToUtf8: typeof bytesToUtf8_ = bytesToUtf8_;\n// Is positive bigint\nconst isPosBig = (n) => typeof n === 'bigint' && _0n <= n;\nexport function inRange(n, min, max) {\n    return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title, n, min, max) {\n    // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n    // consider P=256n, min=0n, max=P\n    // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n    // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n    // - our way is the cleanest:               `inRange('x', x, 0n, P)\n    if (!inRange(n, min, max))\n        throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n * TODO: merge with nLength in modular\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_1n << BigInt(n)) - _1n;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    const u8n = (len) => new Uint8Array(len); // creates Uint8Array\n    const u8of = (byte) => Uint8Array.of(byte); // another shortcut\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n(0)) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8of(0x00), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8of(0x01), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes_(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes_(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error('invalid validator function');\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error('param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\nexport function isHash(val) {\n    return typeof val === 'function' && Number.isSafeInteger(val.outputLen);\n}\nexport function _validateObject(object, fields, optFields = {}) {\n    if (!object || typeof object !== 'object')\n        throw new Error('expected valid options object');\n    function checkField(fieldName, expectedType, isOpt) {\n        const val = object[fieldName];\n        if (isOpt && val === undefined)\n            return;\n        const current = typeof val;\n        if (current !== expectedType || val === null)\n            throw new Error(`param \"${fieldName}\" is invalid: expected ${expectedType}, got ${current}`);\n    }\n    Object.entries(fields).forEach(([k, v]) => checkField(k, v, false));\n    Object.entries(optFields).forEach(([k, v]) => checkField(k, v, true));\n}\n/**\n * throws not implemented error\n */\nexport const notImplemented = () => {\n    throw new Error('not implemented');\n};\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized(fn) {\n    const map = new WeakMap();\n    return (arg, ...args) => {\n        const val = map.get(arg);\n        if (val !== undefined)\n            return val;\n        const computed = fn(arg, ...args);\n        map.set(arg, computed);\n        return computed;\n    };\n}\n//# sourceMappingURL=utils.js.map","/**\n * Utils for modular division and fields.\n * Field over 11 is a finite (Galois) field is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { _validateObject, anumber, bitMask, bytesToNumberBE, bytesToNumberLE, ensureBytes, numberToBytesBE, numberToBytesLE, } from \"../utils.js\";\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5);\nconst _8n = /* @__PURE__ */ BigInt(8);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num, power, modulo) {\n    return FpPow(Field(modulo), num, power);\n}\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number, modulo) {\n    if (number === _0n)\n        throw new Error('invert: expected non-zero number');\n    if (modulo <= _0n)\n        throw new Error('invert: expected positive modulus, got ' + modulo);\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n// Not all roots are possible! Example which will throw:\n// const NUM =\n// n = 72057594037927816n;\n// Fp = Field(BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'));\nfunction sqrt3mod4(Fp, n) {\n    const p1div4 = (Fp.ORDER + _1n) / _4n;\n    const root = Fp.pow(n, p1div4);\n    // Throw if root^2 != n\n    if (!Fp.eql(Fp.sqr(root), n))\n        throw new Error('Cannot find square root');\n    return root;\n}\nfunction sqrt5mod8(Fp, n) {\n    const p5div8 = (Fp.ORDER - _5n) / _8n;\n    const n2 = Fp.mul(n, _2n);\n    const v = Fp.pow(n2, p5div8);\n    const nv = Fp.mul(n, v);\n    const i = Fp.mul(Fp.mul(nv, _2n), v);\n    const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n    if (!Fp.eql(Fp.sqr(root), n))\n        throw new Error('Cannot find square root');\n    return root;\n}\n// TODO: Commented-out for now. Provide test vectors.\n// Tonelli is too slow for extension fields Fp2.\n// That means we can't use sqrt (c1, c2...) even for initialization constants.\n// if (P % _16n === _9n) return sqrt9mod16;\n// // prettier-ignore\n// function sqrt9mod16<T>(Fp: IField<T>, n: T, p7div16?: bigint) {\n//   if (p7div16 === undefined) p7div16 = (Fp.ORDER + BigInt(7)) / _16n;\n//   const c1 = Fp.sqrt(Fp.neg(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n//   const c2 = Fp.sqrt(c1);             //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n//   const c3 = Fp.sqrt(Fp.neg(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n//   const c4 = p7div16;                 //  4. c4 = (q + 7) / 16        # Integer arithmetic\n//   let tv1 = Fp.pow(n, c4);            //  1. tv1 = x^c4\n//   let tv2 = Fp.mul(c1, tv1);          //  2. tv2 = c1 * tv1\n//   const tv3 = Fp.mul(c2, tv1);        //  3. tv3 = c2 * tv1\n//   let tv4 = Fp.mul(c3, tv1);          //  4. tv4 = c3 * tv1\n//   const e1 = Fp.eql(Fp.sqr(tv2), n);  //  5.  e1 = (tv2^2) == x\n//   const e2 = Fp.eql(Fp.sqr(tv3), n);  //  6.  e2 = (tv3^2) == x\n//   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n//   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n//   const e3 = Fp.eql(Fp.sqr(tv2), n);  //  9.  e3 = (tv2^2) == x\n//   return Fp.cmov(tv1, tv2, e3); // 10.  z = CMOV(tv1, tv2, e3) # Select the sqrt from tv1 and tv2\n// }\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Initialization (precomputation).\n    // Caching initialization could boost perf by 7%.\n    if (P < BigInt(3))\n        throw new Error('sqrt is not defined for small field');\n    // Factor P - 1 = Q * 2^S, where Q is odd\n    let Q = P - _1n;\n    let S = 0;\n    while (Q % _2n === _0n) {\n        Q /= _2n;\n        S++;\n    }\n    // Find the first quadratic non-residue Z >= 2\n    let Z = _2n;\n    const _Fp = Field(P);\n    while (FpLegendre(_Fp, Z) === 1) {\n        // Basic primality test for P. After x iterations, chance of\n        // not finding quadratic non-residue is 2^x, so 2^1000.\n        if (Z++ > 1000)\n            throw new Error('Cannot find square root: probably non-prime P');\n    }\n    // Fast-path; usually done before Z, but we do \"primality test\".\n    if (S === 1)\n        return sqrt3mod4;\n    // Slow-path\n    // TODO: test on Fp2 and others\n    let cc = _Fp.pow(Z, Q); // c = z^Q\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        if (Fp.is0(n))\n            return n;\n        // Check if n is a quadratic residue using Legendre symbol\n        if (FpLegendre(Fp, n) !== 1)\n            throw new Error('Cannot find square root');\n        // Initialize variables for the main loop\n        let M = S;\n        let c = Fp.mul(Fp.ONE, cc); // c = z^Q, move cc from field _Fp into field Fp\n        let t = Fp.pow(n, Q); // t = n^Q, first guess at the fudge factor\n        let R = Fp.pow(n, Q1div2); // R = n^((Q+1)/2), first guess at the square root\n        // Main loop\n        // while t != 1\n        while (!Fp.eql(t, Fp.ONE)) {\n            if (Fp.is0(t))\n                return Fp.ZERO; // if t=0 return R=0\n            let i = 1;\n            // Find the smallest i >= 1 such that t^(2^i) ≡ 1 (mod P)\n            let t_tmp = Fp.sqr(t); // t^(2^1)\n            while (!Fp.eql(t_tmp, Fp.ONE)) {\n                i++;\n                t_tmp = Fp.sqr(t_tmp); // t^(2^2)...\n                if (i === M)\n                    throw new Error('Cannot find square root');\n            }\n            // Calculate the exponent for b: 2^(M - i - 1)\n            const exponent = _1n << BigInt(M - i - 1); // bigint is important\n            const b = Fp.pow(c, exponent); // b = 2^(M - i - 1)\n            // Update variables\n            M = i;\n            c = Fp.sqr(b); // c = b^2\n            t = Fp.mul(t, c); // t = (t * b^2)\n            R = Fp.mul(R, b); // R = R*b\n        }\n        return R;\n    };\n}\n/**\n * Square root for a finite field. Will try optimized versions first:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P) {\n    // P ≡ 3 (mod 4) => √n = n^((P+1)/4)\n    if (P % _4n === _3n)\n        return sqrt3mod4;\n    // P ≡ 5 (mod 8) => Atkin algorithm, page 10 of https://eprint.iacr.org/2012/685.pdf\n    if (P % _8n === _5n)\n        return sqrt5mod8;\n    // P ≡ 9 (mod 16) not implemented, see above\n    // Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'number',\n        BITS: 'number',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    _validateObject(field, opts);\n    // const max = 16384;\n    // if (field.BYTES < 1 || field.BYTES > max) throw new Error('invalid field');\n    // if (field.BITS < 1 || field.BITS > 8 * max) throw new Error('invalid field');\n    return field;\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(Fp, num, power) {\n    if (power < _0n)\n        throw new Error('invalid exponent, negatives unsupported');\n    if (power === _0n)\n        return Fp.ONE;\n    if (power === _1n)\n        return num;\n    let p = Fp.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = Fp.mul(p, d);\n        d = Fp.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * Exception-free. Will return `undefined` for 0 elements.\n * @param passZero map 0 to 0 (instead of undefined)\n */\nexport function FpInvertBatch(Fp, nums, passZero = false) {\n    const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : undefined);\n    // Walk from first to last, multiply them by each other MOD p\n    const multipliedAcc = nums.reduce((acc, num, i) => {\n        if (Fp.is0(num))\n            return acc;\n        inverted[i] = acc;\n        return Fp.mul(acc, num);\n    }, Fp.ONE);\n    // Invert last element\n    const invertedAcc = Fp.inv(multipliedAcc);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (Fp.is0(num))\n            return acc;\n        inverted[i] = Fp.mul(acc, inverted[i]);\n        return Fp.mul(acc, num);\n    }, invertedAcc);\n    return inverted;\n}\n// TODO: remove\nexport function FpDiv(Fp, lhs, rhs) {\n    return Fp.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, Fp.ORDER) : Fp.inv(rhs));\n}\n/**\n * Legendre symbol.\n * Legendre constant is used to calculate Legendre symbol (a | p)\n * which denotes the value of a^((p-1)/2) (mod p).\n *\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nexport function FpLegendre(Fp, n) {\n    // We can use 3rd argument as optional cache of this value\n    // but seems unneeded for now. The operation is very fast.\n    const p1mod2 = (Fp.ORDER - _1n) / _2n;\n    const powered = Fp.pow(n, p1mod2);\n    const yes = Fp.eql(powered, Fp.ONE);\n    const zero = Fp.eql(powered, Fp.ZERO);\n    const no = Fp.eql(powered, Fp.neg(Fp.ONE));\n    if (!yes && !zero && !no)\n        throw new Error('invalid Legendre symbol result');\n    return yes ? 1 : zero ? 0 : -1;\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(Fp, n) {\n    const l = FpLegendre(Fp, n);\n    return l === 1;\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    if (nBitLength !== undefined)\n        anumber(nBitLength);\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Creates a finite field. Major performance optimizations:\n * * 1. Denormalized operations like mulN instead of mul.\n * * 2. Identical object shape: never add or remove keys.\n * * 3. `Object.freeze`.\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n *\n * Note about field properties:\n * * CHARACTERISTIC p = prime number, number of elements in main subgroup.\n * * ORDER q = similar to cofactor in curves, may be composite `q = p^m`.\n *\n * @param ORDER field order, probably prime, or could be composite\n * @param bitLen how many bits the field consumes\n * @param isLE (default: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLenOrOpts, isLE = false, opts = {}) {\n    if (ORDER <= _0n)\n        throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n    let _nbitLength = undefined;\n    let _sqrt = undefined;\n    if (typeof bitLenOrOpts === 'object' && bitLenOrOpts != null) {\n        if (opts.sqrt || isLE)\n            throw new Error('cannot specify opts in two arguments');\n        const _opts = bitLenOrOpts;\n        if (_opts.BITS)\n            _nbitLength = _opts.BITS;\n        if (_opts.sqrt)\n            _sqrt = _opts.sqrt;\n        if (typeof _opts.isLE === 'boolean')\n            isLE = _opts.isLE;\n    }\n    else {\n        if (typeof bitLenOrOpts === 'number')\n            _nbitLength = bitLenOrOpts;\n        if (opts.sqrt)\n            _sqrt = opts.sqrt;\n    }\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, _nbitLength);\n    if (BYTES > 2048)\n        throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n    let sqrtP; // cached sqrtP\n    const f = Object.freeze({\n        ORDER,\n        isLE,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error('invalid field element: expected bigint, got ' + typeof num);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        // is valid and invertible\n        isValidNot0: (num) => !f.is0(num) && f.isValid(num),\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: _sqrt ||\n            ((n) => {\n                if (!sqrtP)\n                    sqrtP = FpSqrt(ORDER);\n                return sqrtP(f, n);\n            }),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n        // TODO: we don't need it here, move out to separate fn\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // We can't move this out because Fp6, Fp12 implement it\n        // and it's unclear what to return in there.\n        cmov: (a, b, c) => (c ? b : a),\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error('hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n    const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map","/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash, clean, Hash, toBytes } from \"./utils.js\";\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        ahash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        clean(pad);\n    }\n    update(buf) {\n        aexists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        abytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { bitLen, bitMask, validateObject } from \"../utils.js\";\nimport { Field, FpInvertBatch, nLength, validateField } from \"./modular.js\";\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nexport function negateCt(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\n/**\n * Takes a bunch of Projective Points but executes only one\n * inversion on all of them. Inversion is very slow operation,\n * so this improves performance massively.\n * Optimization: converts a list of projective points to a list of identical points with Z=1.\n */\nexport function normalizeZ(c, property, points) {\n    const getz = property === 'pz' ? (p) => p.pz : (p) => p.ez;\n    const toInv = FpInvertBatch(c.Fp, points.map(getz));\n    // @ts-ignore\n    const affined = points.map((p, i) => p.toAffine(toInv[i]));\n    return affined.map(c.fromAffine);\n}\nfunction validateW(W, bits) {\n    if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n        throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n}\nfunction calcWOpts(W, scalarBits) {\n    validateW(W, scalarBits);\n    const windows = Math.ceil(scalarBits / W) + 1; // W=8 33. Not 32, because we skip zero\n    const windowSize = 2 ** (W - 1); // W=8 128. Not 256, because we skip zero\n    const maxNumber = 2 ** W; // W=8 256\n    const mask = bitMask(W); // W=8 255 == mask 0b11111111\n    const shiftBy = BigInt(W); // W=8 8\n    return { windows, windowSize, mask, maxNumber, shiftBy };\n}\nfunction calcOffsets(n, window, wOpts) {\n    const { windowSize, mask, maxNumber, shiftBy } = wOpts;\n    let wbits = Number(n & mask); // extract W bits.\n    let nextN = n >> shiftBy; // shift number by W bits.\n    // What actually happens here:\n    // const highestBit = Number(mask ^ (mask >> 1n));\n    // let wbits2 = wbits - 1; // skip zero\n    // if (wbits2 & highestBit) { wbits2 ^= Number(mask); // (~);\n    // split if bits > max: +224 => 256-32\n    if (wbits > windowSize) {\n        // we skip zero, which means instead of `>= size-1`, we do `> size`\n        wbits -= maxNumber; // -32, can be maxNumber - wbits, but then we need to set isNeg here.\n        nextN += _1n; // +256 (carry)\n    }\n    const offsetStart = window * windowSize;\n    const offset = offsetStart + Math.abs(wbits) - 1; // -1 because we skip zero\n    const isZero = wbits === 0; // is current window slice a 0?\n    const isNeg = wbits < 0; // is current window slice negative?\n    const isNegF = window % 2 !== 0; // fake random statement for noise\n    const offsetF = offsetStart; // fake offset for noise\n    return { nextN, offset, isZero, isNeg, isNegF, offsetF };\n}\nfunction validateMSMPoints(points, c) {\n    if (!Array.isArray(points))\n        throw new Error('array expected');\n    points.forEach((p, i) => {\n        if (!(p instanceof c))\n            throw new Error('invalid point at index ' + i);\n    });\n}\nfunction validateMSMScalars(scalars, field) {\n    if (!Array.isArray(scalars))\n        throw new Error('array of scalars expected');\n    scalars.forEach((s, i) => {\n        if (!field.isValid(s))\n            throw new Error('invalid scalar at index ' + i);\n    });\n}\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes.\n// Allows to make points frozen / immutable.\nconst pointPrecomputes = new WeakMap();\nconst pointWindowSizes = new WeakMap();\nfunction getW(P) {\n    return pointWindowSizes.get(P) || 1;\n}\nfunction assert0(n) {\n    if (n !== _0n)\n        throw new Error('invalid wNAF');\n}\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */\nexport function wNAF(c, bits) {\n    return {\n        constTimeNegate: negateCt,\n        hasPrecomputes(elm) {\n            return getW(elm) !== 1;\n        },\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n, p = c.ZERO) {\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @param elm Point instance\n         * @param W window size\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = calcWOpts(W, bits);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // i=1, bc we skip 0\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // Smaller version:\n            // https://github.com/paulmillr/noble-secp256k1/blob/47cb1669b6e506ad66b35fe7d76132ae97465da2/index.ts#L502-L541\n            // TODO: check the scalar is less than group order?\n            // wNAF behavior is undefined otherwise. But have to carefully remove\n            // other checks before wNAF. ORDER == bits here.\n            // Accumulators\n            let p = c.ZERO;\n            let f = c.BASE;\n            // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n            // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n            // there is negate now: it is possible that negated element from low value\n            // would be the same as high element, which will create carry into next window.\n            // It's not obvious how this can fail, but still worth investigating later.\n            const wo = calcWOpts(W, bits);\n            for (let window = 0; window < wo.windows; window++) {\n                // (n === _0n) is handled and not early-exited. isEven and offsetF are used for noise\n                const { nextN, offset, isZero, isNeg, isNegF, offsetF } = calcOffsets(n, window, wo);\n                n = nextN;\n                if (isZero) {\n                    // bits are 0: add garbage to fake point\n                    // Important part for const-time getPublicKey: add random \"noise\" point to f.\n                    f = f.add(negateCt(isNegF, precomputes[offsetF]));\n                }\n                else {\n                    // bits are 1: add to result point\n                    p = p.add(negateCt(isNeg, precomputes[offset]));\n                }\n            }\n            assert0(n);\n            // Return both real and fake points: JIT won't eliminate f.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        /**\n         * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @param acc accumulator point to add result of multiplication\n         * @returns point\n         */\n        wNAFUnsafe(W, precomputes, n, acc = c.ZERO) {\n            const wo = calcWOpts(W, bits);\n            for (let window = 0; window < wo.windows; window++) {\n                if (n === _0n)\n                    break; // Early-exit, skip 0 value\n                const { nextN, offset, isZero, isNeg } = calcOffsets(n, window, wo);\n                n = nextN;\n                if (isZero) {\n                    // Window bits are 0: skip processing.\n                    // Move to next window.\n                    continue;\n                }\n                else {\n                    const item = precomputes[offset];\n                    acc = acc.add(isNeg ? item.negate() : item); // Re-using acc allows to save adds in MSM\n                }\n            }\n            assert0(n);\n            return acc;\n        },\n        getPrecomputes(W, P, transform) {\n            // Calculate precomputes on a first run, reuse them after\n            let comp = pointPrecomputes.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    // Doing transform outside of if brings 15% perf hit\n                    if (typeof transform === 'function')\n                        comp = transform(comp);\n                    pointPrecomputes.set(P, comp);\n                }\n            }\n            return comp;\n        },\n        wNAFCached(P, n, transform) {\n            const W = getW(P);\n            return this.wNAF(W, this.getPrecomputes(W, P, transform), n);\n        },\n        wNAFCachedUnsafe(P, n, transform, prev) {\n            const W = getW(P);\n            if (W === 1)\n                return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster\n            return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);\n        },\n        // We calculate precomputes for elliptic curve point multiplication\n        // using windowed method. This specifies window size and\n        // stores precomputed values. Usually only base point would be precomputed.\n        setWindowSize(P, W) {\n            validateW(W, bits);\n            pointWindowSizes.set(P, W);\n            pointPrecomputes.delete(P);\n        },\n    };\n}\n/**\n * Endomorphism-specific multiplication for Koblitz curves.\n * Cost: 128 dbl, 0-256 adds.\n */\nexport function mulEndoUnsafe(c, point, k1, k2) {\n    let acc = point;\n    let p1 = c.ZERO;\n    let p2 = c.ZERO;\n    while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n)\n            p1 = p1.add(acc);\n        if (k2 & _1n)\n            p2 = p2.add(acc);\n        acc = acc.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n    }\n    return { p1, p2 };\n}\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster than precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nexport function pippenger(c, fieldN, points, scalars) {\n    // If we split scalars by some window (let's say 8 bits), every chunk will only\n    // take 256 buckets even if there are 4096 scalars, also re-uses double.\n    // TODO:\n    // - https://eprint.iacr.org/2024/750.pdf\n    // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n    // 0 is accepted in scalars\n    validateMSMPoints(points, c);\n    validateMSMScalars(scalars, fieldN);\n    const plength = points.length;\n    const slength = scalars.length;\n    if (plength !== slength)\n        throw new Error('arrays of points and scalars must have equal length');\n    // if (plength === 0) throw new Error('array must be of length >= 2');\n    const zero = c.ZERO;\n    const wbits = bitLen(BigInt(plength));\n    let windowSize = 1; // bits\n    if (wbits > 12)\n        windowSize = wbits - 3;\n    else if (wbits > 4)\n        windowSize = wbits - 2;\n    else if (wbits > 0)\n        windowSize = 2;\n    const MASK = bitMask(windowSize);\n    const buckets = new Array(Number(MASK) + 1).fill(zero); // +1 for zero array\n    const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n    let sum = zero;\n    for (let i = lastBits; i >= 0; i -= windowSize) {\n        buckets.fill(zero);\n        for (let j = 0; j < slength; j++) {\n            const scalar = scalars[j];\n            const wbits = Number((scalar >> BigInt(i)) & MASK);\n            buckets[wbits] = buckets[wbits].add(points[j]);\n        }\n        let resI = zero; // not using this will do small speed-up, but will lose ct\n        // Skip first bucket, because it is zero\n        for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n            sumI = sumI.add(buckets[j]);\n            resI = resI.add(sumI);\n        }\n        sum = sum.add(resI);\n        if (i !== 0)\n            for (let j = 0; j < windowSize; j++)\n                sum = sum.double();\n    }\n    return sum;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */\nexport function precomputeMSMUnsafe(c, fieldN, points, windowSize) {\n    /**\n     * Performance Analysis of Window-based Precomputation\n     *\n     * Base Case (256-bit scalar, 8-bit window):\n     * - Standard precomputation requires:\n     *   - 31 additions per scalar × 256 scalars = 7,936 ops\n     *   - Plus 255 summary additions = 8,191 total ops\n     *   Note: Summary additions can be optimized via accumulator\n     *\n     * Chunked Precomputation Analysis:\n     * - Using 32 chunks requires:\n     *   - 255 additions per chunk\n     *   - 256 doublings\n     *   - Total: (255 × 32) + 256 = 8,416 ops\n     *\n     * Memory Usage Comparison:\n     * Window Size | Standard Points | Chunked Points\n     * ------------|-----------------|---------------\n     *     4-bit   |     520         |      15\n     *     8-bit   |    4,224        |     255\n     *    10-bit   |   13,824        |   1,023\n     *    16-bit   |  557,056        |  65,535\n     *\n     * Key Advantages:\n     * 1. Enables larger window sizes due to reduced memory overhead\n     * 2. More efficient for smaller scalar counts:\n     *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n     *    - ~2x faster than standard 8,191 ops\n     *\n     * Limitations:\n     * - Not suitable for plain precomputes (requires 256 constant doublings)\n     * - Performance degrades with larger scalar counts:\n     *   - Optimal for ~256 scalars\n     *   - Less efficient for 4096+ scalars (Pippenger preferred)\n     */\n    validateW(windowSize, fieldN.BITS);\n    validateMSMPoints(points, c);\n    const zero = c.ZERO;\n    const tableSize = 2 ** windowSize - 1; // table size (without zero)\n    const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n    const MASK = bitMask(windowSize);\n    const tables = points.map((p) => {\n        const res = [];\n        for (let i = 0, acc = p; i < tableSize; i++) {\n            res.push(acc);\n            acc = acc.add(p);\n        }\n        return res;\n    });\n    return (scalars) => {\n        validateMSMScalars(scalars, fieldN);\n        if (scalars.length > points.length)\n            throw new Error('array of scalars must be smaller than array of points');\n        let res = zero;\n        for (let i = 0; i < chunks; i++) {\n            // No need to double if accumulator is still zero.\n            if (res !== zero)\n                for (let j = 0; j < windowSize; j++)\n                    res = res.double();\n            const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n            for (let j = 0; j < scalars.length; j++) {\n                const n = scalars[j];\n                const curr = Number((n >> shiftBy) & MASK);\n                if (!curr)\n                    continue; // skip zero scalars chunks\n                res = res.add(tables[j][curr - 1]);\n            }\n        }\n        return res;\n    };\n}\n// TODO: remove\n/** @deprecated */\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\nfunction createField(order, field) {\n    if (field) {\n        if (field.ORDER !== order)\n            throw new Error('Field.ORDER must match order: Fp == p, Fn == n');\n        validateField(field);\n        return field;\n    }\n    else {\n        return Field(order);\n    }\n}\n/** Validates CURVE opts and creates fields */\nexport function _createCurveFields(type, CURVE, curveOpts = {}) {\n    if (!CURVE || typeof CURVE !== 'object')\n        throw new Error(`expected valid ${type} CURVE object`);\n    for (const p of ['p', 'n', 'h']) {\n        const val = CURVE[p];\n        if (!(typeof val === 'bigint' && val > _0n))\n            throw new Error(`CURVE.${p} must be positive bigint`);\n    }\n    const Fp = createField(CURVE.p, curveOpts.Fp);\n    const Fn = createField(CURVE.n, curveOpts.Fn);\n    const _b = type === 'weierstrass' ? 'b' : 'd';\n    const params = ['Gx', 'Gy', 'a', _b];\n    for (const p of params) {\n        // @ts-ignore\n        if (!Fp.isValid(CURVE[p]))\n            throw new Error(`CURVE.${p} must be valid field element of CURVE.Fp`);\n    }\n    return { Fp, Fn };\n}\n//# sourceMappingURL=curve.js.map","/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac.js';\nimport { _validateObject, abool, abytes, aInRange, bitMask, bytesToHex, bytesToNumberBE, concatBytes, createHmacDrbg, ensureBytes, hexToBytes, inRange, isBytes, memoized, numberToHexUnpadded, randomBytes, } from \"../utils.js\";\nimport { _createCurveFields, mulEndoUnsafe, negateCt, normalizeZ, pippenger, wNAF, } from \"./curve.js\";\nimport { Field, FpInvertBatch, getMinHashLength, mapHashToField, validateField, } from \"./modular.js\";\nfunction validateSigVerOpts(opts) {\n    if (opts.lowS !== undefined)\n        abool('lowS', opts.lowS);\n    if (opts.prehash !== undefined)\n        abool('prehash', opts.prehash);\n}\nexport class DERErr extends Error {\n    constructor(m = '') {\n        super(m);\n    }\n}\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: DERErr,\n    // Basic building block is TLV (Tag-Length-Value)\n    _tlv: {\n        encode: (tag, data) => {\n            const { Err: E } = DER;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length & 1)\n                throw new E('tlv.encode: unpadded data');\n            const dataLen = data.length / 2;\n            const len = numberToHexUnpadded(dataLen);\n            if ((len.length / 2) & 128)\n                throw new E('tlv.encode: long form length too big');\n            // length of length with long form flag\n            const lenLen = dataLen > 127 ? numberToHexUnpadded((len.length / 2) | 128) : '';\n            const t = numberToHexUnpadded(tag);\n            return t + lenLen + len + data;\n        },\n        // v - value, l - left bytes (unparsed)\n        decode(tag, data) {\n            const { Err: E } = DER;\n            let pos = 0;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length < 2 || data[pos++] !== tag)\n                throw new E('tlv.decode: wrong tlv');\n            const first = data[pos++];\n            const isLong = !!(first & 128); // First bit of first length byte is flag for short/long form\n            let length = 0;\n            if (!isLong)\n                length = first;\n            else {\n                // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n                const lenLen = first & 127;\n                if (!lenLen)\n                    throw new E('tlv.decode(long): indefinite length not supported');\n                if (lenLen > 4)\n                    throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n                const lengthBytes = data.subarray(pos, pos + lenLen);\n                if (lengthBytes.length !== lenLen)\n                    throw new E('tlv.decode: length bytes not complete');\n                if (lengthBytes[0] === 0)\n                    throw new E('tlv.decode(long): zero leftmost byte');\n                for (const b of lengthBytes)\n                    length = (length << 8) | b;\n                pos += lenLen;\n                if (length < 128)\n                    throw new E('tlv.decode(long): not minimal encoding');\n            }\n            const v = data.subarray(pos, pos + length);\n            if (v.length !== length)\n                throw new E('tlv.decode: wrong value length');\n            return { v, l: data.subarray(pos + length) };\n        },\n    },\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    _int: {\n        encode(num) {\n            const { Err: E } = DER;\n            if (num < _0n)\n                throw new E('integer: negative integers are not allowed');\n            let hex = numberToHexUnpadded(num);\n            // Pad with zero byte if negative flag is present\n            if (Number.parseInt(hex[0], 16) & 0b1000)\n                hex = '00' + hex;\n            if (hex.length & 1)\n                throw new E('unexpected DER parsing assertion: unpadded hex');\n            return hex;\n        },\n        decode(data) {\n            const { Err: E } = DER;\n            if (data[0] & 128)\n                throw new E('invalid signature integer: negative');\n            if (data[0] === 0x00 && !(data[1] & 128))\n                throw new E('invalid signature integer: unnecessary leading zero');\n            return bytesToNumberBE(data);\n        },\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E, _int: int, _tlv: tlv } = DER;\n        const data = ensureBytes('signature', hex);\n        const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n        if (seqLeftBytes.length)\n            throw new E('invalid signature: left bytes after parsing');\n        const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n        const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n        if (sLeftBytes.length)\n            throw new E('invalid signature: left bytes after parsing');\n        return { r: int.decode(rBytes), s: int.decode(sBytes) };\n    },\n    hexFromSig(sig) {\n        const { _tlv: tlv, _int: int } = DER;\n        const rs = tlv.encode(0x02, int.encode(sig.r));\n        const ss = tlv.encode(0x02, int.encode(sig.s));\n        const seq = rs + ss;\n        return tlv.encode(0x30, seq);\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n// TODO: remove\nexport function _legacyHelperEquat(Fp, a, b) {\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula. Takes x, returns y².\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x² * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x³ + a * x + b\n    }\n    return weierstrassEquation;\n}\nexport function _legacyHelperNormPriv(Fn, allowedPrivateKeyLengths, wrapPrivateKey) {\n    const { BYTES: expected } = Fn;\n    // Validates if priv key is valid and converts it to bigint.\n    function normPrivateKeyToScalar(key) {\n        let num;\n        if (typeof key === 'bigint') {\n            num = key;\n        }\n        else {\n            let bytes = ensureBytes('private key', key);\n            if (allowedPrivateKeyLengths) {\n                if (!allowedPrivateKeyLengths.includes(bytes.length * 2))\n                    throw new Error('invalid private key');\n                const padded = new Uint8Array(expected);\n                padded.set(bytes, padded.length - bytes.length);\n                bytes = padded;\n            }\n            try {\n                num = Fn.fromBytes(bytes);\n            }\n            catch (error) {\n                throw new Error(`invalid private key: expected ui8a of size ${expected}, got ${typeof key}`);\n            }\n        }\n        if (wrapPrivateKey)\n            num = Fn.create(num); // disabled by default, enabled for BLS\n        if (!Fn.isValidNot0(num))\n            throw new Error('invalid private key: out of range [1..N-1]');\n        return num;\n    }\n    return normPrivateKeyToScalar;\n}\nexport function weierstrassN(CURVE, curveOpts = {}) {\n    const { Fp, Fn } = _createCurveFields('weierstrass', CURVE, curveOpts);\n    const { h: cofactor, n: CURVE_ORDER } = CURVE;\n    _validateObject(curveOpts, {}, {\n        allowInfinityPoint: 'boolean',\n        clearCofactor: 'function',\n        isTorsionFree: 'function',\n        fromBytes: 'function',\n        toBytes: 'function',\n        endo: 'object',\n        wrapPrivateKey: 'boolean',\n    });\n    const { endo } = curveOpts;\n    if (endo) {\n        // validateObject(endo, { beta: 'bigint', splitScalar: 'function' });\n        if (!Fp.is0(CURVE.a) ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('invalid endo: expected \"beta\": bigint and \"splitScalar\": function');\n        }\n    }\n    function assertCompressionIsSupported() {\n        if (!Fp.isOdd)\n            throw new Error('compression is not supported: Field does not have .isOdd()');\n    }\n    // Implements IEEE P1363 point encoding\n    function pointToBytes(_c, point, isCompressed) {\n        const { x, y } = point.toAffine();\n        const bx = Fp.toBytes(x);\n        abool('isCompressed', isCompressed);\n        if (isCompressed) {\n            assertCompressionIsSupported();\n            const hasEvenY = !Fp.isOdd(y);\n            return concatBytes(pprefix(hasEvenY), bx);\n        }\n        else {\n            return concatBytes(Uint8Array.of(0x04), bx, Fp.toBytes(y));\n        }\n    }\n    function pointFromBytes(bytes) {\n        abytes(bytes);\n        const L = Fp.BYTES;\n        const LC = L + 1; // length compressed, e.g. 33 for 32-byte field\n        const LU = 2 * L + 1; // length uncompressed, e.g. 65 for 32-byte field\n        const length = bytes.length;\n        const head = bytes[0];\n        const tail = bytes.subarray(1);\n        // No actual validation is done here: use .assertValidity()\n        if (length === LC && (head === 0x02 || head === 0x03)) {\n            const x = Fp.fromBytes(tail);\n            if (!Fp.isValid(x))\n                throw new Error('bad point: is not on curve, wrong x');\n            const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n            let y;\n            try {\n                y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n            }\n            catch (sqrtError) {\n                const err = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n                throw new Error('bad point: is not on curve, sqrt error' + err);\n            }\n            assertCompressionIsSupported();\n            const isYOdd = Fp.isOdd(y); // (y & _1n) === _1n;\n            const isHeadOdd = (head & 1) === 1; // ECDSA-specific\n            if (isHeadOdd !== isYOdd)\n                y = Fp.neg(y);\n            return { x, y };\n        }\n        else if (length === LU && head === 0x04) {\n            // TODO: more checks\n            const x = Fp.fromBytes(tail.subarray(L * 0, L * 1));\n            const y = Fp.fromBytes(tail.subarray(L * 1, L * 2));\n            if (!isValidXY(x, y))\n                throw new Error('bad point: is not on curve');\n            return { x, y };\n        }\n        else {\n            throw new Error(`bad point: got length ${length}, expected compressed=${LC} or uncompressed=${LU}`);\n        }\n    }\n    const toBytes = curveOpts.toBytes || pointToBytes;\n    const fromBytes = curveOpts.fromBytes || pointFromBytes;\n    const weierstrassEquation = _legacyHelperEquat(Fp, CURVE.a, CURVE.b);\n    // TODO: move top-level\n    /** Checks whether equation holds for given x, y: y² == x³ + ax + b */\n    function isValidXY(x, y) {\n        const left = Fp.sqr(y); // y²\n        const right = weierstrassEquation(x); // x³ + ax + b\n        return Fp.eql(left, right);\n    }\n    // Validate whether the passed curve params are valid.\n    // Test 1: equation y² = x³ + ax + b should work for generator point.\n    if (!isValidXY(CURVE.Gx, CURVE.Gy))\n        throw new Error('bad curve params: generator point');\n    // Test 2: discriminant Δ part should be non-zero: 4a³ + 27b² != 0.\n    // Guarantees curve is genus-1, smooth (non-singular).\n    const _4a3 = Fp.mul(Fp.pow(CURVE.a, _3n), _4n);\n    const _27b2 = Fp.mul(Fp.sqr(CURVE.b), BigInt(27));\n    if (Fp.is0(Fp.add(_4a3, _27b2)))\n        throw new Error('bad curve params: a or b');\n    /** Asserts coordinate is valid: 0 <= n < Fp.ORDER. */\n    function acoord(title, n, banZero = false) {\n        if (!Fp.isValid(n) || (banZero && Fp.is0(n)))\n            throw new Error(`bad point coordinate ${title}`);\n        return n;\n    }\n    function aprjpoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    // Memoized toAffine / validity check. They are heavy. Points are immutable.\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (X, Y, Z) ∋ (x=X/Z, y=Y/Z)\n    const toAffineMemo = memoized((p, iz) => {\n        const { px: x, py: y, pz: z } = p;\n        // Fast-path for normalized points\n        if (Fp.eql(z, Fp.ONE))\n            return { x, y };\n        const is0 = p.is0();\n        // If invZ was 0, we return zero point. However we still want to execute\n        // all operations, so we replace invZ with a random number, 1.\n        if (iz == null)\n            iz = is0 ? Fp.ONE : Fp.inv(z);\n        const ax = Fp.mul(x, iz);\n        const ay = Fp.mul(y, iz);\n        const zz = Fp.mul(z, iz);\n        if (is0)\n            return { x: Fp.ZERO, y: Fp.ZERO };\n        if (!Fp.eql(zz, Fp.ONE))\n            throw new Error('invZ was invalid');\n        return { x: ax, y: ay };\n    });\n    // NOTE: on exception this will crash 'cached' and no value will be set.\n    // Otherwise true will be return\n    const assertValidMemo = memoized((p) => {\n        if (p.is0()) {\n            // (0, 1, 0) aka ZERO is invalid in most contexts.\n            // In BLS, ZERO can be serialized, so we allow it.\n            // (0, 0, 0) is invalid representation of ZERO.\n            if (curveOpts.allowInfinityPoint && !Fp.is0(p.py))\n                return;\n            throw new Error('bad point: ZERO');\n        }\n        // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n        const { x, y } = p.toAffine();\n        if (!Fp.isValid(x) || !Fp.isValid(y))\n            throw new Error('bad point: x or y not field elements');\n        if (!isValidXY(x, y))\n            throw new Error('bad point: equation left != right');\n        if (!p.isTorsionFree())\n            throw new Error('bad point: not in prime-order subgroup');\n        return true;\n    });\n    function finishEndo(endoBeta, k1p, k2p, k1neg, k2neg) {\n        k2p = new Point(Fp.mul(k2p.px, endoBeta), k2p.py, k2p.pz);\n        k1p = negateCt(k1neg, k1p);\n        k2p = negateCt(k2neg, k2p);\n        return k1p.add(k2p);\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates:(X, Y, Z) ∋ (x=X/Z, y=Y/Z).\n     * Default Point works in 2d / affine coordinates: (x, y).\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n        constructor(px, py, pz) {\n            this.px = acoord('x', px);\n            this.py = acoord('y', py, true);\n            this.pz = acoord('z', pz);\n            Object.freeze(this);\n        }\n        /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            // (0, 0) would've produced (0, 0, 1) - instead, we need (0, 1, 0)\n            if (Fp.is0(x) && Fp.is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        static normalizeZ(points) {\n            return normalizeZ(Point, 'pz', points);\n        }\n        static fromBytes(bytes) {\n            abytes(bytes);\n            return Point.fromHex(bytes);\n        }\n        /** Converts hash string or Uint8Array to Point. */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        /** Multiplies generator point by privateKey. */\n        static fromPrivateKey(privateKey) {\n            const normPrivateKeyToScalar = _legacyHelperNormPriv(Fn, curveOpts.allowedPrivateKeyLengths, curveOpts.wrapPrivateKey);\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        /** Multiscalar Multiplication */\n        static msm(points, scalars) {\n            return pippenger(Point, Fn, points, scalars);\n        }\n        /**\n         *\n         * @param windowSize\n         * @param isLazy true will defer table computation until the first multiplication\n         * @returns\n         */\n        precompute(windowSize = 8, isLazy = true) {\n            wnaf.setWindowSize(this, windowSize);\n            if (!isLazy)\n                this.multiply(_3n); // random number\n            return this;\n        }\n        /** \"Private method\", don't use it directly */\n        _setWindowSize(windowSize) {\n            this.precompute(windowSize);\n        }\n        // TODO: return `this`\n        /** A point on curve is valid if it conforms to equation. */\n        assertValidity() {\n            assertValidMemo(this);\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (!Fp.isOdd)\n                throw new Error(\"Field doesn't support isOdd\");\n            return !Fp.isOdd(y);\n        }\n        /** Compare one point to another. */\n        equals(other) {\n            aprjpoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /** Flips point to one corresponding to (x, -y) in Affine coordinates. */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            aprjpoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            const { endo } = curveOpts;\n            if (!Fn.isValidNot0(scalar))\n                throw new Error('invalid scalar: out of range'); // 0 is invalid\n            let point, fake; // Fake point is used to const-time mult\n            const mul = (n) => wnaf.wNAFCached(this, n, Point.normalizeZ);\n            /** See docs for {@link EndomorphismOpts} */\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n                const { p: k1p, f: k1f } = mul(k1);\n                const { p: k2p, f: k2f } = mul(k2);\n                fake = k1f.add(k2f);\n                point = finishEndo(endo.beta, k1p, k2p, k1neg, k2neg);\n            }\n            else {\n                const { p, f } = mul(scalar);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(sc) {\n            const { endo } = curveOpts;\n            const p = this;\n            if (!Fn.isValid(sc))\n                throw new Error('invalid scalar: out of range'); // 0 is valid\n            if (sc === _0n || p.is0())\n                return Point.ZERO;\n            if (sc === _1n)\n                return p; // fast-path\n            if (wnaf.hasPrecomputes(this))\n                return this.multiply(sc);\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n                // `wNAFCachedUnsafe` is 30% slower\n                const { p1, p2 } = mulEndoUnsafe(Point, p, k1, k2);\n                return finishEndo(endo.beta, p1, p2, k1neg, k2neg);\n            }\n            else {\n                return wnaf.wNAFCachedUnsafe(p, sc);\n            }\n        }\n        multiplyAndAddUnsafe(Q, a, b) {\n            const sum = this.multiplyUnsafe(a).add(Q.multiplyUnsafe(b));\n            return sum.is0() ? undefined : sum;\n        }\n        /**\n         * Converts Projective point to affine (x, y) coordinates.\n         * @param invertedZ Z^-1 (inverted zero) - optional, precomputation is useful for invertBatch\n         */\n        toAffine(invertedZ) {\n            return toAffineMemo(this, invertedZ);\n        }\n        /**\n         * Checks whether Point is free of torsion elements (is in prime subgroup).\n         * Always torsion-free for cofactor=1 curves.\n         */\n        isTorsionFree() {\n            const { isTorsionFree } = curveOpts;\n            if (cofactor === _1n)\n                return true;\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            return wnaf.wNAFCachedUnsafe(this, CURVE_ORDER).is0();\n        }\n        clearCofactor() {\n            const { clearCofactor } = curveOpts;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(cofactor);\n        }\n        toBytes(isCompressed = true) {\n            abool('isCompressed', isCompressed);\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        /** @deprecated use `toBytes` */\n        toRawBytes(isCompressed = true) {\n            return this.toBytes(isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return bytesToHex(this.toBytes(isCompressed));\n        }\n        toString() {\n            return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\n        }\n    }\n    // base / generator point\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    // zero / infinity / identity point\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO); // 0, 1, 0\n    // fields\n    Point.Fp = Fp;\n    Point.Fn = Fn;\n    const bits = Fn.BITS;\n    const wnaf = wNAF(Point, curveOpts.endo ? Math.ceil(bits / 2) : bits);\n    return Point;\n}\n// _legacyWeierstrass\n/** @deprecated use `weierstrassN` */\nexport function weierstrassPoints(c) {\n    const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\n    const Point = weierstrassN(CURVE, curveOpts);\n    return _weierstrass_new_output_to_legacy(c, Point);\n}\n// Points start with byte 0x02 when y is even; otherwise 0x03\nfunction pprefix(hasEvenY) {\n    return Uint8Array.of(hasEvenY ? 0x02 : 0x03);\n}\nexport function ecdsa(Point, ecdsaOpts, curveOpts = {}) {\n    _validateObject(ecdsaOpts, { hash: 'function' }, {\n        hmac: 'function',\n        lowS: 'boolean',\n        randomBytes: 'function',\n        bits2int: 'function',\n        bits2int_modN: 'function',\n    });\n    const randomBytes_ = ecdsaOpts.randomBytes || randomBytes;\n    const hmac_ = ecdsaOpts.hmac ||\n        ((key, ...msgs) => hmac(ecdsaOpts.hash, key, concatBytes(...msgs)));\n    const { Fp, Fn } = Point;\n    const { ORDER: CURVE_ORDER, BITS: fnBits } = Fn;\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? Fn.neg(s) : s;\n    }\n    function aValidRS(title, num) {\n        if (!Fn.isValidNot0(num))\n            throw new Error(`invalid signature ${title}: out of range 1..CURVE.n`);\n    }\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            aValidRS('r', r); // r in [1..N-1]\n            aValidRS('s', s); // s in [1..N-1]\n            this.r = r;\n            this.s = s;\n            if (recovery != null)\n                this.recovery = recovery;\n            Object.freeze(this);\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const L = Fn.BYTES;\n            const b = ensureBytes('compactSignature', hex, L * 2);\n            return new Signature(Fn.fromBytes(b.subarray(0, L)), Fn.fromBytes(b.subarray(L, L * 2)));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        /**\n         * @todo remove\n         * @deprecated\n         */\n        assertValidity() { }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        // ProjPointType<bigint>\n        recoverPublicKey(msgHash) {\n            const FIELD_ORDER = Fp.ORDER;\n            const { r, s, recovery: rec } = this;\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            // ECDSA recovery is hard for cofactor > 1 curves.\n            // In sign, `r = q.x mod n`, and here we recover q.x from r.\n            // While recovering q.x >= n, we need to add r+n for cofactor=1 curves.\n            // However, for cofactor>1, r+n may not get q.x:\n            // r+n*i would need to be done instead where i is unknown.\n            // To easily get i, we either need to:\n            // a. increase amount of valid recid values (4, 5...); OR\n            // b. prohibit non-prime-order signatures (recid > 1).\n            const hasCofactor = CURVE_ORDER * _2n < FIELD_ORDER;\n            if (hasCofactor && rec > 1)\n                throw new Error('recovery id is ambiguous for h>1 curve');\n            const radj = rec === 2 || rec === 3 ? r + CURVE_ORDER : r;\n            if (!Fp.isValid(radj))\n                throw new Error('recovery id 2 or 3 invalid');\n            const x = Fp.toBytes(radj);\n            const R = Point.fromHex(concatBytes(pprefix((rec & 1) === 0), x));\n            const ir = Fn.inv(radj); // r^-1\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            const u1 = Fn.create(-h * ir); // -hr^-1\n            const u2 = Fn.create(s * ir); // sr^-1\n            // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1). unsafe is fine: there is no private data.\n            const Q = Point.BASE.multiplyUnsafe(u1).add(R.multiplyUnsafe(u2));\n            if (Q.is0())\n                throw new Error('point at infinify');\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, Fn.neg(this.s), this.recovery) : this;\n        }\n        toBytes(format) {\n            if (format === 'compact')\n                return concatBytes(Fn.toBytes(this.r), Fn.toBytes(this.s));\n            if (format === 'der')\n                return hexToBytes(DER.hexFromSig(this));\n            throw new Error('invalid format');\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return this.toBytes('der');\n        }\n        toDERHex() {\n            return bytesToHex(this.toBytes('der'));\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return this.toBytes('compact');\n        }\n        toCompactHex() {\n            return bytesToHex(this.toBytes('compact'));\n        }\n    }\n    const normPrivateKeyToScalar = _legacyHelperNormPriv(Fn, curveOpts.allowedPrivateKeyLengths, curveOpts.wrapPrivateKey);\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const n = CURVE_ORDER;\n            return mapHashToField(randomBytes_(getMinHashLength(n)), n);\n        },\n        precompute(windowSize = 8, point = Point.BASE) {\n            return point.precompute(windowSize, false);\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        if (typeof item === 'bigint')\n            return false;\n        if (item instanceof Point)\n            return true;\n        const arr = ensureBytes('key', item);\n        const length = arr.length;\n        const L = Fp.BYTES;\n        const LC = L + 1; // e.g. 33 for 32\n        const LU = 2 * L + 1; // e.g. 65 for 32\n        if (curveOpts.allowedPrivateKeyLengths || Fn.BYTES === LC) {\n            return undefined;\n        }\n        else {\n            return length === LC || length === LU;\n        }\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA) === true)\n            throw new Error('first arg must be private key');\n        if (isProbPub(publicB) === false)\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = ecdsaOpts.bits2int ||\n        function (bytes) {\n            // Our custom check \"just in case\", for protection against DoS\n            if (bytes.length > 8192)\n                throw new Error('input is too large');\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - fnBits; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = ecdsaOpts.bits2int_modN ||\n        function (bytes) {\n            return Fn.create(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = bitMask(fnBits);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        // IMPORTANT: the check ensures working for case `Fn.BYTES != Fn.BITS * 8`\n        aInRange('num < 2^' + fnBits, num, _0n, ORDER_MASK);\n        return Fn.toBytes(num);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n    // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash } = ecdsaOpts;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        validateSigVerOpts(opts);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with fnBits % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes_(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n        }\n        const seed = concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n        // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n        // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            // Important: all mod() calls here must be done over N\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!Fn.isValidNot0(k))\n                return; // Valid scalars (including k) must be in 1..N-1\n            const ik = Fn.inv(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = Fn.create(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            const s = Fn.create(ik * Fn.create(m + r * d)); // Not using blinding here, see comment above\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: ecdsaOpts.lowS, prehash: false };\n    const defaultVerOpts = { lowS: ecdsaOpts.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const drbg = createHmacDrbg(ecdsaOpts.hash.outputLen, Fn.BYTES, hmac_);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE.precompute(8);\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        // Verify opts\n        validateSigVerOpts(opts);\n        const { lowS, prehash, format } = opts;\n        // TODO: remove\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        if (format !== undefined && !['compact', 'der', 'js'].includes(format))\n            throw new Error('format must be \"compact\", \"der\" or \"js\"');\n        const isHex = typeof sg === 'string' || isBytes(sg);\n        const isObj = !isHex &&\n            !format &&\n            typeof sg === 'object' &&\n            sg !== null &&\n            typeof sg.r === 'bigint' &&\n            typeof sg.s === 'bigint';\n        if (!isHex && !isObj)\n            throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n        let _sig = undefined;\n        let P;\n        // deduce signature format\n        try {\n            // if (format === 'js') {\n            //   if (sg != null && !isBytes(sg)) _sig = new Signature(sg.r, sg.s);\n            // } else if (format === 'compact') {\n            //   _sig = Signature.fromCompact(sg);\n            // } else if (format === 'der') {\n            //   _sig = Signature.fromDER(sg);\n            // } else {\n            //   throw new Error('invalid format');\n            // }\n            if (isObj) {\n                if (format === undefined || format === 'js') {\n                    _sig = new Signature(sg.r, sg.s);\n                }\n                else {\n                    throw new Error('invalid format');\n                }\n            }\n            if (isHex) {\n                // TODO: remove this malleable check\n                // Signature can be represented in 2 ways: compact (2*Fn.BYTES) & DER (variable-length).\n                // Since DER can also be 2*Fn.BYTES bytes, we check for it first.\n                try {\n                    if (format !== 'compact')\n                        _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                }\n                if (!_sig && format !== 'der')\n                    _sig = Signature.fromCompact(sg);\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            return false;\n        }\n        if (!_sig)\n            return false;\n        if (lowS && _sig.hasHighS())\n            return false;\n        // todo: optional.hash => hash\n        if (prehash)\n            msgHash = ecdsaOpts.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = Fn.inv(s); // s^-1\n        const u1 = Fn.create(h * is); // u1 = hs^-1 mod n\n        const u2 = Fn.create(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyUnsafe(u1).add(P.multiplyUnsafe(u2));\n        if (R.is0())\n            return false;\n        const v = Fn.create(R.x); // v = r.x mod n\n        return v === r;\n    }\n    // TODO: clarify API for cloning .clone({hash: sha512}) ? .createWith({hash: sha512})?\n    // const clone = (hash: CHash): ECDSA => ecdsa(Point, { ...ecdsaOpts, ...getHash(hash) }, curveOpts);\n    return Object.freeze({\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        utils,\n        Point,\n        Signature,\n    });\n}\nfunction _weierstrass_legacy_opts_to_new(c) {\n    const CURVE = {\n        a: c.a,\n        b: c.b,\n        p: c.Fp.ORDER,\n        n: c.n,\n        h: c.h,\n        Gx: c.Gx,\n        Gy: c.Gy,\n    };\n    const Fp = c.Fp;\n    const Fn = Field(CURVE.n, c.nBitLength);\n    const curveOpts = {\n        Fp,\n        Fn,\n        allowedPrivateKeyLengths: c.allowedPrivateKeyLengths,\n        allowInfinityPoint: c.allowInfinityPoint,\n        endo: c.endo,\n        wrapPrivateKey: c.wrapPrivateKey,\n        isTorsionFree: c.isTorsionFree,\n        clearCofactor: c.clearCofactor,\n        fromBytes: c.fromBytes,\n        toBytes: c.toBytes,\n    };\n    return { CURVE, curveOpts };\n}\nfunction _ecdsa_legacy_opts_to_new(c) {\n    const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\n    const ecdsaOpts = {\n        hash: c.hash,\n        hmac: c.hmac,\n        randomBytes: c.randomBytes,\n        lowS: c.lowS,\n        bits2int: c.bits2int,\n        bits2int_modN: c.bits2int_modN,\n    };\n    return { CURVE, curveOpts, ecdsaOpts };\n}\nfunction _weierstrass_new_output_to_legacy(c, Point) {\n    const { Fp, Fn } = Point;\n    // TODO: remove\n    function isWithinCurveOrder(num) {\n        return inRange(num, _1n, Fn.ORDER);\n    }\n    const weierstrassEquation = _legacyHelperEquat(Fp, c.a, c.b);\n    const normPrivateKeyToScalar = _legacyHelperNormPriv(Fn, c.allowedPrivateKeyLengths, c.wrapPrivateKey);\n    return Object.assign({}, {\n        CURVE: c,\n        Point: Point,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    });\n}\nfunction _ecdsa_new_output_to_legacy(c, ecdsa) {\n    return Object.assign({}, ecdsa, {\n        ProjectivePoint: ecdsa.Point,\n        CURVE: c,\n    });\n}\n// _ecdsa_legacy\nexport function weierstrass(c) {\n    const { CURVE, curveOpts, ecdsaOpts } = _ecdsa_legacy_opts_to_new(c);\n    const Point = weierstrassN(CURVE, curveOpts);\n    const signs = ecdsa(Point, ecdsaOpts, curveOpts);\n    return _ecdsa_new_output_to_legacy(c, signs);\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    validateField(Fp);\n    const { A, B, Z } = opts;\n    if (!Fp.isValid(A) || !Fp.isValid(B) || !Fp.isValid(Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, Z);\n    if (!Fp.isOdd)\n        throw new Error('Field does not have .isOdd()');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        const tv4_inv = FpInvertBatch(Fp, [tv4], true)[0];\n        x = Fp.mul(x, tv4_inv); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map","/**\n * Utilities for short weierstrass curves, combined with noble-hashes.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { weierstrass } from \"./abstract/weierstrass.js\";\n/** connects noble-curves to noble-hashes */\nexport function getHash(hash) {\n    return { hash };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, hash: hash });\n    return { ...create(defHash), create };\n}\n//# sourceMappingURL=_shortw_utils.js.map","/**\n * Internal module for NIST P256, P384, P521 curves.\n * Do not use for now.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256, sha384, sha512 } from '@noble/hashes/sha2.js';\nimport { createCurve } from \"./_shortw_utils.js\";\nimport { createHasher } from \"./abstract/hash-to-curve.js\";\nimport { Field } from \"./abstract/modular.js\";\nimport { mapToCurveSimpleSWU } from \"./abstract/weierstrass.js\";\n// p = 2n**224n * (2n**32n-1n) + 2n**192n + 2n**96n - 1n\n// a = Fp256.create(BigInt('-3'));\nconst p256_CURVE = {\n    p: BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'),\n    n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),\n    h: BigInt(1),\n    a: BigInt('0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc'),\n    b: BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b'),\n    Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),\n    Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),\n};\n// p = 2n**384n - 2n**128n - 2n**96n + 2n**32n - 1n\nconst p384_CURVE = {\n    p: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff'),\n    n: BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973'),\n    h: BigInt(1),\n    a: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000fffffffc'),\n    b: BigInt('0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef'),\n    Gx: BigInt('0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7'),\n    Gy: BigInt('0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f'),\n};\n// p = 2n**521n - 1n\nconst p521_CURVE = {\n    p: BigInt('0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'),\n    n: BigInt('0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b8899c47aebb6fb71e91386409'),\n    h: BigInt(1),\n    a: BigInt('0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc'),\n    b: BigInt('0x0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00'),\n    Gx: BigInt('0x00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66'),\n    Gy: BigInt('0x011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650'),\n};\nconst Fp256 = Field(p256_CURVE.p);\nconst Fp384 = Field(p384_CURVE.p);\nconst Fp521 = Field(p521_CURVE.p);\nfunction createSWU(field, opts) {\n    const map = mapToCurveSimpleSWU(field, opts);\n    return (scalars) => map(scalars[0]);\n}\n/** NIST P256 (aka secp256r1, prime256v1) curve, ECDSA and ECDH methods. */\nexport const p256 = createCurve({ ...p256_CURVE, Fp: Fp256, lowS: false }, sha256);\n/** Alias to p256. */\nexport const secp256r1 = p256;\n/** Hashing / encoding to p256 points / field. RFC 9380 methods. */\nexport const p256_hasher = /* @__PURE__ */ (() => {\n    return createHasher(p256.Point, createSWU(Fp256, {\n        A: p256_CURVE.a,\n        B: p256_CURVE.b,\n        Z: Fp256.create(BigInt('-10')),\n    }), {\n        DST: 'P256_XMD:SHA-256_SSWU_RO_',\n        encodeDST: 'P256_XMD:SHA-256_SSWU_NU_',\n        p: p256_CURVE.p,\n        m: 1,\n        k: 128,\n        expand: 'xmd',\n        hash: sha256,\n    });\n})();\n/** NIST P384 (aka secp384r1) curve, ECDSA and ECDH methods. */\nexport const p384 = createCurve({ ...p384_CURVE, Fp: Fp384, lowS: false }, sha384);\n/** Alias to p384. */\nexport const secp384r1 = p384;\n/** Hashing / encoding to p384 points / field. RFC 9380 methods. */\nexport const p384_hasher = /* @__PURE__ */ (() => {\n    return createHasher(p384.Point, createSWU(Fp384, {\n        A: p384_CURVE.a,\n        B: p384_CURVE.b,\n        Z: Fp384.create(BigInt('-12')),\n    }), {\n        DST: 'P384_XMD:SHA-384_SSWU_RO_',\n        encodeDST: 'P384_XMD:SHA-384_SSWU_NU_',\n        p: p384_CURVE.p,\n        m: 1,\n        k: 192,\n        expand: 'xmd',\n        hash: sha384,\n    });\n})();\n/** NIST P521 (aka secp521r1) curve, ECDSA and ECDH methods. */\nexport const p521 = createCurve({ ...p521_CURVE, Fp: Fp521, lowS: false, allowedPrivateKeyLengths: [130, 131, 132] }, sha512);\n/** Alias to p521. */\nexport const secp521r1 = p521;\n/** Hashing / encoding to p521 points / field. RFC 9380 methods. */\nexport const p521_hasher = /* @__PURE__ */ (() => {\n    return createHasher(p521.Point, createSWU(Fp521, {\n        A: p521_CURVE.a,\n        B: p521_CURVE.b,\n        Z: Fp521.create(BigInt('-4')),\n    }), {\n        DST: 'P521_XMD:SHA-512_SSWU_RO_',\n        encodeDST: 'P521_XMD:SHA-512_SSWU_NU_',\n        p: p521_CURVE.p,\n        m: 1,\n        k: 256,\n        expand: 'xmd',\n        hash: sha512,\n    });\n})();\n//# sourceMappingURL=nist.js.map","/**\n * NIST secp256r1 aka p256.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {} from \"./abstract/hash-to-curve.js\";\nimport { p256_hasher, p256 as p256n } from \"./nist.js\";\nexport const p256 = p256n;\nexport const secp256r1 = p256n;\nexport const hashToCurve = /* @__PURE__ */ (() => p256_hasher.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => p256_hasher.encodeToCurve)();\n//# sourceMappingURL=p256.js.map","/**\n * NIST secp384r1 aka p384.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {} from \"./abstract/hash-to-curve.js\";\nimport { p384_hasher, p384 as p384n } from \"./nist.js\";\nexport const p384 = p384n;\nexport const secp384r1 = p384n;\nexport const hashToCurve = /* @__PURE__ */ (() => p384_hasher.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => p384_hasher.encodeToCurve)();\n/** @deprecated Use `import { p384_hasher } from \"@noble/curves/nist\"` module. */\n//# sourceMappingURL=p384.js.map","/**\n * NIST secp521r1 aka p521.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {} from \"./abstract/hash-to-curve.js\";\nimport { p521_hasher, p521 as p521n } from \"./nist.js\";\nexport const p521 = p521n;\nexport const secp521r1 = p521n;\nexport const hashToCurve = /* @__PURE__ */ (() => p521_hasher.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => p521_hasher.encodeToCurve)();\n//# sourceMappingURL=p521.js.map","/**\n * Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y².\n * For design rationale of types / exports, see weierstrass module documentation.\n * Untwisted Edwards curves exist, but they aren't used in real-world protocols.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { _validateObject, abool, abytes, aInRange, bytesToHex, bytesToNumberLE, concatBytes, ensureBytes, memoized, numberToBytesLE, randomBytes, } from \"../utils.js\";\nimport { _createCurveFields, normalizeZ, pippenger, wNAF, } from \"./curve.js\";\nimport { Field } from \"./modular.js\";\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\nfunction isEdValidXY(Fp, CURVE, x, y) {\n    const x2 = Fp.sqr(x);\n    const y2 = Fp.sqr(y);\n    const left = Fp.add(Fp.mul(CURVE.a, x2), y2);\n    const right = Fp.add(Fp.ONE, Fp.mul(CURVE.d, Fp.mul(x2, y2)));\n    return Fp.eql(left, right);\n}\nexport function edwards(CURVE, curveOpts = {}) {\n    const { Fp, Fn } = _createCurveFields('edwards', CURVE, curveOpts);\n    const { h: cofactor, n: CURVE_ORDER } = CURVE;\n    _validateObject(curveOpts, {}, { uvRatio: 'function' });\n    // Important:\n    // There are some places where Fp.BYTES is used instead of nByteLength.\n    // So far, everything has been tested with curves of Fp.BYTES == nByteLength.\n    // TODO: test and find curves which behave otherwise.\n    const MASK = _2n << (BigInt(Fn.BYTES * 8) - _1n);\n    const modP = (n) => Fp.create(n); // Function overrides\n    // sqrt(u/v)\n    const uvRatio = curveOpts.uvRatio ||\n        ((u, v) => {\n            try {\n                return { isValid: true, value: Fp.sqrt(Fp.div(u, v)) };\n            }\n            catch (e) {\n                return { isValid: false, value: _0n };\n            }\n        });\n    // Validate whether the passed curve params are valid.\n    // equation ax² + y² = 1 + dx²y² should work for generator point.\n    if (!isEdValidXY(Fp, CURVE, CURVE.Gx, CURVE.Gy))\n        throw new Error('bad curve params: generator point');\n    /**\n     * Asserts coordinate is valid: 0 <= n < MASK.\n     * Coordinates >= Fp.ORDER are allowed for zip215.\n     */\n    function acoord(title, n, banZero = false) {\n        const min = banZero ? _1n : _0n;\n        aInRange('coordinate ' + title, n, min, MASK);\n        return n;\n    }\n    function aextpoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ExtendedPoint expected');\n    }\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    const toAffineMemo = memoized((p, iz) => {\n        const { ex: x, ey: y, ez: z } = p;\n        const is0 = p.is0();\n        if (iz == null)\n            iz = is0 ? _8n : Fp.inv(z); // 8 was chosen arbitrarily\n        const ax = modP(x * iz);\n        const ay = modP(y * iz);\n        const zz = modP(z * iz);\n        if (is0)\n            return { x: _0n, y: _1n };\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return { x: ax, y: ay };\n    });\n    const assertValidMemo = memoized((p) => {\n        const { a, d } = CURVE;\n        if (p.is0())\n            throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n        // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n        // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n        const { ex: X, ey: Y, ez: Z, et: T } = p;\n        const X2 = modP(X * X); // X²\n        const Y2 = modP(Y * Y); // Y²\n        const Z2 = modP(Z * Z); // Z²\n        const Z4 = modP(Z2 * Z2); // Z⁴\n        const aX2 = modP(X2 * a); // aX²\n        const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n        const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n        if (left !== right)\n            throw new Error('bad point: equation left != right (1)');\n        // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n        const XY = modP(X * Y);\n        const ZT = modP(Z * T);\n        if (XY !== ZT)\n            throw new Error('bad point: equation left != right (2)');\n        return true;\n    });\n    // Extended Point works in extended coordinates: (X, Y, Z, T) ∋ (x=X/Z, y=Y/Z, T=xy).\n    // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n    class Point {\n        constructor(ex, ey, ez, et) {\n            this.ex = acoord('x', ex);\n            this.ey = acoord('y', ey);\n            this.ez = acoord('z', ez, true);\n            this.et = acoord('t', et);\n            Object.freeze(this);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        static fromAffine(p) {\n            if (p instanceof Point)\n                throw new Error('extended point not allowed');\n            const { x, y } = p || {};\n            acoord('x', x);\n            acoord('y', y);\n            return new Point(x, y, _1n, modP(x * y));\n        }\n        static normalizeZ(points) {\n            return normalizeZ(Point, 'ez', points);\n        }\n        // Multiscalar Multiplication\n        static msm(points, scalars) {\n            return pippenger(Point, Fn, points, scalars);\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this.precompute(windowSize);\n        }\n        precompute(windowSize = 8, isLazy = true) {\n            wnaf.setWindowSize(this, windowSize);\n            if (!isLazy)\n                this.multiply(_2n); // random number\n            return this;\n        }\n        // Not required for fromHex(), which always creates valid points.\n        // Could be useful for fromAffine().\n        assertValidity() {\n            assertValidMemo(this);\n        }\n        // Compare one point to another.\n        equals(other) {\n            aextpoint(other);\n            const { ex: X1, ey: Y1, ez: Z1 } = this;\n            const { ex: X2, ey: Y2, ez: Z2 } = other;\n            const X1Z2 = modP(X1 * Z2);\n            const X2Z1 = modP(X2 * Z1);\n            const Y1Z2 = modP(Y1 * Z2);\n            const Y2Z1 = modP(Y2 * Z1);\n            return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        negate() {\n            // Flips point sign to a negative one (-x, y in affine coords)\n            return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n        }\n        // Fast algo for doubling Extended Point.\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n        // Cost: 4M + 4S + 1*a + 6add + 1*2.\n        double() {\n            const { a } = CURVE;\n            const { ex: X1, ey: Y1, ez: Z1 } = this;\n            const A = modP(X1 * X1); // A = X12\n            const B = modP(Y1 * Y1); // B = Y12\n            const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n            const D = modP(a * A); // D = a*A\n            const x1y1 = X1 + Y1;\n            const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n            const G = D + B; // G = D+B\n            const F = G - C; // F = G-C\n            const H = D - B; // H = D-B\n            const X3 = modP(E * F); // X3 = E*F\n            const Y3 = modP(G * H); // Y3 = G*H\n            const T3 = modP(E * H); // T3 = E*H\n            const Z3 = modP(F * G); // Z3 = F*G\n            return new Point(X3, Y3, Z3, T3);\n        }\n        // Fast algo for adding 2 Extended Points.\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n        // Cost: 9M + 1*a + 1*d + 7add.\n        add(other) {\n            aextpoint(other);\n            const { a, d } = CURVE;\n            const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n            const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n            const A = modP(X1 * X2); // A = X1*X2\n            const B = modP(Y1 * Y2); // B = Y1*Y2\n            const C = modP(T1 * d * T2); // C = T1*d*T2\n            const D = modP(Z1 * Z2); // D = Z1*Z2\n            const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n            const F = D - C; // F = D-C\n            const G = D + C; // G = D+C\n            const H = modP(B - a * A); // H = B-a*A\n            const X3 = modP(E * F); // X3 = E*F\n            const Y3 = modP(G * H); // Y3 = G*H\n            const T3 = modP(E * H); // T3 = E*H\n            const Z3 = modP(F * G); // Z3 = F*G\n            return new Point(X3, Y3, Z3, T3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        // Constant-time multiplication.\n        multiply(scalar) {\n            const n = scalar;\n            aInRange('scalar', n, _1n, CURVE_ORDER); // 1 <= scalar < L\n            const { p, f } = wnaf.wNAFCached(this, n, Point.normalizeZ);\n            return Point.normalizeZ([p, f])[0];\n        }\n        // Non-constant-time multiplication. Uses double-and-add algorithm.\n        // It's faster, but should only be used when you don't care about\n        // an exposed private key e.g. sig verification.\n        // Does NOT allow scalars higher than CURVE.n.\n        // Accepts optional accumulator to merge with multiply (important for sparse scalars)\n        multiplyUnsafe(scalar, acc = Point.ZERO) {\n            const n = scalar;\n            aInRange('scalar', n, _0n, CURVE_ORDER); // 0 <= scalar < L\n            if (n === _0n)\n                return Point.ZERO;\n            if (this.is0() || n === _1n)\n                return this;\n            return wnaf.wNAFCachedUnsafe(this, n, Point.normalizeZ, acc);\n        }\n        // Checks if point is of small order.\n        // If you add something to small order point, you will have \"dirty\"\n        // point with torsion component.\n        // Multiplies point by cofactor and checks if the result is 0.\n        isSmallOrder() {\n            return this.multiplyUnsafe(cofactor).is0();\n        }\n        // Multiplies point by curve order and checks if the result is 0.\n        // Returns `false` is the point is dirty.\n        isTorsionFree() {\n            return wnaf.wNAFCachedUnsafe(this, CURVE_ORDER).is0();\n        }\n        // Converts Extended point to default (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        toAffine(invertedZ) {\n            return toAffineMemo(this, invertedZ);\n        }\n        clearCofactor() {\n            if (cofactor === _1n)\n                return this;\n            return this.multiplyUnsafe(cofactor);\n        }\n        static fromBytes(bytes, zip215 = false) {\n            abytes(bytes);\n            return this.fromHex(bytes, zip215);\n        }\n        // Converts hash string or Uint8Array to Point.\n        // Uses algo from RFC8032 5.1.3.\n        static fromHex(hex, zip215 = false) {\n            const { d, a } = CURVE;\n            const len = Fp.BYTES;\n            hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n            abool('zip215', zip215);\n            const normed = hex.slice(); // copy again, we'll manipulate it\n            const lastByte = hex[len - 1]; // select last byte\n            normed[len - 1] = lastByte & ~0x80; // clear last bit\n            const y = bytesToNumberLE(normed);\n            // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n            // RFC8032 prohibits >= p, but ZIP215 doesn't\n            // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n            // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n            const max = zip215 ? MASK : Fp.ORDER;\n            aInRange('pointHex.y', y, _0n, max);\n            // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n            // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n            const y2 = modP(y * y); // denominator is always non-0 mod p.\n            const u = modP(y2 - _1n); // u = y² - 1\n            const v = modP(d * y2 - a); // v = d y² + 1.\n            let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n            if (!isValid)\n                throw new Error('Point.fromHex: invalid y coordinate');\n            const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n            const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n            if (!zip215 && x === _0n && isLastByteOdd)\n                // if x=0 and x_0 = 1, fail\n                throw new Error('Point.fromHex: x=0 and x_0=1');\n            if (isLastByteOdd !== isXOdd)\n                x = modP(-x); // if x_0 != x mod 2, set x = p-x\n            return Point.fromAffine({ x, y });\n        }\n        static fromPrivateScalar(scalar) {\n            return Point.BASE.multiply(scalar);\n        }\n        toBytes() {\n            const { x, y } = this.toAffine();\n            const bytes = numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n            bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n            return bytes; // and use the last byte to encode sign of x\n        }\n        /** @deprecated use `toBytes` */\n        toRawBytes() {\n            return this.toBytes();\n        }\n        toHex() {\n            return bytesToHex(this.toBytes());\n        }\n        toString() {\n            return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\n        }\n    }\n    // base / generator point\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    // zero / infinity / identity point\n    Point.ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n    // fields\n    Point.Fp = Fp;\n    Point.Fn = Fn;\n    const wnaf = wNAF(Point, Fn.BYTES * 8); // Fn.BITS?\n    return Point;\n}\n/**\n * Initializes EdDSA signatures over given Edwards curve.\n */\nexport function eddsa(Point, eddsaOpts) {\n    _validateObject(eddsaOpts, {\n        hash: 'function',\n    }, {\n        adjustScalarBytes: 'function',\n        randomBytes: 'function',\n        domain: 'function',\n        prehash: 'function',\n        mapToCurve: 'function',\n    });\n    const { prehash, hash: cHash } = eddsaOpts;\n    const { BASE: G, Fp, Fn } = Point;\n    const CURVE_ORDER = Fn.ORDER;\n    const randomBytes_ = eddsaOpts.randomBytes || randomBytes;\n    const adjustScalarBytes = eddsaOpts.adjustScalarBytes || ((bytes) => bytes); // NOOP\n    const domain = eddsaOpts.domain ||\n        ((data, ctx, phflag) => {\n            abool('phflag', phflag);\n            if (ctx.length || phflag)\n                throw new Error('Contexts/pre-hash are not supported');\n            return data;\n        }); // NOOP\n    function modN(a) {\n        return Fn.create(a);\n    }\n    // Little-endian SHA512 with modulo n\n    function modN_LE(hash) {\n        // Not using Fn.fromBytes: hash can be 2*Fn.BYTES\n        return modN(bytesToNumberLE(hash));\n    }\n    // Get the hashed private scalar per RFC8032 5.1.5\n    function getPrivateScalar(key) {\n        const len = Fp.BYTES;\n        key = ensureBytes('private key', key, len);\n        // Hash private key with curve's hash function to produce uniformingly random input\n        // Check byte lengths: ensure(64, h(ensure(32, key)))\n        const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n        const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n        const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n        const scalar = modN_LE(head); // The actual private scalar\n        return { head, prefix, scalar };\n    }\n    // Convenience method that creates public key from scalar. RFC8032 5.1.5\n    function getExtendedPublicKey(key) {\n        const { head, prefix, scalar } = getPrivateScalar(key);\n        const point = G.multiply(scalar); // Point on Edwards curve aka public key\n        const pointBytes = point.toBytes();\n        return { head, prefix, scalar, point, pointBytes };\n    }\n    // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n    function getPublicKey(privKey) {\n        return getExtendedPublicKey(privKey).pointBytes;\n    }\n    // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n    function hashDomainToScalar(context = Uint8Array.of(), ...msgs) {\n        const msg = concatBytes(...msgs);\n        return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n    }\n    /** Signs message with privateKey. RFC8032 5.1.6 */\n    function sign(msg, privKey, options = {}) {\n        msg = ensureBytes('message', msg);\n        if (prehash)\n            msg = prehash(msg); // for ed25519ph etc.\n        const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n        const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n        const R = G.multiply(r).toBytes(); // R = rG\n        const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n        const s = modN(r + k * scalar); // S = (r + k * s) mod L\n        aInRange('signature.s', s, _0n, CURVE_ORDER); // 0 <= s < l\n        const L = Fp.BYTES;\n        const res = concatBytes(R, numberToBytesLE(s, L));\n        return ensureBytes('result', res, L * 2); // 64-byte signature\n    }\n    const verifyOpts = VERIFY_DEFAULT;\n    /**\n     * Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n     * An extended group equation is checked.\n     */\n    function verify(sig, msg, publicKey, options = verifyOpts) {\n        const { context, zip215 } = options;\n        const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n        sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n        msg = ensureBytes('message', msg);\n        publicKey = ensureBytes('publicKey', publicKey, len);\n        if (zip215 !== undefined)\n            abool('zip215', zip215);\n        if (prehash)\n            msg = prehash(msg); // for ed25519ph, etc\n        const s = bytesToNumberLE(sig.slice(len, 2 * len));\n        let A, R, SB;\n        try {\n            // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n            // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n            // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n            A = Point.fromHex(publicKey, zip215);\n            R = Point.fromHex(sig.slice(0, len), zip215);\n            SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n        }\n        catch (error) {\n            return false;\n        }\n        if (!zip215 && A.isSmallOrder())\n            return false;\n        const k = hashDomainToScalar(context, R.toBytes(), A.toBytes(), msg);\n        const RkA = R.add(A.multiplyUnsafe(k));\n        // Extended group equation\n        // [8][S]B = [8]R + [8][k]A'\n        return RkA.subtract(SB).clearCofactor().is0();\n    }\n    G.precompute(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n    const utils = {\n        getExtendedPublicKey,\n        /** ed25519 priv keys are uniform 32b. No need to check for modulo bias, like in secp256k1. */\n        randomPrivateKey: () => randomBytes_(Fp.BYTES),\n        /**\n         * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n         * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n         * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n         * @param windowSize 2, 4, 8, 16\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            return point.precompute(windowSize, false);\n        },\n    };\n    return { getPublicKey, sign, verify, utils, Point };\n}\nfunction _eddsa_legacy_opts_to_new(c) {\n    const CURVE = {\n        a: c.a,\n        d: c.d,\n        p: c.Fp.ORDER,\n        n: c.n,\n        h: c.h,\n        Gx: c.Gx,\n        Gy: c.Gy,\n    };\n    const Fp = c.Fp;\n    const Fn = Field(CURVE.n, c.nBitLength, true);\n    const curveOpts = { Fp, Fn, uvRatio: c.uvRatio };\n    const eddsaOpts = {\n        hash: c.hash,\n        randomBytes: c.randomBytes,\n        adjustScalarBytes: c.adjustScalarBytes,\n        domain: c.domain,\n        prehash: c.prehash,\n        mapToCurve: c.mapToCurve,\n    };\n    return { CURVE, curveOpts, eddsaOpts };\n}\nfunction _eddsa_new_output_to_legacy(c, eddsa) {\n    const legacy = Object.assign({}, eddsa, { ExtendedPoint: eddsa.Point, CURVE: c });\n    return legacy;\n}\n// TODO: remove. Use eddsa\nexport function twistedEdwards(c) {\n    const { CURVE, curveOpts, eddsaOpts } = _eddsa_legacy_opts_to_new(c);\n    const Point = edwards(CURVE, curveOpts);\n    const EDDSA = eddsa(Point, eddsaOpts);\n    return _eddsa_new_output_to_legacy(c, EDDSA);\n}\n//# sourceMappingURL=edwards.js.map","/**\n * Montgomery curve methods. It's not really whole montgomery curve,\n * just bunch of very specific methods for X25519 / X448 from\n * [RFC 7748](https://www.rfc-editor.org/rfc/rfc7748)\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { _validateObject, aInRange, bytesToNumberLE, ensureBytes, numberToBytesLE, randomBytes, } from \"../utils.js\";\nimport { mod } from \"./modular.js\";\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nfunction validateOpts(curve) {\n    _validateObject(curve, {\n        adjustScalarBytes: 'function',\n        powPminus2: 'function',\n    });\n    return Object.freeze({ ...curve });\n}\nexport function montgomery(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { P, type, adjustScalarBytes, powPminus2, randomBytes: rand } = CURVE;\n    const is25519 = type === 'x25519';\n    if (!is25519 && type !== 'x448')\n        throw new Error('invalid type');\n    const randomBytes_ = rand || randomBytes;\n    const montgomeryBits = is25519 ? 255 : 448;\n    const fieldLen = is25519 ? 32 : 56;\n    const Gu = is25519 ? BigInt(9) : BigInt(5);\n    // RFC 7748 #5:\n    // The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519 and\n    // (156326 - 2) / 4 = 39081 for curve448/X448\n    // const a = is25519 ? 156326n : 486662n;\n    const a24 = is25519 ? BigInt(121665) : BigInt(39081);\n    // RFC: x25519 \"the resulting integer is of the form 2^254 plus\n    // eight times a value between 0 and 2^251 - 1 (inclusive)\"\n    // x448: \"2^447 plus four times a value between 0 and 2^445 - 1 (inclusive)\"\n    const minScalar = is25519 ? _2n ** BigInt(254) : _2n ** BigInt(447);\n    const maxAdded = is25519\n        ? BigInt(8) * _2n ** BigInt(251) - _1n\n        : BigInt(4) * _2n ** BigInt(445) - _1n;\n    const maxScalar = minScalar + maxAdded + _1n; // (inclusive)\n    const modP = (n) => mod(n, P);\n    const GuBytes = encodeU(Gu);\n    function encodeU(u) {\n        return numberToBytesLE(modP(u), fieldLen);\n    }\n    function decodeU(u) {\n        const _u = ensureBytes('u coordinate', u, fieldLen);\n        // RFC: When receiving such an array, implementations of X25519\n        // (but not X448) MUST mask the most significant bit in the final byte.\n        if (is25519)\n            _u[31] &= 127; // 0b0111_1111\n        // RFC: Implementations MUST accept non-canonical values and process them as\n        // if they had been reduced modulo the field prime.  The non-canonical\n        // values are 2^255 - 19 through 2^255 - 1 for X25519 and 2^448 - 2^224\n        // - 1 through 2^448 - 1 for X448.\n        return modP(bytesToNumberLE(_u));\n    }\n    function decodeScalar(scalar) {\n        return bytesToNumberLE(adjustScalarBytes(ensureBytes('scalar', scalar, fieldLen)));\n    }\n    function scalarMult(scalar, u) {\n        const pu = montgomeryLadder(decodeU(u), decodeScalar(scalar));\n        // Some public keys are useless, of low-order. Curve author doesn't think\n        // it needs to be validated, but we do it nonetheless.\n        // https://cr.yp.to/ecdh.html#validate\n        if (pu === _0n)\n            throw new Error('invalid private or public key received');\n        return encodeU(pu);\n    }\n    // Computes public key from private. By doing scalar multiplication of base point.\n    function scalarMultBase(scalar) {\n        return scalarMult(scalar, GuBytes);\n    }\n    // cswap from RFC7748 \"example code\"\n    function cswap(swap, x_2, x_3) {\n        // dummy = mask(swap) AND (x_2 XOR x_3)\n        // Where mask(swap) is the all-1 or all-0 word of the same length as x_2\n        // and x_3, computed, e.g., as mask(swap) = 0 - swap.\n        const dummy = modP(swap * (x_2 - x_3));\n        x_2 = modP(x_2 - dummy); // x_2 = x_2 XOR dummy\n        x_3 = modP(x_3 + dummy); // x_3 = x_3 XOR dummy\n        return { x_2, x_3 };\n    }\n    /**\n     * Montgomery x-only multiplication ladder.\n     * @param pointU u coordinate (x) on Montgomery Curve 25519\n     * @param scalar by which the point would be multiplied\n     * @returns new Point on Montgomery curve\n     */\n    function montgomeryLadder(u, scalar) {\n        aInRange('u', u, _0n, P);\n        aInRange('scalar', scalar, minScalar, maxScalar);\n        const k = scalar;\n        const x_1 = u;\n        let x_2 = _1n;\n        let z_2 = _0n;\n        let x_3 = u;\n        let z_3 = _1n;\n        let swap = _0n;\n        for (let t = BigInt(montgomeryBits - 1); t >= _0n; t--) {\n            const k_t = (k >> t) & _1n;\n            swap ^= k_t;\n            ({ x_2, x_3 } = cswap(swap, x_2, x_3));\n            ({ x_2: z_2, x_3: z_3 } = cswap(swap, z_2, z_3));\n            swap = k_t;\n            const A = x_2 + z_2;\n            const AA = modP(A * A);\n            const B = x_2 - z_2;\n            const BB = modP(B * B);\n            const E = AA - BB;\n            const C = x_3 + z_3;\n            const D = x_3 - z_3;\n            const DA = modP(D * A);\n            const CB = modP(C * B);\n            const dacb = DA + CB;\n            const da_cb = DA - CB;\n            x_3 = modP(dacb * dacb);\n            z_3 = modP(x_1 * modP(da_cb * da_cb));\n            x_2 = modP(AA * BB);\n            z_2 = modP(E * (AA + modP(a24 * E)));\n        }\n        ({ x_2, x_3 } = cswap(swap, x_2, x_3));\n        ({ x_2: z_2, x_3: z_3 } = cswap(swap, z_2, z_3));\n        const z2 = powPminus2(z_2); // `Fp.pow(x, P - _2n)` is much slower equivalent\n        return modP(x_2 * z2); // Return x_2 * (z_2^(p - 2))\n    }\n    return {\n        scalarMult,\n        scalarMultBase,\n        getSharedSecret: (privateKey, publicKey) => scalarMult(privateKey, publicKey),\n        getPublicKey: (privateKey) => scalarMultBase(privateKey),\n        utils: { randomPrivateKey: () => randomBytes_(fieldLen) },\n        GuBytes: GuBytes.slice(),\n    };\n}\n//# sourceMappingURL=montgomery.js.map","/**\n * Edwards448 (not Ed448-Goldilocks) curve with following addons:\n * - X448 ECDH\n * - Decaf cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n * Conforms to RFC 8032 https://www.rfc-editor.org/rfc/rfc8032.html#section-5.2\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { shake256 } from '@noble/hashes/sha3.js';\nimport { abytes, concatBytes, utf8ToBytes, createHasher as wrapConstructor, } from '@noble/hashes/utils.js';\nimport { pippenger } from \"./abstract/curve.js\";\nimport { edwards, twistedEdwards, } from \"./abstract/edwards.js\";\nimport { createHasher, expand_message_xof, } from \"./abstract/hash-to-curve.js\";\nimport { Field, FpInvertBatch, isNegativeLE, mod, pow2 } from \"./abstract/modular.js\";\nimport { montgomery } from \"./abstract/montgomery.js\";\nimport { bytesToHex, bytesToNumberLE, ensureBytes, equalBytes, numberToBytesLE, } from \"./utils.js\";\n// a = 1n\n// d = Fp.neg(39081n)\n// Finite field 2n**448n - 2n**224n - 1n\n// Subgroup order\n// 2n**446n - 13818066809895115352007386748515426880336692474882178609894547503885n\nconst ed448_CURVE = {\n    p: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffff'),\n    n: BigInt('0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffff7cca23e9c44edb49aed63690216cc2728dc58f552378c292ab5844f3'),\n    h: BigInt(4),\n    a: BigInt(1),\n    d: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffffffffffffffffffffffffffffffffffffffffffffffff6756'),\n    Gx: BigInt('0x4f1970c66bed0ded221d15a622bf36da9e146570470f1767ea6de324a3d3a46412ae1af72ab66511433b80e18b00938e2626a82bc70cc05e'),\n    Gy: BigInt('0x693f46716eb6bc248876203756c9c7624bea73736ca3984087789c1e05a0c2d73ad3ff1ce67c39c4fdbd132c4ed7c8ad9808795bf230fa14'),\n};\n// E448 != Edwards448 used in ed448\n// E448 is defined by NIST\n// It's birationally equivalent to edwards448\n// d = 39082/39081\n// Gx = 3/2\nconst E448_CURVE = Object.assign({}, ed448_CURVE, {\n    d: BigInt('0xd78b4bdc7f0daf19f24f38c29373a2ccad46157242a50f37809b1da3412a12e79ccc9c81264cfe9ad080997058fb61c4243cc32dbaa156b9'),\n    Gx: BigInt('0x79a70b2b70400553ae7c9df416c792c61128751ac92969240c25a07d728bdc93e21f7787ed6972249de732f38496cd11698713093e9c04fc'),\n    Gy: BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffff80000000000000000000000000000000000000000000000000000001'),\n});\nexport const E448 = edwards(E448_CURVE);\nconst shake256_114 = /* @__PURE__ */ wrapConstructor(() => shake256.create({ dkLen: 114 }));\nconst shake256_64 = /* @__PURE__ */ wrapConstructor(() => shake256.create({ dkLen: 64 }));\n// prettier-ignore\nconst _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4), _11n = BigInt(11);\n// prettier-ignore\nconst _22n = BigInt(22), _44n = BigInt(44), _88n = BigInt(88), _223n = BigInt(223);\n// powPminus3div4 calculates z = x^k mod p, where k = (p-3)/4.\n// Used for efficient square root calculation.\n// ((P-3)/4).toString(2) would produce bits [223x 1, 0, 222x 1]\nfunction ed448_pow_Pminus3div4(x) {\n    const P = ed448_CURVE.p;\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b222 = (pow2(b220, _2n, P) * b2) % P;\n    const b223 = (pow2(b222, _1n, P) * x) % P;\n    return (pow2(b223, _223n, P) * b222) % P;\n}\nfunction adjustScalarBytes(bytes) {\n    // Section 5: Likewise, for X448, set the two least significant bits of the first byte to 0, and the most\n    // significant bit of the last byte to 1.\n    bytes[0] &= 252; // 0b11111100\n    // and the most significant bit of the last byte to 1.\n    bytes[55] |= 128; // 0b10000000\n    // NOTE: is is NOOP for 56 bytes scalars (X25519/X448)\n    bytes[56] = 0; // Byte outside of group (456 buts vs 448 bits)\n    return bytes;\n}\n// Constant-time ratio of u to v. Allows to combine inversion and square root u/√v.\n// Uses algo from RFC8032 5.1.3.\nfunction uvRatio(u, v) {\n    const P = ed448_CURVE.p;\n    // https://www.rfc-editor.org/rfc/rfc8032#section-5.2.3\n    // To compute the square root of (u/v), the first step is to compute the\n    //   candidate root x = (u/v)^((p+1)/4).  This can be done using the\n    // following trick, to use a single modular powering for both the\n    // inversion of v and the square root:\n    // x = (u/v)^((p+1)/4)   = u³v(u⁵v³)^((p-3)/4)   (mod p)\n    const u2v = mod(u * u * v, P); // u²v\n    const u3v = mod(u2v * u, P); // u³v\n    const u5v3 = mod(u3v * u2v * v, P); // u⁵v³\n    const root = ed448_pow_Pminus3div4(u5v3);\n    const x = mod(u3v * root, P);\n    // Verify that root is exists\n    const x2 = mod(x * x, P); // x²\n    // If vx² = u, the recovered x-coordinate is x.  Otherwise, no\n    // square root exists, and the decoding fails.\n    return { isValid: mod(x2 * v, P) === u, value: x };\n}\n// Finite field 2n**448n - 2n**224n - 1n\nconst Fp = /* @__PURE__ */ (() => Field(ed448_CURVE.p, 456, true))();\n// RFC 7748 has 56-byte keys, RFC 8032 has 57-byte keys\n// SHAKE256(dom4(phflag,context)||x, 114)\nconst ED448_DEF = /* @__PURE__ */ (() => ({\n    ...ed448_CURVE,\n    Fp,\n    nBitLength: 456,\n    hash: shake256_114,\n    adjustScalarBytes,\n    // dom4\n    domain: (data, ctx, phflag) => {\n        if (ctx.length > 255)\n            throw new Error('context must be smaller than 255, got: ' + ctx.length);\n        return concatBytes(utf8ToBytes('SigEd448'), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);\n    },\n    uvRatio,\n}))();\n/**\n * ed448 EdDSA curve and methods.\n * @example\n * import { ed448 } from '@noble/curves/ed448';\n * const priv = ed448.utils.randomPrivateKey();\n * const pub = ed448.getPublicKey(priv);\n * const msg = new TextEncoder().encode('whatsup');\n * const sig = ed448.sign(msg, priv);\n * ed448.verify(sig, msg, pub);\n */\nexport const ed448 = twistedEdwards(ED448_DEF);\n// NOTE: there is no ed448ctx, since ed448 supports ctx by default\nexport const ed448ph = /* @__PURE__ */ (() => twistedEdwards({\n    ...ED448_DEF,\n    prehash: shake256_64,\n}))();\n/**\n * ECDH using curve448 aka x448.\n * x448 has 56-byte keys as per RFC 7748, while\n * ed448 has 57-byte keys as per RFC 8032.\n */\nexport const x448 = /* @__PURE__ */ (() => {\n    const P = ed448_CURVE.p;\n    return montgomery({\n        P,\n        type: 'x448',\n        powPminus2: (x) => {\n            const Pminus3div4 = ed448_pow_Pminus3div4(x);\n            const Pminus3 = pow2(Pminus3div4, _2n, P);\n            return mod(Pminus3 * x, P); // Pminus3 * x = Pminus2\n        },\n        adjustScalarBytes,\n    });\n})();\n/**\n * Converts edwards448 public key to x448 public key. Uses formula:\n * * `(u, v) = ((y-1)/(y+1), sqrt(156324)*u/x)`\n * * `(x, y) = (sqrt(156324)*u/v, (1+u)/(1-u))`\n * @example\n *   const aPub = ed448.getPublicKey(utils.randomPrivateKey());\n *   x448.getSharedSecret(edwardsToMontgomery(aPub), edwardsToMontgomery(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub) {\n    const bpub = ensureBytes('pub', edwardsPub);\n    const { y } = ed448.Point.fromHex(bpub);\n    const _1n = BigInt(1);\n    return Fp.toBytes(Fp.create((y - _1n) * Fp.inv(y + _1n)));\n}\nexport const edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n// TODO: add edwardsToMontgomeryPriv, similar to ed25519 version\n// Hash To Curve Elligator2 Map\nconst ELL2_C1 = /* @__PURE__ */ (() => (Fp.ORDER - BigInt(3)) / BigInt(4))(); // 1. c1 = (q - 3) / 4         # Integer arithmetic\nconst ELL2_J = /* @__PURE__ */ BigInt(156326);\nfunction map_to_curve_elligator2_curve448(u) {\n    let tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    let e1 = Fp.eql(tv1, Fp.ONE); // 2.   e1 = tv1 == 1\n    tv1 = Fp.cmov(tv1, Fp.ZERO, e1); // 3.  tv1 = CMOV(tv1, 0, e1)  # If Z * u^2 == -1, set tv1 = 0\n    let xd = Fp.sub(Fp.ONE, tv1); // 4.   xd = 1 - tv1\n    let x1n = Fp.neg(ELL2_J); // 5.  x1n = -J\n    let tv2 = Fp.sqr(xd); // 6.  tv2 = xd^2\n    let gxd = Fp.mul(tv2, xd); // 7.  gxd = tv2 * xd          # gxd = xd^3\n    let gx1 = Fp.mul(tv1, Fp.neg(ELL2_J)); // 8.  gx1 = -J * tv1          # x1n + J * xd\n    gx1 = Fp.mul(gx1, x1n); // 9.  gx1 = gx1 * x1n         # x1n^2 + J * x1n * xd\n    gx1 = Fp.add(gx1, tv2); // 10. gx1 = gx1 + tv2         # x1n^2 + J * x1n * xd + xd^2\n    gx1 = Fp.mul(gx1, x1n); // 11. gx1 = gx1 * x1n         # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n    let tv3 = Fp.sqr(gxd); // 12. tv3 = gxd^2\n    tv2 = Fp.mul(gx1, gxd); // 13. tv2 = gx1 * gxd         # gx1 * gxd\n    tv3 = Fp.mul(tv3, tv2); // 14. tv3 = tv3 * tv2         # gx1 * gxd^3\n    let y1 = Fp.pow(tv3, ELL2_C1); // 15.  y1 = tv3^c1            # (gx1 * gxd^3)^((p - 3) / 4)\n    y1 = Fp.mul(y1, tv2); // 16.  y1 = y1 * tv2          # gx1 * gxd * (gx1 * gxd^3)^((p - 3) / 4)\n    let x2n = Fp.mul(x1n, Fp.neg(tv1)); // 17. x2n = -tv1 * x1n        # x2 = x2n / xd = -1 * u^2 * x1n / xd\n    let y2 = Fp.mul(y1, u); // 18.  y2 = y1 * u\n    y2 = Fp.cmov(y2, Fp.ZERO, e1); // 19.  y2 = CMOV(y2, 0, e1)\n    tv2 = Fp.sqr(y1); // 20. tv2 = y1^2\n    tv2 = Fp.mul(tv2, gxd); // 21. tv2 = tv2 * gxd\n    let e2 = Fp.eql(tv2, gx1); // 22.  e2 = tv2 == gx1\n    let xn = Fp.cmov(x2n, x1n, e2); // 23.  xn = CMOV(x2n, x1n, e2)  # If e2, x = x1, else x = x2\n    let y = Fp.cmov(y2, y1, e2); // 24.   y = CMOV(y2, y1, e2)    # If e2, y = y1, else y = y2\n    let e3 = Fp.isOdd(y); // 25.  e3 = sgn0(y) == 1        # Fix sign of y\n    y = Fp.cmov(y, Fp.neg(y), e2 !== e3); // 26.   y = CMOV(y, -y, e2 XOR e3)\n    return { xn, xd, yn: y, yd: Fp.ONE }; // 27. return (xn, xd, y, 1)\n}\nfunction map_to_curve_elligator2_edwards448(u) {\n    let { xn, xd, yn, yd } = map_to_curve_elligator2_curve448(u); // 1. (xn, xd, yn, yd) = map_to_curve_elligator2_curve448(u)\n    let xn2 = Fp.sqr(xn); // 2.  xn2 = xn^2\n    let xd2 = Fp.sqr(xd); // 3.  xd2 = xd^2\n    let xd4 = Fp.sqr(xd2); // 4.  xd4 = xd2^2\n    let yn2 = Fp.sqr(yn); // 5.  yn2 = yn^2\n    let yd2 = Fp.sqr(yd); // 6.  yd2 = yd^2\n    let xEn = Fp.sub(xn2, xd2); // 7.  xEn = xn2 - xd2\n    let tv2 = Fp.sub(xEn, xd2); // 8.  tv2 = xEn - xd2\n    xEn = Fp.mul(xEn, xd2); // 9.  xEn = xEn * xd2\n    xEn = Fp.mul(xEn, yd); // 10. xEn = xEn * yd\n    xEn = Fp.mul(xEn, yn); // 11. xEn = xEn * yn\n    xEn = Fp.mul(xEn, _4n); // 12. xEn = xEn * 4\n    tv2 = Fp.mul(tv2, xn2); // 13. tv2 = tv2 * xn2\n    tv2 = Fp.mul(tv2, yd2); // 14. tv2 = tv2 * yd2\n    let tv3 = Fp.mul(yn2, _4n); // 15. tv3 = 4 * yn2\n    let tv1 = Fp.add(tv3, yd2); // 16. tv1 = tv3 + yd2\n    tv1 = Fp.mul(tv1, xd4); // 17. tv1 = tv1 * xd4\n    let xEd = Fp.add(tv1, tv2); // 18. xEd = tv1 + tv2\n    tv2 = Fp.mul(tv2, xn); // 19. tv2 = tv2 * xn\n    let tv4 = Fp.mul(xn, xd4); // 20. tv4 = xn * xd4\n    let yEn = Fp.sub(tv3, yd2); // 21. yEn = tv3 - yd2\n    yEn = Fp.mul(yEn, tv4); // 22. yEn = yEn * tv4\n    yEn = Fp.sub(yEn, tv2); // 23. yEn = yEn - tv2\n    tv1 = Fp.add(xn2, xd2); // 24. tv1 = xn2 + xd2\n    tv1 = Fp.mul(tv1, xd2); // 25. tv1 = tv1 * xd2\n    tv1 = Fp.mul(tv1, xd); // 26. tv1 = tv1 * xd\n    tv1 = Fp.mul(tv1, yn2); // 27. tv1 = tv1 * yn2\n    tv1 = Fp.mul(tv1, BigInt(-2)); // 28. tv1 = -2 * tv1\n    let yEd = Fp.add(tv2, tv1); // 29. yEd = tv2 + tv1\n    tv4 = Fp.mul(tv4, yd2); // 30. tv4 = tv4 * yd2\n    yEd = Fp.add(yEd, tv4); // 31. yEd = yEd + tv4\n    tv1 = Fp.mul(xEd, yEd); // 32. tv1 = xEd * yEd\n    let e = Fp.eql(tv1, Fp.ZERO); // 33.   e = tv1 == 0\n    xEn = Fp.cmov(xEn, Fp.ZERO, e); // 34. xEn = CMOV(xEn, 0, e)\n    xEd = Fp.cmov(xEd, Fp.ONE, e); // 35. xEd = CMOV(xEd, 1, e)\n    yEn = Fp.cmov(yEn, Fp.ONE, e); // 36. yEn = CMOV(yEn, 1, e)\n    yEd = Fp.cmov(yEd, Fp.ONE, e); // 37. yEd = CMOV(yEd, 1, e)\n    const inv = FpInvertBatch(Fp, [xEd, yEd], true); // batch division\n    return { x: Fp.mul(xEn, inv[0]), y: Fp.mul(yEn, inv[1]) }; // 38. return (xEn, xEd, yEn, yEd)\n}\nexport const ed448_hasher = /* @__PURE__ */ (() => createHasher(ed448.Point, (scalars) => map_to_curve_elligator2_edwards448(scalars[0]), {\n    DST: 'edwards448_XOF:SHAKE256_ELL2_RO_',\n    encodeDST: 'edwards448_XOF:SHAKE256_ELL2_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 224,\n    expand: 'xof',\n    hash: shake256,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => ed448_hasher.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => ed448_hasher.encodeToCurve)();\nfunction adecafp(other) {\n    if (!(other instanceof DcfPoint))\n        throw new Error('DecafPoint expected');\n}\n// 1-d\nconst ONE_MINUS_D = /* @__PURE__ */ BigInt('39082');\n// 1-2d\nconst ONE_MINUS_TWO_D = /* @__PURE__ */ BigInt('78163');\n// √(-d)\nconst SQRT_MINUS_D = /* @__PURE__ */ BigInt('98944233647732219769177004876929019128417576295529901074099889598043702116001257856802131563896515373927712232092845883226922417596214');\n// 1 / √(-d)\nconst INVSQRT_MINUS_D = /* @__PURE__ */ BigInt('315019913931389607337177038330951043522456072897266928557328499619017160722351061360252776265186336876723201881398623946864393857820716');\n// Calculates 1/√(number)\nconst invertSqrt = (number) => uvRatio(_1n, number);\nconst MAX_448B = /* @__PURE__ */ BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nconst bytes448ToNumberLE = (bytes) => Fp.create(bytesToNumberLE(bytes) & MAX_448B);\n/**\n * Elligator map for hash-to-curve of decaf448.\n * Described in [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#appendix-C)\n * and [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-element-derivation-2).\n */\nfunction calcElligatorDecafMap(r0) {\n    const { d } = ed448.CURVE;\n    const P = Fp.ORDER;\n    const mod = Fp.create;\n    const r = mod(-(r0 * r0)); // 1\n    const u0 = mod(d * (r - _1n)); // 2\n    const u1 = mod((u0 + _1n) * (u0 - r)); // 3\n    const { isValid: was_square, value: v } = uvRatio(ONE_MINUS_TWO_D, mod((r + _1n) * u1)); // 4\n    let v_prime = v; // 5\n    if (!was_square)\n        v_prime = mod(r0 * v);\n    let sgn = _1n; // 6\n    if (!was_square)\n        sgn = mod(-_1n);\n    const s = mod(v_prime * (r + _1n)); // 7\n    let s_abs = s;\n    if (isNegativeLE(s, P))\n        s_abs = mod(-s);\n    const s2 = s * s;\n    const W0 = mod(s_abs * _2n); // 8\n    const W1 = mod(s2 + _1n); // 9\n    const W2 = mod(s2 - _1n); // 10\n    const W3 = mod(v_prime * s * (r - _1n) * ONE_MINUS_TWO_D + sgn); // 11\n    return new ed448.Point(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n/**\n * Each ed448/ExtendedPoint has 4 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Decaf was created to solve this.\n * Decaf point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * See [RFC9496](https://www.rfc-editor.org/rfc/rfc9496).\n */\nclass DcfPoint {\n    // Private property to discourage combining ExtendedPoint + DecafPoint\n    // Always use Decaf encoding/decoding instead.\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static fromAffine(ap) {\n        return new DcfPoint(ed448.Point.fromAffine(ap));\n    }\n    /**\n     * Takes uniform output of 112-byte hash function like shake256 and converts it to `DecafPoint`.\n     * The hash-to-group operation applies Elligator twice and adds the results.\n     * **Note:** this is one-way map, there is no conversion from point to hash.\n     * Described in [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#appendix-C)\n     * and [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-element-derivation-2).\n     * @param hex 112-byte output of a hash function\n     */\n    static hashToCurve(hex) {\n        hex = ensureBytes('decafHash', hex, 112);\n        const r1 = bytes448ToNumberLE(hex.slice(0, 56));\n        const R1 = calcElligatorDecafMap(r1);\n        const r2 = bytes448ToNumberLE(hex.slice(56, 112));\n        const R2 = calcElligatorDecafMap(r2);\n        return new DcfPoint(R1.add(R2));\n    }\n    static fromBytes(bytes) {\n        abytes(bytes);\n        return this.fromHex(bytes);\n    }\n    /**\n     * Converts decaf-encoded string to decaf point.\n     * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-decode-2).\n     * @param hex Decaf-encoded 56 bytes. Not every 56-byte string is valid decaf encoding\n     */\n    static fromHex(hex) {\n        hex = ensureBytes('decafHex', hex, 56);\n        const { d } = ed448.CURVE;\n        const P = Fp.ORDER;\n        const mod = Fp.create;\n        const emsg = 'DecafPoint.fromHex: the hex is not valid encoding of DecafPoint';\n        const s = bytes448ToNumberLE(hex);\n        // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n        // 2. Check that s is non-negative, or else abort\n        if (!equalBytes(numberToBytesLE(s, 56), hex) || isNegativeLE(s, P))\n            throw new Error(emsg);\n        const s2 = mod(s * s); // 1\n        const u1 = mod(_1n + s2); // 2\n        const u1sq = mod(u1 * u1);\n        const u2 = mod(u1sq - _4n * d * s2); // 3\n        const { isValid, value: invsqrt } = invertSqrt(mod(u2 * u1sq)); // 4\n        let u3 = mod((s + s) * invsqrt * u1 * SQRT_MINUS_D); // 5\n        if (isNegativeLE(u3, P))\n            u3 = mod(-u3);\n        const x = mod(u3 * invsqrt * u2 * INVSQRT_MINUS_D); // 6\n        const y = mod((_1n - s2) * invsqrt * u1); // 7\n        const t = mod(x * y); // 8\n        if (!isValid)\n            throw new Error(emsg);\n        return new DcfPoint(new ed448.Point(x, y, _1n, t));\n    }\n    static msm(points, scalars) {\n        const Fn = Field(ed448.CURVE.n, ed448.CURVE.nBitLength);\n        return pippenger(DcfPoint, Fn, points, scalars);\n    }\n    /**\n     * Encodes decaf point to Uint8Array.\n     * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-encode-2).\n     */\n    toBytes() {\n        let { ex: x, ey: _y, ez: z, et: t } = this.ep;\n        const P = Fp.ORDER;\n        const mod = Fp.create;\n        const u1 = mod(mod(x + t) * mod(x - t)); // 1\n        const x2 = mod(x * x);\n        const { value: invsqrt } = invertSqrt(mod(u1 * ONE_MINUS_D * x2)); // 2\n        let ratio = mod(invsqrt * u1 * SQRT_MINUS_D); // 3\n        if (isNegativeLE(ratio, P))\n            ratio = mod(-ratio);\n        const u2 = mod(INVSQRT_MINUS_D * ratio * z - t); // 4\n        let s = mod(ONE_MINUS_D * invsqrt * x * u2); // 5\n        if (isNegativeLE(s, P))\n            s = mod(-s);\n        return numberToBytesLE(s, 56);\n    }\n    /** @deprecated use `toBytes` */\n    toRawBytes() {\n        return this.toBytes();\n    }\n    toHex() {\n        return bytesToHex(this.toBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    /**\n     * Compare one point to another.\n     * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-equals-2).\n     */\n    equals(other) {\n        adecafp(other);\n        const { ex: X1, ey: Y1 } = this.ep;\n        const { ex: X2, ey: Y2 } = other.ep;\n        const mod = Fp.create;\n        // (x1 * y2 == y1 * x2)\n        return mod(X1 * Y2) === mod(Y1 * X2);\n    }\n    add(other) {\n        adecafp(other);\n        return new DcfPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        adecafp(other);\n        return new DcfPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new DcfPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new DcfPoint(this.ep.multiplyUnsafe(scalar));\n    }\n    double() {\n        return new DcfPoint(this.ep.double());\n    }\n    negate() {\n        return new DcfPoint(this.ep.negate());\n    }\n}\n/**\n * Wrapper over Edwards Point for decaf448 from\n * [RFC9496](https://www.rfc-editor.org/rfc/rfc9496).\n */\nexport const DecafPoint = /* @__PURE__ */ (() => {\n    // decaf448 base point is ed448 base x 2\n    // https://github.com/dalek-cryptography/curve25519-dalek/blob/59837c6ecff02b77b9d5ff84dbc239d0cf33ef90/vendor/ristretto.sage#L699\n    if (!DcfPoint.BASE)\n        DcfPoint.BASE = new DcfPoint(ed448.Point.BASE).multiply(_2n);\n    if (!DcfPoint.ZERO)\n        DcfPoint.ZERO = new DcfPoint(ed448.Point.ZERO);\n    return DcfPoint;\n})();\n/**\n * hash-to-curve for decaf448.\n * Described in [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#appendix-C).\n */\nexport const hashToDecaf448 = (msg, options) => {\n    const d = options.DST;\n    const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n    const uniform_bytes = expand_message_xof(msg, DST, 112, 224, shake256);\n    const P = DcfPoint.hashToCurve(uniform_bytes);\n    return P;\n};\nexport const hash_to_decaf448 = hashToDecaf448; // legacy\n//# sourceMappingURL=ed448.js.map","/**\n * SECG secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Belongs to Koblitz curves: it has efficiently-computable GLV endomorphism ψ,\n * check out {@link EndomorphismOpts}. Seems to be rigid (not backdoored).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha2.js';\nimport { randomBytes } from '@noble/hashes/utils.js';\nimport { createCurve } from \"./_shortw_utils.js\";\nimport { createHasher, isogenyMap, } from \"./abstract/hash-to-curve.js\";\nimport { Field, mod, pow2 } from \"./abstract/modular.js\";\nimport { mapToCurveSimpleSWU, } from \"./abstract/weierstrass.js\";\nimport { aInRange, bytesToNumberBE, concatBytes, ensureBytes, inRange, numberToBytesBE, } from \"./utils.js\";\n// Seems like generator was produced from some seed:\n// `Point.BASE.multiply(Point.Fn.inv(2n, N)).toAffine().x`\n// // gives short x 0x3b78ce563f89a0ed9414f5aa28ad0d96d6795f9c63n\nconst secp256k1_CURVE = {\n    p: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: BigInt(1),\n    a: BigInt(0),\n    b: BigInt(7),\n    Gx: BigInt('0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),\n    Gy: BigInt('0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8'),\n};\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1_CURVE.p;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fpk1.eql(Fpk1.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fpk1 = Field(secp256k1_CURVE.p, undefined, undefined, { sqrt: sqrtMod });\n/**\n * secp256k1 curve, ECDSA and ECDH methods.\n *\n * Field: `2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n`\n *\n * @example\n * ```js\n * import { secp256k1 } from '@noble/curves/secp256k1';\n * const priv = secp256k1.utils.randomPrivateKey();\n * const pub = secp256k1.getPublicKey(priv);\n * const msg = new Uint8Array(32).fill(1); // message hash (not message) in ecdsa\n * const sig = secp256k1.sign(msg, priv); // `{prehash: true}` option is available\n * const isValid = secp256k1.verify(sig, msg, pub) === true;\n * ```\n */\nexport const secp256k1 = createCurve({\n    ...secp256k1_CURVE,\n    Fp: Fpk1,\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    endo: {\n        // Endomorphism, see above\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1_CURVE.n;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1_CURVE.p);\nconst modN = (x) => mod(x, secp256k1_CURVE.n);\nconst Point = /* @__PURE__ */ (() => secp256k1.Point)();\nconst hasEven = (y) => y % _2n === _0n;\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = hasEven(p.y) ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    aInRange('x', x, _1n, secp256k1_CURVE.p); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (!hasEven(y))\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = Point.fromAffine({ x, y }); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!inRange(r, _1n, secp256k1_CURVE.p))\n            return false;\n        const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!inRange(s, _1n, secp256k1_CURVE.n))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        // R = s⋅G - e⋅P, where -eP == (n-e)P\n        const R = Point.BASE.multiplyUnsafe(s).add(P.multiplyUnsafe(modN(-e)));\n        const { x, y } = R.toAffine();\n        // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n        if (R.is0() || !hasEven(y) || x !== r)\n            return false;\n        return true;\n    }\n    catch (error) {\n        return false;\n    }\n}\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * ```js\n * import { schnorr } from '@noble/curves/secp256k1';\n * const priv = schnorr.utils.randomPrivateKey();\n * const pub = schnorr.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, priv);\n * const isValid = schnorr.verify(sig, msg, pub);\n * ```\n */\nexport const schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fpk1, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11')),\n}))();\n/** Hashing / encoding to secp256k1 points / field. RFC 9380 methods. */\nexport const secp256k1_hasher = /* @__PURE__ */ (() => createHasher(secp256k1.Point, (scalars) => {\n    const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fpk1.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => secp256k1_hasher.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => secp256k1_hasher.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map","import { createCurve } from '@noble/curves/_shortw_utils';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { Field } from '@noble/curves/abstract/modular';\n\n// brainpoolP256r1: https://datatracker.ietf.org/doc/html/rfc5639#section-3.4\n\n// eslint-disable-next-line new-cap\nconst Fp = Field(BigInt('0xa9fb57dba1eea9bc3e660a909d838d726e3bf623d52620282013481d1f6e5377'));\nconst CURVE_A = Fp.create(BigInt('0x7d5a0975fc2c3057eef67530417affe7fb8055c126dc5c6ce94a4b44f330b5d9'));\nconst CURVE_B = BigInt('0x26dc5c6ce94a4b44f330b5d9bbd77cbf958416295cf7e1ce6bccdc18ff8c07b6');\n\n// prettier-ignore\nexport const brainpoolP256r1 = createCurve({\n  a: CURVE_A, // Equation params: a, b\n  b: CURVE_B,\n  Fp,\n  // Curve order (q), total count of valid points in the field\n  n: BigInt('0xa9fb57dba1eea9bc3e660a909d838d718c397aa3b561a6f7901e0e82974856a7'),\n  // Base (generator) point (x, y)\n  Gx: BigInt('0x8bd2aeb9cb7e57cb2c4b482ffc81b7afb9de27e1e3bd23c23a4453bd9ace3262'),\n  Gy: BigInt('0x547ef835c3dac4fd97f8461a14611dc9c27745132ded8e545c1d54c72f046997'),\n  h: BigInt(1),\n  lowS: false\n} as const, sha256);\n","import { createCurve } from '@noble/curves/_shortw_utils';\nimport { sha384 } from '@noble/hashes/sha512';\nimport { Field } from '@noble/curves/abstract/modular';\n\n// brainpoolP384 r1: https://datatracker.ietf.org/doc/html/rfc5639#section-3.6\n\n// eslint-disable-next-line new-cap\nconst Fp = Field(BigInt('0x8cb91e82a3386d280f5d6f7e50e641df152f7109ed5456b412b1da197fb71123acd3a729901d1a71874700133107ec53'));\nconst CURVE_A = Fp.create(BigInt('0x7bc382c63d8c150c3c72080ace05afa0c2bea28e4fb22787139165efba91f90f8aa5814a503ad4eb04a8c7dd22ce2826'));\nconst CURVE_B = BigInt('0x04a8c7dd22ce28268b39b55416f0447c2fb77de107dcd2a62e880ea53eeb62d57cb4390295dbc9943ab78696fa504c11');\n\n// prettier-ignore\nexport const brainpoolP384r1 = createCurve({\n  a: CURVE_A, // Equation params: a, b\n  b: CURVE_B,\n  Fp,\n  // Curve order (q), total count of valid points in the field\n  n: BigInt('0x8cb91e82a3386d280f5d6f7e50e641df152f7109ed5456b31f166e6cac0425a7cf3ab6af6b7fc3103b883202e9046565'),\n  // Base (generator) point (x, y)\n  Gx: BigInt('0x1d1c64f068cf45ffa2a63a81b7c13f6b8847a3e77ef14fe3db7fcafe0cbd10e8e826e03436d646aaef87b2e247d4af1e'),\n  Gy: BigInt('0x8abe1d7520f9c2a45cb1eb8e95cfd55262b70b29feec5864e19c054ff99129280e4646217791811142820341263c5315'),\n  h: BigInt(1),\n  lowS: false\n} as const, sha384);\n","import { createCurve } from '@noble/curves/_shortw_utils';\nimport { sha512 } from '@noble/hashes/sha512';\nimport { Field } from '@noble/curves/abstract/modular';\n\n// brainpoolP512r1: https://datatracker.ietf.org/doc/html/rfc5639#section-3.7\n\n// eslint-disable-next-line new-cap\nconst Fp = Field(BigInt('0xaadd9db8dbe9c48b3fd4e6ae33c9fc07cb308db3b3c9d20ed6639cca703308717d4d9b009bc66842aecda12ae6a380e62881ff2f2d82c68528aa6056583a48f3'));\nconst CURVE_A = Fp.create(BigInt('0x7830a3318b603b89e2327145ac234cc594cbdd8d3df91610a83441caea9863bc2ded5d5aa8253aa10a2ef1c98b9ac8b57f1117a72bf2c7b9e7c1ac4d77fc94ca'));\nconst CURVE_B = BigInt('0x3df91610a83441caea9863bc2ded5d5aa8253aa10a2ef1c98b9ac8b57f1117a72bf2c7b9e7c1ac4d77fc94cadc083e67984050b75ebae5dd2809bd638016f723');\n\n// prettier-ignore\nexport const brainpoolP512r1 = createCurve({\n  a: CURVE_A, // Equation params: a, b\n  b: CURVE_B,\n  Fp,\n  // Curve order (q), total count of valid points in the field\n  n: BigInt('0xaadd9db8dbe9c48b3fd4e6ae33c9fc07cb308db3b3c9d20ed6639cca70330870553e5c414ca92619418661197fac10471db1d381085ddaddb58796829ca90069'),\n  // Base (generator) point (x, y)\n  Gx: BigInt('0x81aee4bdd82ed9645a21322e9c4c6a9385ed9f70b5d916c1b43b62eef4d0098eff3b1f78e2d0d48d50d1687b93b97d5f7c6d5047406a5e688b352209bcb9f822'),\n  Gy: BigInt('0x7dde385d566332ecc0eabfa9cf7822fdf209f70024a57b1aa000c55b881f8111b2dcde494a5f485e5bca4bd88a2763aed1ca2b2fa8f0540678cd1e0f3ad80892'),\n  h: BigInt(1),\n  lowS: false\n} as const, sha512);\n","/**\n * This file is needed to dynamic import the noble-curves.\n * Separate dynamic imports are not convenient as they result in too many chunks,\n * which share a lot of code anyway.\n */\n\nimport { p256 as nistP256 } from '@noble/curves/p256';\nimport { p384 as nistP384 } from '@noble/curves/p384';\nimport { p521 as nistP521 } from '@noble/curves/p521';\nimport { x448, ed448 } from '@noble/curves/ed448';\nimport { secp256k1 } from '@noble/curves/secp256k1';\nimport { brainpoolP256r1 } from './brainpool/brainpoolP256r1';\nimport { brainpoolP384r1 } from './brainpool/brainpoolP384r1';\nimport { brainpoolP512r1 } from './brainpool/brainpoolP512r1';\n\nexport const nobleCurves = new Map(Object.entries({\n  nistP256,\n  nistP384,\n  nistP521,\n  brainpoolP256r1,\n  brainpoolP384r1,\n  brainpoolP512r1,\n  secp256k1,\n  x448,\n  ed448\n}));\n\n"],"names":["_0n","BigInt","_1n","abool","title","value","Error","numberToHexUnpadded","num","hex","toString","length","hexToNumber","bytesToNumberBE","bytes","bytesToHex_","bytesToNumberLE","abytes_","Uint8Array","from","reverse","numberToBytesBE","n","len","hexToBytes_","padStart","numberToBytesLE","ensureBytes","expectedLength","res","e","isBytes_","isPosBig","aInRange","min","max","inRange","bitMask","_validateObject","object","fields","optFields","checkField","fieldName","expectedType","isOpt","val","undefined","current","Object","entries","forEach","k","v","memoized","fn","map","WeakMap","arg","args","get","computed","set","_2n","_3n","_4n","_5n","_8n","mod","a","b","result","pow2","x","power","modulo","invert","number","u","r","m","sqrt3mod4","Fp","p1div4","ORDER","root","pow","eql","sqr","sqrt5mod8","p5div8","n2","mul","nv","i","sub","ONE","FpSqrt","P","Q","S","Z","_Fp","Field","FpLegendre","cc","Q1div2","is0","M","c","t","R","ZERO","t_tmp","exponent","tonelliShanks","FIELD_FIELDS","FpInvertBatch","nums","passZero","inverted","Array","fill","multipliedAcc","reduce","acc","invertedAcc","inv","reduceRight","p1mod2","powered","yes","zero","no","neg","bitLenOrOpts","isLE","opts","_nbitLength","_sqrt","sqrt","_opts","BITS","nBitLength","nByteLength","BYTES","anumber","_nBitLength","Math","ceil","nLength","sqrtP","f","freeze","MASK","create","isValid","isValidNot0","isOdd","lhs","rhs","add","p","d","FpPow","div","sqrN","addN","subN","mulN","toBytes","fromBytes","invertBatch","lst","cmov","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","HMAC","Hash","constructor","hash","_key","super","this","finished","destroyed","ahash","key","iHash","update","blockLen","outputLen","pad","digest","oHash","clean","buf","aexists","digestInto","out","abytes","destroy","_cloneInto","to","getPrototypeOf","clone","hmac","message","negateCt","condition","item","negate","normalizeZ","property","points","getz","pz","ez","toInv","toAffine","fromAffine","validateW","W","bits","Number","isSafeInteger","calcWOpts","scalarBits","maxNumber","windows","windowSize","mask","shiftBy","calcOffsets","window","wOpts","wbits","nextN","offsetStart","offset","abs","isZero","isNeg","isNegF","offsetF","pointPrecomputes","pointWindowSizes","getW","assert0","wNAF","constTimeNegate","hasPrecomputes","elm","unsafeLadder","double","precomputeWindow","base","push","precomputes","BASE","wo","wNAFUnsafe","getPrecomputes","transform","comp","wNAFCached","wNAFCachedUnsafe","prev","setWindowSize","delete","pippenger","fieldN","scalars","isArray","validateMSMPoints","field","s","validateMSMScalars","plength","slength","bitLen","buckets","sum","floor","j","scalar","resI","sumI","createField","order","validateField","_createCurveFields","type","CURVE","curveOpts","Fn","params","validateSigVerOpts","lowS","prehash","DER","Err","_tlv","encode","tag","data","E","dataLen","lenLen","decode","pos","first","lengthBytes","subarray","l","_int","parseInt","toSig","int","tlv","seqBytes","seqLeftBytes","rBytes","rLeftBytes","sBytes","sLeftBytes","hexFromSig","sig","seq","_legacyHelperNormPriv","allowedPrivateKeyLengths","wrapPrivateKey","expected","includes","padded","error","weierstrassN","h","cofactor","CURVE_ORDER","allowInfinityPoint","clearCofactor","isTorsionFree","endo","beta","splitScalar","assertCompressionIsSupported","_c","point","isCompressed","y","bx","hasEvenY","concatBytes","pprefix","of","L","LC","LU","head","tail","isValidXY","y2","weierstrassEquation","sqrtError","err","x2","x3","_legacyHelperEquat","left","right","Gx","Gy","_4a3","_27b2","acoord","banZero","aprjpoint","other","Point","toAffineMemo","iz","px","py","z","ax","ay","zz","assertValidMemo","finishEndo","endoBeta","k1p","k2p","k1neg","k2neg","fromHex","assertValidity","fromPrivateKey","privateKey","normPrivateKeyToScalar","multiply","msm","precompute","isLazy","wnaf","_setWindowSize","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","b3","X3","Y3","Z3","t0","t1","t2","t3","t4","t5","subtract","fake","k1","k2","k1f","k2f","multiplyUnsafe","sc","p1","p2","mulEndoUnsafe","multiplyAndAddUnsafe","invertedZ","toRawBytes","toHex","bytesToHex","ecdsa","ecdsaOpts","randomBytes","bits2int","bits2int_modN","randomBytes_","hmac_","msgs","fnBits","isBiggerThanHalfOrder","aValidRS","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","FIELD_ORDER","rec","radj","ir","u1","u2","hasHighS","normalizeS","format","hexToBytes","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","utils","isValidPrivateKey","randomPrivateKey","fieldLen","minLen","reduced","mapHashToField","isProbPub","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","extraEntropy","ent","h1int","seedArgs","seed","k2sig","kBytes","ik","q","normS","defaultVerOpts","getPublicKey","getSharedSecret","privateA","publicB","sign","privKey","hashLen","qByteLen","hmacFn","u8n","u8of","byte","reset","reseed","gen","sl","slice","concatBytes_","pred","createHmacDrbg","drbg","verify","signature","publicKey","sg","isHex","isBytes","isObj","_sig","derError","is","_ecdsa_legacy_opts_to_new","_weierstrass_legacy_opts_to_new","weierstrass","assign","ProjectivePoint","_ecdsa_new_output_to_legacy","createCurve","curveDef","defHash","p256_CURVE","p384_CURVE","p521_CURVE","Fp256","Fp384","Fp521","p256","sha256","p384","sha384","p521","sha512","VERIFY_DEFAULT","zip215","edwards","uvRatio","modP","isEdValidXY","aextpoint","ex","ey","X","Y","et","T","Z4","aX2","X1Z2","X2Z1","Y1Z2","Y2Z1","A","B","C","D","x1y1","G","F","H","T3","T1","T2","isSmallOrder","normed","lastByte","isXOdd","isLastByteOdd","fromPrivateScalar","eddsa","eddsaOpts","adjustScalarBytes","domain","mapToCurve","cHash","ctx","phflag","modN","modN_LE","getExtendedPublicKey","prefix","hashed","getPrivateScalar","pointBytes","hashDomainToScalar","context","msg","verifyOpts","options","SB","montgomery","curve","powPminus2","rand","is25519","montgomeryBits","Gu","a24","minScalar","maxAdded","maxScalar","GuBytes","encodeU","scalarMult","pu","x_1","x_2","z_2","x_3","z_3","swap","k_t","cswap","AA","BB","DA","CB","dacb","da_cb","z2","montgomeryLadder","_u","decodeU","decodeScalar","scalarMultBase","dummy","ed448_CURVE","shake256_114","wrapConstructor","shake256","dkLen","_11n","_22n","_44n","_88n","_223n","ed448_pow_Pminus3div4","b2","b6","b9","b11","b22","b44","b88","b176","b220","b222","b223","u2v","u3v","u5v3","ed448","_eddsa_legacy_opts_to_new","ExtendedPoint","_eddsa_new_output_to_legacy","twistedEdwards","utf8ToBytes","x448","secp256k1_CURVE","divNearest","Fpk1","_6n","_23n","secp256k1","a1","b1","a2","POW_2_128","c1","c2","brainpoolP256r1","brainpoolP384r1","brainpoolP512r1","nobleCurves","Map","nistP256","nistP384","nistP521"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13]}